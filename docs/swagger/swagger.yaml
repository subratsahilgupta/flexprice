basePath: /v1
definitions:
  coupon.Coupon:
    properties:
      amount_off:
        type: number
      cadence:
        $ref: '#/definitions/types.CouponCadence'
      created_at:
        type: string
      created_by:
        type: string
      currency:
        type: string
      duration_in_periods:
        type: integer
      environment_id:
        type: string
      id:
        type: string
      max_redemptions:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      percentage_off:
        type: number
      redeem_after:
        type: string
      redeem_before:
        type: string
      rules:
        additionalProperties: true
        type: object
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      total_redemptions:
        type: integer
      type:
        $ref: '#/definitions/types.CouponType'
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  coupon_association.CouponAssociation:
    properties:
      coupon:
        $ref: '#/definitions/coupon.Coupon'
      coupon_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      environment_id:
        type: string
      id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        description: Mandatory
        type: string
      subscription_line_item_id:
        description: Optional
        type: string
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  creditnote.CreditNoteLineItem:
    properties:
      amount:
        type: number
      created_at:
        type: string
      created_by:
        type: string
      credit_note_id:
        type: string
      currency:
        type: string
      display_name:
        type: string
      environment_id:
        type: string
      id:
        type: string
      invoice_line_item_id:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  customer.Customer:
    properties:
      address_city:
        description: AddressCity is the city of the customer's address
        type: string
      address_country:
        description: AddressCountry is the country of the customer's address (ISO
          3166-1 alpha-2)
        type: string
      address_line1:
        description: AddressLine1 is the first line of the customer's address
        type: string
      address_line2:
        description: AddressLine2 is the second line of the customer's address
        type: string
      address_postal_code:
        description: AddressPostalCode is the postal code of the customer's address
        type: string
      address_state:
        description: AddressState is the state of the customer's address
        type: string
      created_at:
        type: string
      created_by:
        type: string
      email:
        description: Email is the email of the customer
        type: string
      environment_id:
        description: EnvironmentID is the environment identifier for the customer
        type: string
      external_id:
        description: ExternalID is the external identifier for the customer
        type: string
      id:
        description: ID is the unique identifier for the customer
        type: string
      metadata:
        additionalProperties:
          type: string
        description: Metadata
        type: object
      name:
        description: Name is the name of the customer
        type: string
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.AddSchedulePhaseRequest:
    properties:
      phase:
        $ref: '#/definitions/dto.SubscriptionSchedulePhaseInput'
    required:
    - phase
    type: object
  dto.Address:
    properties:
      address_city:
        maxLength: 100
        type: string
      address_country:
        type: string
      address_line1:
        maxLength: 255
        type: string
      address_line2:
        maxLength: 255
        type: string
      address_postal_code:
        maxLength: 20
        type: string
      address_state:
        maxLength: 100
        type: string
    type: object
  dto.AggregatedEntitlement:
    properties:
      is_enabled:
        type: boolean
      is_soft_limit:
        type: boolean
      static_values:
        description: For static/SLA features
        items:
          type: string
        type: array
      usage_limit:
        type: integer
      usage_reset_period:
        $ref: '#/definitions/types.BillingPeriod'
    type: object
  dto.AggregatedFeature:
    properties:
      entitlement:
        $ref: '#/definitions/dto.AggregatedEntitlement'
      feature:
        $ref: '#/definitions/dto.FeatureResponse'
      sources:
        items:
          $ref: '#/definitions/dto.EntitlementSource'
        type: array
    type: object
  dto.AlertConfig:
    properties:
      threshold:
        $ref: '#/definitions/dto.Threshold'
    type: object
  dto.AuthResponse:
    properties:
      tenant_id:
        type: string
      token:
        type: string
      user_id:
        type: string
    type: object
  dto.BillingPeriodInfo:
    properties:
      end_time:
        type: string
      period:
        description: e.g., "monthly", "yearly"
        type: string
      start_time:
        type: string
    type: object
  dto.BulkIngestEventRequest:
    properties:
      events:
        items:
          $ref: '#/definitions/dto.IngestEventRequest'
        maxItems: 1000
        minItems: 1
        type: array
    required:
    - events
    type: object
  dto.CalculateROIRequest:
    properties:
      meter_id:
        description: MeterID references the meter to track usage
        type: string
      period_end:
        type: string
      period_start:
        description: Optional time range. If not provided, uses entire subscription
          period
        type: string
      price_id:
        description: PriceID references the price configuration
        type: string
      subscription_id:
        description: SubscriptionID is required to get subscription details
        type: string
    required:
    - subscription_id
    type: object
  dto.CostBreakdownItem:
    properties:
      cost:
        description: Cost is the calculated cost for this meter
        type: number
      meter_id:
        description: MeterID identifies the usage meter
        type: string
      meter_name:
        description: MeterName is the display name of the meter
        type: string
      usage:
        description: Usage is the quantity consumed
        type: number
    type: object
  dto.CostBreakdownResponse:
    properties:
      items:
        description: Items contains the breakdown by meter
        items:
          $ref: '#/definitions/dto.CostBreakdownItem'
        type: array
      total_cost:
        description: TotalCost is the sum of all meter costs
        type: number
    type: object
  dto.CostSheetResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      meter_id:
        type: string
      price_id:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      updated_at:
        type: string
    type: object
  dto.CouponApplicationResponse:
    properties:
      applied_at:
        type: string
      coupon_association_id:
        type: string
      coupon_id:
        type: string
      coupon_snapshot:
        additionalProperties: true
        type: object
      created_at:
        type: string
      created_by:
        type: string
      currency:
        type: string
      discount_percentage:
        type: number
      discount_type:
        $ref: '#/definitions/types.CouponType'
      discounted_amount:
        type: number
      environment_id:
        type: string
      final_price:
        type: number
      id:
        type: string
      invoice_id:
        type: string
      invoice_line_item_id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      original_price:
        type: number
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.CouponAssociationResponse:
    properties:
      coupon:
        $ref: '#/definitions/coupon.Coupon'
      coupon_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      environment_id:
        type: string
      id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        description: Mandatory
        type: string
      subscription_line_item_id:
        description: Optional
        type: string
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.CouponResponse:
    properties:
      amount_off:
        type: number
      cadence:
        $ref: '#/definitions/types.CouponCadence'
      created_at:
        type: string
      created_by:
        type: string
      currency:
        type: string
      duration_in_periods:
        type: integer
      environment_id:
        type: string
      id:
        type: string
      max_redemptions:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      percentage_off:
        type: number
      redeem_after:
        type: string
      redeem_before:
        type: string
      rules:
        additionalProperties: true
        type: object
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      total_redemptions:
        type: integer
      type:
        $ref: '#/definitions/types.CouponType'
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.CreateAPIKeyRequest:
    properties:
      expires_at:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      type:
        $ref: '#/definitions/types.SecretType'
    required:
    - name
    - type
    type: object
  dto.CreateAPIKeyResponse:
    properties:
      api_key:
        type: string
      secret:
        $ref: '#/definitions/dto.SecretResponse'
    type: object
  dto.CreateCostSheetRequest:
    properties:
      meter_id:
        description: MeterID references the meter to track usage
        type: string
      price_id:
        description: PriceID references the price configuration
        type: string
    required:
    - meter_id
    - price_id
    type: object
  dto.CreateCouponRequest:
    properties:
      amount_off:
        type: number
      cadence:
        allOf:
        - $ref: '#/definitions/types.CouponCadence'
        enum:
        - once
        - repeated
        - forever
      currency:
        type: string
      duration_in_periods:
        type: integer
      max_redemptions:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      percentage_off:
        type: number
      redeem_after:
        type: string
      redeem_before:
        type: string
      rules:
        additionalProperties: true
        type: object
      type:
        allOf:
        - $ref: '#/definitions/types.CouponType'
        enum:
        - fixed
        - percentage
    required:
    - cadence
    - name
    - type
    type: object
  dto.CreateCreditGrantRequest:
    properties:
      cadence:
        $ref: '#/definitions/types.CreditGrantCadence'
      credits:
        type: number
      expiration_duration:
        type: integer
      expiration_duration_unit:
        $ref: '#/definitions/types.CreditGrantExpiryDurationUnit'
      expiration_type:
        $ref: '#/definitions/types.CreditGrantExpiryType'
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      period:
        $ref: '#/definitions/types.CreditGrantPeriod'
      period_count:
        type: integer
      plan_id:
        type: string
      priority:
        type: integer
      scope:
        $ref: '#/definitions/types.CreditGrantScope'
      subscription_id:
        type: string
    required:
    - cadence
    - credits
    - name
    - scope
    type: object
  dto.CreateCreditNoteLineItemRequest:
    properties:
      amount:
        description: amount is the monetary amount to be credited for this line item
        type: number
      display_name:
        description: display_name is an optional human-readable name for this credit
          note line item
        type: string
      invoice_line_item_id:
        description: invoice_line_item_id is the unique identifier of the invoice
          line item being credited
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata contains additional custom key-value pairs for storing
          extra information about this line item
    required:
    - amount
    - invoice_line_item_id
    type: object
  dto.CreateCreditNoteRequest:
    properties:
      credit_note_number:
        description: credit_note_number is an optional human-readable identifier for
          the credit note
        type: string
      idempotency_key:
        description: idempotency_key is an optional key used to prevent duplicate
          credit note creation
        type: string
      invoice_id:
        description: invoice_id is the unique identifier of the invoice this credit
          note is applied to
        type: string
      line_items:
        description: line_items contains the individual line items that make up this
          credit note (minimum 1 required)
        items:
          $ref: '#/definitions/dto.CreateCreditNoteLineItemRequest'
        type: array
      memo:
        description: memo is an optional free-text field for additional notes about
          the credit note
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata contains additional custom key-value pairs for storing
          extra information
      process_credit_note:
        default: true
        description: process_credit_note is a flag to process the credit note after
          creation
        type: boolean
      reason:
        allOf:
        - $ref: '#/definitions/types.CreditNoteReason'
        description: reason specifies the reason for creating this credit note (duplicate,
          fraudulent, order_change, product_unsatisfactory)
    required:
    - invoice_id
    - reason
    type: object
  dto.CreateCustomerRequest:
    properties:
      address_city:
        maxLength: 100
        type: string
      address_country:
        type: string
      address_line1:
        maxLength: 255
        type: string
      address_line2:
        maxLength: 255
        type: string
      address_postal_code:
        maxLength: 20
        type: string
      address_state:
        maxLength: 100
        type: string
      email:
        type: string
      external_id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    required:
    - external_id
    type: object
  dto.CreateEntitlementRequest:
    properties:
      feature_id:
        type: string
      feature_type:
        $ref: '#/definitions/types.FeatureType'
      is_enabled:
        type: boolean
      is_soft_limit:
        type: boolean
      plan_id:
        type: string
      static_value:
        type: string
      usage_limit:
        type: integer
      usage_reset_period:
        $ref: '#/definitions/types.BillingPeriod'
    required:
    - feature_id
    - feature_type
    type: object
  dto.CreateEnvironmentRequest:
    properties:
      name:
        type: string
      type:
        type: string
    required:
    - name
    - type
    type: object
  dto.CreateFeatureRequest:
    properties:
      description:
        type: string
      lookup_key:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      meter:
        $ref: '#/definitions/dto.CreateMeterRequest'
      meter_id:
        type: string
      name:
        type: string
      type:
        $ref: '#/definitions/types.FeatureType'
      unit_plural:
        type: string
      unit_singular:
        type: string
    required:
    - name
    - type
    type: object
  dto.CreateIntegrationRequest:
    properties:
      credentials:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      provider:
        $ref: '#/definitions/types.SecretProvider'
    required:
    - credentials
    - name
    - provider
    type: object
  dto.CreateInvoiceLineItemRequest:
    properties:
      amount:
        description: amount is the monetary amount for this line item
        type: number
      display_name:
        description: display_name is the optional human-readable name for this line
          item
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata contains additional custom key-value pairs for storing
          extra information about this line item
      meter_display_name:
        description: meter_display_name is the optional human-readable name of the
          meter
        type: string
      meter_id:
        description: meter_id is the optional unique identifier of the meter used
          for usage tracking
        type: string
      period_end:
        description: period_end is the optional end date of the period this line item
          covers
        type: string
      period_start:
        description: period_start is the optional start date of the period this line
          item covers
        type: string
      plan_display_name:
        description: plan_display_name is the optional human-readable name of the
          plan
        type: string
      plan_id:
        description: plan_id is the optional unique identifier of the plan associated
          with this line item
        type: string
      price_id:
        description: price_id is the optional unique identifier of the price associated
          with this line item
        type: string
      price_type:
        description: price_type indicates the type of pricing (fixed, usage, tiered,
          etc.)
        type: string
      price_unit:
        description: price_unit is the optional 3-digit ISO code of the price unit
          associated with this line item
        type: string
      price_unit_amount:
        description: price_unit_amount is the optional amount converted to the price
          unit currency
        type: number
      quantity:
        description: quantity is the quantity of units for this line item
        type: number
    required:
    - amount
    - quantity
    type: object
  dto.CreateInvoiceRequest:
    properties:
      amount_due:
        description: amount_due is the total amount that needs to be paid for this
          invoice
        type: number
      amount_paid:
        description: amount_paid is the amount that has been paid towards this invoice
        type: number
      billing_period:
        description: billing_period is the period this invoice covers (e.g., "monthly",
          "yearly")
        type: string
      billing_reason:
        allOf:
        - $ref: '#/definitions/types.InvoiceBillingReason'
        description: billing_reason indicates why this invoice was created (subscription_cycle,
          manual, etc.)
      coupons:
        description: coupons
        items:
          type: string
        type: array
      currency:
        description: currency is the three-letter ISO currency code (e.g., USD, EUR)
          for the invoice
        type: string
      customer_id:
        description: customer_id is the unique identifier of the customer this invoice
          belongs to
        type: string
      description:
        description: description is an optional text description of the invoice
        type: string
      due_date:
        description: due_date is the date by which payment is expected
        type: string
      environment_id:
        description: environment_id is the unique identifier of the environment this
          invoice belongs to
        type: string
      idempotency_key:
        description: idempotency_key is an optional key used to prevent duplicate
          invoice creation
        type: string
      invoice_number:
        description: invoice_number is an optional human-readable identifier for the
          invoice
        type: string
      invoice_pdf_url:
        description: invoice_pdf_url is the URL where customers can download the PDF
          version of this invoice
        type: string
      invoice_status:
        allOf:
        - $ref: '#/definitions/types.InvoiceStatus'
        description: invoice_status represents the current status of the invoice (draft,
          finalized, etc.)
      invoice_type:
        allOf:
        - $ref: '#/definitions/types.InvoiceType'
        description: invoice_type indicates the type of invoice (subscription, one_time,
          etc.)
      line_items:
        description: line_items contains the individual items that make up this invoice
        items:
          $ref: '#/definitions/dto.CreateInvoiceLineItemRequest'
        type: array
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata contains additional custom key-value pairs for storing
          extra information
      payment_status:
        allOf:
        - $ref: '#/definitions/types.PaymentStatus'
        description: payment_status represents the payment status of the invoice (unpaid,
          paid, etc.)
      period_end:
        description: period_end is the end date of the billing period
        type: string
      period_start:
        description: period_start is the start date of the billing period
        type: string
      subscription_id:
        description: subscription_id is the optional unique identifier of the subscription
          associated with this invoice
        type: string
      subtotal:
        description: subtotal is the amount before taxes and discounts are applied
        type: number
      total:
        description: total is the total amount of the invoice including taxes and
          discounts
        type: number
    required:
    - amount_due
    - currency
    - customer_id
    - subtotal
    - total
    type: object
  dto.CreateMeterRequest:
    properties:
      aggregation:
        $ref: '#/definitions/meter.Aggregation'
      event_name:
        example: api_request
        type: string
      filters:
        items:
          $ref: '#/definitions/meter.Filter'
        type: array
      name:
        example: API Usage Meter
        type: string
      reset_usage:
        $ref: '#/definitions/types.ResetUsage'
    required:
    - aggregation
    - event_name
    - name
    - reset_usage
    type: object
  dto.CreatePaymentRequest:
    properties:
      amount:
        type: number
      currency:
        type: string
      destination_id:
        type: string
      destination_type:
        $ref: '#/definitions/types.PaymentDestinationType'
      idempotency_key:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      payment_method_id:
        type: string
      payment_method_type:
        $ref: '#/definitions/types.PaymentMethodType'
      process_payment:
        default: true
        type: boolean
    required:
    - amount
    - currency
    - destination_id
    - destination_type
    - payment_method_type
    type: object
  dto.CreatePlanEntitlementRequest:
    properties:
      feature_id:
        type: string
      feature_type:
        $ref: '#/definitions/types.FeatureType'
      is_enabled:
        type: boolean
      is_soft_limit:
        type: boolean
      plan_id:
        type: string
      static_value:
        type: string
      usage_limit:
        type: integer
      usage_reset_period:
        $ref: '#/definitions/types.BillingPeriod'
    required:
    - feature_id
    - feature_type
    type: object
  dto.CreatePlanPriceRequest:
    properties:
      amount:
        type: string
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        minimum: 1
        type: integer
      currency:
        type: string
      description:
        type: string
      filter_values:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_id:
        type: string
      plan_id:
        type: string
      price_unit_config:
        $ref: '#/definitions/dto.PriceUnitConfig'
      price_unit_type:
        $ref: '#/definitions/types.PriceUnitType'
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/dto.CreatePriceTier'
        type: array
      transform_quantity:
        $ref: '#/definitions/price.TransformQuantity'
      trial_period:
        type: integer
      type:
        $ref: '#/definitions/types.PriceType'
    required:
    - billing_cadence
    - billing_model
    - billing_period
    - billing_period_count
    - currency
    - invoice_cadence
    - price_unit_type
    - type
    type: object
  dto.CreatePlanRequest:
    properties:
      credit_grants:
        items:
          $ref: '#/definitions/dto.CreateCreditGrantRequest'
        type: array
      description:
        type: string
      entitlements:
        items:
          $ref: '#/definitions/dto.CreatePlanEntitlementRequest'
        type: array
      lookup_key:
        type: string
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/dto.CreatePlanPriceRequest'
        type: array
    required:
    - name
    type: object
  dto.CreatePriceRequest:
    properties:
      amount:
        type: string
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        minimum: 1
        type: integer
      currency:
        type: string
      description:
        type: string
      filter_values:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_id:
        type: string
      plan_id:
        type: string
      price_unit_config:
        $ref: '#/definitions/dto.PriceUnitConfig'
      price_unit_type:
        $ref: '#/definitions/types.PriceUnitType'
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/dto.CreatePriceTier'
        type: array
      transform_quantity:
        $ref: '#/definitions/price.TransformQuantity'
      trial_period:
        type: integer
      type:
        $ref: '#/definitions/types.PriceType'
    required:
    - billing_cadence
    - billing_model
    - billing_period
    - billing_period_count
    - currency
    - invoice_cadence
    - price_unit_type
    - type
    type: object
  dto.CreatePriceTier:
    properties:
      flat_amount:
        type: string
      unit_amount:
        type: string
      up_to:
        type: integer
    required:
    - unit_amount
    type: object
  dto.CreatePriceUnitRequest:
    properties:
      base_currency:
        type: string
      code:
        type: string
      conversion_rate:
        type: number
      name:
        type: string
      precision:
        maximum: 8
        minimum: 0
        type: integer
      symbol:
        maxLength: 10
        type: string
    required:
    - base_currency
    - code
    - conversion_rate
    - name
    - symbol
    type: object
  dto.CreateSubscriptionRequest:
    properties:
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_cycle:
        allOf:
        - $ref: '#/definitions/types.BillingCycle'
        description: |-
          BillingCycle is the cycle of the billing anchor.
          This is used to determine the billing date for the subscription (i.e set the billing anchor)
          If not set, the default value is anniversary. Possible values are anniversary and calendar.
          Anniversary billing means the billing anchor will be the start date of the subscription.
          Calendar billing means the billing anchor will be the appropriate date based on the billing period.
          For example, if the billing period is month and the start date is 2025-04-15 then in case of
          calendar billing the billing anchor will be 2025-05-01 vs 2025-04-15 for anniversary billing.
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        minimum: 1
        type: integer
      commitment_amount:
        description: CommitmentAmount is the minimum amount a customer commits to
          paying for a billing period
        type: number
      credit_grants:
        description: Credit grants to be applied when subscription is created
        items:
          $ref: '#/definitions/dto.CreateCreditGrantRequest'
        type: array
      currency:
        type: string
      customer_id:
        description: |-
          customer_id is the flexprice customer id
          and it is prioritized over external_customer_id in case both are provided.
        type: string
      end_date:
        type: string
      external_customer_id:
        description: |-
          external_customer_id is the customer id in your DB
          and must be same as what you provided as external_id while creating the customer in flexprice.
        type: string
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      overage_factor:
        description: OverageFactor is a multiplier applied to usage beyond the commitment
          amount
        type: number
      override_line_items:
        description: OverrideLineItems allows customizing specific prices for this
          subscription
        items:
          $ref: '#/definitions/dto.OverrideLineItemRequest'
        type: array
      phases:
        description: Phases represents an optional timeline of subscription phases
        items:
          $ref: '#/definitions/dto.SubscriptionSchedulePhaseInput'
        type: array
      plan_id:
        type: string
      start_date:
        type: string
      subscription_coupons:
        description: SubscriptionCoupons is a list of coupon IDs to be applied to
          the subscription
        items:
          type: string
        type: array
      trial_end:
        type: string
      trial_start:
        type: string
    required:
    - billing_cadence
    - billing_period
    - billing_period_count
    - currency
    - plan_id
    - start_date
    type: object
  dto.CreateTaskRequest:
    properties:
      entity_type:
        $ref: '#/definitions/types.EntityType'
      file_name:
        type: string
      file_type:
        $ref: '#/definitions/types.FileType'
      file_url:
        type: string
      metadata:
        additionalProperties: true
        type: object
      task_type:
        $ref: '#/definitions/types.TaskType'
    required:
    - entity_type
    - file_type
    - file_url
    - task_type
    type: object
  dto.CreateTenantRequest:
    properties:
      billing_details:
        $ref: '#/definitions/dto.TenantBillingDetails'
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateWalletRequest:
    properties:
      alert_config:
        allOf:
        - $ref: '#/definitions/dto.AlertConfig'
        description: alert_config is the alert configuration for the wallet (optional)
      alert_enabled:
        description: |-
          alert_enabled is the flag to enable alerts for the wallet
          defaults to true, can be explicitly set to false to disable alerts
        type: boolean
      auto_topup_amount:
        type: number
      auto_topup_min_balance:
        type: number
      auto_topup_trigger:
        $ref: '#/definitions/types.AutoTopupTrigger'
      config:
        $ref: '#/definitions/types.WalletConfig'
      conversion_rate:
        default: 1
        description: |-
          amount in the currency =  number of credits * conversion_rate
          ex if conversion_rate is 1, then 1 USD = 1 credit
          ex if conversion_rate is 2, then 1 USD = 0.5 credits
          ex if conversion_rate is 0.5, then 1 USD = 2 credits
        type: number
      currency:
        type: string
      customer_id:
        type: string
      description:
        type: string
      external_customer_id:
        description: external_customer_id is the customer id in the external system
        type: string
      initial_credits_expiry_date_utc:
        description: |-
          initial_credits_expiry_date_utc is the expiry date in UTC timezone (optional to set nil means no expiry)
          ex 2025-01-01 00:00:00 UTC
        type: string
      initial_credits_to_load:
        default: 0
        description: |-
          initial_credits_to_load is the number of credits to load to the wallet
          if not provided, the wallet will be created with 0 balance
          NOTE: this is not the amount in the currency, but the number of credits
        type: number
      initial_credits_to_load_expiry_date:
        description: |-
          initial_credits_to_load_expiry_date YYYYMMDD format in UTC timezone (optional to set nil means no expiry)
          for ex 20250101 means the credits will expire on 2025-01-01 00:00:00 UTC
          hence they will be available for use until 2024-12-31 23:59:59 UTC
        type: integer
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      wallet_type:
        $ref: '#/definitions/types.WalletType'
    required:
    - currency
    type: object
  dto.CreditGrantResponse:
    properties:
      cadence:
        $ref: '#/definitions/types.CreditGrantCadence'
      created_at:
        type: string
      created_by:
        type: string
      credits:
        type: number
      environment_id:
        type: string
      expiration_duration:
        type: integer
      expiration_duration_unit:
        $ref: '#/definitions/types.CreditGrantExpiryDurationUnit'
      expiration_type:
        $ref: '#/definitions/types.CreditGrantExpiryType'
      id:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      period:
        $ref: '#/definitions/types.CreditGrantPeriod'
      period_count:
        type: integer
      plan_id:
        type: string
      priority:
        type: integer
      scope:
        $ref: '#/definitions/types.CreditGrantScope'
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.CreditNoteResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      credit_note_number:
        description: credit_note_number is the unique identifier for credit notes
        type: string
      credit_note_status:
        allOf:
        - $ref: '#/definitions/types.CreditNoteStatus'
        description: credit_note_status represents the current status of the credit
          note (e.g., draft, finalized, voided)
      credit_note_type:
        allOf:
        - $ref: '#/definitions/types.CreditNoteType'
        description: credit_note_type indicates the type of credit note (refund, adjustment)
      currency:
        description: currency is the three-letter ISO currency code (e.g., USD, EUR)
          for the credit note
        type: string
      customer:
        allOf:
        - $ref: '#/definitions/customer.Customer'
        description: customer contains the customer information associated with this
          credit note
      customer_id:
        description: customer_id is the unique identifier of the customer who owns
          this credit note
        type: string
      environment_id:
        description: environment_id is the unique identifier of the environment this
          credit note belongs to
        type: string
      finalized_at:
        description: finalized_at is the timestamp when the credit note was finalized
        type: string
      id:
        description: id is the unique identifier for the credit note
        type: string
      idempotency_key:
        description: idempotency_key is an optional key used to prevent duplicate
          credit note creation
        type: string
      invoice:
        allOf:
        - $ref: '#/definitions/dto.InvoiceResponse'
        description: invoice contains the associated invoice information if requested
      invoice_id:
        description: invoice_id is the id of the invoice resource that this credit
          note is applied to
        type: string
      line_items:
        description: line_items contains all of the line items associated with this
          credit note
        items:
          $ref: '#/definitions/creditnote.CreditNoteLineItem'
        type: array
      memo:
        description: memo is an optional memo supplied on the credit note
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata contains additional custom key-value pairs for storing
          extra information
      reason:
        allOf:
        - $ref: '#/definitions/types.CreditNoteReason'
        description: reason specifies the reason for creating this credit note (duplicate,
          fraudulent, order_change, product_unsatisfactory)
      refund_status:
        allOf:
        - $ref: '#/definitions/types.PaymentStatus'
        description: refund_status represents the status of any refund associated
          with this credit note
      status:
        $ref: '#/definitions/types.Status'
      subscription:
        allOf:
        - $ref: '#/definitions/dto.SubscriptionResponse'
        description: subscription contains the associated subscription information
          if applicable
      subscription_id:
        description: subscription_id is the optional unique identifier of the subscription
          related to this credit note
        type: string
      tenant_id:
        type: string
      total_amount:
        description: total_amount is the total including creditable invoice-level
          discounts or minimums, and tax
        type: number
      updated_at:
        type: string
      updated_by:
        type: string
      voided_at:
        description: voided_at is the timestamp when the credit note was voided
        type: string
    type: object
  dto.CustomerEntitlementsResponse:
    properties:
      customer_id:
        type: string
      features:
        items:
          $ref: '#/definitions/dto.AggregatedFeature'
        type: array
    type: object
  dto.CustomerInvoiceSummary:
    properties:
      currency:
        description: currency is the three-letter ISO currency code for this summary
        type: string
      customer_id:
        description: customer_id is the unique identifier of the customer
        type: string
      overdue_invoice_count:
        description: overdue_invoice_count is the number of overdue invoices for this
          customer in this currency
        type: integer
      total_invoice_count:
        description: total_invoice_count is the total number of invoices for this
          customer in this currency
        type: integer
      total_overdue_amount:
        description: total_overdue_amount is the total amount of overdue invoices
          in this currency
        type: number
      total_revenue_amount:
        description: total_revenue_amount is the total revenue generated from this
          customer in this currency
        type: number
      total_unpaid_amount:
        description: total_unpaid_amount is the total amount of unpaid invoices in
          this currency
        type: number
      unpaid_fixed_charges:
        description: unpaid_fixed_charges is the total amount of unpaid fixed charges
          in this currency
        type: number
      unpaid_invoice_count:
        description: unpaid_invoice_count is the number of unpaid invoices for this
          customer in this currency
        type: integer
      unpaid_usage_charges:
        description: unpaid_usage_charges is the total amount of unpaid usage-based
          charges in this currency
        type: number
    type: object
  dto.CustomerMultiCurrencyInvoiceSummary:
    properties:
      customer_id:
        description: customer_id is the unique identifier of the customer
        type: string
      default_currency:
        description: default_currency is the primary currency for this customer
        type: string
      summaries:
        description: summaries contains the invoice summaries for each currency
        items:
          $ref: '#/definitions/dto.CustomerInvoiceSummary'
        type: array
    type: object
  dto.CustomerResponse:
    properties:
      address_city:
        description: AddressCity is the city of the customer's address
        type: string
      address_country:
        description: AddressCountry is the country of the customer's address (ISO
          3166-1 alpha-2)
        type: string
      address_line1:
        description: AddressLine1 is the first line of the customer's address
        type: string
      address_line2:
        description: AddressLine2 is the second line of the customer's address
        type: string
      address_postal_code:
        description: AddressPostalCode is the postal code of the customer's address
        type: string
      address_state:
        description: AddressState is the state of the customer's address
        type: string
      created_at:
        type: string
      created_by:
        type: string
      email:
        description: Email is the email of the customer
        type: string
      environment_id:
        description: EnvironmentID is the environment identifier for the customer
        type: string
      external_id:
        description: ExternalID is the external identifier for the customer
        type: string
      id:
        description: ID is the unique identifier for the customer
        type: string
      metadata:
        additionalProperties:
          type: string
        description: Metadata
        type: object
      name:
        description: Name is the name of the customer
        type: string
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.CustomerUsageSummaryResponse:
    properties:
      customer_id:
        type: string
      features:
        items:
          $ref: '#/definitions/dto.FeatureUsageSummary'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
      period:
        $ref: '#/definitions/dto.BillingPeriodInfo'
    type: object
  dto.EntitlementResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      environment_id:
        type: string
      feature:
        $ref: '#/definitions/dto.FeatureResponse'
      feature_id:
        type: string
      feature_type:
        $ref: '#/definitions/types.FeatureType'
      id:
        type: string
      is_enabled:
        type: boolean
      is_soft_limit:
        type: boolean
      plan:
        $ref: '#/definitions/dto.PlanResponse'
      plan_id:
        type: string
      static_value:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      usage_limit:
        type: integer
      usage_reset_period:
        $ref: '#/definitions/types.BillingPeriod'
    type: object
  dto.EntitlementSource:
    properties:
      entitlement_id:
        type: string
      is_enabled:
        type: boolean
      plan_id:
        type: string
      plan_name:
        type: string
      quantity:
        type: integer
      static_value:
        type: string
      subscription_id:
        type: string
      usage_limit:
        type: integer
    type: object
  dto.EnvironmentResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.Event:
    properties:
      customer_id:
        type: string
      environment_id:
        type: string
      event_name:
        type: string
      external_customer_id:
        type: string
      id:
        type: string
      properties:
        additionalProperties: true
        type: object
      source:
        type: string
      timestamp:
        type: string
    type: object
  dto.FeatureResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      environment_id:
        type: string
      id:
        type: string
      lookup_key:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      meter:
        $ref: '#/definitions/dto.MeterResponse'
      meter_id:
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      type:
        $ref: '#/definitions/types.FeatureType'
      unit_plural:
        type: string
      unit_singular:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.FeatureUsageSummary:
    properties:
      current_usage:
        type: number
      feature:
        $ref: '#/definitions/dto.FeatureResponse'
      is_enabled:
        type: boolean
      is_soft_limit:
        type: boolean
      sources:
        items:
          $ref: '#/definitions/dto.EntitlementSource'
        type: array
      total_limit:
        type: integer
      usage_percent:
        type: number
    type: object
  dto.GetEventsRequest:
    properties:
      end_time:
        description: |-
          End time of the events to be fetched in ISO 8601 format
          Defaults to now if not provided
        example: "2024-12-09T00:00:00Z"
        type: string
      event_id:
        description: Event ID is the idempotency key for the event
        type: string
      event_name:
        description: Event name / Unique identifier for the event in your system
        type: string
      external_customer_id:
        description: Customer ID in your system that was sent with the event
        type: string
      iter_first_key:
        description: First key to iterate over the events
        type: string
      iter_last_key:
        description: Last key to iterate over the events
        type: string
      offset:
        description: Offset to fetch the events and is set to 0 by default
        type: integer
      order:
        description: 'Order by condition. Allowed values (case sensitive): asc, desc
          (default: desc)'
        example: desc
        type: string
      page_size:
        description: Page size to fetch the events and is set to 50 by default
        type: integer
      property_filters:
        additionalProperties:
          items:
            type: string
          type: array
        description: Property filters to filter the events by the keys in `properties`
          field of the event
        type: object
      sort:
        description: 'Sort by the field. Allowed values (case sensitive): timestamp,
          event_name (default: timestamp)'
        example: timestamp
        type: string
      source:
        description: Source to filter the events by the source
        type: string
      start_time:
        description: |-
          Start time of the events to be fetched in ISO 8601 format
          Defaults to last 7 days from now if not provided
        example: "2024-11-09T00:00:00Z"
        type: string
    type: object
  dto.GetEventsResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/dto.Event'
        type: array
      has_more:
        type: boolean
      iter_first_key:
        type: string
      iter_last_key:
        type: string
      offset:
        type: integer
      total_count:
        type: integer
    type: object
  dto.GetPreviewInvoiceRequest:
    properties:
      period_end:
        description: period_end is the optional end date of the period to preview
        type: string
      period_start:
        description: period_start is the optional start date of the period to preview
        type: string
      subscription_id:
        description: subscription_id is the unique identifier of the subscription
          to preview invoice for
        type: string
    required:
    - subscription_id
    type: object
  dto.GetUsageAnalyticsRequest:
    properties:
      end_time:
        type: string
      external_customer_id:
        type: string
      feature_ids:
        items:
          type: string
        type: array
      group_by:
        description: 'allowed values: "source", "feature_id"'
        items:
          type: string
        type: array
      property_filters:
        additionalProperties:
          items:
            type: string
          type: array
        description: Property filters to filter the events by the keys in `properties`
          field of the event
        type: object
      sources:
        items:
          type: string
        type: array
      start_time:
        type: string
      window_size:
        $ref: '#/definitions/types.WindowSize'
    required:
    - external_customer_id
    type: object
  dto.GetUsageAnalyticsResponse:
    properties:
      currency:
        type: string
      items:
        items:
          $ref: '#/definitions/dto.UsageAnalyticItem'
        type: array
      total_cost:
        type: number
    type: object
  dto.GetUsageByMeterRequest:
    properties:
      customer_id:
        example: customer456
        type: string
      end_time:
        example: "2024-12-09T00:00:00Z"
        type: string
      external_customer_id:
        example: user_5
        type: string
      filters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      meter_id:
        example: "123"
        type: string
      start_time:
        example: "2024-11-09T00:00:00Z"
        type: string
      window_size:
        $ref: '#/definitions/types.WindowSize'
    required:
    - meter_id
    type: object
  dto.GetUsageBySubscriptionRequest:
    properties:
      end_time:
        example: "2024-03-20T00:00:00Z"
        type: string
      lifetime_usage:
        example: false
        type: boolean
      start_time:
        example: "2024-03-13T00:00:00Z"
        type: string
      subscription_id:
        example: "123"
        type: string
    required:
    - subscription_id
    type: object
  dto.GetUsageBySubscriptionResponse:
    properties:
      amount:
        type: number
      charges:
        items:
          $ref: '#/definitions/dto.SubscriptionUsageByMetersResponse'
        type: array
      commitment_amount:
        type: number
      commitment_utilized:
        description: Amount of commitment used
        type: number
      currency:
        type: string
      display_amount:
        type: string
      end_time:
        type: string
      has_overage:
        description: Whether any usage exceeded commitment
        type: boolean
      overage_amount:
        description: Amount charged at overage rate
        type: number
      overage_factor:
        type: number
      start_time:
        type: string
    type: object
  dto.GetUsageRequest:
    properties:
      aggregation_type:
        $ref: '#/definitions/types.AggregationType'
      customer_id:
        example: customer456
        type: string
      end_time:
        example: "2024-03-20T00:00:00Z"
        type: string
      event_name:
        example: api_request
        type: string
      external_customer_id:
        example: customer456
        type: string
      filters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      multiplier:
        type: number
      property_name:
        description: will be empty/ignored in case of COUNT
        example: request_size
        type: string
      start_time:
        example: "2024-03-13T00:00:00Z"
        type: string
      window_size:
        $ref: '#/definitions/types.WindowSize'
    required:
    - aggregation_type
    - event_name
    type: object
  dto.GetUsageResponse:
    properties:
      event_name:
        type: string
      results:
        items:
          $ref: '#/definitions/dto.UsageResult'
        type: array
      type:
        $ref: '#/definitions/types.AggregationType'
      value:
        type: number
    type: object
  dto.IngestEventRequest:
    properties:
      customer_id:
        example: customer456
        type: string
      event_id:
        example: event123
        type: string
      event_name:
        example: api_request
        type: string
      external_customer_id:
        example: customer456
        type: string
      properties:
        additionalProperties:
          type: string
        description: Handled separately for dynamic columns
        example:
          '"response_status"': 200}
          '{"request_size"': "100"
        type: object
      source:
        example: api
        type: string
      timestamp:
        description: Handled separately due to parsing
        example: "2024-03-20T15:04:05Z"
        type: string
    required:
    - event_name
    - external_customer_id
    type: object
  dto.InvoiceLineItemResponse:
    properties:
      amount:
        description: amount is the monetary amount for this line item
        type: number
      created_at:
        description: created_at is the timestamp when this line item was created
        type: string
      created_by:
        description: created_by is the identifier of the user who created this line
          item
        type: string
      currency:
        description: currency is the three-letter ISO currency code for this line
          item
        type: string
      customer_id:
        description: customer_id is the unique identifier of the customer associated
          with this line item
        type: string
      display_name:
        description: display_name is the optional human-readable name for this line
          item
        type: string
      id:
        description: id is the unique identifier for this line item
        type: string
      invoice_id:
        description: invoice_id is the unique identifier of the invoice this line
          item belongs to
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata contains additional custom key-value pairs for storing
          extra information about this line item
      meter_display_name:
        description: meter_display_name is the optional human-readable name of the
          meter
        type: string
      meter_id:
        description: meter_id is the optional unique identifier of the meter used
          for usage tracking
        type: string
      period_end:
        description: period_end is the optional end date of the period this line item
          covers
        type: string
      period_start:
        description: period_start is the optional start date of the period this line
          item covers
        type: string
      plan_display_name:
        description: plan_display_name is the optional human-readable name of the
          plan
        type: string
      plan_id:
        description: plan_id is the optional unique identifier of the plan associated
          with this line item
        type: string
      price_id:
        description: price_id is the optional unique identifier of the price associated
          with this line item
        type: string
      price_type:
        description: price_type indicates the type of pricing (fixed, usage, tiered,
          etc.)
        type: string
      price_unit:
        description: price_unit is the optional 3-digit ISO code of the price unit
          associated with this line item
        type: string
      price_unit_amount:
        description: price_unit_amount is the optional amount converted to the price
          unit currency
        type: number
      price_unit_id:
        description: price_unit_id is the optional unique identifier of the price
          unit associated with this line item
        type: string
      quantity:
        description: quantity is the quantity of units for this line item
        type: number
      status:
        description: status represents the current status of this line item
        type: string
      subscription_id:
        description: subscription_id is the optional unique identifier of the subscription
          associated with this line item
        type: string
      tenant_id:
        description: tenant_id is the unique identifier of the tenant this line item
          belongs to
        type: string
      updated_at:
        description: updated_at is the timestamp when this line item was last updated
        type: string
      updated_by:
        description: updated_by is the identifier of the user who last updated this
          line item
        type: string
    type: object
  dto.InvoiceResponse:
    properties:
      amount_due:
        description: amount_due is the total amount that needs to be paid for this
          invoice
        type: number
      amount_paid:
        description: amount_paid is the amount that has been paid towards this invoice
        type: number
      amount_remaining:
        description: amount_remaining is the amount still outstanding on this invoice
        type: number
      billing_period:
        description: billing_period is the period this invoice covers (e.g., "monthly",
          "yearly")
        type: string
      billing_reason:
        description: billing_reason indicates why this invoice was created (subscription_cycle,
          manual, etc.)
        type: string
      billing_sequence:
        description: billing_sequence is the optional sequence number for billing
          cycles
        type: integer
      coupon_applications:
        description: coupon_applications contains the coupon applications associated
          with this invoice
        items:
          $ref: '#/definitions/dto.CouponApplicationResponse'
        type: array
      created_at:
        description: created_at is the timestamp when this invoice was created
        type: string
      created_by:
        description: created_by is the identifier of the user who created this invoice
        type: string
      currency:
        description: currency is the three-letter ISO currency code (e.g., USD, EUR)
          for the invoice
        type: string
      customer:
        allOf:
        - $ref: '#/definitions/dto.CustomerResponse'
        description: customer contains the customer information associated with this
          invoice
      customer_id:
        description: customer_id is the unique identifier of the customer this invoice
          belongs to
        type: string
      description:
        description: description is the optional text description of the invoice
        type: string
      due_date:
        description: due_date is the date by which payment is expected
        type: string
      finalized_at:
        description: finalized_at is the timestamp when this invoice was finalized
        type: string
      id:
        description: id is the unique identifier for this invoice
        type: string
      idempotency_key:
        description: idempotency_key is the optional key used to prevent duplicate
          invoice creation
        type: string
      invoice_number:
        description: invoice_number is the optional human-readable identifier for
          the invoice
        type: string
      invoice_pdf_url:
        description: invoice_pdf_url is the optional URL to the PDF version of this
          invoice
        type: string
      invoice_status:
        allOf:
        - $ref: '#/definitions/types.InvoiceStatus'
        description: invoice_status represents the current status of the invoice (draft,
          finalized, etc.)
      invoice_type:
        allOf:
        - $ref: '#/definitions/types.InvoiceType'
        description: invoice_type indicates the type of invoice (subscription, one_time,
          etc.)
      line_items:
        description: line_items contains the individual items that make up this invoice
        items:
          $ref: '#/definitions/dto.InvoiceLineItemResponse'
        type: array
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata contains additional custom key-value pairs for storing
          extra information
      paid_at:
        description: paid_at is the timestamp when this invoice was paid
        type: string
      payment_status:
        allOf:
        - $ref: '#/definitions/types.PaymentStatus'
        description: payment_status represents the payment status of the invoice (unpaid,
          paid, etc.)
      period_end:
        description: period_end is the end date of the billing period
        type: string
      period_start:
        description: period_start is the start date of the billing period
        type: string
      status:
        description: status represents the current status of this invoice
        type: string
      subscription:
        allOf:
        - $ref: '#/definitions/dto.SubscriptionResponse'
        description: subscription contains the associated subscription information
          if requested
      subscription_id:
        description: subscription_id is the optional unique identifier of the subscription
          associated with this invoice
        type: string
      subtotal:
        description: subtotal is the amount before taxes and discounts are applied
        type: number
      tenant_id:
        description: tenant_id is the unique identifier of the tenant this invoice
          belongs to
        type: string
      total:
        description: total is the total amount of the invoice including taxes and
          discounts
        type: number
      total_discount:
        description: total_discount is the total discount amount from coupon applications
        type: number
      updated_at:
        description: updated_at is the timestamp when this invoice was last updated
        type: string
      updated_by:
        description: updated_by is the identifier of the user who last updated this
          invoice
        type: string
      version:
        description: version is the version number of this invoice
        type: integer
      voided_at:
        description: voided_at is the timestamp when this invoice was voided
        type: string
    type: object
  dto.LinkedIntegrationsResponse:
    properties:
      providers:
        items:
          type: string
        type: array
    type: object
  dto.ListCostSheetsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.CostSheetResponse'
        type: array
      total:
        type: integer
    type: object
  dto.ListCouponsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.CouponResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListCreditGrantsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.CreditGrantResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListCreditNotesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.CreditNoteResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListCustomersResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.CustomerResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListEntitlementsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.EntitlementResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListEnvironmentsResponse:
    properties:
      environments:
        items:
          $ref: '#/definitions/dto.EnvironmentResponse'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.ListFeaturesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.FeatureResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListInvoicesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.InvoiceResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListPaymentsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.PaymentResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListPlansResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.PlanResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListPriceUnitsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.PriceUnitResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListPricesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.PriceResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListSecretsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.SecretResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListSubscriptionPausesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.SubscriptionPauseResponse'
        type: array
      total:
        type: integer
    type: object
  dto.ListSubscriptionsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.SubscriptionResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListTasksResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.TaskResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.ListWalletTransactionsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.WalletTransactionResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.PaginationResponse'
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - email
    - password
    type: object
  dto.MeterResponse:
    properties:
      aggregation:
        $ref: '#/definitions/meter.Aggregation'
      created_at:
        example: "2024-03-20T15:04:05Z"
        type: string
      event_name:
        example: api_request
        type: string
      filters:
        items:
          $ref: '#/definitions/meter.Filter'
        type: array
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: API Usage Meter
        type: string
      reset_usage:
        $ref: '#/definitions/types.ResetUsage'
      status:
        example: published
        type: string
      tenant_id:
        example: tenant123
        type: string
      updated_at:
        example: "2024-03-20T15:04:05Z"
        type: string
    type: object
  dto.OverrideLineItemRequest:
    properties:
      amount:
        description: Amount is the new price amount that overrides the original price
          (optional)
        type: number
      price_id:
        description: PriceID references the plan price to override
        type: string
      quantity:
        description: Quantity for this line item (optional)
        type: number
    required:
    - price_id
    type: object
  dto.PauseSubscriptionRequest:
    properties:
      dry_run:
        type: boolean
      metadata:
        additionalProperties:
          type: string
        type: object
      pause_days:
        type: integer
      pause_end:
        type: string
      pause_mode:
        $ref: '#/definitions/types.PauseMode'
      pause_start:
        type: string
      reason:
        maxLength: 255
        type: string
    required:
    - pause_mode
    type: object
  dto.PaymentAttemptResponse:
    properties:
      attempt_number:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      error_message:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      payment_id:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.PaymentResponse:
    properties:
      amount:
        type: number
      attempts:
        items:
          $ref: '#/definitions/dto.PaymentAttemptResponse'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      currency:
        type: string
      destination_id:
        type: string
      destination_type:
        $ref: '#/definitions/types.PaymentDestinationType'
      error_message:
        type: string
      failed_at:
        type: string
      id:
        type: string
      idempotency_key:
        type: string
      invoice_number:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      payment_method_id:
        type: string
      payment_method_type:
        $ref: '#/definitions/types.PaymentMethodType'
      payment_status:
        $ref: '#/definitions/types.PaymentStatus'
      refunded_at:
        type: string
      succeeded_at:
        type: string
      tenant_id:
        type: string
      track_attempts:
        type: boolean
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.PlanResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      credit_grants:
        items:
          $ref: '#/definitions/dto.CreditGrantResponse'
        type: array
      description:
        type: string
      entitlements:
        items:
          $ref: '#/definitions/dto.EntitlementResponse'
        type: array
      environment_id:
        type: string
      id:
        type: string
      lookup_key:
        type: string
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/dto.PriceResponse'
        type: array
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.PriceResponse:
    properties:
      amount:
        description: |-
          Amount stored in main currency units (e.g., dollars, not cents)
          For USD: 12.50 means $12.50
        type: number
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        description: BillingPeriodCount is the count of the billing period ex 1, 3,
          6, 12
        type: integer
      conversion_rate:
        description: |-
          ConversionRate is the rate of the price unit to the base currency
          For BTC: 1 BTC = 100000000 USD
        type: number
      created_at:
        type: string
      created_by:
        type: string
      currency:
        description: Currency 3 digit ISO currency code in lowercase ex usd, eur,
          gbp
        type: string
      description:
        description: Description of the price
        type: string
      display_amount:
        description: |-
          DisplayAmount is the formatted amount with currency symbol
          For USD: $12.50
        type: string
      display_price_unit_amount:
        description: |-
          DisplayPriceUnitAmount is the formatted amount with price unit symbol
          For BTC: 0.00000001 BTC
        type: string
      environment_id:
        description: EnvironmentID is the environment identifier for the price
        type: string
      id:
        description: ID uuid identifier for the price
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        description: LookupKey used for looking up the price in the database
        type: string
      metadata:
        $ref: '#/definitions/price.JSONBMetadata'
      meter:
        $ref: '#/definitions/dto.MeterResponse'
      meter_id:
        description: MeterID is the id of the meter for usage based pricing
        type: string
      parent_price_id:
        description: ParentPriceID references the original price (only set when scope
          is SUBSCRIPTION)
        type: string
      plan_id:
        description: PlanID is the id of the plan for plan based pricing
        type: string
      price_unit:
        description: |-
          PriceUnit 3 digit ISO currency code in lowercase ex btc
          For BTC: btc
        type: string
      price_unit_amount:
        description: |-
          PriceUnitAmount is the amount stored in price unit
          For BTC: 0.00000001 means 0.00000001 BTC
        type: number
      price_unit_id:
        description: PriceUnitID is the id of the price unit
        type: string
      price_unit_tiers:
        description: PriceUnitTiers are the tiers for the price unit
        items:
          $ref: '#/definitions/price.PriceTier'
        type: array
      price_unit_type:
        allOf:
        - $ref: '#/definitions/types.PriceUnitType'
        description: PriceUnitType is the type of the price unit- Fiat, Custom, Crypto
      scope:
        allOf:
        - $ref: '#/definitions/types.PriceScope'
        description: |-
          Price override fields
          Scope indicates if this is a plan-level or subscription-level price
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        description: SubscriptionID references the subscription (only set when scope
          is SUBSCRIPTION)
        type: string
      tenant_id:
        type: string
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/price.PriceTier'
        type: array
      transform_quantity:
        $ref: '#/definitions/price.JSONBTransformQuantity'
      trial_period:
        description: |-
          TrialPeriod is the number of days for the trial period
          Note: This is only applicable for recurring prices (BILLING_CADENCE_RECURRING)
        type: integer
      type:
        $ref: '#/definitions/types.PriceType'
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.PriceUnitConfig:
    properties:
      amount:
        type: string
      price_unit:
        type: string
      price_unit_tiers:
        items:
          $ref: '#/definitions/dto.CreatePriceTier'
        type: array
    required:
    - price_unit
    type: object
  dto.PriceUnitResponse:
    properties:
      base_currency:
        type: string
      code:
        type: string
      conversion_rate:
        type: number
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      precision:
        type: integer
      status:
        $ref: '#/definitions/types.Status'
      symbol:
        type: string
      updated_at:
        type: string
    type: object
  dto.ROIResponse:
    properties:
      cost:
        description: Cost and Revenue
        type: number
      cost_breakdown:
        description: Cost breakdown by meter
        items:
          $ref: '#/definitions/dto.CostBreakdownItem'
        type: array
      markup:
        description: Markup (Revenue - Cost / Cost)
        type: number
      markup_percentage:
        type: number
      net_margin:
        description: Net Margin (ROI)
        type: number
      net_margin_percentage:
        type: number
      net_revenue:
        description: Net Revenue (Revenue - Cost)
        type: number
      revenue:
        type: number
    type: object
  dto.ResumeSubscriptionRequest:
    properties:
      dry_run:
        type: boolean
      metadata:
        additionalProperties:
          type: string
        type: object
      resume_mode:
        $ref: '#/definitions/types.ResumeMode'
    required:
    - resume_mode
    type: object
  dto.SecretResponse:
    properties:
      created_at:
        type: string
      display_id:
        type: string
      expires_at:
        type: string
      id:
        type: string
      last_used_at:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      provider:
        $ref: '#/definitions/types.SecretProvider'
      status:
        $ref: '#/definitions/types.Status'
      type:
        $ref: '#/definitions/types.SecretType'
      updated_at:
        type: string
    type: object
  dto.SignUpRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      tenant_name:
        type: string
      token:
        type: string
    required:
    - email
    type: object
  dto.SubscriptionLineItemRequest:
    properties:
      display_name:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      price_id:
        type: string
      quantity:
        type: number
    required:
    - price_id
    - quantity
    type: object
  dto.SubscriptionLineItemResponse:
    properties:
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      created_at:
        type: string
      created_by:
        type: string
      currency:
        type: string
      customer_id:
        type: string
      display_name:
        type: string
      end_date:
        type: string
      environment_id:
        type: string
      id:
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_display_name:
        type: string
      meter_id:
        type: string
      plan_display_name:
        type: string
      plan_id:
        type: string
      price_id:
        type: string
      price_type:
        $ref: '#/definitions/types.PriceType'
      price_unit:
        type: string
      price_unit_id:
        type: string
      quantity:
        type: number
      start_date:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        type: string
      tenant_id:
        type: string
      trial_period:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.SubscriptionPauseResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      environment_id:
        description: EnvironmentID is the environment identifier for the pause
        type: string
      id:
        description: ID is the unique identifier for the subscription pause
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      original_period_end:
        description: OriginalPeriodEnd is the end of the billing period when the pause
          was created
        type: string
      original_period_start:
        description: OriginalPeriodStart is the start of the billing period when the
          pause was created
        type: string
      pause_end:
        description: PauseEnd is when the pause will end (null for indefinite)
        type: string
      pause_mode:
        $ref: '#/definitions/types.PauseMode'
      pause_start:
        description: PauseStart is when the pause actually started
        type: string
      pause_status:
        $ref: '#/definitions/types.PauseStatus'
      reason:
        description: Reason is the reason for pausing
        type: string
      resume_mode:
        $ref: '#/definitions/types.ResumeMode'
      resumed_at:
        description: ResumedAt is when the pause was actually ended (if manually resumed)
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        description: SubscriptionID is the identifier for the subscription
        type: string
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.SubscriptionResponse:
    properties:
      active_pause_id:
        description: |-
          ActivePauseID references the current active pause configuration
          This will be null if no pause is active or scheduled
        type: string
      billing_anchor:
        description: |-
          BillingAnchor is the reference point that aligns future billing cycle dates.
          It sets the day of week for week intervals, the day of month for month and year intervals,
          and the month of year for year intervals. The timestamp is in UTC format.
        type: string
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_cycle:
        allOf:
        - $ref: '#/definitions/types.BillingCycle'
        description: |-
          BillingCycle is the cycle of the billing anchor.
          This is used to determine the billing date for the subscription (i.e set the billing anchor)
          If not set, the default value is anniversary. Possible values are anniversary and calendar.
          Anniversary billing means the billing anchor will be the start date of the subscription.
          Calendar billing means the billing anchor will be the appropriate date based on the billing period.
          For example, if the billing period is month and the start date is 2025-04-15 then in case of
          calendar billing the billing anchor will be 2025-05-01 vs 2025-04-15 for anniversary billing.
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        description: BillingPeriodCount is the total number units of the billing period.
        type: integer
      cancel_at:
        description: CancelAt is the date the subscription will be canceled
        type: string
      cancel_at_period_end:
        description: CancelAtPeriodEnd is whether the subscription was canceled at
          the end of the current period
        type: boolean
      cancelled_at:
        description: CanceledAt is the date the subscription was canceled
        type: string
      commitment_amount:
        description: CommitmentAmount is the minimum amount a customer commits to
          paying for a billing period
        type: number
      coupon_associations:
        description: CouponAssociations are the coupon associations for this subscription
        items:
          $ref: '#/definitions/dto.CouponAssociationResponse'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      currency:
        description: Currency is the currency of the subscription in lowercase 3 digit
          ISO codes
        type: string
      current_period_end:
        description: |-
          CurrentPeriodEnd is the end of the current period that the subscription has been invoiced for.
          At the end of this period, a new invoice will be created.
        type: string
      current_period_start:
        description: |-
          CurrentPeriodStart is the end of the current period that the subscription has been invoiced for.
          At the end of this period, a new invoice will be created.
        type: string
      customer:
        $ref: '#/definitions/dto.CustomerResponse'
      customer_id:
        description: CustomerID is the identifier for the customer in our system
        type: string
      end_date:
        description: EndDate is the end date of the subscription
        type: string
      environment_id:
        description: EnvironmentID is the environment identifier for the subscription
        type: string
      id:
        description: ID is the unique identifier for the subscription
        type: string
      line_items:
        items:
          $ref: '#/definitions/subscription.SubscriptionLineItem'
        type: array
      lookup_key:
        description: LookupKey is the key used to lookup the subscription in our system
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      overage_factor:
        description: OverageFactor is a multiplier applied to usage beyond the commitment
          amount
        type: number
      pause_status:
        $ref: '#/definitions/types.PauseStatus'
      pauses:
        items:
          $ref: '#/definitions/subscription.SubscriptionPause'
        type: array
      plan:
        $ref: '#/definitions/dto.PlanResponse'
      plan_id:
        description: PlanID is the identifier for the plan in our system
        type: string
      schedule:
        allOf:
        - $ref: '#/definitions/dto.SubscriptionScheduleResponse'
        description: Schedule is included when the subscription has a schedule
      start_date:
        description: StartDate is the start date of the subscription
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_status:
        $ref: '#/definitions/types.SubscriptionStatus'
      tenant_id:
        type: string
      trial_end:
        description: TrialEnd is the end date of the trial period
        type: string
      trial_start:
        description: TrialStart is the start date of the trial period
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      version:
        description: Version is used for optimistic locking
        type: integer
    type: object
  dto.SubscriptionSchedulePhaseInput:
    properties:
      billing_cycle:
        $ref: '#/definitions/types.BillingCycle'
      commitment_amount:
        type: number
      credit_grants:
        items:
          $ref: '#/definitions/dto.CreateCreditGrantRequest'
        type: array
      end_date:
        type: string
      line_items:
        items:
          $ref: '#/definitions/dto.SubscriptionLineItemRequest'
        type: array
      metadata:
        additionalProperties:
          type: string
        type: object
      overage_factor:
        type: number
      start_date:
        type: string
    required:
    - start_date
    type: object
  dto.SubscriptionSchedulePhaseResponse:
    properties:
      commitment_amount:
        type: number
      created_at:
        type: string
      credit_grants:
        items:
          $ref: '#/definitions/dto.CreditGrantResponse'
        type: array
      end_date:
        type: string
      id:
        type: string
      line_items:
        items:
          $ref: '#/definitions/dto.SubscriptionLineItemResponse'
        type: array
      overage_factor:
        type: number
      phase_index:
        type: integer
      schedule_id:
        type: string
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  dto.SubscriptionScheduleResponse:
    properties:
      created_at:
        type: string
      current_phase_index:
        type: integer
      end_behavior:
        $ref: '#/definitions/types.ScheduleEndBehavior'
      id:
        type: string
      phases:
        items:
          $ref: '#/definitions/dto.SubscriptionSchedulePhaseResponse'
        type: array
      start_date:
        type: string
      status:
        $ref: '#/definitions/types.SubscriptionScheduleStatus'
      subscription_id:
        type: string
      updated_at:
        type: string
    type: object
  dto.SubscriptionUsageByMetersResponse:
    properties:
      amount:
        type: number
      currency:
        type: string
      display_amount:
        type: string
      filter_values:
        $ref: '#/definitions/price.JSONBFilters'
      is_overage:
        description: Whether this charge is at overage rate
        type: boolean
      meter_display_name:
        type: string
      meter_id:
        type: string
      overage_factor:
        description: Factor applied to this charge if in overage
        type: number
      price:
        $ref: '#/definitions/price.Price'
      quantity:
        type: number
    type: object
  dto.TaskResponse:
    properties:
      completed_at:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      entity_type:
        $ref: '#/definitions/types.EntityType'
      error_summary:
        type: string
      failed_at:
        type: string
      failed_records:
        type: integer
      file_name:
        type: string
      file_type:
        $ref: '#/definitions/types.FileType'
      file_url:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      processed_records:
        type: integer
      started_at:
        type: string
      status:
        type: string
      successful_records:
        type: integer
      task_status:
        $ref: '#/definitions/types.TaskStatus'
      task_type:
        $ref: '#/definitions/types.TaskType'
      tenant_id:
        type: string
      total_records:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.TenantBillingDetails:
    properties:
      address:
        $ref: '#/definitions/dto.Address'
      email:
        type: string
      help_email:
        type: string
      phone:
        type: string
    type: object
  dto.TenantBillingUsage:
    properties:
      subscriptions:
        items:
          $ref: '#/definitions/dto.SubscriptionResponse'
        type: array
      usage:
        $ref: '#/definitions/dto.CustomerUsageSummaryResponse'
    type: object
  dto.TenantResponse:
    properties:
      billing_details:
        $ref: '#/definitions/dto.TenantBillingDetails'
      created_at:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.Threshold:
    properties:
      type:
        description: amount
        type: string
      value:
        type: number
    type: object
  dto.TopUpWalletRequest:
    properties:
      amount:
        description: |-
          amount is the amount in the currency of the wallet to be added
          NOTE: this is not the number of credits to add, but the amount in the currency
          amount = credits_to_add * conversion_rate
          if both amount and credits_to_add are provided, amount will be ignored
          ex if the wallet has a conversion_rate of 2 then adding an amount of
          10 USD in the wallet wil add 5 credits in the wallet
        type: number
      credits_to_add:
        description: credits_to_add is the number of credits to add to the wallet
        type: number
      description:
        description: description to add any specific details about the transaction
        type: string
      expiry_date_utc:
        description: |-
          expiry_date_utc is the expiry date in UTC timezone
          ex 2025-01-01 00:00:00 UTC
        type: string
      idempotency_key:
        description: idempotency_key is a unique key for the transaction
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/types.Metadata'
        description: metadata is a map of key-value pairs to store any additional
          information about the transaction
      priority:
        description: |-
          priority is the priority of the transaction
          lower number means higher priority
          default is nil which means no priority at all
        type: integer
      transaction_reason:
        $ref: '#/definitions/types.TransactionReason'
    required:
    - idempotency_key
    - transaction_reason
    type: object
  dto.UpdateCostSheetRequest:
    properties:
      id:
        description: ID of the costsheet to update
        type: string
      status:
        description: Status updates the costsheet's status (optional)
        type: string
    required:
    - id
    type: object
  dto.UpdateCouponRequest:
    properties:
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    type: object
  dto.UpdateCreditGrantRequest:
    properties:
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
    type: object
  dto.UpdateCustomerRequest:
    properties:
      address_city:
        maxLength: 100
        type: string
      address_country:
        type: string
      address_line1:
        maxLength: 255
        type: string
      address_line2:
        maxLength: 255
        type: string
      address_postal_code:
        maxLength: 20
        type: string
      address_state:
        maxLength: 100
        type: string
      email:
        type: string
      external_id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    type: object
  dto.UpdateEntitlementRequest:
    properties:
      is_enabled:
        type: boolean
      is_soft_limit:
        type: boolean
      static_value:
        type: string
      usage_limit:
        type: integer
      usage_reset_period:
        $ref: '#/definitions/types.BillingPeriod'
    type: object
  dto.UpdateEnvironmentRequest:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  dto.UpdateFeatureRequest:
    properties:
      description:
        type: string
      filters:
        items:
          $ref: '#/definitions/meter.Filter'
        type: array
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      unit_plural:
        type: string
      unit_singular:
        type: string
    type: object
  dto.UpdateInvoiceRequest:
    properties:
      invoice_pdf_url:
        description: invoice_pdf_url is the URL where customers can download the PDF
          version of this invoice
        type: string
    type: object
  dto.UpdatePaymentRequest:
    properties:
      metadata:
        $ref: '#/definitions/types.Metadata'
      payment_status:
        type: string
    type: object
  dto.UpdatePaymentStatusRequest:
    properties:
      amount:
        description: amount is the optional payment amount to record
        type: number
      payment_status:
        allOf:
        - $ref: '#/definitions/types.PaymentStatus'
        description: payment_status is the new payment status to set for the invoice
          (paid, unpaid, etc.)
    required:
    - payment_status
    type: object
  dto.UpdatePlanCreditGrantRequest:
    properties:
      cadence:
        $ref: '#/definitions/types.CreditGrantCadence'
      credits:
        type: number
      expiration_duration:
        type: integer
      expiration_duration_unit:
        $ref: '#/definitions/types.CreditGrantExpiryDurationUnit'
      expiration_type:
        $ref: '#/definitions/types.CreditGrantExpiryType'
      id:
        description: The ID of the credit grant to update (present if the credit grant
          is being updated)
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      period:
        $ref: '#/definitions/types.CreditGrantPeriod'
      period_count:
        type: integer
      plan_id:
        type: string
      priority:
        type: integer
      scope:
        $ref: '#/definitions/types.CreditGrantScope'
      subscription_id:
        type: string
    required:
    - cadence
    - credits
    - name
    - scope
    type: object
  dto.UpdatePlanEntitlementRequest:
    properties:
      feature_id:
        type: string
      feature_type:
        $ref: '#/definitions/types.FeatureType'
      id:
        description: The ID of the entitlement to update (present if the entitlement
          is being updated)
        type: string
      is_enabled:
        type: boolean
      is_soft_limit:
        type: boolean
      plan_id:
        type: string
      static_value:
        type: string
      usage_limit:
        type: integer
      usage_reset_period:
        $ref: '#/definitions/types.BillingPeriod'
    required:
    - feature_id
    - feature_type
    type: object
  dto.UpdatePlanPriceRequest:
    properties:
      amount:
        type: string
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        minimum: 1
        type: integer
      currency:
        type: string
      description:
        type: string
      filter_values:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      id:
        description: The ID of the price to update (present if the price is being
          updated)
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_id:
        type: string
      plan_id:
        type: string
      price_unit_config:
        $ref: '#/definitions/dto.PriceUnitConfig'
      price_unit_type:
        $ref: '#/definitions/types.PriceUnitType'
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/dto.CreatePriceTier'
        type: array
      transform_quantity:
        $ref: '#/definitions/price.TransformQuantity'
      trial_period:
        type: integer
      type:
        $ref: '#/definitions/types.PriceType'
    required:
    - billing_cadence
    - billing_model
    - billing_period
    - billing_period_count
    - currency
    - invoice_cadence
    - price_unit_type
    - type
    type: object
  dto.UpdatePlanRequest:
    properties:
      credit_grants:
        items:
          $ref: '#/definitions/dto.UpdatePlanCreditGrantRequest'
        type: array
      description:
        type: string
      entitlements:
        items:
          $ref: '#/definitions/dto.UpdatePlanEntitlementRequest'
        type: array
      lookup_key:
        type: string
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/dto.UpdatePlanPriceRequest'
        type: array
    type: object
  dto.UpdatePriceRequest:
    properties:
      description:
        type: string
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
    type: object
  dto.UpdatePriceUnitRequest:
    properties:
      conversion_rate:
        type: number
      name:
        type: string
      precision:
        maximum: 8
        minimum: 0
        type: integer
      symbol:
        maxLength: 10
        type: string
    type: object
  dto.UpdateTaskStatusRequest:
    properties:
      task_status:
        $ref: '#/definitions/types.TaskStatus'
    required:
    - task_status
    type: object
  dto.UpdateTenantRequest:
    properties:
      billing_details:
        $ref: '#/definitions/dto.TenantBillingDetails'
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
    type: object
  dto.UpdateWalletRequest:
    properties:
      alert_config:
        $ref: '#/definitions/dto.AlertConfig'
      alert_enabled:
        type: boolean
      auto_topup_amount:
        type: number
      auto_topup_min_balance:
        type: number
      auto_topup_trigger:
        $ref: '#/definitions/types.AutoTopupTrigger'
      config:
        $ref: '#/definitions/types.WalletConfig'
      description:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
    type: object
  dto.UsageAnalyticItem:
    properties:
      aggregation_type:
        $ref: '#/definitions/types.AggregationType'
      currency:
        type: string
      event_count:
        description: Number of events that contributed to this aggregation
        type: integer
      event_name:
        type: string
      feature_id:
        type: string
      name:
        type: string
      points:
        items:
          $ref: '#/definitions/dto.UsageAnalyticPoint'
        type: array
      source:
        type: string
      total_cost:
        type: number
      total_usage:
        type: number
      unit:
        type: string
      unit_plural:
        type: string
    type: object
  dto.UsageAnalyticPoint:
    properties:
      cost:
        type: number
      event_count:
        description: Number of events in this time window
        type: integer
      timestamp:
        type: string
      usage:
        type: number
    type: object
  dto.UsageResult:
    properties:
      value:
        type: number
      window_size:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      tenant:
        $ref: '#/definitions/dto.TenantResponse'
    type: object
  dto.WalletBalanceResponse:
    properties:
      alert_config:
        $ref: '#/definitions/types.AlertConfig'
      alert_enabled:
        type: boolean
      alert_state:
        type: string
      auto_topup_amount:
        type: number
      auto_topup_min_balance:
        type: number
      auto_topup_trigger:
        $ref: '#/definitions/types.AutoTopupTrigger'
      balance:
        type: number
      balance_updated_at:
        type: string
      config:
        $ref: '#/definitions/types.WalletConfig'
      conversion_rate:
        type: number
      created_at:
        type: string
      created_by:
        type: string
      credit_balance:
        type: number
      currency:
        type: string
      current_period_usage:
        type: number
      customer_id:
        type: string
      description:
        type: string
      environment_id:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      real_time_balance:
        type: number
      real_time_credit_balance:
        type: number
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      unpaid_invoice_amount:
        type: number
      updated_at:
        type: string
      updated_by:
        type: string
      wallet_status:
        $ref: '#/definitions/types.WalletStatus'
      wallet_type:
        $ref: '#/definitions/types.WalletType'
    type: object
  dto.WalletResponse:
    properties:
      alert_config:
        $ref: '#/definitions/types.AlertConfig'
      alert_enabled:
        type: boolean
      alert_state:
        type: string
      auto_topup_amount:
        type: number
      auto_topup_min_balance:
        type: number
      auto_topup_trigger:
        $ref: '#/definitions/types.AutoTopupTrigger'
      balance:
        type: number
      config:
        $ref: '#/definitions/types.WalletConfig'
      conversion_rate:
        type: number
      created_at:
        type: string
      credit_balance:
        type: number
      currency:
        type: string
      customer_id:
        type: string
      description:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      name:
        type: string
      updated_at:
        type: string
      wallet_status:
        $ref: '#/definitions/types.WalletStatus'
      wallet_type:
        $ref: '#/definitions/types.WalletType'
    type: object
  dto.WalletTransactionResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      credit_amount:
        type: number
      credit_balance_after:
        type: number
      credit_balance_before:
        type: number
      credits_available:
        type: number
      description:
        type: string
      expiry_date:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      priority:
        type: integer
      reference_id:
        type: string
      reference_type:
        $ref: '#/definitions/types.WalletTxReferenceType'
      transaction_reason:
        $ref: '#/definitions/types.TransactionReason'
      transaction_status:
        $ref: '#/definitions/types.TransactionStatus'
      type:
        type: string
      updated_at:
        type: string
      wallet_id:
        type: string
    type: object
  errors.ErrorDetail:
    properties:
      details:
        additionalProperties: {}
        type: object
      internal_error:
        type: string
      message:
        type: string
    type: object
  errors.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/errors.ErrorDetail'
      success:
        type: boolean
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  github_com_flexprice_flexprice_internal_types.Value:
    properties:
      array:
        items:
          type: string
        type: array
      boolean:
        type: boolean
      date:
        type: string
      number:
        type: number
      string:
        type: string
    type: object
  meter.Aggregation:
    properties:
      field:
        description: |-
          Field is the key in $event.properties on which the aggregation is to be applied
          For ex if the aggregation type is sum for API usage, the field could be "duration_ms"
        type: string
      multiplier:
        description: |-
          Multiplier is the multiplier for the aggregation
          For ex if the aggregation type is sum_with_multiplier for API usage, the multiplier could be 1000
          to scale up by a factor of 1000
        type: number
      type:
        $ref: '#/definitions/types.AggregationType'
    type: object
  meter.Filter:
    properties:
      key:
        description: |-
          Key is the key for the filter from $event.properties
          Currently we support only first level keys in the properties and not nested keys
        type: string
      values:
        description: |-
          Values are the possible values for the filter to be considered for the meter
          For ex "model_name" could have values "o1-mini", "gpt-4o" etc
        items:
          type: string
        type: array
    type: object
  price.JSONBFilters:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  price.JSONBMetadata:
    additionalProperties:
      type: string
    type: object
  price.JSONBTransformQuantity:
    properties:
      divide_by:
        description: Divide quantity by this number
        type: integer
      round:
        description: up or down
        type: string
    type: object
  price.Price:
    properties:
      amount:
        description: |-
          Amount stored in main currency units (e.g., dollars, not cents)
          For USD: 12.50 means $12.50
        type: number
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        description: BillingPeriodCount is the count of the billing period ex 1, 3,
          6, 12
        type: integer
      conversion_rate:
        description: |-
          ConversionRate is the rate of the price unit to the base currency
          For BTC: 1 BTC = 100000000 USD
        type: number
      created_at:
        type: string
      created_by:
        type: string
      currency:
        description: Currency 3 digit ISO currency code in lowercase ex usd, eur,
          gbp
        type: string
      description:
        description: Description of the price
        type: string
      display_amount:
        description: |-
          DisplayAmount is the formatted amount with currency symbol
          For USD: $12.50
        type: string
      display_price_unit_amount:
        description: |-
          DisplayPriceUnitAmount is the formatted amount with price unit symbol
          For BTC: 0.00000001 BTC
        type: string
      environment_id:
        description: EnvironmentID is the environment identifier for the price
        type: string
      id:
        description: ID uuid identifier for the price
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        description: LookupKey used for looking up the price in the database
        type: string
      metadata:
        $ref: '#/definitions/price.JSONBMetadata'
      meter_id:
        description: MeterID is the id of the meter for usage based pricing
        type: string
      parent_price_id:
        description: ParentPriceID references the original price (only set when scope
          is SUBSCRIPTION)
        type: string
      plan_id:
        description: PlanID is the id of the plan for plan based pricing
        type: string
      price_unit:
        description: |-
          PriceUnit 3 digit ISO currency code in lowercase ex btc
          For BTC: btc
        type: string
      price_unit_amount:
        description: |-
          PriceUnitAmount is the amount stored in price unit
          For BTC: 0.00000001 means 0.00000001 BTC
        type: number
      price_unit_id:
        description: PriceUnitID is the id of the price unit
        type: string
      price_unit_tiers:
        description: PriceUnitTiers are the tiers for the price unit
        items:
          $ref: '#/definitions/price.PriceTier'
        type: array
      price_unit_type:
        allOf:
        - $ref: '#/definitions/types.PriceUnitType'
        description: PriceUnitType is the type of the price unit- Fiat, Custom, Crypto
      scope:
        allOf:
        - $ref: '#/definitions/types.PriceScope'
        description: |-
          Price override fields
          Scope indicates if this is a plan-level or subscription-level price
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        description: SubscriptionID references the subscription (only set when scope
          is SUBSCRIPTION)
        type: string
      tenant_id:
        type: string
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/price.PriceTier'
        type: array
      transform_quantity:
        $ref: '#/definitions/price.JSONBTransformQuantity'
      trial_period:
        description: |-
          TrialPeriod is the number of days for the trial period
          Note: This is only applicable for recurring prices (BILLING_CADENCE_RECURRING)
        type: integer
      type:
        $ref: '#/definitions/types.PriceType'
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  price.PriceTier:
    properties:
      flat_amount:
        description: |-
          FlatAmount is the flat amount for the given tier and it is applied
          on top of the unit amount*quantity. It solves cases in banking like 2.7% + 5c
        type: number
      unit_amount:
        description: UnitAmount is the amount per unit for the given tier
        type: number
      up_to:
        description: Upto is the quantity up to which this tier applies. It is null
          for the last tier
        type: integer
    type: object
  price.TransformQuantity:
    properties:
      divide_by:
        description: Divide quantity by this number
        type: integer
      round:
        description: up or down
        type: string
    type: object
  service.SyncPlanPricesResponse:
    properties:
      message:
        type: string
      plan_id:
        type: string
      plan_name:
        type: string
      synchronization_summary:
        properties:
          prices_added:
            type: integer
          prices_removed:
            type: integer
          prices_skipped:
            type: integer
          subscriptions_processed:
            type: integer
        type: object
    type: object
  subscription.SubscriptionLineItem:
    properties:
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      created_at:
        type: string
      created_by:
        type: string
      currency:
        type: string
      customer_id:
        type: string
      display_name:
        type: string
      end_date:
        type: string
      environment_id:
        type: string
      id:
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_display_name:
        type: string
      meter_id:
        type: string
      plan_display_name:
        type: string
      plan_id:
        type: string
      price_id:
        type: string
      price_type:
        $ref: '#/definitions/types.PriceType'
      price_unit:
        type: string
      price_unit_id:
        type: string
      quantity:
        type: number
      start_date:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        type: string
      tenant_id:
        type: string
      trial_period:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  subscription.SubscriptionPause:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      environment_id:
        description: EnvironmentID is the environment identifier for the pause
        type: string
      id:
        description: ID is the unique identifier for the subscription pause
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      original_period_end:
        description: OriginalPeriodEnd is the end of the billing period when the pause
          was created
        type: string
      original_period_start:
        description: OriginalPeriodStart is the start of the billing period when the
          pause was created
        type: string
      pause_end:
        description: PauseEnd is when the pause will end (null for indefinite)
        type: string
      pause_mode:
        $ref: '#/definitions/types.PauseMode'
      pause_start:
        description: PauseStart is when the pause actually started
        type: string
      pause_status:
        $ref: '#/definitions/types.PauseStatus'
      reason:
        description: Reason is the reason for pausing
        type: string
      resume_mode:
        $ref: '#/definitions/types.ResumeMode'
      resumed_at:
        description: ResumedAt is when the pause was actually ended (if manually resumed)
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        description: SubscriptionID is the identifier for the subscription
        type: string
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  types.AggregationType:
    enum:
    - COUNT
    - SUM
    - AVG
    - COUNT_UNIQUE
    - LATEST
    - SUM_WITH_MULTIPLIER
    type: string
    x-enum-comments:
      AggregationSumWithMultiplier: Sum with a multiplier - [sum(value) * multiplier]
    x-enum-descriptions:
    - ""
    - ""
    - ""
    - ""
    - ""
    - Sum with a multiplier - [sum(value) * multiplier]
    x-enum-varnames:
    - AggregationCount
    - AggregationSum
    - AggregationAvg
    - AggregationCountUnique
    - AggregationLatest
    - AggregationSumWithMultiplier
  types.AlertConfig:
    properties:
      threshold:
        $ref: '#/definitions/types.AlertThreshold'
    type: object
  types.AlertThreshold:
    properties:
      type:
        description: amount
        type: string
      value:
        type: number
    type: object
  types.AutoTopupTrigger:
    enum:
    - disabled
    - balance_below_threshold
    type: string
    x-enum-varnames:
    - AutoTopupTriggerDisabled
    - AutoTopupTriggerBalanceBelowThreshold
  types.BillingCadence:
    enum:
    - RECURRING
    - ONETIME
    type: string
    x-enum-varnames:
    - BILLING_CADENCE_RECURRING
    - BILLING_CADENCE_ONETIME
  types.BillingCycle:
    enum:
    - anniversary
    - calendar
    type: string
    x-enum-varnames:
    - BillingCycleAnniversary
    - BillingCycleCalendar
  types.BillingModel:
    enum:
    - FLAT_FEE
    - PACKAGE
    - TIERED
    type: string
    x-enum-varnames:
    - BILLING_MODEL_FLAT_FEE
    - BILLING_MODEL_PACKAGE
    - BILLING_MODEL_TIERED
  types.BillingPeriod:
    enum:
    - MONTHLY
    - ANNUAL
    - WEEKLY
    - DAILY
    - QUARTERLY
    - HALF_YEARLY
    type: string
    x-enum-varnames:
    - BILLING_PERIOD_MONTHLY
    - BILLING_PERIOD_ANNUAL
    - BILLING_PERIOD_WEEKLY
    - BILLING_PERIOD_DAILY
    - BILLING_PERIOD_QUARTER
    - BILLING_PERIOD_HALF_YEAR
  types.BillingTier:
    enum:
    - VOLUME
    - SLAB
    type: string
    x-enum-varnames:
    - BILLING_TIER_VOLUME
    - BILLING_TIER_SLAB
  types.CouponCadence:
    enum:
    - once
    - repeated
    - forever
    type: string
    x-enum-varnames:
    - CouponCadenceOnce
    - CouponCadenceRepeated
    - CouponCadenceForever
  types.CouponType:
    enum:
    - fixed
    - percentage
    type: string
    x-enum-varnames:
    - CouponTypeFixed
    - CouponTypePercentage
  types.CreditGrantCadence:
    enum:
    - ONETIME
    - RECURRING
    type: string
    x-enum-varnames:
    - CreditGrantCadenceOneTime
    - CreditGrantCadenceRecurring
  types.CreditGrantExpiryDurationUnit:
    enum:
    - DAY
    - WEEK
    - MONTH
    - YEAR
    type: string
    x-enum-varnames:
    - CreditGrantExpiryDurationUnitDays
    - CreditGrantExpiryDurationUnitWeeks
    - CreditGrantExpiryDurationUnitMonths
    - CreditGrantExpiryDurationUnitYears
  types.CreditGrantExpiryType:
    enum:
    - NEVER
    - DURATION
    - BILLING_CYCLE
    type: string
    x-enum-varnames:
    - CreditGrantExpiryTypeNever
    - CreditGrantExpiryTypeDuration
    - CreditGrantExpiryTypeBillingCycle
  types.CreditGrantPeriod:
    enum:
    - DAILY
    - WEEKLY
    - MONTHLY
    - ANNUAL
    - QUARTERLY
    - HALF_YEARLY
    type: string
    x-enum-varnames:
    - CREDIT_GRANT_PERIOD_DAILY
    - CREDIT_GRANT_PERIOD_WEEKLY
    - CREDIT_GRANT_PERIOD_MONTHLY
    - CREDIT_GRANT_PERIOD_ANNUAL
    - CREDIT_GRANT_PERIOD_QUARTER
    - CREDIT_GRANT_PERIOD_HALF_YEARLY
  types.CreditGrantScope:
    enum:
    - PLAN
    - SUBSCRIPTION
    type: string
    x-enum-varnames:
    - CreditGrantScopePlan
    - CreditGrantScopeSubscription
  types.CreditNoteReason:
    enum:
    - DUPLICATE
    - FRAUDULENT
    - ORDER_CHANGE
    - UNSATISFACTORY
    - SERVICE_ISSUE
    - BILLING_ERROR
    - SUBSCRIPTION_CANCELLATION
    type: string
    x-enum-varnames:
    - CreditNoteReasonDuplicate
    - CreditNoteReasonFraudulent
    - CreditNoteReasonOrderChange
    - CreditNoteReasonUnsatisfactory
    - CreditNoteReasonService
    - CreditNoteReasonBillingError
    - CreditNoteReasonSubscriptionCancellation
  types.CreditNoteStatus:
    enum:
    - DRAFT
    - FINALIZED
    - VOIDED
    type: string
    x-enum-varnames:
    - CreditNoteStatusDraft
    - CreditNoteStatusFinalized
    - CreditNoteStatusVoided
  types.CreditNoteType:
    enum:
    - ADJUSTMENT
    - REFUND
    type: string
    x-enum-varnames:
    - CreditNoteTypeAdjustment
    - CreditNoteTypeRefund
  types.CustomerFilter:
    properties:
      customer_ids:
        items:
          type: string
        type: array
      email:
        type: string
      end_time:
        type: string
      expand:
        type: string
      external_id:
        type: string
      external_ids:
        items:
          type: string
        type: array
      filters:
        items:
          $ref: '#/definitions/types.FilterCondition'
        type: array
      limit:
        maximum: 1000
        minimum: 1
        type: integer
      offset:
        minimum: 0
        type: integer
      order:
        enum:
        - asc
        - desc
        type: string
      sort:
        items:
          $ref: '#/definitions/types.SortCondition'
        type: array
      start_time:
        type: string
      status:
        $ref: '#/definitions/types.Status'
    type: object
  types.DataType:
    enum:
    - string
    - number
    - date
    - array
    type: string
    x-enum-varnames:
    - DataTypeString
    - DataTypeNumber
    - DataTypeDate
    - DataTypeArray
  types.EntitlementFilter:
    properties:
      end_time:
        type: string
      expand:
        type: string
      feature_ids:
        items:
          type: string
        type: array
      feature_type:
        $ref: '#/definitions/types.FeatureType'
      filters:
        description: Specific filters for entitlements
        items:
          $ref: '#/definitions/types.FilterCondition'
        type: array
      is_enabled:
        type: boolean
      limit:
        maximum: 1000
        minimum: 1
        type: integer
      offset:
        minimum: 0
        type: integer
      order:
        enum:
        - asc
        - desc
        type: string
      plan_ids:
        items:
          type: string
        type: array
      sort:
        items:
          $ref: '#/definitions/types.SortCondition'
        type: array
      start_time:
        type: string
      status:
        $ref: '#/definitions/types.Status'
    type: object
  types.EntityType:
    enum:
    - EVENTS
    - PRICES
    - CUSTOMERS
    type: string
    x-enum-varnames:
    - EntityTypeEvents
    - EntityTypePrices
    - EntityTypeCustomers
  types.FeatureFilter:
    properties:
      end_time:
        type: string
      expand:
        type: string
      feature_ids:
        description: Feature specific filters
        items:
          type: string
        type: array
      filters:
        description: filters allows complex filtering based on multiple fields
        items:
          $ref: '#/definitions/types.FilterCondition'
        type: array
      limit:
        maximum: 1000
        minimum: 1
        type: integer
      lookup_key:
        type: string
      meter_ids:
        items:
          type: string
        type: array
      name_contains:
        type: string
      offset:
        minimum: 0
        type: integer
      order:
        enum:
        - asc
        - desc
        type: string
      sort:
        items:
          $ref: '#/definitions/types.SortCondition'
        type: array
      start_time:
        type: string
      status:
        $ref: '#/definitions/types.Status'
    type: object
  types.FeatureType:
    enum:
    - metered
    - boolean
    - static
    type: string
    x-enum-varnames:
    - FeatureTypeMetered
    - FeatureTypeBoolean
    - FeatureTypeStatic
  types.FileType:
    enum:
    - CSV
    - JSON
    type: string
    x-enum-varnames:
    - FileTypeCSV
    - FileTypeJSON
  types.FilterCondition:
    properties:
      data_type:
        $ref: '#/definitions/types.DataType'
      field:
        type: string
      operator:
        $ref: '#/definitions/types.FilterOperatorType'
      value:
        $ref: '#/definitions/github_com_flexprice_flexprice_internal_types.Value'
    type: object
  types.FilterOperatorType:
    enum:
    - eq
    - contains
    - gt
    - lt
    - in
    - not_in
    - before
    - after
    type: string
    x-enum-varnames:
    - EQUAL
    - CONTAINS
    - GREATER_THAN
    - LESS_THAN
    - IN
    - NOT_IN
    - BEFORE
    - AFTER
  types.InvoiceBillingReason:
    enum:
    - SUBSCRIPTION_CREATE
    - SUBSCRIPTION_CYCLE
    - SUBSCRIPTION_UPDATE
    - MANUAL
    type: string
    x-enum-varnames:
    - InvoiceBillingReasonSubscriptionCreate
    - InvoiceBillingReasonSubscriptionCycle
    - InvoiceBillingReasonSubscriptionUpdate
    - InvoiceBillingReasonManual
  types.InvoiceCadence:
    enum:
    - ARREAR
    - ADVANCE
    type: string
    x-enum-varnames:
    - InvoiceCadenceArrear
    - InvoiceCadenceAdvance
  types.InvoiceFilter:
    properties:
      amount_due_gt:
        description: |-
          amount_due_gt filters invoices with a total amount due greater than the specified value
          Useful for finding invoices above a certain threshold or identifying high-value invoices
        type: number
      amount_remaining_gt:
        description: |-
          amount_remaining_gt filters invoices with an outstanding balance greater than the specified value
          Useful for finding invoices that still have significant unpaid amounts
        type: number
      customer_id:
        description: |-
          customer_id filters invoices for a specific customer using FlexPrice's internal customer ID
          This is the ID returned by FlexPrice when creating or retrieving customers
        type: string
      end_time:
        type: string
      expand:
        type: string
      external_customer_id:
        description: |-
          external_customer_id filters invoices for a customer using your system's customer identifier
          This is the ID you provided when creating the customer in FlexPrice
        type: string
      filters:
        items:
          $ref: '#/definitions/types.FilterCondition'
        type: array
      invoice_ids:
        description: |-
          invoice_ids restricts results to invoices with the specified IDs
          Use this to retrieve specific invoices when you know their exact identifiers
        items:
          type: string
        type: array
      invoice_status:
        description: |-
          invoice_status filters by the current state of invoices in their lifecycle
          Multiple statuses can be specified to include invoices in any of the listed states
        items:
          $ref: '#/definitions/types.InvoiceStatus'
        type: array
      invoice_type:
        allOf:
        - $ref: '#/definitions/types.InvoiceType'
        description: |-
          invoice_type filters by the nature of the invoice (SUBSCRIPTION, ONE_OFF, or CREDIT)
          Use this to separate recurring charges from one-time fees or credit adjustments
      limit:
        maximum: 1000
        minimum: 1
        type: integer
      offset:
        minimum: 0
        type: integer
      order:
        enum:
        - asc
        - desc
        type: string
      payment_status:
        description: |-
          payment_status filters by the payment state of invoices
          Multiple statuses can be specified to include invoices with any of the listed payment states
        items:
          $ref: '#/definitions/types.PaymentStatus'
        type: array
      sort:
        items:
          $ref: '#/definitions/types.SortCondition'
        type: array
      start_time:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_id:
        description: |-
          subscription_id filters invoices generated for a specific subscription
          Only returns invoices that were created as part of the specified subscription's billing
        type: string
    type: object
  types.InvoiceStatus:
    enum:
    - DRAFT
    - FINALIZED
    - VOIDED
    type: string
    x-enum-varnames:
    - InvoiceStatusDraft
    - InvoiceStatusFinalized
    - InvoiceStatusVoided
  types.InvoiceType:
    enum:
    - SUBSCRIPTION
    - ONE_OFF
    - CREDIT
    type: string
    x-enum-varnames:
    - InvoiceTypeSubscription
    - InvoiceTypeOneOff
    - InvoiceTypeCredit
  types.Metadata:
    additionalProperties:
      type: string
    type: object
  types.PaginationResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  types.PauseMode:
    enum:
    - immediate
    - scheduled
    - period_end
    type: string
    x-enum-varnames:
    - PauseModeImmediate
    - PauseModeScheduled
    - PauseModePeriodEnd
  types.PauseStatus:
    enum:
    - none
    - active
    - scheduled
    - completed
    - cancelled
    type: string
    x-enum-varnames:
    - PauseStatusNone
    - PauseStatusActive
    - PauseStatusScheduled
    - PauseStatusCompleted
    - PauseStatusCancelled
  types.PaymentDestinationType:
    enum:
    - INVOICE
    type: string
    x-enum-varnames:
    - PaymentDestinationTypeInvoice
  types.PaymentMethodType:
    enum:
    - CARD
    - ACH
    - OFFLINE
    - CREDITS
    type: string
    x-enum-varnames:
    - PaymentMethodTypeCard
    - PaymentMethodTypeACH
    - PaymentMethodTypeOffline
    - PaymentMethodTypeCredits
  types.PaymentStatus:
    enum:
    - PENDING
    - PROCESSING
    - SUCCEEDED
    - FAILED
    - REFUNDED
    - PARTIALLY_REFUNDED
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusProcessing
    - PaymentStatusSucceeded
    - PaymentStatusFailed
    - PaymentStatusRefunded
    - PaymentStatusPartiallyRefunded
  types.PlanFilter:
    properties:
      end_time:
        type: string
      expand:
        type: string
      filters:
        description: filters allows complex filtering based on multiple fields
        items:
          $ref: '#/definitions/types.FilterCondition'
        type: array
      limit:
        maximum: 1000
        minimum: 1
        type: integer
      offset:
        minimum: 0
        type: integer
      order:
        enum:
        - asc
        - desc
        type: string
      plan_ids:
        items:
          type: string
        type: array
      sort:
        items:
          $ref: '#/definitions/types.SortCondition'
        type: array
      start_time:
        type: string
      status:
        $ref: '#/definitions/types.Status'
    type: object
  types.PriceScope:
    enum:
    - PLAN
    - SUBSCRIPTION
    type: string
    x-enum-varnames:
    - PRICE_SCOPE_PLAN
    - PRICE_SCOPE_SUBSCRIPTION
  types.PriceType:
    enum:
    - USAGE
    - FIXED
    type: string
    x-enum-varnames:
    - PRICE_TYPE_USAGE
    - PRICE_TYPE_FIXED
  types.PriceUnitType:
    enum:
    - FIAT
    - CUSTOM
    type: string
    x-enum-varnames:
    - PRICE_UNIT_TYPE_FIAT
    - PRICE_UNIT_TYPE_CUSTOM
  types.QueryFilter:
    properties:
      expand:
        type: string
      limit:
        maximum: 1000
        minimum: 1
        type: integer
      offset:
        minimum: 0
        type: integer
      order:
        enum:
        - asc
        - desc
        type: string
      sort:
        type: string
      status:
        $ref: '#/definitions/types.Status'
    type: object
  types.ResetUsage:
    enum:
    - BILLING_PERIOD
    - NEVER
    type: string
    x-enum-varnames:
    - ResetUsageBillingPeriod
    - ResetUsageNever
  types.ResumeMode:
    enum:
    - immediate
    - scheduled
    - auto
    type: string
    x-enum-varnames:
    - ResumeModeImmediate
    - ResumeModeScheduled
    - ResumeModeAuto
  types.ScheduleEndBehavior:
    enum:
    - RELEASE
    - CANCEL
    type: string
    x-enum-varnames:
    - EndBehaviorRelease
    - EndBehaviorCancel
  types.SecretProvider:
    enum:
    - flexprice
    - stripe
    - razorpay
    type: string
    x-enum-varnames:
    - SecretProviderFlexPrice
    - SecretProviderStripe
    - SecretProviderRazorpay
  types.SecretType:
    enum:
    - private_key
    - publishable_key
    - integration
    type: string
    x-enum-varnames:
    - SecretTypePrivateKey
    - SecretTypePublishableKey
    - SecretTypeIntegration
  types.SortCondition:
    properties:
      direction:
        $ref: '#/definitions/types.SortDirection'
      field:
        type: string
    type: object
  types.SortDirection:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - SortDirectionAsc
    - SortDirectionDesc
  types.Status:
    enum:
    - published
    - deleted
    - archived
    type: string
    x-enum-varnames:
    - StatusPublished
    - StatusDeleted
    - StatusArchived
  types.SubscriptionFilter:
    properties:
      active_at:
        description: ActiveAt filters subscriptions that are active at the given time
        type: string
      billing_cadence:
        description: BillingCadence filters by billing cadence
        items:
          $ref: '#/definitions/types.BillingCadence'
        type: array
      billing_period:
        description: BillingPeriod filters by billing period
        items:
          $ref: '#/definitions/types.BillingPeriod'
        type: array
      customer_id:
        description: CustomerID filters by customer ID
        type: string
      end_time:
        type: string
      expand:
        type: string
      filters:
        items:
          $ref: '#/definitions/types.FilterCondition'
        type: array
      limit:
        maximum: 1000
        minimum: 1
        type: integer
      offset:
        minimum: 0
        type: integer
      order:
        enum:
        - asc
        - desc
        type: string
      plan_id:
        description: PlanID filters by plan ID
        type: string
      sort:
        items:
          $ref: '#/definitions/types.SortCondition'
        type: array
      start_time:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_ids:
        items:
          type: string
        type: array
      subscription_status:
        description: SubscriptionStatus filters by subscription status
        items:
          $ref: '#/definitions/types.SubscriptionStatus'
        type: array
      with_line_items:
        description: WithLineItems includes line items in the response
        type: boolean
    type: object
  types.SubscriptionScheduleStatus:
    enum:
    - ACTIVE
    - RELEASED
    - CANCELED
    type: string
    x-enum-varnames:
    - ScheduleStatusActive
    - ScheduleStatusReleased
    - ScheduleStatusCanceled
  types.SubscriptionStatus:
    enum:
    - active
    - paused
    - cancelled
    - incomplete
    - incomplete_expired
    - past_due
    - trialing
    - unpaid
    type: string
    x-enum-varnames:
    - SubscriptionStatusActive
    - SubscriptionStatusPaused
    - SubscriptionStatusCancelled
    - SubscriptionStatusIncomplete
    - SubscriptionStatusIncompleteExpired
    - SubscriptionStatusPastDue
    - SubscriptionStatusTrialing
    - SubscriptionStatusUnpaid
  types.TaskStatus:
    enum:
    - PENDING
    - PROCESSING
    - COMPLETED
    - FAILED
    type: string
    x-enum-varnames:
    - TaskStatusPending
    - TaskStatusProcessing
    - TaskStatusCompleted
    - TaskStatusFailed
  types.TaskType:
    enum:
    - IMPORT
    - EXPORT
    type: string
    x-enum-varnames:
    - TaskTypeImport
    - TaskTypeExport
  types.TimeRangeFilter:
    properties:
      end_time:
        type: string
      start_time:
        type: string
    type: object
  types.TransactionReason:
    enum:
    - INVOICE_PAYMENT
    - FREE_CREDIT_GRANT
    - SUBSCRIPTION_CREDIT_GRANT
    - PURCHASED_CREDIT_INVOICED
    - PURCHASED_CREDIT_DIRECT
    - CREDIT_NOTE
    - CREDIT_EXPIRED
    - WALLET_TERMINATION
    type: string
    x-enum-varnames:
    - TransactionReasonInvoicePayment
    - TransactionReasonFreeCredit
    - TransactionReasonSubscriptionCredit
    - TransactionReasonPurchasedCreditInvoiced
    - TransactionReasonPurchasedCreditDirect
    - TransactionReasonCreditNote
    - TransactionReasonCreditExpired
    - TransactionReasonWalletTermination
  types.TransactionStatus:
    enum:
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - TransactionStatusPending
    - TransactionStatusCompleted
    - TransactionStatusFailed
  types.TransactionType:
    enum:
    - credit
    - debit
    type: string
    x-enum-varnames:
    - TransactionTypeCredit
    - TransactionTypeDebit
  types.WalletConfig:
    properties:
      allowed_price_types:
        description: |-
          AllowedPriceTypes is a list of price types that are allowed for the wallet
          nil means all price types are allowed
        items:
          $ref: '#/definitions/types.WalletConfigPriceType'
        type: array
    type: object
  types.WalletConfigPriceType:
    enum:
    - ALL
    - USAGE
    - FIXED
    type: string
    x-enum-varnames:
    - WalletConfigPriceTypeAll
    - WalletConfigPriceTypeUsage
    - WalletConfigPriceTypeFixed
  types.WalletStatus:
    enum:
    - active
    - frozen
    - closed
    type: string
    x-enum-varnames:
    - WalletStatusActive
    - WalletStatusFrozen
    - WalletStatusClosed
  types.WalletTxReferenceType:
    enum:
    - PAYMENT
    - EXTERNAL
    - REQUEST
    type: string
    x-enum-varnames:
    - WalletTxReferenceTypePayment
    - WalletTxReferenceTypeExternal
    - WalletTxReferenceTypeRequest
  types.WalletType:
    enum:
    - PROMOTIONAL
    - PRE_PAID
    type: string
    x-enum-varnames:
    - WalletTypePromotional
    - WalletTypePrePaid
  types.WindowSize:
    enum:
    - MINUTE
    - 15MIN
    - 30MIN
    - HOUR
    - 3HOUR
    - 6HOUR
    - 12HOUR
    - DAY
    - WEEK
    type: string
    x-enum-varnames:
    - WindowSizeMinute
    - WindowSize15Min
    - WindowSize30Min
    - WindowSizeHour
    - WindowSize3Hour
    - WindowSize6Hour
    - WindowSize12Hour
    - WindowSizeDay
    - WindowSizeWeek
info:
  contact: {}
  description: FlexPrice API Service
  title: FlexPrice API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Sign up a new user
      parameters:
      - description: Sign up request
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Sign up
      tags:
      - Auth
  /cost:
    get:
      consumes:
      - application/json
      description: List cost sheets with optional filtering
      parameters:
      - collectionFormat: csv
        description: CostsheetIDs allows filtering by specific costsheet IDs
        in: query
        items:
          type: string
        name: costsheetIDs
        type: array
      - description: EnvironmentID filters by specific environment ID
        in: query
        name: environmentID
        type: string
      - collectionFormat: csv
        description: MeterIDs filters by specific meter IDs
        in: query
        items:
          type: string
        name: meterIDs
        type: array
      - collectionFormat: csv
        description: PriceIDs filters by specific price IDs
        in: query
        items:
          type: string
        name: priceIDs
        type: array
      - description: Status filters by costsheet status
        enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      - description: TenantID filters by specific tenant ID
        in: query
        name: tenantID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCostSheetsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List cost sheets
      tags:
      - CostSheets
    post:
      consumes:
      - application/json
      description: Create a new cost sheet with the specified configuration
      parameters:
      - description: Cost sheet configuration
        in: body
        name: costsheet
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCostSheetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CostSheetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new cost sheet
      tags:
      - CostSheets
  /cost/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a cost sheet. If status is published/draft, it will be archived.
        If already archived, it will be deleted from database.
      parameters:
      - description: Cost Sheet ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a cost sheet
      tags:
      - CostSheets
    get:
      consumes:
      - application/json
      description: Get a cost sheet by ID
      parameters:
      - description: Cost Sheet ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CostSheetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a cost sheet by ID
      tags:
      - CostSheets
    put:
      consumes:
      - application/json
      description: Update a cost sheet with the specified configuration
      parameters:
      - description: Cost Sheet ID
        in: path
        name: id
        required: true
        type: string
      - description: Cost sheet configuration
        in: body
        name: costsheet
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCostSheetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CostSheetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a cost sheet
      tags:
      - CostSheets
  /cost/breakdown/{subscription_id}:
    get:
      consumes:
      - application/json
      description: Get cost breakdown for a time period
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      - description: Start time (RFC3339)
        in: query
        name: start_time
        type: string
      - description: End time (RFC3339)
        in: query
        name: end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CostBreakdownResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get cost breakdown
      tags:
      - CostSheets
  /cost/roi:
    post:
      consumes:
      - application/json
      description: Calculate ROI (Return on Investment) for a given cost sheet
      parameters:
      - description: ROI calculation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CalculateROIRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ROIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Calculate ROI for cost sheet
      tags:
      - CostSheets
  /coupons:
    get:
      consumes:
      - application/json
      description: Lists coupons with filtering
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: coupon_ids
        type: array
      - in: query
        name: expand
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCouponsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List coupons with filtering
      tags:
      - Coupons
    post:
      consumes:
      - application/json
      description: Creates a new coupon
      parameters:
      - description: Coupon request
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCouponRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CouponResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new coupon
      tags:
      - Coupons
  /coupons/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a coupon
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a coupon
      tags:
      - Coupons
    get:
      consumes:
      - application/json
      description: Retrieves a coupon by ID
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CouponResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a coupon by ID
      tags:
      - Coupons
    put:
      consumes:
      - application/json
      description: Updates an existing coupon
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: string
      - description: Coupon update request
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCouponRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CouponResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a coupon
      tags:
      - Coupons
  /creditgrants:
    get:
      consumes:
      - application/json
      description: Get credit grants with the specified filter
      parameters:
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - collectionFormat: csv
        description: Specific filters for credit grants
        in: query
        items:
          type: string
        name: plan_ids
        type: array
      - enum:
        - PLAN
        - SUBSCRIPTION
        in: query
        name: scope
        type: string
        x-enum-varnames:
        - CreditGrantScopePlan
        - CreditGrantScopeSubscription
      - in: query
        name: sort
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: subscription_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCreditGrantsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get credit grants
      tags:
      - CreditGrants
    post:
      consumes:
      - application/json
      description: Create a new credit grant with the specified configuration
      parameters:
      - description: Credit Grant configuration
        in: body
        name: credit_grant
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCreditGrantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreditGrantResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new credit grant
      tags:
      - CreditGrants
  /creditgrants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a credit grant
      parameters:
      - description: Credit Grant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a credit grant
      tags:
      - CreditGrants
    get:
      consumes:
      - application/json
      description: Get a credit grant by ID
      parameters:
      - description: Credit Grant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreditGrantResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a credit grant by ID
      tags:
      - CreditGrants
    put:
      consumes:
      - application/json
      description: Update a credit grant with the specified configuration
      parameters:
      - description: Credit Grant ID
        in: path
        name: id
        required: true
        type: string
      - description: Credit Grant configuration
        in: body
        name: credit_grant
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCreditGrantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreditGrantResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a credit grant
      tags:
      - CreditGrants
  /creditnotes:
    get:
      consumes:
      - application/json
      description: Lists credit notes with filtering
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: credit_note_ids
        type: array
      - collectionFormat: csv
        in: query
        items:
          enum:
          - DRAFT
          - FINALIZED
          - VOIDED
          type: string
        name: credit_note_status
        type: array
      - enum:
        - ADJUSTMENT
        - REFUND
        in: query
        name: credit_note_type
        type: string
        x-enum-varnames:
        - CreditNoteTypeAdjustment
        - CreditNoteTypeRefund
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        name: invoice_id
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: sort
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCreditNotesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List credit notes with filtering
      tags:
      - Credit Notes
    post:
      consumes:
      - application/json
      description: Creates a new credit note
      parameters:
      - description: Credit note request
        in: body
        name: credit_note
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCreditNoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreditNoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new credit note
      tags:
      - Credit Notes
  /creditnotes/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a credit note by ID
      parameters:
      - description: Credit note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreditNoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a credit note by ID
      tags:
      - Credit Notes
  /creditnotes/{id}/finalize:
    post:
      consumes:
      - application/json
      description: Processes a draft credit note
      parameters:
      - description: Credit note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreditNoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Process a draft credit note
      tags:
      - Credit Notes
  /creditnotes/{id}/void:
    post:
      consumes:
      - application/json
      description: Voids a credit note
      parameters:
      - description: Credit note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreditNoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Void a credit note
      tags:
      - Credit Notes
  /customers:
    get:
      consumes:
      - application/json
      description: Get customers
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: customer_ids
        type: array
      - in: query
        name: email
        type: string
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        name: external_id
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: external_ids
        type: array
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCustomersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create a customer
      parameters:
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a customer
      tags:
      - Customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a customer
      tags:
      - Customers
    get:
      consumes:
      - application/json
      description: Get a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a customer
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a customer
      tags:
      - Customers
  /customers/{id}/entitlements:
    get:
      consumes:
      - application/json
      description: Get customer entitlements
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: feature_ids
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: subscription_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerEntitlementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get customer entitlements
      tags:
      - Customers
  /customers/{id}/invoices/summary:
    get:
      consumes:
      - application/json
      description: Get a customer invoice summary
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerMultiCurrencyInvoiceSummary'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a customer invoice summary
      tags:
      - Invoices
  /customers/{id}/usage:
    get:
      consumes:
      - application/json
      description: Get customer usage summary
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: feature_ids
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: subscription_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerUsageSummaryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get customer usage summary
      tags:
      - Customers
  /customers/{id}/wallets:
    get:
      consumes:
      - application/json
      description: Get all wallets for a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.WalletResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get wallets by customer ID
      tags:
      - Wallets
  /customers/lookup/{lookup_key}:
    get:
      consumes:
      - application/json
      description: Get a customer by lookup key (external_id)
      parameters:
      - description: Customer Lookup Key (external_id)
        in: path
        name: lookup_key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a customer by lookup key
      tags:
      - Customers
  /customers/search:
    post:
      consumes:
      - application/json
      description: List customers by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/types.CustomerFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCustomersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List customers by filter
      tags:
      - Customers
  /customers/wallets:
    get:
      consumes:
      - application/json
      description: Get all wallets for a customer by lookup key or id
      parameters:
      - in: query
        name: id
        type: string
      - default: false
        in: query
        name: include_real_time_balance
        type: boolean
      - in: query
        name: lookup_key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.WalletResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Customer Wallets
      tags:
      - Wallets
  /entitlements:
    get:
      consumes:
      - application/json
      description: Get entitlements with the specified filter
      parameters:
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: feature_ids
        type: array
      - enum:
        - metered
        - boolean
        - static
        in: query
        name: feature_type
        type: string
        x-enum-varnames:
        - FeatureTypeMetered
        - FeatureTypeBoolean
        - FeatureTypeStatic
      - in: query
        name: is_enabled
        type: boolean
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: plan_ids
        type: array
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListEntitlementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get entitlements
      tags:
      - Entitlements
    post:
      consumes:
      - application/json
      description: Create a new entitlement with the specified configuration
      parameters:
      - description: Entitlement configuration
        in: body
        name: entitlement
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEntitlementRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.EntitlementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new entitlement
      tags:
      - Entitlements
  /entitlements/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an entitlement
      parameters:
      - description: Entitlement ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an entitlement
      tags:
      - Entitlements
    get:
      consumes:
      - application/json
      description: Get an entitlement by ID
      parameters:
      - description: Entitlement ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EntitlementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an entitlement by ID
      tags:
      - Entitlements
    put:
      consumes:
      - application/json
      description: Update an entitlement with the specified configuration
      parameters:
      - description: Entitlement ID
        in: path
        name: id
        required: true
        type: string
      - description: Entitlement configuration
        in: body
        name: entitlement
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEntitlementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EntitlementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an entitlement
      tags:
      - Entitlements
  /entitlements/search:
    post:
      consumes:
      - application/json
      description: List entitlements by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/types.EntitlementFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListEntitlementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List entitlements by filter
      tags:
      - Entitlements
  /environments:
    get:
      consumes:
      - application/json
      description: Get environments
      parameters:
      - in: query
        name: expand
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: order
        type: string
      - in: query
        name: sort
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListEnvironmentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get environments
      tags:
      - Environments
    post:
      consumes:
      - application/json
      description: Create an environment
      parameters:
      - description: Environment
        in: body
        name: environment
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEnvironmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.EnvironmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create an environment
      tags:
      - Environments
  /environments/{id}:
    get:
      consumes:
      - application/json
      description: Get an environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EnvironmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an environment
      tags:
      - Environments
    put:
      consumes:
      - application/json
      description: Update an environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: string
      - description: Environment
        in: body
        name: environment
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEnvironmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EnvironmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an environment
      tags:
      - Environments
  /events:
    post:
      consumes:
      - application/json
      description: Ingest a new event into the system
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.IngestEventRequest'
      produces:
      - application/json
      responses:
        "202":
          description: message:Event accepted for processing
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Ingest event
      tags:
      - Events
  /events/analytics:
    post:
      description: Retrieve comprehensive usage analytics with filtering, grouping,
        and time-series data
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageAnalyticsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUsageAnalyticsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get usage analytics
      tags:
      - Events
  /events/bulk:
    post:
      consumes:
      - application/json
      description: Ingest bulk events into the system
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.BulkIngestEventRequest'
      produces:
      - application/json
      responses:
        "202":
          description: message:Event accepted for processing
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Bulk Ingest events
      tags:
      - Events
  /events/query:
    post:
      description: Retrieve raw events with pagination and filtering
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetEventsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetEventsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List raw events
      tags:
      - Events
  /events/usage:
    post:
      description: Retrieve aggregated usage statistics for events
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUsageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get usage statistics
      tags:
      - Events
  /events/usage/meter:
    post:
      description: Retrieve aggregated usage statistics using meter configuration
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageByMeterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUsageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get usage by meter
      tags:
      - Events
  /features:
    get:
      consumes:
      - application/json
      description: List features with optional filtering
      parameters:
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - collectionFormat: csv
        description: Feature specific filters
        in: query
        items:
          type: string
        name: feature_ids
        type: array
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        name: lookup_key
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: meter_ids
        type: array
      - in: query
        name: name_contains
        type: string
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListFeaturesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List features
      tags:
      - Features
    post:
      consumes:
      - application/json
      description: Create a new feature
      parameters:
      - description: Feature to create
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFeatureRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.FeatureResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new feature
      tags:
      - Features
  /features/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a feature by ID
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a feature
      tags:
      - Features
    get:
      consumes:
      - application/json
      description: Get a feature by ID
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FeatureResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a feature by ID
      tags:
      - Features
    put:
      consumes:
      - application/json
      description: Update a feature by ID
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: string
      - description: Feature update data
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateFeatureRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FeatureResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a feature
      tags:
      - Features
  /features/search:
    post:
      consumes:
      - application/json
      description: List features by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/types.FeatureFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListFeaturesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List features by filter
      tags:
      - Features
  /invoices:
    get:
      consumes:
      - application/json
      description: List invoices with optional filtering
      parameters:
      - description: |-
          amount_due_gt filters invoices with a total amount due greater than the specified value
          Useful for finding invoices above a certain threshold or identifying high-value invoices
        in: query
        name: amount_due_gt
        type: number
      - description: |-
          amount_remaining_gt filters invoices with an outstanding balance greater than the specified value
          Useful for finding invoices that still have significant unpaid amounts
        in: query
        name: amount_remaining_gt
        type: number
      - description: |-
          customer_id filters invoices for a specific customer using FlexPrice's internal customer ID
          This is the ID returned by FlexPrice when creating or retrieving customers
        in: query
        name: customer_id
        type: string
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - description: |-
          external_customer_id filters invoices for a customer using your system's customer identifier
          This is the ID you provided when creating the customer in FlexPrice
        in: query
        name: external_customer_id
        type: string
      - collectionFormat: csv
        description: |-
          invoice_ids restricts results to invoices with the specified IDs
          Use this to retrieve specific invoices when you know their exact identifiers
        in: query
        items:
          type: string
        name: invoice_ids
        type: array
      - collectionFormat: csv
        description: |-
          invoice_status filters by the current state of invoices in their lifecycle
          Multiple statuses can be specified to include invoices in any of the listed states
        in: query
        items:
          enum:
          - DRAFT
          - FINALIZED
          - VOIDED
          type: string
        name: invoice_status
        type: array
      - description: |-
          invoice_type filters by the nature of the invoice (SUBSCRIPTION, ONE_OFF, or CREDIT)
          Use this to separate recurring charges from one-time fees or credit adjustments
        enum:
        - SUBSCRIPTION
        - ONE_OFF
        - CREDIT
        in: query
        name: invoice_type
        type: string
        x-enum-varnames:
        - InvoiceTypeSubscription
        - InvoiceTypeOneOff
        - InvoiceTypeCredit
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - collectionFormat: csv
        description: |-
          payment_status filters by the payment state of invoices
          Multiple statuses can be specified to include invoices with any of the listed payment states
        in: query
        items:
          enum:
          - PENDING
          - PROCESSING
          - SUCCEEDED
          - FAILED
          - REFUNDED
          - PARTIALLY_REFUNDED
          type: string
        name: payment_status
        type: array
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      - description: |-
          subscription_id filters invoices generated for a specific subscription
          Only returns invoices that were created as part of the specified subscription's billing
        in: query
        name: subscription_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListInvoicesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: List invoices
      tags:
      - Invoices
    post:
      consumes:
      - application/json
      description: Create a new invoice with the provided details
      parameters:
      - description: Invoice details
        in: body
        name: invoice
        required: true
        schema:
          $ref: '#/definitions/dto.CreateInvoiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new invoice
      tags:
      - Invoices
  /invoices/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about an invoice
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.InvoiceResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get an invoice by ID
      tags:
      - Invoices
    put:
      consumes:
      - application/json
      description: Update invoice details like PDF URL
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Invoice Update Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update an invoice
      tags:
      - Invoices
  /invoices/{id}/finalize:
    post:
      consumes:
      - application/json
      description: Finalize a draft invoice
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Finalize an invoice
      tags:
      - Invoices
  /invoices/{id}/payment:
    put:
      consumes:
      - application/json
      description: Update the payment status of an invoice
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment Status Update Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePaymentStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update invoice payment status
      tags:
      - Invoices
  /invoices/{id}/payment/attempt:
    post:
      consumes:
      - application/json
      description: Attempt to pay an invoice using customer's available wallets
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Attempt payment for an invoice
      tags:
      - Invoices
  /invoices/{id}/pdf:
    get:
      description: Retrieve the PDF document for a specific invoice by its ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Return presigned URL from s3 instead of PDF
        in: query
        name: url
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get PDF for an invoice
      tags:
      - Invoices
  /invoices/{id}/recalculate:
    post:
      consumes:
      - application/json
      description: Recalculate totals and line items for a draft invoice, useful when
        subscription line items or usage data has changed
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Whether to finalize the invoice after recalculation (default:
          true)'
        in: query
        name: finalize
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Recalculate invoice totals and line items
      tags:
      - Invoices
  /invoices/{id}/void:
    post:
      consumes:
      - application/json
      description: Void an invoice that hasn't been paid
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Void an invoice
      tags:
      - Invoices
  /invoices/preview:
    post:
      consumes:
      - application/json
      description: Get a preview invoice
      parameters:
      - description: Preview Invoice Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetPreviewInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a preview invoice
      tags:
      - Invoices
  /invoices/search:
    post:
      consumes:
      - application/json
      description: List invoices by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/types.InvoiceFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListInvoicesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List invoices by filter
      tags:
      - Invoices
  /payments:
    get:
      consumes:
      - application/json
      description: List payments with the specified filter
      parameters:
      - in: query
        name: currency
        type: string
      - in: query
        name: destination_id
        type: string
      - in: query
        name: destination_type
        type: string
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: payment_gateway
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: payment_ids
        type: array
      - in: query
        name: payment_method_type
        type: string
      - in: query
        name: payment_status
        type: string
      - in: query
        name: sort
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPaymentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List payments
      tags:
      - Payments
    post:
      consumes:
      - application/json
      description: Create a new payment with the specified configuration
      parameters:
      - description: Payment configuration
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new payment
      tags:
      - Payments
  /payments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a payment
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a payment
      tags:
      - Payments
    get:
      consumes:
      - application/json
      description: Get a payment by ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a payment by ID
      tags:
      - Payments
    put:
      consumes:
      - application/json
      description: Update a payment with the specified configuration
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment configuration
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a payment
      tags:
      - Payments
  /payments/{id}/process:
    post:
      consumes:
      - application/json
      description: Process a payment
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Process a payment
      tags:
      - Payments
  /plans:
    get:
      consumes:
      - application/json
      description: Get plans with optional filtering
      parameters:
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: plan_ids
        type: array
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPlansResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get plans
      tags:
      - Plans
    post:
      consumes:
      - application/json
      description: Create a new plan with the specified configuration
      parameters:
      - description: Plan configuration
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePlanRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new plan
      tags:
      - Plans
  /plans/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a plan by ID
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a plan
      tags:
      - Plans
    get:
      consumes:
      - application/json
      description: Get a plan by ID
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a plan
      tags:
      - Plans
    put:
      consumes:
      - application/json
      description: Update a plan by ID
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      - description: Plan update
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePlanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a plan
      tags:
      - Plans
  /plans/{id}/creditgrants:
    get:
      consumes:
      - application/json
      description: Get all credit grants for a plan
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCreditGrantsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get plan credit grants
      tags:
      - CreditGrants
  /plans/{id}/entitlements:
    get:
      consumes:
      - application/json
      description: Get all entitlements for a plan
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get plan entitlements
      tags:
      - Entitlements
  /plans/{id}/sync/subscriptions:
    post:
      consumes:
      - application/json
      description: Synchronize current plan prices with all existing active subscriptions
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.SyncPlanPricesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Synchronize plan prices
      tags:
      - Plans
  /plans/search:
    post:
      consumes:
      - application/json
      description: List plans by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/types.PlanFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPlansResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List plans by filter
      tags:
      - Plans
  /prices:
    get:
      consumes:
      - application/json
      description: Get prices with the specified filter
      parameters:
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: parent_price_id
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: plan_ids
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: price_ids
        type: array
      - description: Price override filtering fields
        enum:
        - PLAN
        - SUBSCRIPTION
        in: query
        name: scope
        type: string
        x-enum-varnames:
        - PRICE_SCOPE_PLAN
        - PRICE_SCOPE_SUBSCRIPTION
      - in: query
        name: sort
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      - in: query
        name: subscription_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPricesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get prices
      tags:
      - Prices
    post:
      consumes:
      - application/json
      description: Create a new price with the specified configuration. Supports both
        regular and price unit configurations.
      parameters:
      - description: Price configuration
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePriceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new price
      tags:
      - Prices
  /prices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a price
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a price
      tags:
      - Prices
    get:
      consumes:
      - application/json
      description: Get a price by ID
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a price by ID
      tags:
      - Prices
    put:
      consumes:
      - application/json
      description: Update a price with the specified configuration
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      - description: Price configuration
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a price
      tags:
      - Prices
  /prices/units:
    get:
      consumes:
      - application/json
      description: Get a paginated list of price units with optional filtering
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Limit number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Sort field
        in: query
        name: sort
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPriceUnitsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: List price units
      tags:
      - Price Units
    post:
      consumes:
      - application/json
      description: Create a new price unit with the provided details
      parameters:
      - description: Price unit details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePriceUnitRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PriceUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new price unit
      tags:
      - Price Units
  /prices/units/{id}:
    delete:
      consumes:
      - application/json
      description: Archive an existing price unit. The unit will be marked as archived
        and cannot be used in new prices.
      parameters:
      - description: Price unit ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Archive a price unit
      tags:
      - Price Units
    get:
      consumes:
      - application/json
      description: Get a price unit by ID
      parameters:
      - description: Price unit ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PriceUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a price unit by ID
      tags:
      - Price Units
    put:
      consumes:
      - application/json
      description: Update an existing price unit with the provided details. Only name,
        symbol, precision, and conversion_rate can be updated. Status changes are
        not allowed.
      parameters:
      - description: Price unit ID
        in: path
        name: id
        required: true
        type: string
      - description: Price unit details to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePriceUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PriceUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update a price unit
      tags:
      - Price Units
  /prices/units/code/{code}:
    get:
      consumes:
      - application/json
      description: Get a price unit by code
      parameters:
      - description: Price unit code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PriceUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a price unit by code
      tags:
      - Price Units
  /secrets/api/keys:
    get:
      consumes:
      - application/json
      description: Get a paginated list of API keys
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Status (published/archived)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListSecretsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: List API keys
      tags:
      - secrets
    post:
      consumes:
      - application/json
      description: Create a new API key with the specified type and permissions
      parameters:
      - description: API key creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateAPIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new API key
      tags:
      - secrets
  /secrets/api/keys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an API key by ID
      parameters:
      - description: API key ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Delete an API key
      tags:
      - secrets
  /secrets/integrations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete integration credentials
      parameters:
      - description: Integration ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Delete an integration
      tags:
      - Integrations
  /secrets/integrations/{provider}:
    get:
      consumes:
      - application/json
      description: Get details of a specific integration
      parameters:
      - description: Integration provider
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SecretResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get integration details
      tags:
      - Integrations
    post:
      consumes:
      - application/json
      description: Create or update integration credentials
      parameters:
      - description: Integration provider
        in: path
        name: provider
        required: true
        type: string
      - description: Integration creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIntegrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SecretResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create or update an integration
      tags:
      - Integrations
  /secrets/integrations/linked:
    get:
      consumes:
      - application/json
      description: Get a list of unique providers which have a valid linked integration
        secret
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LinkedIntegrationsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: List linked integrations
      tags:
      - Integrations
  /subscriptions:
    get:
      description: Get subscriptions with optional filtering
      parameters:
      - description: ActiveAt filters subscriptions that are active at the given time
        in: query
        name: active_at
        type: string
      - collectionFormat: csv
        description: BillingCadence filters by billing cadence
        in: query
        items:
          enum:
          - RECURRING
          - ONETIME
          type: string
        name: billing_cadence
        type: array
      - collectionFormat: csv
        description: BillingPeriod filters by billing period
        in: query
        items:
          enum:
          - MONTHLY
          - ANNUAL
          - WEEKLY
          - DAILY
          - QUARTERLY
          - HALF_YEARLY
          type: string
        name: billing_period
        type: array
      - description: CustomerID filters by customer ID
        in: query
        name: customer_id
        type: string
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: PlanID filters by plan ID
        in: query
        name: plan_id
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: subscription_ids
        type: array
      - collectionFormat: csv
        description: SubscriptionStatus filters by subscription status
        in: query
        items:
          enum:
          - active
          - paused
          - cancelled
          - incomplete
          - incomplete_expired
          - past_due
          - trialing
          - unpaid
          type: string
        name: subscription_status
        type: array
      - description: WithLineItems includes line items in the response
        in: query
        name: with_line_items
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListSubscriptionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List subscriptions
      tags:
      - Subscriptions
    post:
      consumes:
      - application/json
      description: Create a new subscription
      parameters:
      - description: Subscription Request
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SubscriptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create subscription
      tags:
      - Subscriptions
  /subscriptions/{id}:
    get:
      description: Get a subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubscriptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get subscription
      tags:
      - Subscriptions
  /subscriptions/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a subscription
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Cancel at period end
        in: query
        name: cancel_at_period_end
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Cancel subscription
      tags:
      - Subscriptions
  /subscriptions/{id}/pause:
    post:
      consumes:
      - application/json
      description: Pause a subscription with the specified parameters
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Pause subscription request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PauseSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubscriptionPauseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Pause a subscription
      tags:
      - Subscriptions
  /subscriptions/{id}/pauses:
    get:
      description: List all pauses for a subscription
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ListSubscriptionPausesResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: List all pauses for a subscription
      tags:
      - Subscriptions
  /subscriptions/{id}/phases:
    post:
      consumes:
      - application/json
      description: Add a new phase to a subscription schedule
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Add schedule phase request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddSchedulePhaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubscriptionScheduleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add new phase to subscription schedule
      tags:
      - Subscriptions
  /subscriptions/{id}/resume:
    post:
      consumes:
      - application/json
      description: Resume a paused subscription with the specified parameters
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Resume subscription request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ResumeSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubscriptionPauseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Resume a paused subscription
      tags:
      - Subscriptions
  /subscriptions/search:
    post:
      consumes:
      - application/json
      description: List subscriptions by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/types.SubscriptionFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListSubscriptionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List subscriptions by filter
      tags:
      - Subscriptions
  /subscriptions/usage:
    post:
      consumes:
      - application/json
      description: Get usage for a subscription
      parameters:
      - description: Usage request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageBySubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUsageBySubscriptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get usage by subscription
      tags:
      - Subscriptions
  /tasks:
    get:
      consumes:
      - application/json
      description: List tasks with optional filtering
      parameters:
      - in: query
        name: created_by
        type: string
      - in: query
        name: end_time
        type: string
      - enum:
        - EVENTS
        - PRICES
        - CUSTOMERS
        in: query
        name: entity_type
        type: string
        x-enum-varnames:
        - EntityTypeEvents
        - EntityTypePrices
        - EntityTypeCustomers
      - in: query
        name: expand
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: sort
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      - enum:
        - PENDING
        - PROCESSING
        - COMPLETED
        - FAILED
        in: query
        name: task_status
        type: string
        x-enum-varnames:
        - TaskStatusPending
        - TaskStatusProcessing
        - TaskStatusCompleted
        - TaskStatusFailed
      - enum:
        - IMPORT
        - EXPORT
        in: query
        name: task_type
        type: string
        x-enum-varnames:
        - TaskTypeImport
        - TaskTypeExport
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListTasksResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: List tasks
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      description: Create a new import/export task
      parameters:
      - description: Task details
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new task
      tags:
      - Tasks
  /tasks/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a task by ID
      tags:
      - Tasks
  /tasks/{id}/process:
    post:
      consumes:
      - application/json
      description: Start processing a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Process a task
      tags:
      - Tasks
  /tasks/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTaskStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update task status
      tags:
      - Tasks
  /tenant/billing:
    get:
      consumes:
      - application/json
      description: Get the subscription and usage details for the current tenant
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TenantBillingUsage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get billing usage for the current tenant
      tags:
      - Tenants
  /tenants:
    post:
      consumes:
      - application/json
      description: Create a new tenant
      parameters:
      - description: Create tenant request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTenantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.TenantResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new tenant
      tags:
      - Tenants
  /tenants/{id}:
    get:
      consumes:
      - application/json
      description: Get tenant by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TenantResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get tenant by ID
      tags:
      - Tenants
  /tenants/update:
    put:
      consumes:
      - application/json
      description: Update a tenant's details including name and billing information
      parameters:
      - description: Update tenant request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTenantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TenantResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a tenant
      tags:
      - Tenants
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the current user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user info
      tags:
      - Users
  /wallets:
    post:
      consumes:
      - application/json
      description: Create a new wallet for a customer
      parameters:
      - description: Create wallet request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateWalletRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new wallet
      tags:
      - Wallets
  /wallets/{id}:
    get:
      consumes:
      - application/json
      description: Get a wallet by its ID
      parameters:
      - description: Wallet ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get wallet by ID
      tags:
      - Wallets
    put:
      consumes:
      - application/json
      description: Update a wallet's details including auto top-up configuration
      parameters:
      - description: Wallet ID
        in: path
        name: id
        required: true
        type: string
      - description: Update wallet request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateWalletRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update a wallet
      tags:
      - Wallets
  /wallets/{id}/balance/real-time:
    get:
      consumes:
      - application/json
      description: Get real-time balance of a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WalletBalanceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get wallet balance
      tags:
      - Wallets
  /wallets/{id}/terminate:
    post:
      consumes:
      - application/json
      description: Terminates a wallet by closing it and debiting remaining balance
      parameters:
      - description: Wallet ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Terminate a wallet
      tags:
      - Wallets
  /wallets/{id}/top-up:
    post:
      consumes:
      - application/json
      description: Add credits to a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: id
        required: true
        type: string
      - description: Top up request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TopUpWalletRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Top up wallet
      tags:
      - Wallets
  /wallets/{id}/transactions:
    get:
      consumes:
      - application/json
      description: Get transactions for a wallet with pagination
      parameters:
      - description: Wallet ID
        in: path
        name: id
        required: true
        type: string
      - in: query
        name: credits_available_gt
        type: number
      - in: query
        name: end_time
        type: string
      - in: query
        name: expand
        type: string
      - in: query
        name: expiry_date_after
        type: string
      - in: query
        name: expiry_date_before
        type: string
      - in: query
        name: id
        type: string
      - in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: priority
        type: integer
      - in: query
        name: reference_id
        type: string
      - in: query
        name: reference_type
        type: string
      - in: query
        name: sort
        type: string
      - in: query
        name: start_time
        type: string
      - enum:
        - published
        - deleted
        - archived
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPublished
        - StatusDeleted
        - StatusArchived
      - enum:
        - INVOICE_PAYMENT
        - FREE_CREDIT_GRANT
        - SUBSCRIPTION_CREDIT_GRANT
        - PURCHASED_CREDIT_INVOICED
        - PURCHASED_CREDIT_DIRECT
        - CREDIT_NOTE
        - CREDIT_EXPIRED
        - WALLET_TERMINATION
        in: query
        name: transaction_reason
        type: string
        x-enum-varnames:
        - TransactionReasonInvoicePayment
        - TransactionReasonFreeCredit
        - TransactionReasonSubscriptionCredit
        - TransactionReasonPurchasedCreditInvoiced
        - TransactionReasonPurchasedCreditDirect
        - TransactionReasonCreditNote
        - TransactionReasonCreditExpired
        - TransactionReasonWalletTermination
      - enum:
        - pending
        - completed
        - failed
        in: query
        name: transaction_status
        type: string
        x-enum-varnames:
        - TransactionStatusPending
        - TransactionStatusCompleted
        - TransactionStatusFailed
      - enum:
        - credit
        - debit
        in: query
        name: type
        type: string
        x-enum-varnames:
        - TransactionTypeCredit
        - TransactionTypeDebit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListWalletTransactionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get wallet transactions
      tags:
      - Wallets
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: Enter your API key in the format *x-api-key &lt;api-key&gt;**
    in: header
    name: x-api-key
    type: apiKey
swagger: "2.0"
