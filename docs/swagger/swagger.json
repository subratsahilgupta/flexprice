{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "FlexPrice API Service",
        "title": "FlexPrice API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Sign up a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign up",
                "parameters": [
                    {
                        "description": "Sign up request",
                        "name": "signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cost": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List cost sheets with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CostSheets"
                ],
                "summary": "List cost sheets",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "CostsheetIDs allows filtering by specific costsheet IDs",
                        "name": "costsheetIDs",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "EnvironmentID filters by specific environment ID",
                        "name": "environmentID",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "MeterIDs filters by specific meter IDs",
                        "name": "meterIDs",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "PriceIDs filters by specific price IDs",
                        "name": "priceIDs",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "description": "Status filters by costsheet status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "TenantID filters by specific tenant ID",
                        "name": "tenantID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCostSheetsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new cost sheet with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CostSheets"
                ],
                "summary": "Create a new cost sheet",
                "parameters": [
                    {
                        "description": "Cost sheet configuration",
                        "name": "costsheet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCostSheetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CostSheetResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cost/breakdown/{subscription_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get cost breakdown for a time period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CostSheets"
                ],
                "summary": "Get cost breakdown",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CostBreakdownResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cost/roi": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculate ROI (Return on Investment) for a given cost sheet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CostSheets"
                ],
                "summary": "Calculate ROI for cost sheet",
                "parameters": [
                    {
                        "description": "ROI calculation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CalculateROIRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ROIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cost/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a cost sheet by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CostSheets"
                ],
                "summary": "Get a cost sheet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cost Sheet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CostSheetResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a cost sheet with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CostSheets"
                ],
                "summary": "Update a cost sheet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cost Sheet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cost sheet configuration",
                        "name": "costsheet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCostSheetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CostSheetResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a cost sheet. If status is published/draft, it will be archived. If already archived, it will be deleted from database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CostSheets"
                ],
                "summary": "Delete a cost sheet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cost Sheet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/coupons": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists coupons with filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupons"
                ],
                "summary": "List coupons with filtering",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "coupon_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCouponsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new coupon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupons"
                ],
                "summary": "Create a new coupon",
                "parameters": [
                    {
                        "description": "Coupon request",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCouponRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/coupons/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a coupon by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupons"
                ],
                "summary": "Get a coupon by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing coupon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupons"
                ],
                "summary": "Update a coupon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Coupon update request",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCouponRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a coupon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupons"
                ],
                "summary": "Delete a coupon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/creditgrants": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get credit grants with the specified filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditGrants"
                ],
                "summary": "Get credit grants",
                "parameters": [
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Specific filters for credit grants",
                        "name": "plan_ids",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PLAN",
                            "SUBSCRIPTION"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "CreditGrantScopePlan",
                            "CreditGrantScopeSubscription"
                        ],
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "subscription_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCreditGrantsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new credit grant with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditGrants"
                ],
                "summary": "Create a new credit grant",
                "parameters": [
                    {
                        "description": "Credit Grant configuration",
                        "name": "credit_grant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCreditGrantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreditGrantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/creditgrants/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a credit grant by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditGrants"
                ],
                "summary": "Get a credit grant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Credit Grant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CreditGrantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a credit grant with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditGrants"
                ],
                "summary": "Update a credit grant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Credit Grant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Credit Grant configuration",
                        "name": "credit_grant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCreditGrantRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CreditGrantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a credit grant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditGrants"
                ],
                "summary": "Delete a credit grant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Credit Grant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/creditnotes": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists credit notes with filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credit Notes"
                ],
                "summary": "List credit notes with filtering",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "credit_note_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "DRAFT",
                                "FINALIZED",
                                "VOIDED"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "credit_note_status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ADJUSTMENT",
                            "REFUND"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "CreditNoteTypeAdjustment",
                            "CreditNoteTypeRefund"
                        ],
                        "name": "credit_note_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "invoice_id",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCreditNotesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new credit note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credit Notes"
                ],
                "summary": "Create a new credit note",
                "parameters": [
                    {
                        "description": "Credit note request",
                        "name": "credit_note",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCreditNoteRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreditNoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/creditnotes/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a credit note by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credit Notes"
                ],
                "summary": "Get a credit note by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Credit note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CreditNoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/creditnotes/{id}/finalize": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Processes a draft credit note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credit Notes"
                ],
                "summary": "Process a draft credit note",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Credit note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CreditNoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/creditnotes/{id}/void": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Voids a credit note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credit Notes"
                ],
                "summary": "Void a credit note",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Credit note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CreditNoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get customers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get customers",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "customer_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "external_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "external_ids",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCustomersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Create a customer",
                "parameters": [
                    {
                        "description": "Customer",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/lookup/{lookup_key}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a customer by lookup key (external_id)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get a customer by lookup key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer Lookup Key (external_id)",
                        "name": "lookup_key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List customers by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "List customers by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CustomerFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCustomersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/wallets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all wallets for a customer by lookup key or id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Get Customer Wallets",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "name": "include_real_time_balance",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "lookup_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.WalletResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get a customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Update a customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Delete a customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}/entitlements": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get customer entitlements",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get customer entitlements",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "feature_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "subscription_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerEntitlementsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}/invoices/summary": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a customer invoice summary",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Get a customer invoice summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerMultiCurrencyInvoiceSummary"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}/usage": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get customer usage summary",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get customer usage summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "feature_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "subscription_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerUsageSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}/wallets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all wallets for a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Get wallets by customer ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.WalletResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/entitlements": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get entitlements with the specified filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entitlements"
                ],
                "summary": "Get entitlements",
                "parameters": [
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "feature_ids",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "metered",
                            "boolean",
                            "static"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "FeatureTypeMetered",
                            "FeatureTypeBoolean",
                            "FeatureTypeStatic"
                        ],
                        "name": "feature_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_enabled",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "plan_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListEntitlementsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new entitlement with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entitlements"
                ],
                "summary": "Create a new entitlement",
                "parameters": [
                    {
                        "description": "Entitlement configuration",
                        "name": "entitlement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateEntitlementRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.EntitlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/entitlements/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List entitlements by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entitlements"
                ],
                "summary": "List entitlements by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.EntitlementFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListEntitlementsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/entitlements/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get an entitlement by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entitlements"
                ],
                "summary": "Get an entitlement by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entitlement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EntitlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an entitlement with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entitlements"
                ],
                "summary": "Update an entitlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entitlement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Entitlement configuration",
                        "name": "entitlement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateEntitlementRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EntitlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an entitlement",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entitlements"
                ],
                "summary": "Delete an entitlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entitlement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/environments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get environments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Environments"
                ],
                "summary": "Get environments",
                "parameters": [
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListEnvironmentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an environment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Environments"
                ],
                "summary": "Create an environment",
                "parameters": [
                    {
                        "description": "Environment",
                        "name": "environment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateEnvironmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.EnvironmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/environments/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get an environment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Environments"
                ],
                "summary": "Get an environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EnvironmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an environment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Environments"
                ],
                "summary": "Update an environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Environment",
                        "name": "environment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateEnvironmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EnvironmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Ingest a new event into the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Ingest event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.IngestEventRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "message:Event accepted for processing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/analytics": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve comprehensive usage analytics with filtering, grouping, and time-series data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get usage analytics",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageAnalyticsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageAnalyticsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/bulk": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Ingest bulk events into the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Bulk Ingest events",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BulkIngestEventRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "message:Event accepted for processing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/query": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve raw events with pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "List raw events",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetEventsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve aggregated usage statistics for events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get usage statistics",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage/meter": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve aggregated usage statistics using meter configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get usage by meter",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageByMeterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/features": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List features with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Features"
                ],
                "summary": "List features",
                "parameters": [
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Feature specific filters",
                        "name": "feature_ids",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "lookup_key",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "meter_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name_contains",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListFeaturesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new feature",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Features"
                ],
                "summary": "Create a new feature",
                "parameters": [
                    {
                        "description": "Feature to create",
                        "name": "feature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateFeatureRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.FeatureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/features/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List features by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Features"
                ],
                "summary": "List features by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.FeatureFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListFeaturesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/features/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a feature by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Features"
                ],
                "summary": "Get a feature by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feature ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.FeatureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a feature by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Features"
                ],
                "summary": "Update a feature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feature ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Feature update data",
                        "name": "feature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateFeatureRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.FeatureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a feature by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Features"
                ],
                "summary": "Delete a feature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feature ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices": {
            "get": {
                "description": "List invoices with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "List invoices",
                "parameters": [
                    {
                        "type": "number",
                        "description": "amount_due_gt filters invoices with a total amount due greater than the specified value\nUseful for finding invoices above a certain threshold or identifying high-value invoices",
                        "name": "amount_due_gt",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "amount_remaining_gt filters invoices with an outstanding balance greater than the specified value\nUseful for finding invoices that still have significant unpaid amounts",
                        "name": "amount_remaining_gt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "customer_id filters invoices for a specific customer using FlexPrice's internal customer ID\nThis is the ID returned by FlexPrice when creating or retrieving customers",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "external_customer_id filters invoices for a customer using your system's customer identifier\nThis is the ID you provided when creating the customer in FlexPrice",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "invoice_ids restricts results to invoices with the specified IDs\nUse this to retrieve specific invoices when you know their exact identifiers",
                        "name": "invoice_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "DRAFT",
                                "FINALIZED",
                                "VOIDED"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "invoice_status filters by the current state of invoices in their lifecycle\nMultiple statuses can be specified to include invoices in any of the listed states",
                        "name": "invoice_status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "SUBSCRIPTION",
                            "ONE_OFF",
                            "CREDIT"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "InvoiceTypeSubscription",
                            "InvoiceTypeOneOff",
                            "InvoiceTypeCredit"
                        ],
                        "description": "invoice_type filters by the nature of the invoice (SUBSCRIPTION, ONE_OFF, or CREDIT)\nUse this to separate recurring charges from one-time fees or credit adjustments",
                        "name": "invoice_type",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "PENDING",
                                "PROCESSING",
                                "SUCCEEDED",
                                "FAILED",
                                "REFUNDED",
                                "PARTIALLY_REFUNDED"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "payment_status filters by the payment state of invoices\nMultiple statuses can be specified to include invoices with any of the listed payment states",
                        "name": "payment_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "subscription_id filters invoices generated for a specific subscription\nOnly returns invoices that were created as part of the specified subscription's billing",
                        "name": "subscription_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListInvoicesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new invoice with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Create a new invoice",
                "parameters": [
                    {
                        "description": "Invoice details",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/preview": {
            "post": {
                "description": "Get a preview invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Get a preview invoice",
                "parameters": [
                    {
                        "description": "Preview Invoice Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetPreviewInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List invoices by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "List invoices by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InvoiceFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListInvoicesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}": {
            "get": {
                "description": "Get detailed information about an invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Get an invoice by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update invoice details like PDF URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Update an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invoice Update Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/finalize": {
            "post": {
                "description": "Finalize a draft invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Finalize an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/payment": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the payment status of an invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Update invoice payment status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment Status Update Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePaymentStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/payment/attempt": {
            "post": {
                "description": "Attempt to pay an invoice using customer's available wallets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Attempt payment for an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/pdf": {
            "get": {
                "description": "Retrieve the PDF document for a specific invoice by its ID",
                "tags": [
                    "Invoices"
                ],
                "summary": "Get PDF for an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Return presigned URL from s3 instead of PDF",
                        "name": "url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/recalculate": {
            "post": {
                "description": "Recalculate totals and line items for a draft invoice, useful when subscription line items or usage data has changed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Recalculate invoice totals and line items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to finalize the invoice after recalculation (default: true)",
                        "name": "finalize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/void": {
            "post": {
                "description": "Void an invoice that hasn't been paid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoices"
                ],
                "summary": "Void an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List payments with the specified filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "List payments",
                "parameters": [
                    {
                        "type": "string",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "destination_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "destination_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "payment_gateway",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "payment_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "payment_method_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "payment_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPaymentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new payment with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Create a new payment",
                "parameters": [
                    {
                        "description": "Payment configuration",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a payment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Get a payment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a payment with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Update a payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment configuration",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Delete a payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/{id}/process": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process a payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Process a payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get plans with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plans"
                ],
                "summary": "Get plans",
                "parameters": [
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "plan_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPlansResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new plan with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plans"
                ],
                "summary": "Create a new plan",
                "parameters": [
                    {
                        "description": "Plan configuration",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePlanRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List plans by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plans"
                ],
                "summary": "List plans by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PlanFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPlansResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plans"
                ],
                "summary": "Get a plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plans"
                ],
                "summary": "Update a plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Plan update",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePlanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plans"
                ],
                "summary": "Delete a plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans/{id}/creditgrants": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all credit grants for a plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditGrants"
                ],
                "summary": "Get plan credit grants",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCreditGrantsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans/{id}/entitlements": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all entitlements for a plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entitlements"
                ],
                "summary": "Get plan entitlements",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans/{id}/sync/subscriptions": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Synchronize current plan prices with all existing active subscriptions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plans"
                ],
                "summary": "Synchronize plan prices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SyncPlanPricesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get prices with the specified filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prices"
                ],
                "summary": "Get prices",
                "parameters": [
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "parent_price_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "plan_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "price_ids",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PLAN",
                            "SUBSCRIPTION"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "PRICE_SCOPE_PLAN",
                            "PRICE_SCOPE_SUBSCRIPTION"
                        ],
                        "description": "Price override filtering fields",
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "subscription_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPricesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new price with the specified configuration. Supports both regular and price unit configurations.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prices"
                ],
                "summary": "Create a new price",
                "parameters": [
                    {
                        "description": "Price configuration",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/units": {
            "get": {
                "description": "Get a paginated list of price units with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price Units"
                ],
                "summary": "List price units",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc/desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPriceUnitsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new price unit with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price Units"
                ],
                "summary": "Create a new price unit",
                "parameters": [
                    {
                        "description": "Price unit details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePriceUnitRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/units/code/{code}": {
            "get": {
                "description": "Get a price unit by code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price Units"
                ],
                "summary": "Get a price unit by code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price unit code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/units/{id}": {
            "get": {
                "description": "Get a price unit by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price Units"
                ],
                "summary": "Get a price unit by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price unit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing price unit with the provided details. Only name, symbol, precision, and conversion_rate can be updated. Status changes are not allowed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price Units"
                ],
                "summary": "Update a price unit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price unit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Price unit details to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePriceUnitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Archive an existing price unit. The unit will be marked as archived and cannot be used in new prices.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price Units"
                ],
                "summary": "Archive a price unit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price unit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a price by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prices"
                ],
                "summary": "Get a price by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a price with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prices"
                ],
                "summary": "Update a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Price configuration",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a price",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prices"
                ],
                "summary": "Delete a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secrets/api/keys": {
            "get": {
                "description": "Get a paginated list of API keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secrets"
                ],
                "summary": "List API keys",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status (published/archived)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListSecretsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new API key with the specified type and permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secrets"
                ],
                "summary": "Create a new API key",
                "parameters": [
                    {
                        "description": "API key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAPIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secrets/api/keys/{id}": {
            "delete": {
                "description": "Delete an API key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secrets"
                ],
                "summary": "Delete an API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secrets/integrations/linked": {
            "get": {
                "description": "Get a list of unique providers which have a valid linked integration secret",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "summary": "List linked integrations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LinkedIntegrationsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secrets/integrations/{id}": {
            "delete": {
                "description": "Delete integration credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "summary": "Delete an integration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secrets/integrations/{provider}": {
            "get": {
                "description": "Get details of a specific integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "summary": "Get integration details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Integration provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SecretResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create or update integration credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "summary": "Create or update an integration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Integration provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Integration creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateIntegrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SecretResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get subscriptions with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "List subscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ActiveAt filters subscriptions that are active at the given time",
                        "name": "active_at",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "RECURRING",
                                "ONETIME"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "BillingCadence filters by billing cadence",
                        "name": "billing_cadence",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "MONTHLY",
                                "ANNUAL",
                                "WEEKLY",
                                "DAILY",
                                "QUARTERLY",
                                "HALF_YEARLY"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "BillingPeriod filters by billing period",
                        "name": "billing_period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "CustomerID filters by customer ID",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "PlanID filters by plan ID",
                        "name": "plan_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "subscription_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "active",
                                "paused",
                                "cancelled",
                                "incomplete",
                                "incomplete_expired",
                                "past_due",
                                "trialing",
                                "unpaid"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SubscriptionStatus filters by subscription status",
                        "name": "subscription_status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithLineItems includes line items in the response",
                        "name": "with_line_items",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListSubscriptionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Create subscription",
                "parameters": [
                    {
                        "description": "Subscription Request",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List subscriptions by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "List subscriptions by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SubscriptionFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListSubscriptionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/usage": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get usage for a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get usage by subscription",
                "parameters": [
                    {
                        "description": "Usage request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageBySubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageBySubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a subscription by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/cancel": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancel a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Cancel subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Cancel at period end",
                        "name": "cancel_at_period_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/pause": {
            "post": {
                "description": "Pause a subscription with the specified parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Pause a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pause subscription request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PauseSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionPauseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/pauses": {
            "get": {
                "description": "List all pauses for a subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "List all pauses for a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ListSubscriptionPausesResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/phases": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a new phase to a subscription schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Add new phase to subscription schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add schedule phase request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddSchedulePhaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/resume": {
            "post": {
                "description": "Resume a paused subscription with the specified parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Resume a paused subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resume subscription request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResumeSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionPauseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "List tasks with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "List tasks",
                "parameters": [
                    {
                        "type": "string",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "EVENTS",
                            "PRICES",
                            "CUSTOMERS"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "EntityTypeEvents",
                            "EntityTypePrices",
                            "EntityTypeCustomers"
                        ],
                        "name": "entity_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PENDING",
                            "PROCESSING",
                            "COMPLETED",
                            "FAILED"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TaskStatusPending",
                            "TaskStatusProcessing",
                            "TaskStatusCompleted",
                            "TaskStatusFailed"
                        ],
                        "name": "task_status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "IMPORT",
                            "EXPORT"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TaskTypeImport",
                            "TaskTypeExport"
                        ],
                        "name": "task_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListTasksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new import/export task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task details",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "description": "Get detailed information about a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{id}/process": {
            "post": {
                "description": "Start processing a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Process a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{id}/status": {
            "put": {
                "description": "Update the status of a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Update task status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTaskStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tenant/billing": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the subscription and usage details for the current tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenants"
                ],
                "summary": "Get billing usage for the current tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TenantBillingUsage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tenants": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenants"
                ],
                "summary": "Create a new tenant",
                "parameters": [
                    {
                        "description": "Create tenant request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTenantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.TenantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tenants/update": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a tenant's details including name and billing information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenants"
                ],
                "summary": "Update a tenant",
                "parameters": [
                    {
                        "description": "Update tenant request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTenantRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TenantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tenants/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get tenant by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenants"
                ],
                "summary": "Get tenant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TenantResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the current user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new wallet for a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Create a new wallet",
                "parameters": [
                    {
                        "description": "Create wallet request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a wallet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Get wallet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a wallet's details including auto top-up configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Update a wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update wallet request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/balance/real-time": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get real-time balance of a wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Get wallet balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletBalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/terminate": {
            "post": {
                "description": "Terminates a wallet by closing it and debiting remaining balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Terminate a wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/top-up": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add credits to a wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Top up wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Top up request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TopUpWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get transactions for a wallet with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Get wallet transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "name": "credits_available_gt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expiry_date_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "expiry_date_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "reference_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "reference_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "INVOICE_PAYMENT",
                            "FREE_CREDIT_GRANT",
                            "SUBSCRIPTION_CREDIT_GRANT",
                            "PURCHASED_CREDIT_INVOICED",
                            "PURCHASED_CREDIT_DIRECT",
                            "CREDIT_NOTE",
                            "CREDIT_EXPIRED",
                            "WALLET_TERMINATION"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TransactionReasonInvoicePayment",
                            "TransactionReasonFreeCredit",
                            "TransactionReasonSubscriptionCredit",
                            "TransactionReasonPurchasedCreditInvoiced",
                            "TransactionReasonPurchasedCreditDirect",
                            "TransactionReasonCreditNote",
                            "TransactionReasonCreditExpired",
                            "TransactionReasonWalletTermination"
                        ],
                        "name": "transaction_reason",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "completed",
                            "failed"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TransactionStatusPending",
                            "TransactionStatusCompleted",
                            "TransactionStatusFailed"
                        ],
                        "name": "transaction_status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "credit",
                            "debit"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TransactionTypeCredit",
                            "TransactionTypeDebit"
                        ],
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListWalletTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "coupon.Coupon": {
            "type": "object",
            "properties": {
                "amount_off": {
                    "type": "number"
                },
                "cadence": {
                    "$ref": "#/definitions/types.CouponCadence"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "duration_in_periods": {
                    "type": "integer"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "percentage_off": {
                    "type": "number"
                },
                "redeem_after": {
                    "type": "string"
                },
                "redeem_before": {
                    "type": "string"
                },
                "rules": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "total_redemptions": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.CouponType"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "coupon_association.CouponAssociation": {
            "type": "object",
            "properties": {
                "coupon": {
                    "$ref": "#/definitions/coupon.Coupon"
                },
                "coupon_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "description": "Mandatory",
                    "type": "string"
                },
                "subscription_line_item_id": {
                    "description": "Optional",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "creditnote.CreditNoteLineItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "credit_note_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_line_item_id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "customer.Customer": {
            "type": "object",
            "properties": {
                "address_city": {
                    "description": "AddressCity is the city of the customer's address",
                    "type": "string"
                },
                "address_country": {
                    "description": "AddressCountry is the country of the customer's address (ISO 3166-1 alpha-2)",
                    "type": "string"
                },
                "address_line1": {
                    "description": "AddressLine1 is the first line of the customer's address",
                    "type": "string"
                },
                "address_line2": {
                    "description": "AddressLine2 is the second line of the customer's address",
                    "type": "string"
                },
                "address_postal_code": {
                    "description": "AddressPostalCode is the postal code of the customer's address",
                    "type": "string"
                },
                "address_state": {
                    "description": "AddressState is the state of the customer's address",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email of the customer",
                    "type": "string"
                },
                "environment_id": {
                    "description": "EnvironmentID is the environment identifier for the customer",
                    "type": "string"
                },
                "external_id": {
                    "description": "ExternalID is the external identifier for the customer",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the customer",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the customer",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.AddSchedulePhaseRequest": {
            "type": "object",
            "required": [
                "phase"
            ],
            "properties": {
                "phase": {
                    "$ref": "#/definitions/dto.SubscriptionSchedulePhaseInput"
                }
            }
        },
        "dto.Address": {
            "type": "object",
            "properties": {
                "address_city": {
                    "type": "string",
                    "maxLength": 100
                },
                "address_country": {
                    "type": "string"
                },
                "address_line1": {
                    "type": "string",
                    "maxLength": 255
                },
                "address_line2": {
                    "type": "string",
                    "maxLength": 255
                },
                "address_postal_code": {
                    "type": "string",
                    "maxLength": 20
                },
                "address_state": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "dto.AggregatedEntitlement": {
            "type": "object",
            "properties": {
                "is_enabled": {
                    "type": "boolean"
                },
                "is_soft_limit": {
                    "type": "boolean"
                },
                "static_values": {
                    "description": "For static/SLA features",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_reset_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                }
            }
        },
        "dto.AggregatedFeature": {
            "type": "object",
            "properties": {
                "entitlement": {
                    "$ref": "#/definitions/dto.AggregatedEntitlement"
                },
                "feature": {
                    "$ref": "#/definitions/dto.FeatureResponse"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EntitlementSource"
                    }
                }
            }
        },
        "dto.AlertConfig": {
            "type": "object",
            "properties": {
                "threshold": {
                    "$ref": "#/definitions/dto.Threshold"
                }
            }
        },
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "tenant_id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.BillingPeriodInfo": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "period": {
                    "description": "e.g., \"monthly\", \"yearly\"",
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "dto.BulkIngestEventRequest": {
            "type": "object",
            "required": [
                "events"
            ],
            "properties": {
                "events": {
                    "type": "array",
                    "maxItems": 1000,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.IngestEventRequest"
                    }
                }
            }
        },
        "dto.CalculateROIRequest": {
            "type": "object",
            "required": [
                "subscription_id"
            ],
            "properties": {
                "meter_id": {
                    "description": "MeterID references the meter to track usage",
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "description": "Optional time range. If not provided, uses entire subscription period",
                    "type": "string"
                },
                "price_id": {
                    "description": "PriceID references the price configuration",
                    "type": "string"
                },
                "subscription_id": {
                    "description": "SubscriptionID is required to get subscription details",
                    "type": "string"
                }
            }
        },
        "dto.CostBreakdownItem": {
            "type": "object",
            "properties": {
                "cost": {
                    "description": "Cost is the calculated cost for this meter",
                    "type": "number"
                },
                "meter_id": {
                    "description": "MeterID identifies the usage meter",
                    "type": "string"
                },
                "meter_name": {
                    "description": "MeterName is the display name of the meter",
                    "type": "string"
                },
                "usage": {
                    "description": "Usage is the quantity consumed",
                    "type": "number"
                }
            }
        },
        "dto.CostBreakdownResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items contains the breakdown by meter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CostBreakdownItem"
                    }
                },
                "total_cost": {
                    "description": "TotalCost is the sum of all meter costs",
                    "type": "number"
                }
            }
        },
        "dto.CostSheetResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "meter_id": {
                    "type": "string"
                },
                "price_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.CouponApplicationResponse": {
            "type": "object",
            "properties": {
                "applied_at": {
                    "type": "string"
                },
                "coupon_association_id": {
                    "type": "string"
                },
                "coupon_id": {
                    "type": "string"
                },
                "coupon_snapshot": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "discount_percentage": {
                    "type": "number"
                },
                "discount_type": {
                    "$ref": "#/definitions/types.CouponType"
                },
                "discounted_amount": {
                    "type": "number"
                },
                "environment_id": {
                    "type": "string"
                },
                "final_price": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "invoice_id": {
                    "type": "string"
                },
                "invoice_line_item_id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "original_price": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.CouponAssociationResponse": {
            "type": "object",
            "properties": {
                "coupon": {
                    "$ref": "#/definitions/coupon.Coupon"
                },
                "coupon_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "description": "Mandatory",
                    "type": "string"
                },
                "subscription_line_item_id": {
                    "description": "Optional",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.CouponResponse": {
            "type": "object",
            "properties": {
                "amount_off": {
                    "type": "number"
                },
                "cadence": {
                    "$ref": "#/definitions/types.CouponCadence"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "duration_in_periods": {
                    "type": "integer"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "percentage_off": {
                    "type": "number"
                },
                "redeem_after": {
                    "type": "string"
                },
                "redeem_before": {
                    "type": "string"
                },
                "rules": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "total_redemptions": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.CouponType"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.CreateAPIKeyRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/types.SecretType"
                }
            }
        },
        "dto.CreateAPIKeyResponse": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "secret": {
                    "$ref": "#/definitions/dto.SecretResponse"
                }
            }
        },
        "dto.CreateCostSheetRequest": {
            "type": "object",
            "required": [
                "meter_id",
                "price_id"
            ],
            "properties": {
                "meter_id": {
                    "description": "MeterID references the meter to track usage",
                    "type": "string"
                },
                "price_id": {
                    "description": "PriceID references the price configuration",
                    "type": "string"
                }
            }
        },
        "dto.CreateCouponRequest": {
            "type": "object",
            "required": [
                "cadence",
                "name",
                "type"
            ],
            "properties": {
                "amount_off": {
                    "type": "number"
                },
                "cadence": {
                    "enum": [
                        "once",
                        "repeated",
                        "forever"
                    ],
                    "$ref": "#/definitions/types.CouponCadence"
                },
                "currency": {
                    "type": "string"
                },
                "duration_in_periods": {
                    "type": "integer"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "percentage_off": {
                    "type": "number"
                },
                "redeem_after": {
                    "type": "string"
                },
                "redeem_before": {
                    "type": "string"
                },
                "rules": {
                    "type": "object",
                    "additionalProperties": true
                },
                "type": {
                    "enum": [
                        "fixed",
                        "percentage"
                    ],
                    "$ref": "#/definitions/types.CouponType"
                }
            }
        },
        "dto.CreateCreditGrantRequest": {
            "type": "object",
            "required": [
                "cadence",
                "credits",
                "name",
                "scope"
            ],
            "properties": {
                "cadence": {
                    "$ref": "#/definitions/types.CreditGrantCadence"
                },
                "credits": {
                    "type": "number"
                },
                "expiration_duration": {
                    "type": "integer"
                },
                "expiration_duration_unit": {
                    "$ref": "#/definitions/types.CreditGrantExpiryDurationUnit"
                },
                "expiration_type": {
                    "$ref": "#/definitions/types.CreditGrantExpiryType"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "period": {
                    "$ref": "#/definitions/types.CreditGrantPeriod"
                },
                "period_count": {
                    "type": "integer"
                },
                "plan_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "scope": {
                    "$ref": "#/definitions/types.CreditGrantScope"
                },
                "subscription_id": {
                    "type": "string"
                }
            }
        },
        "dto.CreateCreditNoteLineItemRequest": {
            "type": "object",
            "required": [
                "amount",
                "invoice_line_item_id"
            ],
            "properties": {
                "amount": {
                    "description": "amount is the monetary amount to be credited for this line item",
                    "type": "number"
                },
                "display_name": {
                    "description": "display_name is an optional human-readable name for this credit note line item",
                    "type": "string"
                },
                "invoice_line_item_id": {
                    "description": "invoice_line_item_id is the unique identifier of the invoice line item being credited",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata contains additional custom key-value pairs for storing extra information about this line item",
                    "$ref": "#/definitions/types.Metadata"
                }
            }
        },
        "dto.CreateCreditNoteRequest": {
            "type": "object",
            "required": [
                "invoice_id",
                "reason"
            ],
            "properties": {
                "credit_note_number": {
                    "description": "credit_note_number is an optional human-readable identifier for the credit note",
                    "type": "string"
                },
                "idempotency_key": {
                    "description": "idempotency_key is an optional key used to prevent duplicate credit note creation",
                    "type": "string"
                },
                "invoice_id": {
                    "description": "invoice_id is the unique identifier of the invoice this credit note is applied to",
                    "type": "string"
                },
                "line_items": {
                    "description": "line_items contains the individual line items that make up this credit note (minimum 1 required)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateCreditNoteLineItemRequest"
                    }
                },
                "memo": {
                    "description": "memo is an optional free-text field for additional notes about the credit note",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata contains additional custom key-value pairs for storing extra information",
                    "$ref": "#/definitions/types.Metadata"
                },
                "process_credit_note": {
                    "description": "process_credit_note is a flag to process the credit note after creation",
                    "type": "boolean",
                    "default": true
                },
                "reason": {
                    "description": "reason specifies the reason for creating this credit note (duplicate, fraudulent, order_change, product_unsatisfactory)",
                    "$ref": "#/definitions/types.CreditNoteReason"
                }
            }
        },
        "dto.CreateCustomerRequest": {
            "type": "object",
            "required": [
                "external_id"
            ],
            "properties": {
                "address_city": {
                    "type": "string",
                    "maxLength": 100
                },
                "address_country": {
                    "type": "string"
                },
                "address_line1": {
                    "type": "string",
                    "maxLength": 255
                },
                "address_line2": {
                    "type": "string",
                    "maxLength": 255
                },
                "address_postal_code": {
                    "type": "string",
                    "maxLength": 20
                },
                "address_state": {
                    "type": "string",
                    "maxLength": 100
                },
                "email": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateEntitlementRequest": {
            "type": "object",
            "required": [
                "feature_id",
                "feature_type"
            ],
            "properties": {
                "feature_id": {
                    "type": "string"
                },
                "feature_type": {
                    "$ref": "#/definitions/types.FeatureType"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "is_soft_limit": {
                    "type": "boolean"
                },
                "plan_id": {
                    "type": "string"
                },
                "static_value": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_reset_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                }
            }
        },
        "dto.CreateEnvironmentRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.CreateFeatureRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "meter": {
                    "$ref": "#/definitions/dto.CreateMeterRequest"
                },
                "meter_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.FeatureType"
                },
                "unit_plural": {
                    "type": "string"
                },
                "unit_singular": {
                    "type": "string"
                }
            }
        },
        "dto.CreateIntegrationRequest": {
            "type": "object",
            "required": [
                "credentials",
                "name",
                "provider"
            ],
            "properties": {
                "credentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/types.SecretProvider"
                }
            }
        },
        "dto.CreateInvoiceLineItemRequest": {
            "type": "object",
            "required": [
                "amount",
                "quantity"
            ],
            "properties": {
                "amount": {
                    "description": "amount is the monetary amount for this line item",
                    "type": "number"
                },
                "display_name": {
                    "description": "display_name is the optional human-readable name for this line item",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata contains additional custom key-value pairs for storing extra information about this line item",
                    "$ref": "#/definitions/types.Metadata"
                },
                "meter_display_name": {
                    "description": "meter_display_name is the optional human-readable name of the meter",
                    "type": "string"
                },
                "meter_id": {
                    "description": "meter_id is the optional unique identifier of the meter used for usage tracking",
                    "type": "string"
                },
                "period_end": {
                    "description": "period_end is the optional end date of the period this line item covers",
                    "type": "string"
                },
                "period_start": {
                    "description": "period_start is the optional start date of the period this line item covers",
                    "type": "string"
                },
                "plan_display_name": {
                    "description": "plan_display_name is the optional human-readable name of the plan",
                    "type": "string"
                },
                "plan_id": {
                    "description": "plan_id is the optional unique identifier of the plan associated with this line item",
                    "type": "string"
                },
                "price_id": {
                    "description": "price_id is the optional unique identifier of the price associated with this line item",
                    "type": "string"
                },
                "price_type": {
                    "description": "price_type indicates the type of pricing (fixed, usage, tiered, etc.)",
                    "type": "string"
                },
                "price_unit": {
                    "description": "price_unit is the optional 3-digit ISO code of the price unit associated with this line item",
                    "type": "string"
                },
                "price_unit_amount": {
                    "description": "price_unit_amount is the optional amount converted to the price unit currency",
                    "type": "number"
                },
                "quantity": {
                    "description": "quantity is the quantity of units for this line item",
                    "type": "number"
                }
            }
        },
        "dto.CreateInvoiceRequest": {
            "type": "object",
            "required": [
                "amount_due",
                "currency",
                "customer_id",
                "subtotal",
                "total"
            ],
            "properties": {
                "amount_due": {
                    "description": "amount_due is the total amount that needs to be paid for this invoice",
                    "type": "number"
                },
                "amount_paid": {
                    "description": "amount_paid is the amount that has been paid towards this invoice",
                    "type": "number"
                },
                "billing_period": {
                    "description": "billing_period is the period this invoice covers (e.g., \"monthly\", \"yearly\")",
                    "type": "string"
                },
                "billing_reason": {
                    "description": "billing_reason indicates why this invoice was created (subscription_cycle, manual, etc.)",
                    "$ref": "#/definitions/types.InvoiceBillingReason"
                },
                "coupons": {
                    "description": "coupons",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "currency": {
                    "description": "currency is the three-letter ISO currency code (e.g., USD, EUR) for the invoice",
                    "type": "string"
                },
                "customer_id": {
                    "description": "customer_id is the unique identifier of the customer this invoice belongs to",
                    "type": "string"
                },
                "description": {
                    "description": "description is an optional text description of the invoice",
                    "type": "string"
                },
                "due_date": {
                    "description": "due_date is the date by which payment is expected",
                    "type": "string"
                },
                "environment_id": {
                    "description": "environment_id is the unique identifier of the environment this invoice belongs to",
                    "type": "string"
                },
                "idempotency_key": {
                    "description": "idempotency_key is an optional key used to prevent duplicate invoice creation",
                    "type": "string"
                },
                "invoice_number": {
                    "description": "invoice_number is an optional human-readable identifier for the invoice",
                    "type": "string"
                },
                "invoice_pdf_url": {
                    "description": "invoice_pdf_url is the URL where customers can download the PDF version of this invoice",
                    "type": "string"
                },
                "invoice_status": {
                    "description": "invoice_status represents the current status of the invoice (draft, finalized, etc.)",
                    "$ref": "#/definitions/types.InvoiceStatus"
                },
                "invoice_type": {
                    "description": "invoice_type indicates the type of invoice (subscription, one_time, etc.)",
                    "$ref": "#/definitions/types.InvoiceType"
                },
                "line_items": {
                    "description": "line_items contains the individual items that make up this invoice",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateInvoiceLineItemRequest"
                    }
                },
                "metadata": {
                    "description": "metadata contains additional custom key-value pairs for storing extra information",
                    "$ref": "#/definitions/types.Metadata"
                },
                "payment_status": {
                    "description": "payment_status represents the payment status of the invoice (unpaid, paid, etc.)",
                    "$ref": "#/definitions/types.PaymentStatus"
                },
                "period_end": {
                    "description": "period_end is the end date of the billing period",
                    "type": "string"
                },
                "period_start": {
                    "description": "period_start is the start date of the billing period",
                    "type": "string"
                },
                "subscription_id": {
                    "description": "subscription_id is the optional unique identifier of the subscription associated with this invoice",
                    "type": "string"
                },
                "subtotal": {
                    "description": "subtotal is the amount before taxes and discounts are applied",
                    "type": "number"
                },
                "total": {
                    "description": "total is the total amount of the invoice including taxes and discounts",
                    "type": "number"
                }
            }
        },
        "dto.CreateMeterRequest": {
            "type": "object",
            "required": [
                "aggregation",
                "event_name",
                "name",
                "reset_usage"
            ],
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/meter.Filter"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "API Usage Meter"
                },
                "reset_usage": {
                    "$ref": "#/definitions/types.ResetUsage"
                }
            }
        },
        "dto.CreatePaymentRequest": {
            "type": "object",
            "required": [
                "amount",
                "currency",
                "destination_id",
                "destination_type",
                "payment_method_type"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "destination_id": {
                    "type": "string"
                },
                "destination_type": {
                    "$ref": "#/definitions/types.PaymentDestinationType"
                },
                "idempotency_key": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "payment_method_id": {
                    "type": "string"
                },
                "payment_method_type": {
                    "$ref": "#/definitions/types.PaymentMethodType"
                },
                "process_payment": {
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "dto.CreatePlanEntitlementRequest": {
            "type": "object",
            "required": [
                "feature_id",
                "feature_type"
            ],
            "properties": {
                "feature_id": {
                    "type": "string"
                },
                "feature_type": {
                    "$ref": "#/definitions/types.FeatureType"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "is_soft_limit": {
                    "type": "boolean"
                },
                "plan_id": {
                    "type": "string"
                },
                "static_value": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_reset_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                }
            }
        },
        "dto.CreatePlanPriceRequest": {
            "type": "object",
            "required": [
                "billing_cadence",
                "billing_model",
                "billing_period",
                "billing_period_count",
                "currency",
                "invoice_cadence",
                "price_unit_type",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "string"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "filter_values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "price_unit_config": {
                    "$ref": "#/definitions/dto.PriceUnitConfig"
                },
                "price_unit_type": {
                    "$ref": "#/definitions/types.PriceUnitType"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "trial_period": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                }
            }
        },
        "dto.CreatePlanRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "credit_grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateCreditGrantRequest"
                    }
                },
                "description": {
                    "type": "string"
                },
                "entitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePlanEntitlementRequest"
                    }
                },
                "lookup_key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePlanPriceRequest"
                    }
                }
            }
        },
        "dto.CreatePriceRequest": {
            "type": "object",
            "required": [
                "billing_cadence",
                "billing_model",
                "billing_period",
                "billing_period_count",
                "currency",
                "invoice_cadence",
                "price_unit_type",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "string"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "filter_values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "price_unit_config": {
                    "$ref": "#/definitions/dto.PriceUnitConfig"
                },
                "price_unit_type": {
                    "$ref": "#/definitions/types.PriceUnitType"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "trial_period": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                }
            }
        },
        "dto.CreatePriceTier": {
            "type": "object",
            "required": [
                "unit_amount"
            ],
            "properties": {
                "flat_amount": {
                    "type": "string"
                },
                "unit_amount": {
                    "type": "string"
                },
                "up_to": {
                    "type": "integer"
                }
            }
        },
        "dto.CreatePriceUnitRequest": {
            "type": "object",
            "required": [
                "base_currency",
                "code",
                "conversion_rate",
                "name",
                "symbol"
            ],
            "properties": {
                "base_currency": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "conversion_rate": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "precision": {
                    "type": "integer",
                    "maximum": 8,
                    "minimum": 0
                },
                "symbol": {
                    "type": "string",
                    "maxLength": 10
                }
            }
        },
        "dto.CreateSubscriptionRequest": {
            "type": "object",
            "required": [
                "billing_cadence",
                "billing_period",
                "billing_period_count",
                "currency",
                "plan_id",
                "start_date"
            ],
            "properties": {
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_cycle": {
                    "description": "BillingCycle is the cycle of the billing anchor.\nThis is used to determine the billing date for the subscription (i.e set the billing anchor)\nIf not set, the default value is anniversary. Possible values are anniversary and calendar.\nAnniversary billing means the billing anchor will be the start date of the subscription.\nCalendar billing means the billing anchor will be the appropriate date based on the billing period.\nFor example, if the billing period is month and the start date is 2025-04-15 then in case of\ncalendar billing the billing anchor will be 2025-05-01 vs 2025-04-15 for anniversary billing.",
                    "$ref": "#/definitions/types.BillingCycle"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "commitment_amount": {
                    "description": "CommitmentAmount is the minimum amount a customer commits to paying for a billing period",
                    "type": "number"
                },
                "credit_grants": {
                    "description": "Credit grants to be applied when subscription is created",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateCreditGrantRequest"
                    }
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "description": "customer_id is the flexprice customer id\nand it is prioritized over external_customer_id in case both are provided.",
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "external_customer_id": {
                    "description": "external_customer_id is the customer id in your DB\nand must be same as what you provided as external_id while creating the customer in flexprice.",
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "overage_factor": {
                    "description": "OverageFactor is a multiplier applied to usage beyond the commitment amount",
                    "type": "number"
                },
                "override_line_items": {
                    "description": "OverrideLineItems allows customizing specific prices for this subscription",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OverrideLineItemRequest"
                    }
                },
                "phases": {
                    "description": "Phases represents an optional timeline of subscription phases",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionSchedulePhaseInput"
                    }
                },
                "plan_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "subscription_coupons": {
                    "description": "SubscriptionCoupons is a list of coupon IDs to be applied to the subscription",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trial_end": {
                    "type": "string"
                },
                "trial_start": {
                    "type": "string"
                }
            }
        },
        "dto.CreateTaskRequest": {
            "type": "object",
            "required": [
                "entity_type",
                "file_type",
                "file_url",
                "task_type"
            ],
            "properties": {
                "entity_type": {
                    "$ref": "#/definitions/types.EntityType"
                },
                "file_name": {
                    "type": "string"
                },
                "file_type": {
                    "$ref": "#/definitions/types.FileType"
                },
                "file_url": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "task_type": {
                    "$ref": "#/definitions/types.TaskType"
                }
            }
        },
        "dto.CreateTenantRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "billing_details": {
                    "$ref": "#/definitions/dto.TenantBillingDetails"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateWalletRequest": {
            "type": "object",
            "required": [
                "currency"
            ],
            "properties": {
                "alert_config": {
                    "description": "alert_config is the alert configuration for the wallet (optional)",
                    "$ref": "#/definitions/dto.AlertConfig"
                },
                "alert_enabled": {
                    "description": "alert_enabled is the flag to enable alerts for the wallet\ndefaults to true, can be explicitly set to false to disable alerts",
                    "type": "boolean"
                },
                "auto_topup_amount": {
                    "type": "number"
                },
                "auto_topup_min_balance": {
                    "type": "number"
                },
                "auto_topup_trigger": {
                    "$ref": "#/definitions/types.AutoTopupTrigger"
                },
                "config": {
                    "$ref": "#/definitions/types.WalletConfig"
                },
                "conversion_rate": {
                    "description": "amount in the currency =  number of credits * conversion_rate\nex if conversion_rate is 1, then 1 USD = 1 credit\nex if conversion_rate is 2, then 1 USD = 0.5 credits\nex if conversion_rate is 0.5, then 1 USD = 2 credits",
                    "type": "number",
                    "default": 1
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "external_customer_id": {
                    "description": "external_customer_id is the customer id in the external system",
                    "type": "string"
                },
                "initial_credits_expiry_date_utc": {
                    "description": "initial_credits_expiry_date_utc is the expiry date in UTC timezone (optional to set nil means no expiry)\nex 2025-01-01 00:00:00 UTC",
                    "type": "string"
                },
                "initial_credits_to_load": {
                    "description": "initial_credits_to_load is the number of credits to load to the wallet\nif not provided, the wallet will be created with 0 balance\nNOTE: this is not the amount in the currency, but the number of credits",
                    "type": "number",
                    "default": 0
                },
                "initial_credits_to_load_expiry_date": {
                    "description": "initial_credits_to_load_expiry_date YYYYMMDD format in UTC timezone (optional to set nil means no expiry)\nfor ex 20250101 means the credits will expire on 2025-01-01 00:00:00 UTC\nhence they will be available for use until 2024-12-31 23:59:59 UTC",
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "wallet_type": {
                    "$ref": "#/definitions/types.WalletType"
                }
            }
        },
        "dto.CreditGrantResponse": {
            "type": "object",
            "properties": {
                "cadence": {
                    "$ref": "#/definitions/types.CreditGrantCadence"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "credits": {
                    "type": "number"
                },
                "environment_id": {
                    "type": "string"
                },
                "expiration_duration": {
                    "type": "integer"
                },
                "expiration_duration_unit": {
                    "$ref": "#/definitions/types.CreditGrantExpiryDurationUnit"
                },
                "expiration_type": {
                    "$ref": "#/definitions/types.CreditGrantExpiryType"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "period": {
                    "$ref": "#/definitions/types.CreditGrantPeriod"
                },
                "period_count": {
                    "type": "integer"
                },
                "plan_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "scope": {
                    "$ref": "#/definitions/types.CreditGrantScope"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.CreditNoteResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "credit_note_number": {
                    "description": "credit_note_number is the unique identifier for credit notes",
                    "type": "string"
                },
                "credit_note_status": {
                    "description": "credit_note_status represents the current status of the credit note (e.g., draft, finalized, voided)",
                    "$ref": "#/definitions/types.CreditNoteStatus"
                },
                "credit_note_type": {
                    "description": "credit_note_type indicates the type of credit note (refund, adjustment)",
                    "$ref": "#/definitions/types.CreditNoteType"
                },
                "currency": {
                    "description": "currency is the three-letter ISO currency code (e.g., USD, EUR) for the credit note",
                    "type": "string"
                },
                "customer": {
                    "description": "customer contains the customer information associated with this credit note",
                    "$ref": "#/definitions/customer.Customer"
                },
                "customer_id": {
                    "description": "customer_id is the unique identifier of the customer who owns this credit note",
                    "type": "string"
                },
                "environment_id": {
                    "description": "environment_id is the unique identifier of the environment this credit note belongs to",
                    "type": "string"
                },
                "finalized_at": {
                    "description": "finalized_at is the timestamp when the credit note was finalized",
                    "type": "string"
                },
                "id": {
                    "description": "id is the unique identifier for the credit note",
                    "type": "string"
                },
                "idempotency_key": {
                    "description": "idempotency_key is an optional key used to prevent duplicate credit note creation",
                    "type": "string"
                },
                "invoice": {
                    "description": "invoice contains the associated invoice information if requested",
                    "$ref": "#/definitions/dto.InvoiceResponse"
                },
                "invoice_id": {
                    "description": "invoice_id is the id of the invoice resource that this credit note is applied to",
                    "type": "string"
                },
                "line_items": {
                    "description": "line_items contains all of the line items associated with this credit note",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/creditnote.CreditNoteLineItem"
                    }
                },
                "memo": {
                    "description": "memo is an optional memo supplied on the credit note",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata contains additional custom key-value pairs for storing extra information",
                    "$ref": "#/definitions/types.Metadata"
                },
                "reason": {
                    "description": "reason specifies the reason for creating this credit note (duplicate, fraudulent, order_change, product_unsatisfactory)",
                    "$ref": "#/definitions/types.CreditNoteReason"
                },
                "refund_status": {
                    "description": "refund_status represents the status of any refund associated with this credit note",
                    "$ref": "#/definitions/types.PaymentStatus"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription": {
                    "description": "subscription contains the associated subscription information if applicable",
                    "$ref": "#/definitions/dto.SubscriptionResponse"
                },
                "subscription_id": {
                    "description": "subscription_id is the optional unique identifier of the subscription related to this credit note",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "total_amount": {
                    "description": "total_amount is the total including creditable invoice-level discounts or minimums, and tax",
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "voided_at": {
                    "description": "voided_at is the timestamp when the credit note was voided",
                    "type": "string"
                }
            }
        },
        "dto.CustomerEntitlementsResponse": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AggregatedFeature"
                    }
                }
            }
        },
        "dto.CustomerInvoiceSummary": {
            "type": "object",
            "properties": {
                "currency": {
                    "description": "currency is the three-letter ISO currency code for this summary",
                    "type": "string"
                },
                "customer_id": {
                    "description": "customer_id is the unique identifier of the customer",
                    "type": "string"
                },
                "overdue_invoice_count": {
                    "description": "overdue_invoice_count is the number of overdue invoices for this customer in this currency",
                    "type": "integer"
                },
                "total_invoice_count": {
                    "description": "total_invoice_count is the total number of invoices for this customer in this currency",
                    "type": "integer"
                },
                "total_overdue_amount": {
                    "description": "total_overdue_amount is the total amount of overdue invoices in this currency",
                    "type": "number"
                },
                "total_revenue_amount": {
                    "description": "total_revenue_amount is the total revenue generated from this customer in this currency",
                    "type": "number"
                },
                "total_unpaid_amount": {
                    "description": "total_unpaid_amount is the total amount of unpaid invoices in this currency",
                    "type": "number"
                },
                "unpaid_fixed_charges": {
                    "description": "unpaid_fixed_charges is the total amount of unpaid fixed charges in this currency",
                    "type": "number"
                },
                "unpaid_invoice_count": {
                    "description": "unpaid_invoice_count is the number of unpaid invoices for this customer in this currency",
                    "type": "integer"
                },
                "unpaid_usage_charges": {
                    "description": "unpaid_usage_charges is the total amount of unpaid usage-based charges in this currency",
                    "type": "number"
                }
            }
        },
        "dto.CustomerMultiCurrencyInvoiceSummary": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "description": "customer_id is the unique identifier of the customer",
                    "type": "string"
                },
                "default_currency": {
                    "description": "default_currency is the primary currency for this customer",
                    "type": "string"
                },
                "summaries": {
                    "description": "summaries contains the invoice summaries for each currency",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CustomerInvoiceSummary"
                    }
                }
            }
        },
        "dto.CustomerResponse": {
            "type": "object",
            "properties": {
                "address_city": {
                    "description": "AddressCity is the city of the customer's address",
                    "type": "string"
                },
                "address_country": {
                    "description": "AddressCountry is the country of the customer's address (ISO 3166-1 alpha-2)",
                    "type": "string"
                },
                "address_line1": {
                    "description": "AddressLine1 is the first line of the customer's address",
                    "type": "string"
                },
                "address_line2": {
                    "description": "AddressLine2 is the second line of the customer's address",
                    "type": "string"
                },
                "address_postal_code": {
                    "description": "AddressPostalCode is the postal code of the customer's address",
                    "type": "string"
                },
                "address_state": {
                    "description": "AddressState is the state of the customer's address",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email of the customer",
                    "type": "string"
                },
                "environment_id": {
                    "description": "EnvironmentID is the environment identifier for the customer",
                    "type": "string"
                },
                "external_id": {
                    "description": "ExternalID is the external identifier for the customer",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the customer",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the customer",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.CustomerUsageSummaryResponse": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FeatureUsageSummary"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                },
                "period": {
                    "$ref": "#/definitions/dto.BillingPeriodInfo"
                }
            }
        },
        "dto.EntitlementResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "feature": {
                    "$ref": "#/definitions/dto.FeatureResponse"
                },
                "feature_id": {
                    "type": "string"
                },
                "feature_type": {
                    "$ref": "#/definitions/types.FeatureType"
                },
                "id": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "is_soft_limit": {
                    "type": "boolean"
                },
                "plan": {
                    "$ref": "#/definitions/dto.PlanResponse"
                },
                "plan_id": {
                    "type": "string"
                },
                "static_value": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_reset_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                }
            }
        },
        "dto.EntitlementSource": {
            "type": "object",
            "properties": {
                "entitlement_id": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "plan_id": {
                    "type": "string"
                },
                "plan_name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "static_value": {
                    "type": "string"
                },
                "subscription_id": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                }
            }
        },
        "dto.EnvironmentResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.Event": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "external_customer_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": true
                },
                "source": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.FeatureResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "meter": {
                    "$ref": "#/definitions/dto.MeterResponse"
                },
                "meter_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.FeatureType"
                },
                "unit_plural": {
                    "type": "string"
                },
                "unit_singular": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.FeatureUsageSummary": {
            "type": "object",
            "properties": {
                "current_usage": {
                    "type": "number"
                },
                "feature": {
                    "$ref": "#/definitions/dto.FeatureResponse"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "is_soft_limit": {
                    "type": "boolean"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EntitlementSource"
                    }
                },
                "total_limit": {
                    "type": "integer"
                },
                "usage_percent": {
                    "type": "number"
                }
            }
        },
        "dto.GetEventsRequest": {
            "type": "object",
            "properties": {
                "end_time": {
                    "description": "End time of the events to be fetched in ISO 8601 format\nDefaults to now if not provided",
                    "type": "string",
                    "example": "2024-12-09T00:00:00Z"
                },
                "event_id": {
                    "description": "Event ID is the idempotency key for the event",
                    "type": "string"
                },
                "event_name": {
                    "description": "Event name / Unique identifier for the event in your system",
                    "type": "string"
                },
                "external_customer_id": {
                    "description": "Customer ID in your system that was sent with the event",
                    "type": "string"
                },
                "iter_first_key": {
                    "description": "First key to iterate over the events",
                    "type": "string"
                },
                "iter_last_key": {
                    "description": "Last key to iterate over the events",
                    "type": "string"
                },
                "offset": {
                    "description": "Offset to fetch the events and is set to 0 by default",
                    "type": "integer"
                },
                "order": {
                    "description": "Order by condition. Allowed values (case sensitive): asc, desc (default: desc)",
                    "type": "string",
                    "example": "desc"
                },
                "page_size": {
                    "description": "Page size to fetch the events and is set to 50 by default",
                    "type": "integer"
                },
                "property_filters": {
                    "description": "Property filters to filter the events by the keys in `properties` field of the event",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "sort": {
                    "description": "Sort by the field. Allowed values (case sensitive): timestamp, event_name (default: timestamp)",
                    "type": "string",
                    "example": "timestamp"
                },
                "source": {
                    "description": "Source to filter the events by the source",
                    "type": "string"
                },
                "start_time": {
                    "description": "Start time of the events to be fetched in ISO 8601 format\nDefaults to last 7 days from now if not provided",
                    "type": "string",
                    "example": "2024-11-09T00:00:00Z"
                }
            }
        },
        "dto.GetEventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Event"
                    }
                },
                "has_more": {
                    "type": "boolean"
                },
                "iter_first_key": {
                    "type": "string"
                },
                "iter_last_key": {
                    "type": "string"
                },
                "offset": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "dto.GetPreviewInvoiceRequest": {
            "type": "object",
            "required": [
                "subscription_id"
            ],
            "properties": {
                "period_end": {
                    "description": "period_end is the optional end date of the period to preview",
                    "type": "string"
                },
                "period_start": {
                    "description": "period_start is the optional start date of the period to preview",
                    "type": "string"
                },
                "subscription_id": {
                    "description": "subscription_id is the unique identifier of the subscription to preview invoice for",
                    "type": "string"
                }
            }
        },
        "dto.GetUsageAnalyticsRequest": {
            "type": "object",
            "required": [
                "external_customer_id"
            ],
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "external_customer_id": {
                    "type": "string"
                },
                "feature_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "group_by": {
                    "description": "allowed values: \"source\", \"feature_id\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "property_filters": {
                    "description": "Property filters to filter the events by the keys in `properties` field of the event",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "window_size": {
                    "$ref": "#/definitions/types.WindowSize"
                }
            }
        },
        "dto.GetUsageAnalyticsResponse": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UsageAnalyticItem"
                    }
                },
                "total_cost": {
                    "type": "number"
                }
            }
        },
        "dto.GetUsageByMeterRequest": {
            "type": "object",
            "required": [
                "meter_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "end_time": {
                    "type": "string",
                    "example": "2024-12-09T00:00:00Z"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "user_5"
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "meter_id": {
                    "type": "string",
                    "example": "123"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-11-09T00:00:00Z"
                },
                "window_size": {
                    "$ref": "#/definitions/types.WindowSize"
                }
            }
        },
        "dto.GetUsageBySubscriptionRequest": {
            "type": "object",
            "required": [
                "subscription_id"
            ],
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2024-03-20T00:00:00Z"
                },
                "lifetime_usage": {
                    "type": "boolean",
                    "example": false
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-03-13T00:00:00Z"
                },
                "subscription_id": {
                    "type": "string",
                    "example": "123"
                }
            }
        },
        "dto.GetUsageBySubscriptionResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "charges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionUsageByMetersResponse"
                    }
                },
                "commitment_amount": {
                    "type": "number"
                },
                "commitment_utilized": {
                    "description": "Amount of commitment used",
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "display_amount": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "has_overage": {
                    "description": "Whether any usage exceeded commitment",
                    "type": "boolean"
                },
                "overage_amount": {
                    "description": "Amount charged at overage rate",
                    "type": "number"
                },
                "overage_factor": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "dto.GetUsageRequest": {
            "type": "object",
            "required": [
                "aggregation_type",
                "event_name"
            ],
            "properties": {
                "aggregation_type": {
                    "$ref": "#/definitions/types.AggregationType"
                },
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "end_time": {
                    "type": "string",
                    "example": "2024-03-20T00:00:00Z"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "multiplier": {
                    "type": "number"
                },
                "property_name": {
                    "description": "will be empty/ignored in case of COUNT",
                    "type": "string",
                    "example": "request_size"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-03-13T00:00:00Z"
                },
                "window_size": {
                    "$ref": "#/definitions/types.WindowSize"
                }
            }
        },
        "dto.GetUsageResponse": {
            "type": "object",
            "properties": {
                "event_name": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UsageResult"
                    }
                },
                "type": {
                    "$ref": "#/definitions/types.AggregationType"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "dto.IngestEventRequest": {
            "type": "object",
            "required": [
                "event_name",
                "external_customer_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "event_id": {
                    "type": "string",
                    "example": "event123"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "properties": {
                    "description": "Handled separately for dynamic columns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "\"response_status\"": "200}",
                        "{\"request_size\"": "100"
                    }
                },
                "source": {
                    "type": "string",
                    "example": "api"
                },
                "timestamp": {
                    "description": "Handled separately due to parsing",
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "dto.InvoiceLineItemResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "amount is the monetary amount for this line item",
                    "type": "number"
                },
                "created_at": {
                    "description": "created_at is the timestamp when this line item was created",
                    "type": "string"
                },
                "created_by": {
                    "description": "created_by is the identifier of the user who created this line item",
                    "type": "string"
                },
                "currency": {
                    "description": "currency is the three-letter ISO currency code for this line item",
                    "type": "string"
                },
                "customer_id": {
                    "description": "customer_id is the unique identifier of the customer associated with this line item",
                    "type": "string"
                },
                "display_name": {
                    "description": "display_name is the optional human-readable name for this line item",
                    "type": "string"
                },
                "id": {
                    "description": "id is the unique identifier for this line item",
                    "type": "string"
                },
                "invoice_id": {
                    "description": "invoice_id is the unique identifier of the invoice this line item belongs to",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata contains additional custom key-value pairs for storing extra information about this line item",
                    "$ref": "#/definitions/types.Metadata"
                },
                "meter_display_name": {
                    "description": "meter_display_name is the optional human-readable name of the meter",
                    "type": "string"
                },
                "meter_id": {
                    "description": "meter_id is the optional unique identifier of the meter used for usage tracking",
                    "type": "string"
                },
                "period_end": {
                    "description": "period_end is the optional end date of the period this line item covers",
                    "type": "string"
                },
                "period_start": {
                    "description": "period_start is the optional start date of the period this line item covers",
                    "type": "string"
                },
                "plan_display_name": {
                    "description": "plan_display_name is the optional human-readable name of the plan",
                    "type": "string"
                },
                "plan_id": {
                    "description": "plan_id is the optional unique identifier of the plan associated with this line item",
                    "type": "string"
                },
                "price_id": {
                    "description": "price_id is the optional unique identifier of the price associated with this line item",
                    "type": "string"
                },
                "price_type": {
                    "description": "price_type indicates the type of pricing (fixed, usage, tiered, etc.)",
                    "type": "string"
                },
                "price_unit": {
                    "description": "price_unit is the optional 3-digit ISO code of the price unit associated with this line item",
                    "type": "string"
                },
                "price_unit_amount": {
                    "description": "price_unit_amount is the optional amount converted to the price unit currency",
                    "type": "number"
                },
                "price_unit_id": {
                    "description": "price_unit_id is the optional unique identifier of the price unit associated with this line item",
                    "type": "string"
                },
                "quantity": {
                    "description": "quantity is the quantity of units for this line item",
                    "type": "number"
                },
                "status": {
                    "description": "status represents the current status of this line item",
                    "type": "string"
                },
                "subscription_id": {
                    "description": "subscription_id is the optional unique identifier of the subscription associated with this line item",
                    "type": "string"
                },
                "tenant_id": {
                    "description": "tenant_id is the unique identifier of the tenant this line item belongs to",
                    "type": "string"
                },
                "updated_at": {
                    "description": "updated_at is the timestamp when this line item was last updated",
                    "type": "string"
                },
                "updated_by": {
                    "description": "updated_by is the identifier of the user who last updated this line item",
                    "type": "string"
                }
            }
        },
        "dto.InvoiceResponse": {
            "type": "object",
            "properties": {
                "amount_due": {
                    "description": "amount_due is the total amount that needs to be paid for this invoice",
                    "type": "number"
                },
                "amount_paid": {
                    "description": "amount_paid is the amount that has been paid towards this invoice",
                    "type": "number"
                },
                "amount_remaining": {
                    "description": "amount_remaining is the amount still outstanding on this invoice",
                    "type": "number"
                },
                "billing_period": {
                    "description": "billing_period is the period this invoice covers (e.g., \"monthly\", \"yearly\")",
                    "type": "string"
                },
                "billing_reason": {
                    "description": "billing_reason indicates why this invoice was created (subscription_cycle, manual, etc.)",
                    "type": "string"
                },
                "billing_sequence": {
                    "description": "billing_sequence is the optional sequence number for billing cycles",
                    "type": "integer"
                },
                "coupon_applications": {
                    "description": "coupon_applications contains the coupon applications associated with this invoice",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CouponApplicationResponse"
                    }
                },
                "created_at": {
                    "description": "created_at is the timestamp when this invoice was created",
                    "type": "string"
                },
                "created_by": {
                    "description": "created_by is the identifier of the user who created this invoice",
                    "type": "string"
                },
                "currency": {
                    "description": "currency is the three-letter ISO currency code (e.g., USD, EUR) for the invoice",
                    "type": "string"
                },
                "customer": {
                    "description": "customer contains the customer information associated with this invoice",
                    "$ref": "#/definitions/dto.CustomerResponse"
                },
                "customer_id": {
                    "description": "customer_id is the unique identifier of the customer this invoice belongs to",
                    "type": "string"
                },
                "description": {
                    "description": "description is the optional text description of the invoice",
                    "type": "string"
                },
                "due_date": {
                    "description": "due_date is the date by which payment is expected",
                    "type": "string"
                },
                "finalized_at": {
                    "description": "finalized_at is the timestamp when this invoice was finalized",
                    "type": "string"
                },
                "id": {
                    "description": "id is the unique identifier for this invoice",
                    "type": "string"
                },
                "idempotency_key": {
                    "description": "idempotency_key is the optional key used to prevent duplicate invoice creation",
                    "type": "string"
                },
                "invoice_number": {
                    "description": "invoice_number is the optional human-readable identifier for the invoice",
                    "type": "string"
                },
                "invoice_pdf_url": {
                    "description": "invoice_pdf_url is the optional URL to the PDF version of this invoice",
                    "type": "string"
                },
                "invoice_status": {
                    "description": "invoice_status represents the current status of the invoice (draft, finalized, etc.)",
                    "$ref": "#/definitions/types.InvoiceStatus"
                },
                "invoice_type": {
                    "description": "invoice_type indicates the type of invoice (subscription, one_time, etc.)",
                    "$ref": "#/definitions/types.InvoiceType"
                },
                "line_items": {
                    "description": "line_items contains the individual items that make up this invoice",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InvoiceLineItemResponse"
                    }
                },
                "metadata": {
                    "description": "metadata contains additional custom key-value pairs for storing extra information",
                    "$ref": "#/definitions/types.Metadata"
                },
                "paid_at": {
                    "description": "paid_at is the timestamp when this invoice was paid",
                    "type": "string"
                },
                "payment_status": {
                    "description": "payment_status represents the payment status of the invoice (unpaid, paid, etc.)",
                    "$ref": "#/definitions/types.PaymentStatus"
                },
                "period_end": {
                    "description": "period_end is the end date of the billing period",
                    "type": "string"
                },
                "period_start": {
                    "description": "period_start is the start date of the billing period",
                    "type": "string"
                },
                "status": {
                    "description": "status represents the current status of this invoice",
                    "type": "string"
                },
                "subscription": {
                    "description": "subscription contains the associated subscription information if requested",
                    "$ref": "#/definitions/dto.SubscriptionResponse"
                },
                "subscription_id": {
                    "description": "subscription_id is the optional unique identifier of the subscription associated with this invoice",
                    "type": "string"
                },
                "subtotal": {
                    "description": "subtotal is the amount before taxes and discounts are applied",
                    "type": "number"
                },
                "tenant_id": {
                    "description": "tenant_id is the unique identifier of the tenant this invoice belongs to",
                    "type": "string"
                },
                "total": {
                    "description": "total is the total amount of the invoice including taxes and discounts",
                    "type": "number"
                },
                "total_discount": {
                    "description": "total_discount is the total discount amount from coupon applications",
                    "type": "number"
                },
                "updated_at": {
                    "description": "updated_at is the timestamp when this invoice was last updated",
                    "type": "string"
                },
                "updated_by": {
                    "description": "updated_by is the identifier of the user who last updated this invoice",
                    "type": "string"
                },
                "version": {
                    "description": "version is the version number of this invoice",
                    "type": "integer"
                },
                "voided_at": {
                    "description": "voided_at is the timestamp when this invoice was voided",
                    "type": "string"
                }
            }
        },
        "dto.LinkedIntegrationsResponse": {
            "type": "object",
            "properties": {
                "providers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.ListCostSheetsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CostSheetResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListCouponsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CouponResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListCreditGrantsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreditGrantResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListCreditNotesResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreditNoteResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListCustomersResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CustomerResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListEntitlementsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EntitlementResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListEnvironmentsResponse": {
            "type": "object",
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EnvironmentResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListFeaturesResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FeatureResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListInvoicesResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InvoiceResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListPaymentsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PaymentResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListPlansResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PlanResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListPriceUnitsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceUnitResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListPricesResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListSecretsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SecretResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListSubscriptionPausesResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionPauseResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListSubscriptionsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListTasksResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TaskResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.ListWalletTransactionsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.WalletTransactionResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.MeterResponse": {
            "type": "object",
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/meter.Filter"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "type": "string",
                    "example": "API Usage Meter"
                },
                "reset_usage": {
                    "$ref": "#/definitions/types.ResetUsage"
                },
                "status": {
                    "type": "string",
                    "example": "published"
                },
                "tenant_id": {
                    "type": "string",
                    "example": "tenant123"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "dto.OverrideLineItemRequest": {
            "type": "object",
            "required": [
                "price_id"
            ],
            "properties": {
                "amount": {
                    "description": "Amount is the new price amount that overrides the original price (optional)",
                    "type": "number"
                },
                "price_id": {
                    "description": "PriceID references the plan price to override",
                    "type": "string"
                },
                "quantity": {
                    "description": "Quantity for this line item (optional)",
                    "type": "number"
                }
            }
        },
        "dto.PauseSubscriptionRequest": {
            "type": "object",
            "required": [
                "pause_mode"
            ],
            "properties": {
                "dry_run": {
                    "type": "boolean"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "pause_days": {
                    "type": "integer"
                },
                "pause_end": {
                    "type": "string"
                },
                "pause_mode": {
                    "$ref": "#/definitions/types.PauseMode"
                },
                "pause_start": {
                    "type": "string"
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.PaymentAttemptResponse": {
            "type": "object",
            "properties": {
                "attempt_number": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "payment_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.PaymentResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "attempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PaymentAttemptResponse"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "destination_id": {
                    "type": "string"
                },
                "destination_type": {
                    "$ref": "#/definitions/types.PaymentDestinationType"
                },
                "error_message": {
                    "type": "string"
                },
                "failed_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idempotency_key": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "payment_method_id": {
                    "type": "string"
                },
                "payment_method_type": {
                    "$ref": "#/definitions/types.PaymentMethodType"
                },
                "payment_status": {
                    "$ref": "#/definitions/types.PaymentStatus"
                },
                "refunded_at": {
                    "type": "string"
                },
                "succeeded_at": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "track_attempts": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.PlanResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "credit_grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreditGrantResponse"
                    }
                },
                "description": {
                    "type": "string"
                },
                "entitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EntitlementResponse"
                    }
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceResponse"
                    }
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.PriceResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount stored in main currency units (e.g., dollars, not cents)\nFor USD: 12.50 means $12.50",
                    "type": "number"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "description": "BillingPeriodCount is the count of the billing period ex 1, 3, 6, 12",
                    "type": "integer"
                },
                "conversion_rate": {
                    "description": "ConversionRate is the rate of the price unit to the base currency\nFor BTC: 1 BTC = 100000000 USD",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency 3 digit ISO currency code in lowercase ex usd, eur, gbp",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the price",
                    "type": "string"
                },
                "display_amount": {
                    "description": "DisplayAmount is the formatted amount with currency symbol\nFor USD: $12.50",
                    "type": "string"
                },
                "display_price_unit_amount": {
                    "description": "DisplayPriceUnitAmount is the formatted amount with price unit symbol\nFor BTC: 0.00000001 BTC",
                    "type": "string"
                },
                "environment_id": {
                    "description": "EnvironmentID is the environment identifier for the price",
                    "type": "string"
                },
                "id": {
                    "description": "ID uuid identifier for the price",
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "description": "LookupKey used for looking up the price in the database",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/price.JSONBMetadata"
                },
                "meter": {
                    "$ref": "#/definitions/dto.MeterResponse"
                },
                "meter_id": {
                    "description": "MeterID is the id of the meter for usage based pricing",
                    "type": "string"
                },
                "parent_price_id": {
                    "description": "ParentPriceID references the original price (only set when scope is SUBSCRIPTION)",
                    "type": "string"
                },
                "plan_id": {
                    "description": "PlanID is the id of the plan for plan based pricing",
                    "type": "string"
                },
                "price_unit": {
                    "description": "PriceUnit 3 digit ISO currency code in lowercase ex btc\nFor BTC: btc",
                    "type": "string"
                },
                "price_unit_amount": {
                    "description": "PriceUnitAmount is the amount stored in price unit\nFor BTC: 0.00000001 means 0.00000001 BTC",
                    "type": "number"
                },
                "price_unit_id": {
                    "description": "PriceUnitID is the id of the price unit",
                    "type": "string"
                },
                "price_unit_tiers": {
                    "description": "PriceUnitTiers are the tiers for the price unit",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "price_unit_type": {
                    "description": "PriceUnitType is the type of the price unit- Fiat, Custom, Crypto",
                    "$ref": "#/definitions/types.PriceUnitType"
                },
                "scope": {
                    "description": "Price override fields\nScope indicates if this is a plan-level or subscription-level price",
                    "$ref": "#/definitions/types.PriceScope"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "description": "SubscriptionID references the subscription (only set when scope is SUBSCRIPTION)",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.JSONBTransformQuantity"
                },
                "trial_period": {
                    "description": "TrialPeriod is the number of days for the trial period\nNote: This is only applicable for recurring prices (BILLING_CADENCE_RECURRING)",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.PriceUnitConfig": {
            "type": "object",
            "required": [
                "price_unit"
            ],
            "properties": {
                "amount": {
                    "type": "string"
                },
                "price_unit": {
                    "type": "string"
                },
                "price_unit_tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePriceTier"
                    }
                }
            }
        },
        "dto.PriceUnitResponse": {
            "type": "object",
            "properties": {
                "base_currency": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "conversion_rate": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "precision": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "symbol": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.ROIResponse": {
            "type": "object",
            "properties": {
                "cost": {
                    "description": "Cost and Revenue",
                    "type": "number"
                },
                "cost_breakdown": {
                    "description": "Cost breakdown by meter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CostBreakdownItem"
                    }
                },
                "markup": {
                    "description": "Markup (Revenue - Cost / Cost)",
                    "type": "number"
                },
                "markup_percentage": {
                    "type": "number"
                },
                "net_margin": {
                    "description": "Net Margin (ROI)",
                    "type": "number"
                },
                "net_margin_percentage": {
                    "type": "number"
                },
                "net_revenue": {
                    "description": "Net Revenue (Revenue - Cost)",
                    "type": "number"
                },
                "revenue": {
                    "type": "number"
                }
            }
        },
        "dto.ResumeSubscriptionRequest": {
            "type": "object",
            "required": [
                "resume_mode"
            ],
            "properties": {
                "dry_run": {
                    "type": "boolean"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resume_mode": {
                    "$ref": "#/definitions/types.ResumeMode"
                }
            }
        },
        "dto.SecretResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "display_id": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_used_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provider": {
                    "$ref": "#/definitions/types.SecretProvider"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "type": {
                    "$ref": "#/definitions/types.SecretType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.SignUpRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "tenant_name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionLineItemRequest": {
            "type": "object",
            "required": [
                "price_id",
                "quantity"
            ],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "price_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "dto.SubscriptionLineItemResponse": {
            "type": "object",
            "properties": {
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_display_name": {
                    "type": "string"
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_display_name": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "price_id": {
                    "type": "string"
                },
                "price_type": {
                    "$ref": "#/definitions/types.PriceType"
                },
                "price_unit": {
                    "type": "string"
                },
                "price_unit_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "trial_period": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionPauseResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "environment_id": {
                    "description": "EnvironmentID is the environment identifier for the pause",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the subscription pause",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "original_period_end": {
                    "description": "OriginalPeriodEnd is the end of the billing period when the pause was created",
                    "type": "string"
                },
                "original_period_start": {
                    "description": "OriginalPeriodStart is the start of the billing period when the pause was created",
                    "type": "string"
                },
                "pause_end": {
                    "description": "PauseEnd is when the pause will end (null for indefinite)",
                    "type": "string"
                },
                "pause_mode": {
                    "$ref": "#/definitions/types.PauseMode"
                },
                "pause_start": {
                    "description": "PauseStart is when the pause actually started",
                    "type": "string"
                },
                "pause_status": {
                    "$ref": "#/definitions/types.PauseStatus"
                },
                "reason": {
                    "description": "Reason is the reason for pausing",
                    "type": "string"
                },
                "resume_mode": {
                    "$ref": "#/definitions/types.ResumeMode"
                },
                "resumed_at": {
                    "description": "ResumedAt is when the pause was actually ended (if manually resumed)",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "description": "SubscriptionID is the identifier for the subscription",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionResponse": {
            "type": "object",
            "properties": {
                "active_pause_id": {
                    "description": "ActivePauseID references the current active pause configuration\nThis will be null if no pause is active or scheduled",
                    "type": "string"
                },
                "billing_anchor": {
                    "description": "BillingAnchor is the reference point that aligns future billing cycle dates.\nIt sets the day of week for week intervals, the day of month for month and year intervals,\nand the month of year for year intervals. The timestamp is in UTC format.",
                    "type": "string"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_cycle": {
                    "description": "BillingCycle is the cycle of the billing anchor.\nThis is used to determine the billing date for the subscription (i.e set the billing anchor)\nIf not set, the default value is anniversary. Possible values are anniversary and calendar.\nAnniversary billing means the billing anchor will be the start date of the subscription.\nCalendar billing means the billing anchor will be the appropriate date based on the billing period.\nFor example, if the billing period is month and the start date is 2025-04-15 then in case of\ncalendar billing the billing anchor will be 2025-05-01 vs 2025-04-15 for anniversary billing.",
                    "$ref": "#/definitions/types.BillingCycle"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "description": "BillingPeriodCount is the total number units of the billing period.",
                    "type": "integer"
                },
                "cancel_at": {
                    "description": "CancelAt is the date the subscription will be canceled",
                    "type": "string"
                },
                "cancel_at_period_end": {
                    "description": "CancelAtPeriodEnd is whether the subscription was canceled at the end of the current period",
                    "type": "boolean"
                },
                "cancelled_at": {
                    "description": "CanceledAt is the date the subscription was canceled",
                    "type": "string"
                },
                "commitment_amount": {
                    "description": "CommitmentAmount is the minimum amount a customer commits to paying for a billing period",
                    "type": "number"
                },
                "coupon_associations": {
                    "description": "CouponAssociations are the coupon associations for this subscription",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CouponAssociationResponse"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency is the currency of the subscription in lowercase 3 digit ISO codes",
                    "type": "string"
                },
                "current_period_end": {
                    "description": "CurrentPeriodEnd is the end of the current period that the subscription has been invoiced for.\nAt the end of this period, a new invoice will be created.",
                    "type": "string"
                },
                "current_period_start": {
                    "description": "CurrentPeriodStart is the end of the current period that the subscription has been invoiced for.\nAt the end of this period, a new invoice will be created.",
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/dto.CustomerResponse"
                },
                "customer_id": {
                    "description": "CustomerID is the identifier for the customer in our system",
                    "type": "string"
                },
                "end_date": {
                    "description": "EndDate is the end date of the subscription",
                    "type": "string"
                },
                "environment_id": {
                    "description": "EnvironmentID is the environment identifier for the subscription",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the subscription",
                    "type": "string"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/subscription.SubscriptionLineItem"
                    }
                },
                "lookup_key": {
                    "description": "LookupKey is the key used to lookup the subscription in our system",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "overage_factor": {
                    "description": "OverageFactor is a multiplier applied to usage beyond the commitment amount",
                    "type": "number"
                },
                "pause_status": {
                    "$ref": "#/definitions/types.PauseStatus"
                },
                "pauses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/subscription.SubscriptionPause"
                    }
                },
                "plan": {
                    "$ref": "#/definitions/dto.PlanResponse"
                },
                "plan_id": {
                    "description": "PlanID is the identifier for the plan in our system",
                    "type": "string"
                },
                "schedule": {
                    "description": "Schedule is included when the subscription has a schedule",
                    "$ref": "#/definitions/dto.SubscriptionScheduleResponse"
                },
                "start_date": {
                    "description": "StartDate is the start date of the subscription",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_status": {
                    "$ref": "#/definitions/types.SubscriptionStatus"
                },
                "tenant_id": {
                    "type": "string"
                },
                "trial_end": {
                    "description": "TrialEnd is the end date of the trial period",
                    "type": "string"
                },
                "trial_start": {
                    "description": "TrialStart is the start date of the trial period",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "version": {
                    "description": "Version is used for optimistic locking",
                    "type": "integer"
                }
            }
        },
        "dto.SubscriptionSchedulePhaseInput": {
            "type": "object",
            "required": [
                "start_date"
            ],
            "properties": {
                "billing_cycle": {
                    "$ref": "#/definitions/types.BillingCycle"
                },
                "commitment_amount": {
                    "type": "number"
                },
                "credit_grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateCreditGrantRequest"
                    }
                },
                "end_date": {
                    "type": "string"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionLineItemRequest"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "overage_factor": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionSchedulePhaseResponse": {
            "type": "object",
            "properties": {
                "commitment_amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "credit_grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreditGrantResponse"
                    }
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionLineItemResponse"
                    }
                },
                "overage_factor": {
                    "type": "number"
                },
                "phase_index": {
                    "type": "integer"
                },
                "schedule_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionScheduleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "current_phase_index": {
                    "type": "integer"
                },
                "end_behavior": {
                    "$ref": "#/definitions/types.ScheduleEndBehavior"
                },
                "id": {
                    "type": "string"
                },
                "phases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionSchedulePhaseResponse"
                    }
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.SubscriptionScheduleStatus"
                },
                "subscription_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionUsageByMetersResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "display_amount": {
                    "type": "string"
                },
                "filter_values": {
                    "$ref": "#/definitions/price.JSONBFilters"
                },
                "is_overage": {
                    "description": "Whether this charge is at overage rate",
                    "type": "boolean"
                },
                "meter_display_name": {
                    "type": "string"
                },
                "meter_id": {
                    "type": "string"
                },
                "overage_factor": {
                    "description": "Factor applied to this charge if in overage",
                    "type": "number"
                },
                "price": {
                    "$ref": "#/definitions/price.Price"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "dto.TaskResponse": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "entity_type": {
                    "$ref": "#/definitions/types.EntityType"
                },
                "error_summary": {
                    "type": "string"
                },
                "failed_at": {
                    "type": "string"
                },
                "failed_records": {
                    "type": "integer"
                },
                "file_name": {
                    "type": "string"
                },
                "file_type": {
                    "$ref": "#/definitions/types.FileType"
                },
                "file_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "processed_records": {
                    "type": "integer"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "successful_records": {
                    "type": "integer"
                },
                "task_status": {
                    "$ref": "#/definitions/types.TaskStatus"
                },
                "task_type": {
                    "$ref": "#/definitions/types.TaskType"
                },
                "tenant_id": {
                    "type": "string"
                },
                "total_records": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.TenantBillingDetails": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.Address"
                },
                "email": {
                    "type": "string"
                },
                "help_email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "dto.TenantBillingUsage": {
            "type": "object",
            "properties": {
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionResponse"
                    }
                },
                "usage": {
                    "$ref": "#/definitions/dto.CustomerUsageSummaryResponse"
                }
            }
        },
        "dto.TenantResponse": {
            "type": "object",
            "properties": {
                "billing_details": {
                    "$ref": "#/definitions/dto.TenantBillingDetails"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.Threshold": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "amount",
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "dto.TopUpWalletRequest": {
            "type": "object",
            "required": [
                "idempotency_key",
                "transaction_reason"
            ],
            "properties": {
                "amount": {
                    "description": "amount is the amount in the currency of the wallet to be added\nNOTE: this is not the number of credits to add, but the amount in the currency\namount = credits_to_add * conversion_rate\nif both amount and credits_to_add are provided, amount will be ignored\nex if the wallet has a conversion_rate of 2 then adding an amount of\n10 USD in the wallet wil add 5 credits in the wallet",
                    "type": "number"
                },
                "credits_to_add": {
                    "description": "credits_to_add is the number of credits to add to the wallet",
                    "type": "number"
                },
                "description": {
                    "description": "description to add any specific details about the transaction",
                    "type": "string"
                },
                "expiry_date_utc": {
                    "description": "expiry_date_utc is the expiry date in UTC timezone\nex 2025-01-01 00:00:00 UTC",
                    "type": "string"
                },
                "idempotency_key": {
                    "description": "idempotency_key is a unique key for the transaction",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata is a map of key-value pairs to store any additional information about the transaction",
                    "$ref": "#/definitions/types.Metadata"
                },
                "priority": {
                    "description": "priority is the priority of the transaction\nlower number means higher priority\ndefault is nil which means no priority at all",
                    "type": "integer"
                },
                "transaction_reason": {
                    "$ref": "#/definitions/types.TransactionReason"
                }
            }
        },
        "dto.UpdateCostSheetRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "ID of the costsheet to update",
                    "type": "string"
                },
                "status": {
                    "description": "Status updates the costsheet's status (optional)",
                    "type": "string"
                }
            }
        },
        "dto.UpdateCouponRequest": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateCreditGrantRequest": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateCustomerRequest": {
            "type": "object",
            "properties": {
                "address_city": {
                    "type": "string",
                    "maxLength": 100
                },
                "address_country": {
                    "type": "string"
                },
                "address_line1": {
                    "type": "string",
                    "maxLength": 255
                },
                "address_line2": {
                    "type": "string",
                    "maxLength": 255
                },
                "address_postal_code": {
                    "type": "string",
                    "maxLength": 20
                },
                "address_state": {
                    "type": "string",
                    "maxLength": 100
                },
                "email": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateEntitlementRequest": {
            "type": "object",
            "properties": {
                "is_enabled": {
                    "type": "boolean"
                },
                "is_soft_limit": {
                    "type": "boolean"
                },
                "static_value": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_reset_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                }
            }
        },
        "dto.UpdateEnvironmentRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateFeatureRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/meter.Filter"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "unit_plural": {
                    "type": "string"
                },
                "unit_singular": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateInvoiceRequest": {
            "type": "object",
            "properties": {
                "invoice_pdf_url": {
                    "description": "invoice_pdf_url is the URL where customers can download the PDF version of this invoice",
                    "type": "string"
                }
            }
        },
        "dto.UpdatePaymentRequest": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "payment_status": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePaymentStatusRequest": {
            "type": "object",
            "required": [
                "payment_status"
            ],
            "properties": {
                "amount": {
                    "description": "amount is the optional payment amount to record",
                    "type": "number"
                },
                "payment_status": {
                    "description": "payment_status is the new payment status to set for the invoice (paid, unpaid, etc.)",
                    "$ref": "#/definitions/types.PaymentStatus"
                }
            }
        },
        "dto.UpdatePlanCreditGrantRequest": {
            "type": "object",
            "required": [
                "cadence",
                "credits",
                "name",
                "scope"
            ],
            "properties": {
                "cadence": {
                    "$ref": "#/definitions/types.CreditGrantCadence"
                },
                "credits": {
                    "type": "number"
                },
                "expiration_duration": {
                    "type": "integer"
                },
                "expiration_duration_unit": {
                    "$ref": "#/definitions/types.CreditGrantExpiryDurationUnit"
                },
                "expiration_type": {
                    "$ref": "#/definitions/types.CreditGrantExpiryType"
                },
                "id": {
                    "description": "The ID of the credit grant to update (present if the credit grant is being updated)",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "period": {
                    "$ref": "#/definitions/types.CreditGrantPeriod"
                },
                "period_count": {
                    "type": "integer"
                },
                "plan_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "scope": {
                    "$ref": "#/definitions/types.CreditGrantScope"
                },
                "subscription_id": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePlanEntitlementRequest": {
            "type": "object",
            "required": [
                "feature_id",
                "feature_type"
            ],
            "properties": {
                "feature_id": {
                    "type": "string"
                },
                "feature_type": {
                    "$ref": "#/definitions/types.FeatureType"
                },
                "id": {
                    "description": "The ID of the entitlement to update (present if the entitlement is being updated)",
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "is_soft_limit": {
                    "type": "boolean"
                },
                "plan_id": {
                    "type": "string"
                },
                "static_value": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_reset_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                }
            }
        },
        "dto.UpdatePlanPriceRequest": {
            "type": "object",
            "required": [
                "billing_cadence",
                "billing_model",
                "billing_period",
                "billing_period_count",
                "currency",
                "invoice_cadence",
                "price_unit_type",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "string"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "filter_values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "id": {
                    "description": "The ID of the price to update (present if the price is being updated)",
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "price_unit_config": {
                    "$ref": "#/definitions/dto.PriceUnitConfig"
                },
                "price_unit_type": {
                    "$ref": "#/definitions/types.PriceUnitType"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "trial_period": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                }
            }
        },
        "dto.UpdatePlanRequest": {
            "type": "object",
            "properties": {
                "credit_grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UpdatePlanCreditGrantRequest"
                    }
                },
                "description": {
                    "type": "string"
                },
                "entitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UpdatePlanEntitlementRequest"
                    }
                },
                "lookup_key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UpdatePlanPriceRequest"
                    }
                }
            }
        },
        "dto.UpdatePriceRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.UpdatePriceUnitRequest": {
            "type": "object",
            "properties": {
                "conversion_rate": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "precision": {
                    "type": "integer",
                    "maximum": 8,
                    "minimum": 0
                },
                "symbol": {
                    "type": "string",
                    "maxLength": 10
                }
            }
        },
        "dto.UpdateTaskStatusRequest": {
            "type": "object",
            "required": [
                "task_status"
            ],
            "properties": {
                "task_status": {
                    "$ref": "#/definitions/types.TaskStatus"
                }
            }
        },
        "dto.UpdateTenantRequest": {
            "type": "object",
            "properties": {
                "billing_details": {
                    "$ref": "#/definitions/dto.TenantBillingDetails"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateWalletRequest": {
            "type": "object",
            "properties": {
                "alert_config": {
                    "$ref": "#/definitions/dto.AlertConfig"
                },
                "alert_enabled": {
                    "type": "boolean"
                },
                "auto_topup_amount": {
                    "type": "number"
                },
                "auto_topup_min_balance": {
                    "type": "number"
                },
                "auto_topup_trigger": {
                    "$ref": "#/definitions/types.AutoTopupTrigger"
                },
                "config": {
                    "$ref": "#/definitions/types.WalletConfig"
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UsageAnalyticItem": {
            "type": "object",
            "properties": {
                "aggregation_type": {
                    "$ref": "#/definitions/types.AggregationType"
                },
                "currency": {
                    "type": "string"
                },
                "event_count": {
                    "description": "Number of events that contributed to this aggregation",
                    "type": "integer"
                },
                "event_name": {
                    "type": "string"
                },
                "feature_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UsageAnalyticPoint"
                    }
                },
                "source": {
                    "type": "string"
                },
                "total_cost": {
                    "type": "number"
                },
                "total_usage": {
                    "type": "number"
                },
                "unit": {
                    "type": "string"
                },
                "unit_plural": {
                    "type": "string"
                }
            }
        },
        "dto.UsageAnalyticPoint": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number"
                },
                "event_count": {
                    "description": "Number of events in this time window",
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "usage": {
                    "type": "number"
                }
            }
        },
        "dto.UsageResult": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "number"
                },
                "window_size": {
                    "type": "string"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "tenant": {
                    "$ref": "#/definitions/dto.TenantResponse"
                }
            }
        },
        "dto.WalletBalanceResponse": {
            "type": "object",
            "properties": {
                "alert_config": {
                    "$ref": "#/definitions/types.AlertConfig"
                },
                "alert_enabled": {
                    "type": "boolean"
                },
                "alert_state": {
                    "type": "string"
                },
                "auto_topup_amount": {
                    "type": "number"
                },
                "auto_topup_min_balance": {
                    "type": "number"
                },
                "auto_topup_trigger": {
                    "$ref": "#/definitions/types.AutoTopupTrigger"
                },
                "balance": {
                    "type": "number"
                },
                "balance_updated_at": {
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/types.WalletConfig"
                },
                "conversion_rate": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "credit_balance": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "current_period_usage": {
                    "type": "number"
                },
                "customer_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "real_time_balance": {
                    "type": "number"
                },
                "real_time_credit_balance": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "unpaid_invoice_amount": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "wallet_status": {
                    "$ref": "#/definitions/types.WalletStatus"
                },
                "wallet_type": {
                    "$ref": "#/definitions/types.WalletType"
                }
            }
        },
        "dto.WalletResponse": {
            "type": "object",
            "properties": {
                "alert_config": {
                    "$ref": "#/definitions/types.AlertConfig"
                },
                "alert_enabled": {
                    "type": "boolean"
                },
                "alert_state": {
                    "type": "string"
                },
                "auto_topup_amount": {
                    "type": "number"
                },
                "auto_topup_min_balance": {
                    "type": "number"
                },
                "auto_topup_trigger": {
                    "$ref": "#/definitions/types.AutoTopupTrigger"
                },
                "balance": {
                    "type": "number"
                },
                "config": {
                    "$ref": "#/definitions/types.WalletConfig"
                },
                "conversion_rate": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "credit_balance": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_status": {
                    "$ref": "#/definitions/types.WalletStatus"
                },
                "wallet_type": {
                    "$ref": "#/definitions/types.WalletType"
                }
            }
        },
        "dto.WalletTransactionResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "credit_amount": {
                    "type": "number"
                },
                "credit_balance_after": {
                    "type": "number"
                },
                "credit_balance_before": {
                    "type": "number"
                },
                "credits_available": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "expiry_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "priority": {
                    "type": "integer"
                },
                "reference_id": {
                    "type": "string"
                },
                "reference_type": {
                    "$ref": "#/definitions/types.WalletTxReferenceType"
                },
                "transaction_reason": {
                    "$ref": "#/definitions/types.TransactionReason"
                },
                "transaction_status": {
                    "$ref": "#/definitions/types.TransactionStatus"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "errors.ErrorDetail": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "internal_error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "errors.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/errors.ErrorDetail"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "github_com_flexprice_flexprice_internal_types.Value": {
            "type": "object",
            "properties": {
                "array": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "boolean": {
                    "type": "boolean"
                },
                "date": {
                    "type": "string"
                },
                "number": {
                    "type": "number"
                },
                "string": {
                    "type": "string"
                }
            }
        },
        "meter.Aggregation": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field is the key in $event.properties on which the aggregation is to be applied\nFor ex if the aggregation type is sum for API usage, the field could be \"duration_ms\"",
                    "type": "string"
                },
                "multiplier": {
                    "description": "Multiplier is the multiplier for the aggregation\nFor ex if the aggregation type is sum_with_multiplier for API usage, the multiplier could be 1000\nto scale up by a factor of 1000",
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/types.AggregationType"
                }
            }
        },
        "meter.Filter": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Key is the key for the filter from $event.properties\nCurrently we support only first level keys in the properties and not nested keys",
                    "type": "string"
                },
                "values": {
                    "description": "Values are the possible values for the filter to be considered for the meter\nFor ex \"model_name\" could have values \"o1-mini\", \"gpt-4o\" etc",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "price.JSONBFilters": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "price.JSONBMetadata": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "price.JSONBTransformQuantity": {
            "type": "object",
            "properties": {
                "divide_by": {
                    "description": "Divide quantity by this number",
                    "type": "integer"
                },
                "round": {
                    "description": "up or down",
                    "type": "string"
                }
            }
        },
        "price.Price": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount stored in main currency units (e.g., dollars, not cents)\nFor USD: 12.50 means $12.50",
                    "type": "number"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "description": "BillingPeriodCount is the count of the billing period ex 1, 3, 6, 12",
                    "type": "integer"
                },
                "conversion_rate": {
                    "description": "ConversionRate is the rate of the price unit to the base currency\nFor BTC: 1 BTC = 100000000 USD",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency 3 digit ISO currency code in lowercase ex usd, eur, gbp",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the price",
                    "type": "string"
                },
                "display_amount": {
                    "description": "DisplayAmount is the formatted amount with currency symbol\nFor USD: $12.50",
                    "type": "string"
                },
                "display_price_unit_amount": {
                    "description": "DisplayPriceUnitAmount is the formatted amount with price unit symbol\nFor BTC: 0.00000001 BTC",
                    "type": "string"
                },
                "environment_id": {
                    "description": "EnvironmentID is the environment identifier for the price",
                    "type": "string"
                },
                "id": {
                    "description": "ID uuid identifier for the price",
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "description": "LookupKey used for looking up the price in the database",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/price.JSONBMetadata"
                },
                "meter_id": {
                    "description": "MeterID is the id of the meter for usage based pricing",
                    "type": "string"
                },
                "parent_price_id": {
                    "description": "ParentPriceID references the original price (only set when scope is SUBSCRIPTION)",
                    "type": "string"
                },
                "plan_id": {
                    "description": "PlanID is the id of the plan for plan based pricing",
                    "type": "string"
                },
                "price_unit": {
                    "description": "PriceUnit 3 digit ISO currency code in lowercase ex btc\nFor BTC: btc",
                    "type": "string"
                },
                "price_unit_amount": {
                    "description": "PriceUnitAmount is the amount stored in price unit\nFor BTC: 0.00000001 means 0.00000001 BTC",
                    "type": "number"
                },
                "price_unit_id": {
                    "description": "PriceUnitID is the id of the price unit",
                    "type": "string"
                },
                "price_unit_tiers": {
                    "description": "PriceUnitTiers are the tiers for the price unit",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "price_unit_type": {
                    "description": "PriceUnitType is the type of the price unit- Fiat, Custom, Crypto",
                    "$ref": "#/definitions/types.PriceUnitType"
                },
                "scope": {
                    "description": "Price override fields\nScope indicates if this is a plan-level or subscription-level price",
                    "$ref": "#/definitions/types.PriceScope"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "description": "SubscriptionID references the subscription (only set when scope is SUBSCRIPTION)",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.JSONBTransformQuantity"
                },
                "trial_period": {
                    "description": "TrialPeriod is the number of days for the trial period\nNote: This is only applicable for recurring prices (BILLING_CADENCE_RECURRING)",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "price.PriceTier": {
            "type": "object",
            "properties": {
                "flat_amount": {
                    "description": "FlatAmount is the flat amount for the given tier and it is applied\non top of the unit amount*quantity. It solves cases in banking like 2.7% + 5c",
                    "type": "number"
                },
                "unit_amount": {
                    "description": "UnitAmount is the amount per unit for the given tier",
                    "type": "number"
                },
                "up_to": {
                    "description": "Upto is the quantity up to which this tier applies. It is null for the last tier",
                    "type": "integer"
                }
            }
        },
        "price.TransformQuantity": {
            "type": "object",
            "properties": {
                "divide_by": {
                    "description": "Divide quantity by this number",
                    "type": "integer"
                },
                "round": {
                    "description": "up or down",
                    "type": "string"
                }
            }
        },
        "service.SyncPlanPricesResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "plan_name": {
                    "type": "string"
                },
                "synchronization_summary": {
                    "type": "object",
                    "properties": {
                        "prices_added": {
                            "type": "integer"
                        },
                        "prices_removed": {
                            "type": "integer"
                        },
                        "prices_skipped": {
                            "type": "integer"
                        },
                        "subscriptions_processed": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "subscription.SubscriptionLineItem": {
            "type": "object",
            "properties": {
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "environment_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_display_name": {
                    "type": "string"
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_display_name": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "price_id": {
                    "type": "string"
                },
                "price_type": {
                    "$ref": "#/definitions/types.PriceType"
                },
                "price_unit": {
                    "type": "string"
                },
                "price_unit_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "trial_period": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "subscription.SubscriptionPause": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "environment_id": {
                    "description": "EnvironmentID is the environment identifier for the pause",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the subscription pause",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "original_period_end": {
                    "description": "OriginalPeriodEnd is the end of the billing period when the pause was created",
                    "type": "string"
                },
                "original_period_start": {
                    "description": "OriginalPeriodStart is the start of the billing period when the pause was created",
                    "type": "string"
                },
                "pause_end": {
                    "description": "PauseEnd is when the pause will end (null for indefinite)",
                    "type": "string"
                },
                "pause_mode": {
                    "$ref": "#/definitions/types.PauseMode"
                },
                "pause_start": {
                    "description": "PauseStart is when the pause actually started",
                    "type": "string"
                },
                "pause_status": {
                    "$ref": "#/definitions/types.PauseStatus"
                },
                "reason": {
                    "description": "Reason is the reason for pausing",
                    "type": "string"
                },
                "resume_mode": {
                    "$ref": "#/definitions/types.ResumeMode"
                },
                "resumed_at": {
                    "description": "ResumedAt is when the pause was actually ended (if manually resumed)",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "description": "SubscriptionID is the identifier for the subscription",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "types.AggregationType": {
            "type": "string",
            "enum": [
                "COUNT",
                "SUM",
                "AVG",
                "COUNT_UNIQUE",
                "LATEST",
                "SUM_WITH_MULTIPLIER"
            ],
            "x-enum-comments": {
                "AggregationSumWithMultiplier": "Sum with a multiplier - [sum(value) * multiplier]"
            },
            "x-enum-descriptions": [
                "",
                "",
                "",
                "",
                "",
                "Sum with a multiplier - [sum(value) * multiplier]"
            ],
            "x-enum-varnames": [
                "AggregationCount",
                "AggregationSum",
                "AggregationAvg",
                "AggregationCountUnique",
                "AggregationLatest",
                "AggregationSumWithMultiplier"
            ]
        },
        "types.AlertConfig": {
            "type": "object",
            "properties": {
                "threshold": {
                    "$ref": "#/definitions/types.AlertThreshold"
                }
            }
        },
        "types.AlertThreshold": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "amount",
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "types.AutoTopupTrigger": {
            "type": "string",
            "enum": [
                "disabled",
                "balance_below_threshold"
            ],
            "x-enum-varnames": [
                "AutoTopupTriggerDisabled",
                "AutoTopupTriggerBalanceBelowThreshold"
            ]
        },
        "types.BillingCadence": {
            "type": "string",
            "enum": [
                "RECURRING",
                "ONETIME"
            ],
            "x-enum-varnames": [
                "BILLING_CADENCE_RECURRING",
                "BILLING_CADENCE_ONETIME"
            ]
        },
        "types.BillingCycle": {
            "type": "string",
            "enum": [
                "anniversary",
                "calendar"
            ],
            "x-enum-varnames": [
                "BillingCycleAnniversary",
                "BillingCycleCalendar"
            ]
        },
        "types.BillingModel": {
            "type": "string",
            "enum": [
                "FLAT_FEE",
                "PACKAGE",
                "TIERED"
            ],
            "x-enum-varnames": [
                "BILLING_MODEL_FLAT_FEE",
                "BILLING_MODEL_PACKAGE",
                "BILLING_MODEL_TIERED"
            ]
        },
        "types.BillingPeriod": {
            "type": "string",
            "enum": [
                "MONTHLY",
                "ANNUAL",
                "WEEKLY",
                "DAILY",
                "QUARTERLY",
                "HALF_YEARLY"
            ],
            "x-enum-varnames": [
                "BILLING_PERIOD_MONTHLY",
                "BILLING_PERIOD_ANNUAL",
                "BILLING_PERIOD_WEEKLY",
                "BILLING_PERIOD_DAILY",
                "BILLING_PERIOD_QUARTER",
                "BILLING_PERIOD_HALF_YEAR"
            ]
        },
        "types.BillingTier": {
            "type": "string",
            "enum": [
                "VOLUME",
                "SLAB"
            ],
            "x-enum-varnames": [
                "BILLING_TIER_VOLUME",
                "BILLING_TIER_SLAB"
            ]
        },
        "types.CouponCadence": {
            "type": "string",
            "enum": [
                "once",
                "repeated",
                "forever"
            ],
            "x-enum-varnames": [
                "CouponCadenceOnce",
                "CouponCadenceRepeated",
                "CouponCadenceForever"
            ]
        },
        "types.CouponType": {
            "type": "string",
            "enum": [
                "fixed",
                "percentage"
            ],
            "x-enum-varnames": [
                "CouponTypeFixed",
                "CouponTypePercentage"
            ]
        },
        "types.CreditGrantCadence": {
            "type": "string",
            "enum": [
                "ONETIME",
                "RECURRING"
            ],
            "x-enum-varnames": [
                "CreditGrantCadenceOneTime",
                "CreditGrantCadenceRecurring"
            ]
        },
        "types.CreditGrantExpiryDurationUnit": {
            "type": "string",
            "enum": [
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
            ],
            "x-enum-varnames": [
                "CreditGrantExpiryDurationUnitDays",
                "CreditGrantExpiryDurationUnitWeeks",
                "CreditGrantExpiryDurationUnitMonths",
                "CreditGrantExpiryDurationUnitYears"
            ]
        },
        "types.CreditGrantExpiryType": {
            "type": "string",
            "enum": [
                "NEVER",
                "DURATION",
                "BILLING_CYCLE"
            ],
            "x-enum-varnames": [
                "CreditGrantExpiryTypeNever",
                "CreditGrantExpiryTypeDuration",
                "CreditGrantExpiryTypeBillingCycle"
            ]
        },
        "types.CreditGrantPeriod": {
            "type": "string",
            "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "ANNUAL",
                "QUARTERLY",
                "HALF_YEARLY"
            ],
            "x-enum-varnames": [
                "CREDIT_GRANT_PERIOD_DAILY",
                "CREDIT_GRANT_PERIOD_WEEKLY",
                "CREDIT_GRANT_PERIOD_MONTHLY",
                "CREDIT_GRANT_PERIOD_ANNUAL",
                "CREDIT_GRANT_PERIOD_QUARTER",
                "CREDIT_GRANT_PERIOD_HALF_YEARLY"
            ]
        },
        "types.CreditGrantScope": {
            "type": "string",
            "enum": [
                "PLAN",
                "SUBSCRIPTION"
            ],
            "x-enum-varnames": [
                "CreditGrantScopePlan",
                "CreditGrantScopeSubscription"
            ]
        },
        "types.CreditNoteReason": {
            "type": "string",
            "enum": [
                "DUPLICATE",
                "FRAUDULENT",
                "ORDER_CHANGE",
                "UNSATISFACTORY",
                "SERVICE_ISSUE",
                "BILLING_ERROR",
                "SUBSCRIPTION_CANCELLATION"
            ],
            "x-enum-varnames": [
                "CreditNoteReasonDuplicate",
                "CreditNoteReasonFraudulent",
                "CreditNoteReasonOrderChange",
                "CreditNoteReasonUnsatisfactory",
                "CreditNoteReasonService",
                "CreditNoteReasonBillingError",
                "CreditNoteReasonSubscriptionCancellation"
            ]
        },
        "types.CreditNoteStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "FINALIZED",
                "VOIDED"
            ],
            "x-enum-varnames": [
                "CreditNoteStatusDraft",
                "CreditNoteStatusFinalized",
                "CreditNoteStatusVoided"
            ]
        },
        "types.CreditNoteType": {
            "type": "string",
            "enum": [
                "ADJUSTMENT",
                "REFUND"
            ],
            "x-enum-varnames": [
                "CreditNoteTypeAdjustment",
                "CreditNoteTypeRefund"
            ]
        },
        "types.CustomerFilter": {
            "type": "object",
            "properties": {
                "customer_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "expand": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "external_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.FilterCondition"
                    }
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SortCondition"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                }
            }
        },
        "types.DataType": {
            "type": "string",
            "enum": [
                "string",
                "number",
                "date",
                "array"
            ],
            "x-enum-varnames": [
                "DataTypeString",
                "DataTypeNumber",
                "DataTypeDate",
                "DataTypeArray"
            ]
        },
        "types.EntitlementFilter": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "expand": {
                    "type": "string"
                },
                "feature_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "feature_type": {
                    "$ref": "#/definitions/types.FeatureType"
                },
                "filters": {
                    "description": "Specific filters for entitlements",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.FilterCondition"
                    }
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "plan_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SortCondition"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                }
            }
        },
        "types.EntityType": {
            "type": "string",
            "enum": [
                "EVENTS",
                "PRICES",
                "CUSTOMERS"
            ],
            "x-enum-varnames": [
                "EntityTypeEvents",
                "EntityTypePrices",
                "EntityTypeCustomers"
            ]
        },
        "types.FeatureFilter": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "expand": {
                    "type": "string"
                },
                "feature_ids": {
                    "description": "Feature specific filters",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "filters allows complex filtering based on multiple fields",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.FilterCondition"
                    }
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "lookup_key": {
                    "type": "string"
                },
                "meter_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name_contains": {
                    "type": "string"
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SortCondition"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                }
            }
        },
        "types.FeatureType": {
            "type": "string",
            "enum": [
                "metered",
                "boolean",
                "static"
            ],
            "x-enum-varnames": [
                "FeatureTypeMetered",
                "FeatureTypeBoolean",
                "FeatureTypeStatic"
            ]
        },
        "types.FileType": {
            "type": "string",
            "enum": [
                "CSV",
                "JSON"
            ],
            "x-enum-varnames": [
                "FileTypeCSV",
                "FileTypeJSON"
            ]
        },
        "types.FilterCondition": {
            "type": "object",
            "properties": {
                "data_type": {
                    "$ref": "#/definitions/types.DataType"
                },
                "field": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/types.FilterOperatorType"
                },
                "value": {
                    "$ref": "#/definitions/github_com_flexprice_flexprice_internal_types.Value"
                }
            }
        },
        "types.FilterOperatorType": {
            "type": "string",
            "enum": [
                "eq",
                "contains",
                "gt",
                "lt",
                "in",
                "not_in",
                "before",
                "after"
            ],
            "x-enum-varnames": [
                "EQUAL",
                "CONTAINS",
                "GREATER_THAN",
                "LESS_THAN",
                "IN",
                "NOT_IN",
                "BEFORE",
                "AFTER"
            ]
        },
        "types.InvoiceBillingReason": {
            "type": "string",
            "enum": [
                "SUBSCRIPTION_CREATE",
                "SUBSCRIPTION_CYCLE",
                "SUBSCRIPTION_UPDATE",
                "MANUAL"
            ],
            "x-enum-varnames": [
                "InvoiceBillingReasonSubscriptionCreate",
                "InvoiceBillingReasonSubscriptionCycle",
                "InvoiceBillingReasonSubscriptionUpdate",
                "InvoiceBillingReasonManual"
            ]
        },
        "types.InvoiceCadence": {
            "type": "string",
            "enum": [
                "ARREAR",
                "ADVANCE"
            ],
            "x-enum-varnames": [
                "InvoiceCadenceArrear",
                "InvoiceCadenceAdvance"
            ]
        },
        "types.InvoiceFilter": {
            "type": "object",
            "properties": {
                "amount_due_gt": {
                    "description": "amount_due_gt filters invoices with a total amount due greater than the specified value\nUseful for finding invoices above a certain threshold or identifying high-value invoices",
                    "type": "number"
                },
                "amount_remaining_gt": {
                    "description": "amount_remaining_gt filters invoices with an outstanding balance greater than the specified value\nUseful for finding invoices that still have significant unpaid amounts",
                    "type": "number"
                },
                "customer_id": {
                    "description": "customer_id filters invoices for a specific customer using FlexPrice's internal customer ID\nThis is the ID returned by FlexPrice when creating or retrieving customers",
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "expand": {
                    "type": "string"
                },
                "external_customer_id": {
                    "description": "external_customer_id filters invoices for a customer using your system's customer identifier\nThis is the ID you provided when creating the customer in FlexPrice",
                    "type": "string"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.FilterCondition"
                    }
                },
                "invoice_ids": {
                    "description": "invoice_ids restricts results to invoices with the specified IDs\nUse this to retrieve specific invoices when you know their exact identifiers",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "invoice_status": {
                    "description": "invoice_status filters by the current state of invoices in their lifecycle\nMultiple statuses can be specified to include invoices in any of the listed states",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.InvoiceStatus"
                    }
                },
                "invoice_type": {
                    "description": "invoice_type filters by the nature of the invoice (SUBSCRIPTION, ONE_OFF, or CREDIT)\nUse this to separate recurring charges from one-time fees or credit adjustments",
                    "$ref": "#/definitions/types.InvoiceType"
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "payment_status": {
                    "description": "payment_status filters by the payment state of invoices\nMultiple statuses can be specified to include invoices with any of the listed payment states",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.PaymentStatus"
                    }
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SortCondition"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_id": {
                    "description": "subscription_id filters invoices generated for a specific subscription\nOnly returns invoices that were created as part of the specified subscription's billing",
                    "type": "string"
                }
            }
        },
        "types.InvoiceStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "FINALIZED",
                "VOIDED"
            ],
            "x-enum-varnames": [
                "InvoiceStatusDraft",
                "InvoiceStatusFinalized",
                "InvoiceStatusVoided"
            ]
        },
        "types.InvoiceType": {
            "type": "string",
            "enum": [
                "SUBSCRIPTION",
                "ONE_OFF",
                "CREDIT"
            ],
            "x-enum-varnames": [
                "InvoiceTypeSubscription",
                "InvoiceTypeOneOff",
                "InvoiceTypeCredit"
            ]
        },
        "types.Metadata": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "types.PaginationResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "types.PauseMode": {
            "type": "string",
            "enum": [
                "immediate",
                "scheduled",
                "period_end"
            ],
            "x-enum-varnames": [
                "PauseModeImmediate",
                "PauseModeScheduled",
                "PauseModePeriodEnd"
            ]
        },
        "types.PauseStatus": {
            "type": "string",
            "enum": [
                "none",
                "active",
                "scheduled",
                "completed",
                "cancelled"
            ],
            "x-enum-varnames": [
                "PauseStatusNone",
                "PauseStatusActive",
                "PauseStatusScheduled",
                "PauseStatusCompleted",
                "PauseStatusCancelled"
            ]
        },
        "types.PaymentDestinationType": {
            "type": "string",
            "enum": [
                "INVOICE"
            ],
            "x-enum-varnames": [
                "PaymentDestinationTypeInvoice"
            ]
        },
        "types.PaymentMethodType": {
            "type": "string",
            "enum": [
                "CARD",
                "ACH",
                "OFFLINE",
                "CREDITS"
            ],
            "x-enum-varnames": [
                "PaymentMethodTypeCard",
                "PaymentMethodTypeACH",
                "PaymentMethodTypeOffline",
                "PaymentMethodTypeCredits"
            ]
        },
        "types.PaymentStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "SUCCEEDED",
                "FAILED",
                "REFUNDED",
                "PARTIALLY_REFUNDED"
            ],
            "x-enum-varnames": [
                "PaymentStatusPending",
                "PaymentStatusProcessing",
                "PaymentStatusSucceeded",
                "PaymentStatusFailed",
                "PaymentStatusRefunded",
                "PaymentStatusPartiallyRefunded"
            ]
        },
        "types.PlanFilter": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "expand": {
                    "type": "string"
                },
                "filters": {
                    "description": "filters allows complex filtering based on multiple fields",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.FilterCondition"
                    }
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "plan_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SortCondition"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                }
            }
        },
        "types.PriceScope": {
            "type": "string",
            "enum": [
                "PLAN",
                "SUBSCRIPTION"
            ],
            "x-enum-varnames": [
                "PRICE_SCOPE_PLAN",
                "PRICE_SCOPE_SUBSCRIPTION"
            ]
        },
        "types.PriceType": {
            "type": "string",
            "enum": [
                "USAGE",
                "FIXED"
            ],
            "x-enum-varnames": [
                "PRICE_TYPE_USAGE",
                "PRICE_TYPE_FIXED"
            ]
        },
        "types.PriceUnitType": {
            "type": "string",
            "enum": [
                "FIAT",
                "CUSTOM"
            ],
            "x-enum-varnames": [
                "PRICE_UNIT_TYPE_FIAT",
                "PRICE_UNIT_TYPE_CUSTOM"
            ]
        },
        "types.QueryFilter": {
            "type": "object",
            "properties": {
                "expand": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "sort": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                }
            }
        },
        "types.ResetUsage": {
            "type": "string",
            "enum": [
                "BILLING_PERIOD",
                "NEVER"
            ],
            "x-enum-varnames": [
                "ResetUsageBillingPeriod",
                "ResetUsageNever"
            ]
        },
        "types.ResumeMode": {
            "type": "string",
            "enum": [
                "immediate",
                "scheduled",
                "auto"
            ],
            "x-enum-varnames": [
                "ResumeModeImmediate",
                "ResumeModeScheduled",
                "ResumeModeAuto"
            ]
        },
        "types.ScheduleEndBehavior": {
            "type": "string",
            "enum": [
                "RELEASE",
                "CANCEL"
            ],
            "x-enum-varnames": [
                "EndBehaviorRelease",
                "EndBehaviorCancel"
            ]
        },
        "types.SecretProvider": {
            "type": "string",
            "enum": [
                "flexprice",
                "stripe",
                "razorpay"
            ],
            "x-enum-varnames": [
                "SecretProviderFlexPrice",
                "SecretProviderStripe",
                "SecretProviderRazorpay"
            ]
        },
        "types.SecretType": {
            "type": "string",
            "enum": [
                "private_key",
                "publishable_key",
                "integration"
            ],
            "x-enum-varnames": [
                "SecretTypePrivateKey",
                "SecretTypePublishableKey",
                "SecretTypeIntegration"
            ]
        },
        "types.SortCondition": {
            "type": "object",
            "properties": {
                "direction": {
                    "$ref": "#/definitions/types.SortDirection"
                },
                "field": {
                    "type": "string"
                }
            }
        },
        "types.SortDirection": {
            "type": "string",
            "enum": [
                "asc",
                "desc"
            ],
            "x-enum-varnames": [
                "SortDirectionAsc",
                "SortDirectionDesc"
            ]
        },
        "types.Status": {
            "type": "string",
            "enum": [
                "published",
                "deleted",
                "archived"
            ],
            "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
            ]
        },
        "types.SubscriptionFilter": {
            "type": "object",
            "properties": {
                "active_at": {
                    "description": "ActiveAt filters subscriptions that are active at the given time",
                    "type": "string"
                },
                "billing_cadence": {
                    "description": "BillingCadence filters by billing cadence",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BillingCadence"
                    }
                },
                "billing_period": {
                    "description": "BillingPeriod filters by billing period",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BillingPeriod"
                    }
                },
                "customer_id": {
                    "description": "CustomerID filters by customer ID",
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "expand": {
                    "type": "string"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.FilterCondition"
                    }
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "plan_id": {
                    "description": "PlanID filters by plan ID",
                    "type": "string"
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SortCondition"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subscription_status": {
                    "description": "SubscriptionStatus filters by subscription status",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SubscriptionStatus"
                    }
                },
                "with_line_items": {
                    "description": "WithLineItems includes line items in the response",
                    "type": "boolean"
                }
            }
        },
        "types.SubscriptionScheduleStatus": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "RELEASED",
                "CANCELED"
            ],
            "x-enum-varnames": [
                "ScheduleStatusActive",
                "ScheduleStatusReleased",
                "ScheduleStatusCanceled"
            ]
        },
        "types.SubscriptionStatus": {
            "type": "string",
            "enum": [
                "active",
                "paused",
                "cancelled",
                "incomplete",
                "incomplete_expired",
                "past_due",
                "trialing",
                "unpaid"
            ],
            "x-enum-varnames": [
                "SubscriptionStatusActive",
                "SubscriptionStatusPaused",
                "SubscriptionStatusCancelled",
                "SubscriptionStatusIncomplete",
                "SubscriptionStatusIncompleteExpired",
                "SubscriptionStatusPastDue",
                "SubscriptionStatusTrialing",
                "SubscriptionStatusUnpaid"
            ]
        },
        "types.TaskStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED"
            ],
            "x-enum-varnames": [
                "TaskStatusPending",
                "TaskStatusProcessing",
                "TaskStatusCompleted",
                "TaskStatusFailed"
            ]
        },
        "types.TaskType": {
            "type": "string",
            "enum": [
                "IMPORT",
                "EXPORT"
            ],
            "x-enum-varnames": [
                "TaskTypeImport",
                "TaskTypeExport"
            ]
        },
        "types.TimeRangeFilter": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "types.TransactionReason": {
            "type": "string",
            "enum": [
                "INVOICE_PAYMENT",
                "FREE_CREDIT_GRANT",
                "SUBSCRIPTION_CREDIT_GRANT",
                "PURCHASED_CREDIT_INVOICED",
                "PURCHASED_CREDIT_DIRECT",
                "CREDIT_NOTE",
                "CREDIT_EXPIRED",
                "WALLET_TERMINATION"
            ],
            "x-enum-varnames": [
                "TransactionReasonInvoicePayment",
                "TransactionReasonFreeCredit",
                "TransactionReasonSubscriptionCredit",
                "TransactionReasonPurchasedCreditInvoiced",
                "TransactionReasonPurchasedCreditDirect",
                "TransactionReasonCreditNote",
                "TransactionReasonCreditExpired",
                "TransactionReasonWalletTermination"
            ]
        },
        "types.TransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "TransactionStatusPending",
                "TransactionStatusCompleted",
                "TransactionStatusFailed"
            ]
        },
        "types.TransactionType": {
            "type": "string",
            "enum": [
                "credit",
                "debit"
            ],
            "x-enum-varnames": [
                "TransactionTypeCredit",
                "TransactionTypeDebit"
            ]
        },
        "types.WalletConfig": {
            "type": "object",
            "properties": {
                "allowed_price_types": {
                    "description": "AllowedPriceTypes is a list of price types that are allowed for the wallet\nnil means all price types are allowed",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.WalletConfigPriceType"
                    }
                }
            }
        },
        "types.WalletConfigPriceType": {
            "type": "string",
            "enum": [
                "ALL",
                "USAGE",
                "FIXED"
            ],
            "x-enum-varnames": [
                "WalletConfigPriceTypeAll",
                "WalletConfigPriceTypeUsage",
                "WalletConfigPriceTypeFixed"
            ]
        },
        "types.WalletStatus": {
            "type": "string",
            "enum": [
                "active",
                "frozen",
                "closed"
            ],
            "x-enum-varnames": [
                "WalletStatusActive",
                "WalletStatusFrozen",
                "WalletStatusClosed"
            ]
        },
        "types.WalletTxReferenceType": {
            "type": "string",
            "enum": [
                "PAYMENT",
                "EXTERNAL",
                "REQUEST"
            ],
            "x-enum-varnames": [
                "WalletTxReferenceTypePayment",
                "WalletTxReferenceTypeExternal",
                "WalletTxReferenceTypeRequest"
            ]
        },
        "types.WalletType": {
            "type": "string",
            "enum": [
                "PROMOTIONAL",
                "PRE_PAID"
            ],
            "x-enum-varnames": [
                "WalletTypePromotional",
                "WalletTypePrePaid"
            ]
        },
        "types.WindowSize": {
            "type": "string",
            "enum": [
                "MINUTE",
                "15MIN",
                "30MIN",
                "HOUR",
                "3HOUR",
                "6HOUR",
                "12HOUR",
                "DAY",
                "WEEK"
            ],
            "x-enum-varnames": [
                "WindowSizeMinute",
                "WindowSize15Min",
                "WindowSize30Min",
                "WindowSizeHour",
                "WindowSize3Hour",
                "WindowSize6Hour",
                "WindowSize12Hour",
                "WindowSizeDay",
                "WindowSizeWeek"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Enter your API key in the format *x-api-key \u0026lt;api-key\u0026gt;**",
            "type": "apiKey",
            "name": "x-api-key",
            "in": "header"
        }
    }
}