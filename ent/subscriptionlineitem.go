// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
	"github.com/shopspring/decimal"
)

// SubscriptionLineItem is the model entity for the SubscriptionLineItem schema.
type SubscriptionLineItem struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// PlanID holds the value of the "plan_id" field.
	PlanID *string `json:"plan_id,omitempty"`
	// PlanDisplayName holds the value of the "plan_display_name" field.
	PlanDisplayName *string `json:"plan_display_name,omitempty"`
	// PriceID holds the value of the "price_id" field.
	PriceID string `json:"price_id,omitempty"`
	// PriceType holds the value of the "price_type" field.
	PriceType *string `json:"price_type,omitempty"`
	// MeterID holds the value of the "meter_id" field.
	MeterID *string `json:"meter_id,omitempty"`
	// MeterDisplayName holds the value of the "meter_display_name" field.
	MeterDisplayName *string `json:"meter_display_name,omitempty"`
	// PriceUnitID holds the value of the "price_unit_id" field.
	PriceUnitID *string `json:"price_unit_id,omitempty"`
	// PriceUnit holds the value of the "price_unit" field.
	PriceUnit *string `json:"price_unit,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName *string `json:"display_name,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity decimal.Decimal `json:"quantity,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// BillingPeriod holds the value of the "billing_period" field.
	BillingPeriod string `json:"billing_period,omitempty"`
	// InvoiceCadence holds the value of the "invoice_cadence" field.
	InvoiceCadence string `json:"invoice_cadence,omitempty"`
	// TrialPeriod holds the value of the "trial_period" field.
	TrialPeriod int `json:"trial_period,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate *time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionLineItemQuery when eager-loading is set.
	Edges        SubscriptionLineItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionLineItemEdges holds the relations/edges for other nodes in the graph.
type SubscriptionLineItemEdges struct {
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// Subscription line item can have multiple coupon associations
	CouponAssociations []*CouponAssociation `json:"coupon_associations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionLineItemEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// CouponAssociationsOrErr returns the CouponAssociations value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionLineItemEdges) CouponAssociationsOrErr() ([]*CouponAssociation, error) {
	if e.loadedTypes[1] {
		return e.CouponAssociations, nil
	}
	return nil, &NotLoadedError{edge: "coupon_associations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionLineItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionlineitem.FieldMetadata:
			values[i] = new([]byte)
		case subscriptionlineitem.FieldQuantity:
			values[i] = new(decimal.Decimal)
		case subscriptionlineitem.FieldTrialPeriod:
			values[i] = new(sql.NullInt64)
		case subscriptionlineitem.FieldID, subscriptionlineitem.FieldTenantID, subscriptionlineitem.FieldStatus, subscriptionlineitem.FieldCreatedBy, subscriptionlineitem.FieldUpdatedBy, subscriptionlineitem.FieldEnvironmentID, subscriptionlineitem.FieldSubscriptionID, subscriptionlineitem.FieldCustomerID, subscriptionlineitem.FieldPlanID, subscriptionlineitem.FieldPlanDisplayName, subscriptionlineitem.FieldPriceID, subscriptionlineitem.FieldPriceType, subscriptionlineitem.FieldMeterID, subscriptionlineitem.FieldMeterDisplayName, subscriptionlineitem.FieldPriceUnitID, subscriptionlineitem.FieldPriceUnit, subscriptionlineitem.FieldDisplayName, subscriptionlineitem.FieldCurrency, subscriptionlineitem.FieldBillingPeriod, subscriptionlineitem.FieldInvoiceCadence:
			values[i] = new(sql.NullString)
		case subscriptionlineitem.FieldCreatedAt, subscriptionlineitem.FieldUpdatedAt, subscriptionlineitem.FieldStartDate, subscriptionlineitem.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionLineItem fields.
func (sli *SubscriptionLineItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionlineitem.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sli.ID = value.String
			}
		case subscriptionlineitem.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sli.TenantID = value.String
			}
		case subscriptionlineitem.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sli.Status = value.String
			}
		case subscriptionlineitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sli.CreatedAt = value.Time
			}
		case subscriptionlineitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sli.UpdatedAt = value.Time
			}
		case subscriptionlineitem.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sli.CreatedBy = value.String
			}
		case subscriptionlineitem.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sli.UpdatedBy = value.String
			}
		case subscriptionlineitem.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				sli.EnvironmentID = value.String
			}
		case subscriptionlineitem.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				sli.SubscriptionID = value.String
			}
		case subscriptionlineitem.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				sli.CustomerID = value.String
			}
		case subscriptionlineitem.FieldPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				sli.PlanID = new(string)
				*sli.PlanID = value.String
			}
		case subscriptionlineitem.FieldPlanDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_display_name", values[i])
			} else if value.Valid {
				sli.PlanDisplayName = new(string)
				*sli.PlanDisplayName = value.String
			}
		case subscriptionlineitem.FieldPriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_id", values[i])
			} else if value.Valid {
				sli.PriceID = value.String
			}
		case subscriptionlineitem.FieldPriceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_type", values[i])
			} else if value.Valid {
				sli.PriceType = new(string)
				*sli.PriceType = value.String
			}
		case subscriptionlineitem.FieldMeterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meter_id", values[i])
			} else if value.Valid {
				sli.MeterID = new(string)
				*sli.MeterID = value.String
			}
		case subscriptionlineitem.FieldMeterDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meter_display_name", values[i])
			} else if value.Valid {
				sli.MeterDisplayName = new(string)
				*sli.MeterDisplayName = value.String
			}
		case subscriptionlineitem.FieldPriceUnitID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_unit_id", values[i])
			} else if value.Valid {
				sli.PriceUnitID = new(string)
				*sli.PriceUnitID = value.String
			}
		case subscriptionlineitem.FieldPriceUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_unit", values[i])
			} else if value.Valid {
				sli.PriceUnit = new(string)
				*sli.PriceUnit = value.String
			}
		case subscriptionlineitem.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				sli.DisplayName = new(string)
				*sli.DisplayName = value.String
			}
		case subscriptionlineitem.FieldQuantity:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value != nil {
				sli.Quantity = *value
			}
		case subscriptionlineitem.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				sli.Currency = value.String
			}
		case subscriptionlineitem.FieldBillingPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_period", values[i])
			} else if value.Valid {
				sli.BillingPeriod = value.String
			}
		case subscriptionlineitem.FieldInvoiceCadence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_cadence", values[i])
			} else if value.Valid {
				sli.InvoiceCadence = value.String
			}
		case subscriptionlineitem.FieldTrialPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trial_period", values[i])
			} else if value.Valid {
				sli.TrialPeriod = int(value.Int64)
			}
		case subscriptionlineitem.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				sli.StartDate = new(time.Time)
				*sli.StartDate = value.Time
			}
		case subscriptionlineitem.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				sli.EndDate = new(time.Time)
				*sli.EndDate = value.Time
			}
		case subscriptionlineitem.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sli.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			sli.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionLineItem.
// This includes values selected through modifiers, order, etc.
func (sli *SubscriptionLineItem) Value(name string) (ent.Value, error) {
	return sli.selectValues.Get(name)
}

// QuerySubscription queries the "subscription" edge of the SubscriptionLineItem entity.
func (sli *SubscriptionLineItem) QuerySubscription() *SubscriptionQuery {
	return NewSubscriptionLineItemClient(sli.config).QuerySubscription(sli)
}

// QueryCouponAssociations queries the "coupon_associations" edge of the SubscriptionLineItem entity.
func (sli *SubscriptionLineItem) QueryCouponAssociations() *CouponAssociationQuery {
	return NewSubscriptionLineItemClient(sli.config).QueryCouponAssociations(sli)
}

// Update returns a builder for updating this SubscriptionLineItem.
// Note that you need to call SubscriptionLineItem.Unwrap() before calling this method if this SubscriptionLineItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (sli *SubscriptionLineItem) Update() *SubscriptionLineItemUpdateOne {
	return NewSubscriptionLineItemClient(sli.config).UpdateOne(sli)
}

// Unwrap unwraps the SubscriptionLineItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sli *SubscriptionLineItem) Unwrap() *SubscriptionLineItem {
	_tx, ok := sli.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionLineItem is not a transactional entity")
	}
	sli.config.driver = _tx.drv
	return sli
}

// String implements the fmt.Stringer.
func (sli *SubscriptionLineItem) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionLineItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sli.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(sli.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sli.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sli.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sli.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sli.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sli.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(sli.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(sli.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(sli.CustomerID)
	builder.WriteString(", ")
	if v := sli.PlanID; v != nil {
		builder.WriteString("plan_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sli.PlanDisplayName; v != nil {
		builder.WriteString("plan_display_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("price_id=")
	builder.WriteString(sli.PriceID)
	builder.WriteString(", ")
	if v := sli.PriceType; v != nil {
		builder.WriteString("price_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sli.MeterID; v != nil {
		builder.WriteString("meter_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sli.MeterDisplayName; v != nil {
		builder.WriteString("meter_display_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sli.PriceUnitID; v != nil {
		builder.WriteString("price_unit_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sli.PriceUnit; v != nil {
		builder.WriteString("price_unit=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sli.DisplayName; v != nil {
		builder.WriteString("display_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", sli.Quantity))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(sli.Currency)
	builder.WriteString(", ")
	builder.WriteString("billing_period=")
	builder.WriteString(sli.BillingPeriod)
	builder.WriteString(", ")
	builder.WriteString("invoice_cadence=")
	builder.WriteString(sli.InvoiceCadence)
	builder.WriteString(", ")
	builder.WriteString("trial_period=")
	builder.WriteString(fmt.Sprintf("%v", sli.TrialPeriod))
	builder.WriteString(", ")
	if v := sli.StartDate; v != nil {
		builder.WriteString("start_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sli.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", sli.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionLineItems is a parsable slice of SubscriptionLineItem.
type SubscriptionLineItems []*SubscriptionLineItem
