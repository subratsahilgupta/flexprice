// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditgrant"
	"github.com/flexprice/flexprice/ent/plan"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/internal/types"
)

// CreditGrantUpdate is the builder for updating CreditGrant entities.
type CreditGrantUpdate struct {
	config
	hooks    []Hook
	mutation *CreditGrantMutation
}

// Where appends a list predicates to the CreditGrantUpdate builder.
func (cgu *CreditGrantUpdate) Where(ps ...predicate.CreditGrant) *CreditGrantUpdate {
	cgu.mutation.Where(ps...)
	return cgu
}

// SetStatus sets the "status" field.
func (cgu *CreditGrantUpdate) SetStatus(s string) *CreditGrantUpdate {
	cgu.mutation.SetStatus(s)
	return cgu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cgu *CreditGrantUpdate) SetNillableStatus(s *string) *CreditGrantUpdate {
	if s != nil {
		cgu.SetStatus(*s)
	}
	return cgu
}

// SetUpdatedAt sets the "updated_at" field.
func (cgu *CreditGrantUpdate) SetUpdatedAt(t time.Time) *CreditGrantUpdate {
	cgu.mutation.SetUpdatedAt(t)
	return cgu
}

// SetUpdatedBy sets the "updated_by" field.
func (cgu *CreditGrantUpdate) SetUpdatedBy(s string) *CreditGrantUpdate {
	cgu.mutation.SetUpdatedBy(s)
	return cgu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cgu *CreditGrantUpdate) SetNillableUpdatedBy(s *string) *CreditGrantUpdate {
	if s != nil {
		cgu.SetUpdatedBy(*s)
	}
	return cgu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cgu *CreditGrantUpdate) ClearUpdatedBy() *CreditGrantUpdate {
	cgu.mutation.ClearUpdatedBy()
	return cgu
}

// SetName sets the "name" field.
func (cgu *CreditGrantUpdate) SetName(s string) *CreditGrantUpdate {
	cgu.mutation.SetName(s)
	return cgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cgu *CreditGrantUpdate) SetNillableName(s *string) *CreditGrantUpdate {
	if s != nil {
		cgu.SetName(*s)
	}
	return cgu
}

// SetScope sets the "scope" field.
func (cgu *CreditGrantUpdate) SetScope(tgs types.CreditGrantScope) *CreditGrantUpdate {
	cgu.mutation.SetScope(tgs)
	return cgu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (cgu *CreditGrantUpdate) SetNillableScope(tgs *types.CreditGrantScope) *CreditGrantUpdate {
	if tgs != nil {
		cgu.SetScope(*tgs)
	}
	return cgu
}

// SetPlanID sets the "plan_id" field.
func (cgu *CreditGrantUpdate) SetPlanID(s string) *CreditGrantUpdate {
	cgu.mutation.SetPlanID(s)
	return cgu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cgu *CreditGrantUpdate) SetNillablePlanID(s *string) *CreditGrantUpdate {
	if s != nil {
		cgu.SetPlanID(*s)
	}
	return cgu
}

// ClearPlanID clears the value of the "plan_id" field.
func (cgu *CreditGrantUpdate) ClearPlanID() *CreditGrantUpdate {
	cgu.mutation.ClearPlanID()
	return cgu
}

// SetSubscriptionID sets the "subscription_id" field.
func (cgu *CreditGrantUpdate) SetSubscriptionID(s string) *CreditGrantUpdate {
	cgu.mutation.SetSubscriptionID(s)
	return cgu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (cgu *CreditGrantUpdate) SetNillableSubscriptionID(s *string) *CreditGrantUpdate {
	if s != nil {
		cgu.SetSubscriptionID(*s)
	}
	return cgu
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (cgu *CreditGrantUpdate) ClearSubscriptionID() *CreditGrantUpdate {
	cgu.mutation.ClearSubscriptionID()
	return cgu
}

// SetMetadata sets the "metadata" field.
func (cgu *CreditGrantUpdate) SetMetadata(m map[string]string) *CreditGrantUpdate {
	cgu.mutation.SetMetadata(m)
	return cgu
}

// ClearMetadata clears the value of the "metadata" field.
func (cgu *CreditGrantUpdate) ClearMetadata() *CreditGrantUpdate {
	cgu.mutation.ClearMetadata()
	return cgu
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cgu *CreditGrantUpdate) SetPlan(p *Plan) *CreditGrantUpdate {
	return cgu.SetPlanID(p.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (cgu *CreditGrantUpdate) SetSubscription(s *Subscription) *CreditGrantUpdate {
	return cgu.SetSubscriptionID(s.ID)
}

// Mutation returns the CreditGrantMutation object of the builder.
func (cgu *CreditGrantUpdate) Mutation() *CreditGrantMutation {
	return cgu.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (cgu *CreditGrantUpdate) ClearPlan() *CreditGrantUpdate {
	cgu.mutation.ClearPlan()
	return cgu
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (cgu *CreditGrantUpdate) ClearSubscription() *CreditGrantUpdate {
	cgu.mutation.ClearSubscription()
	return cgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cgu *CreditGrantUpdate) Save(ctx context.Context) (int, error) {
	cgu.defaults()
	return withHooks(ctx, cgu.sqlSave, cgu.mutation, cgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cgu *CreditGrantUpdate) SaveX(ctx context.Context) int {
	affected, err := cgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgu *CreditGrantUpdate) Exec(ctx context.Context) error {
	_, err := cgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgu *CreditGrantUpdate) ExecX(ctx context.Context) {
	if err := cgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgu *CreditGrantUpdate) defaults() {
	if _, ok := cgu.mutation.UpdatedAt(); !ok {
		v := creditgrant.UpdateDefaultUpdatedAt()
		cgu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgu *CreditGrantUpdate) check() error {
	if v, ok := cgu.mutation.Name(); ok {
		if err := creditgrant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.name": %w`, err)}
		}
	}
	if v, ok := cgu.mutation.Scope(); ok {
		if err := creditgrant.ScopeValidator(string(v)); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.scope": %w`, err)}
		}
	}
	return nil
}

func (cgu *CreditGrantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(creditgrant.Table, creditgrant.Columns, sqlgraph.NewFieldSpec(creditgrant.FieldID, field.TypeString))
	if ps := cgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgu.mutation.Status(); ok {
		_spec.SetField(creditgrant.FieldStatus, field.TypeString, value)
	}
	if value, ok := cgu.mutation.UpdatedAt(); ok {
		_spec.SetField(creditgrant.FieldUpdatedAt, field.TypeTime, value)
	}
	if cgu.mutation.CreatedByCleared() {
		_spec.ClearField(creditgrant.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cgu.mutation.UpdatedBy(); ok {
		_spec.SetField(creditgrant.FieldUpdatedBy, field.TypeString, value)
	}
	if cgu.mutation.UpdatedByCleared() {
		_spec.ClearField(creditgrant.FieldUpdatedBy, field.TypeString)
	}
	if cgu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditgrant.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cgu.mutation.Name(); ok {
		_spec.SetField(creditgrant.FieldName, field.TypeString, value)
	}
	if value, ok := cgu.mutation.Scope(); ok {
		_spec.SetField(creditgrant.FieldScope, field.TypeString, value)
	}
	if cgu.mutation.CurrencyCleared() {
		_spec.ClearField(creditgrant.FieldCurrency, field.TypeString)
	}
	if cgu.mutation.PeriodCleared() {
		_spec.ClearField(creditgrant.FieldPeriod, field.TypeString)
	}
	if cgu.mutation.PeriodCountCleared() {
		_spec.ClearField(creditgrant.FieldPeriodCount, field.TypeInt)
	}
	if cgu.mutation.ExpirationDurationCleared() {
		_spec.ClearField(creditgrant.FieldExpirationDuration, field.TypeInt)
	}
	if cgu.mutation.ExpirationDurationUnitCleared() {
		_spec.ClearField(creditgrant.FieldExpirationDurationUnit, field.TypeString)
	}
	if cgu.mutation.PriorityCleared() {
		_spec.ClearField(creditgrant.FieldPriority, field.TypeInt)
	}
	if value, ok := cgu.mutation.Metadata(); ok {
		_spec.SetField(creditgrant.FieldMetadata, field.TypeJSON, value)
	}
	if cgu.mutation.MetadataCleared() {
		_spec.ClearField(creditgrant.FieldMetadata, field.TypeJSON)
	}
	if cgu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.PlanTable,
			Columns: []string{creditgrant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.PlanTable,
			Columns: []string{creditgrant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cgu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.SubscriptionTable,
			Columns: []string{creditgrant.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.SubscriptionTable,
			Columns: []string{creditgrant.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditgrant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cgu.mutation.done = true
	return n, nil
}

// CreditGrantUpdateOne is the builder for updating a single CreditGrant entity.
type CreditGrantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CreditGrantMutation
}

// SetStatus sets the "status" field.
func (cguo *CreditGrantUpdateOne) SetStatus(s string) *CreditGrantUpdateOne {
	cguo.mutation.SetStatus(s)
	return cguo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cguo *CreditGrantUpdateOne) SetNillableStatus(s *string) *CreditGrantUpdateOne {
	if s != nil {
		cguo.SetStatus(*s)
	}
	return cguo
}

// SetUpdatedAt sets the "updated_at" field.
func (cguo *CreditGrantUpdateOne) SetUpdatedAt(t time.Time) *CreditGrantUpdateOne {
	cguo.mutation.SetUpdatedAt(t)
	return cguo
}

// SetUpdatedBy sets the "updated_by" field.
func (cguo *CreditGrantUpdateOne) SetUpdatedBy(s string) *CreditGrantUpdateOne {
	cguo.mutation.SetUpdatedBy(s)
	return cguo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cguo *CreditGrantUpdateOne) SetNillableUpdatedBy(s *string) *CreditGrantUpdateOne {
	if s != nil {
		cguo.SetUpdatedBy(*s)
	}
	return cguo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cguo *CreditGrantUpdateOne) ClearUpdatedBy() *CreditGrantUpdateOne {
	cguo.mutation.ClearUpdatedBy()
	return cguo
}

// SetName sets the "name" field.
func (cguo *CreditGrantUpdateOne) SetName(s string) *CreditGrantUpdateOne {
	cguo.mutation.SetName(s)
	return cguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cguo *CreditGrantUpdateOne) SetNillableName(s *string) *CreditGrantUpdateOne {
	if s != nil {
		cguo.SetName(*s)
	}
	return cguo
}

// SetScope sets the "scope" field.
func (cguo *CreditGrantUpdateOne) SetScope(tgs types.CreditGrantScope) *CreditGrantUpdateOne {
	cguo.mutation.SetScope(tgs)
	return cguo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (cguo *CreditGrantUpdateOne) SetNillableScope(tgs *types.CreditGrantScope) *CreditGrantUpdateOne {
	if tgs != nil {
		cguo.SetScope(*tgs)
	}
	return cguo
}

// SetPlanID sets the "plan_id" field.
func (cguo *CreditGrantUpdateOne) SetPlanID(s string) *CreditGrantUpdateOne {
	cguo.mutation.SetPlanID(s)
	return cguo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cguo *CreditGrantUpdateOne) SetNillablePlanID(s *string) *CreditGrantUpdateOne {
	if s != nil {
		cguo.SetPlanID(*s)
	}
	return cguo
}

// ClearPlanID clears the value of the "plan_id" field.
func (cguo *CreditGrantUpdateOne) ClearPlanID() *CreditGrantUpdateOne {
	cguo.mutation.ClearPlanID()
	return cguo
}

// SetSubscriptionID sets the "subscription_id" field.
func (cguo *CreditGrantUpdateOne) SetSubscriptionID(s string) *CreditGrantUpdateOne {
	cguo.mutation.SetSubscriptionID(s)
	return cguo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (cguo *CreditGrantUpdateOne) SetNillableSubscriptionID(s *string) *CreditGrantUpdateOne {
	if s != nil {
		cguo.SetSubscriptionID(*s)
	}
	return cguo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (cguo *CreditGrantUpdateOne) ClearSubscriptionID() *CreditGrantUpdateOne {
	cguo.mutation.ClearSubscriptionID()
	return cguo
}

// SetMetadata sets the "metadata" field.
func (cguo *CreditGrantUpdateOne) SetMetadata(m map[string]string) *CreditGrantUpdateOne {
	cguo.mutation.SetMetadata(m)
	return cguo
}

// ClearMetadata clears the value of the "metadata" field.
func (cguo *CreditGrantUpdateOne) ClearMetadata() *CreditGrantUpdateOne {
	cguo.mutation.ClearMetadata()
	return cguo
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cguo *CreditGrantUpdateOne) SetPlan(p *Plan) *CreditGrantUpdateOne {
	return cguo.SetPlanID(p.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (cguo *CreditGrantUpdateOne) SetSubscription(s *Subscription) *CreditGrantUpdateOne {
	return cguo.SetSubscriptionID(s.ID)
}

// Mutation returns the CreditGrantMutation object of the builder.
func (cguo *CreditGrantUpdateOne) Mutation() *CreditGrantMutation {
	return cguo.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (cguo *CreditGrantUpdateOne) ClearPlan() *CreditGrantUpdateOne {
	cguo.mutation.ClearPlan()
	return cguo
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (cguo *CreditGrantUpdateOne) ClearSubscription() *CreditGrantUpdateOne {
	cguo.mutation.ClearSubscription()
	return cguo
}

// Where appends a list predicates to the CreditGrantUpdate builder.
func (cguo *CreditGrantUpdateOne) Where(ps ...predicate.CreditGrant) *CreditGrantUpdateOne {
	cguo.mutation.Where(ps...)
	return cguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cguo *CreditGrantUpdateOne) Select(field string, fields ...string) *CreditGrantUpdateOne {
	cguo.fields = append([]string{field}, fields...)
	return cguo
}

// Save executes the query and returns the updated CreditGrant entity.
func (cguo *CreditGrantUpdateOne) Save(ctx context.Context) (*CreditGrant, error) {
	cguo.defaults()
	return withHooks(ctx, cguo.sqlSave, cguo.mutation, cguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cguo *CreditGrantUpdateOne) SaveX(ctx context.Context) *CreditGrant {
	node, err := cguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cguo *CreditGrantUpdateOne) Exec(ctx context.Context) error {
	_, err := cguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cguo *CreditGrantUpdateOne) ExecX(ctx context.Context) {
	if err := cguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cguo *CreditGrantUpdateOne) defaults() {
	if _, ok := cguo.mutation.UpdatedAt(); !ok {
		v := creditgrant.UpdateDefaultUpdatedAt()
		cguo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cguo *CreditGrantUpdateOne) check() error {
	if v, ok := cguo.mutation.Name(); ok {
		if err := creditgrant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.name": %w`, err)}
		}
	}
	if v, ok := cguo.mutation.Scope(); ok {
		if err := creditgrant.ScopeValidator(string(v)); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.scope": %w`, err)}
		}
	}
	return nil
}

func (cguo *CreditGrantUpdateOne) sqlSave(ctx context.Context) (_node *CreditGrant, err error) {
	if err := cguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(creditgrant.Table, creditgrant.Columns, sqlgraph.NewFieldSpec(creditgrant.FieldID, field.TypeString))
	id, ok := cguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CreditGrant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creditgrant.FieldID)
		for _, f := range fields {
			if !creditgrant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != creditgrant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cguo.mutation.Status(); ok {
		_spec.SetField(creditgrant.FieldStatus, field.TypeString, value)
	}
	if value, ok := cguo.mutation.UpdatedAt(); ok {
		_spec.SetField(creditgrant.FieldUpdatedAt, field.TypeTime, value)
	}
	if cguo.mutation.CreatedByCleared() {
		_spec.ClearField(creditgrant.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cguo.mutation.UpdatedBy(); ok {
		_spec.SetField(creditgrant.FieldUpdatedBy, field.TypeString, value)
	}
	if cguo.mutation.UpdatedByCleared() {
		_spec.ClearField(creditgrant.FieldUpdatedBy, field.TypeString)
	}
	if cguo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditgrant.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cguo.mutation.Name(); ok {
		_spec.SetField(creditgrant.FieldName, field.TypeString, value)
	}
	if value, ok := cguo.mutation.Scope(); ok {
		_spec.SetField(creditgrant.FieldScope, field.TypeString, value)
	}
	if cguo.mutation.CurrencyCleared() {
		_spec.ClearField(creditgrant.FieldCurrency, field.TypeString)
	}
	if cguo.mutation.PeriodCleared() {
		_spec.ClearField(creditgrant.FieldPeriod, field.TypeString)
	}
	if cguo.mutation.PeriodCountCleared() {
		_spec.ClearField(creditgrant.FieldPeriodCount, field.TypeInt)
	}
	if cguo.mutation.ExpirationDurationCleared() {
		_spec.ClearField(creditgrant.FieldExpirationDuration, field.TypeInt)
	}
	if cguo.mutation.ExpirationDurationUnitCleared() {
		_spec.ClearField(creditgrant.FieldExpirationDurationUnit, field.TypeString)
	}
	if cguo.mutation.PriorityCleared() {
		_spec.ClearField(creditgrant.FieldPriority, field.TypeInt)
	}
	if value, ok := cguo.mutation.Metadata(); ok {
		_spec.SetField(creditgrant.FieldMetadata, field.TypeJSON, value)
	}
	if cguo.mutation.MetadataCleared() {
		_spec.ClearField(creditgrant.FieldMetadata, field.TypeJSON)
	}
	if cguo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.PlanTable,
			Columns: []string{creditgrant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.PlanTable,
			Columns: []string{creditgrant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cguo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.SubscriptionTable,
			Columns: []string{creditgrant.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.SubscriptionTable,
			Columns: []string{creditgrant.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CreditGrant{config: cguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditgrant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cguo.mutation.done = true
	return _node, nil
}
