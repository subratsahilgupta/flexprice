// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
)

// CouponAssociationCreate is the builder for creating a CouponAssociation entity.
type CouponAssociationCreate struct {
	config
	mutation *CouponAssociationMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cac *CouponAssociationCreate) SetTenantID(s string) *CouponAssociationCreate {
	cac.mutation.SetTenantID(s)
	return cac
}

// SetStatus sets the "status" field.
func (cac *CouponAssociationCreate) SetStatus(s string) *CouponAssociationCreate {
	cac.mutation.SetStatus(s)
	return cac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cac *CouponAssociationCreate) SetNillableStatus(s *string) *CouponAssociationCreate {
	if s != nil {
		cac.SetStatus(*s)
	}
	return cac
}

// SetCreatedAt sets the "created_at" field.
func (cac *CouponAssociationCreate) SetCreatedAt(t time.Time) *CouponAssociationCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CouponAssociationCreate) SetNillableCreatedAt(t *time.Time) *CouponAssociationCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CouponAssociationCreate) SetUpdatedAt(t time.Time) *CouponAssociationCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CouponAssociationCreate) SetNillableUpdatedAt(t *time.Time) *CouponAssociationCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetCreatedBy sets the "created_by" field.
func (cac *CouponAssociationCreate) SetCreatedBy(s string) *CouponAssociationCreate {
	cac.mutation.SetCreatedBy(s)
	return cac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cac *CouponAssociationCreate) SetNillableCreatedBy(s *string) *CouponAssociationCreate {
	if s != nil {
		cac.SetCreatedBy(*s)
	}
	return cac
}

// SetUpdatedBy sets the "updated_by" field.
func (cac *CouponAssociationCreate) SetUpdatedBy(s string) *CouponAssociationCreate {
	cac.mutation.SetUpdatedBy(s)
	return cac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cac *CouponAssociationCreate) SetNillableUpdatedBy(s *string) *CouponAssociationCreate {
	if s != nil {
		cac.SetUpdatedBy(*s)
	}
	return cac
}

// SetEnvironmentID sets the "environment_id" field.
func (cac *CouponAssociationCreate) SetEnvironmentID(s string) *CouponAssociationCreate {
	cac.mutation.SetEnvironmentID(s)
	return cac
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cac *CouponAssociationCreate) SetNillableEnvironmentID(s *string) *CouponAssociationCreate {
	if s != nil {
		cac.SetEnvironmentID(*s)
	}
	return cac
}

// SetCouponID sets the "coupon_id" field.
func (cac *CouponAssociationCreate) SetCouponID(s string) *CouponAssociationCreate {
	cac.mutation.SetCouponID(s)
	return cac
}

// SetSubscriptionID sets the "subscription_id" field.
func (cac *CouponAssociationCreate) SetSubscriptionID(s string) *CouponAssociationCreate {
	cac.mutation.SetSubscriptionID(s)
	return cac
}

// SetSubscriptionLineItemID sets the "subscription_line_item_id" field.
func (cac *CouponAssociationCreate) SetSubscriptionLineItemID(s string) *CouponAssociationCreate {
	cac.mutation.SetSubscriptionLineItemID(s)
	return cac
}

// SetNillableSubscriptionLineItemID sets the "subscription_line_item_id" field if the given value is not nil.
func (cac *CouponAssociationCreate) SetNillableSubscriptionLineItemID(s *string) *CouponAssociationCreate {
	if s != nil {
		cac.SetSubscriptionLineItemID(*s)
	}
	return cac
}

// SetMetadata sets the "metadata" field.
func (cac *CouponAssociationCreate) SetMetadata(m map[string]string) *CouponAssociationCreate {
	cac.mutation.SetMetadata(m)
	return cac
}

// SetID sets the "id" field.
func (cac *CouponAssociationCreate) SetID(s string) *CouponAssociationCreate {
	cac.mutation.SetID(s)
	return cac
}

// SetCoupon sets the "coupon" edge to the Coupon entity.
func (cac *CouponAssociationCreate) SetCoupon(c *Coupon) *CouponAssociationCreate {
	return cac.SetCouponID(c.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (cac *CouponAssociationCreate) SetSubscription(s *Subscription) *CouponAssociationCreate {
	return cac.SetSubscriptionID(s.ID)
}

// SetSubscriptionLineItem sets the "subscription_line_item" edge to the SubscriptionLineItem entity.
func (cac *CouponAssociationCreate) SetSubscriptionLineItem(s *SubscriptionLineItem) *CouponAssociationCreate {
	return cac.SetSubscriptionLineItemID(s.ID)
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (cac *CouponAssociationCreate) AddCouponApplicationIDs(ids ...string) *CouponAssociationCreate {
	cac.mutation.AddCouponApplicationIDs(ids...)
	return cac
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (cac *CouponAssociationCreate) AddCouponApplications(c ...*CouponApplication) *CouponAssociationCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cac.AddCouponApplicationIDs(ids...)
}

// Mutation returns the CouponAssociationMutation object of the builder.
func (cac *CouponAssociationCreate) Mutation() *CouponAssociationMutation {
	return cac.mutation
}

// Save creates the CouponAssociation in the database.
func (cac *CouponAssociationCreate) Save(ctx context.Context) (*CouponAssociation, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CouponAssociationCreate) SaveX(ctx context.Context) *CouponAssociation {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CouponAssociationCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CouponAssociationCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CouponAssociationCreate) defaults() {
	if _, ok := cac.mutation.Status(); !ok {
		v := couponassociation.DefaultStatus
		cac.mutation.SetStatus(v)
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := couponassociation.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		v := couponassociation.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cac.mutation.EnvironmentID(); !ok {
		v := couponassociation.DefaultEnvironmentID
		cac.mutation.SetEnvironmentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CouponAssociationCreate) check() error {
	if _, ok := cac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CouponAssociation.tenant_id"`)}
	}
	if v, ok := cac.mutation.TenantID(); ok {
		if err := couponassociation.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CouponAssociation.tenant_id": %w`, err)}
		}
	}
	if _, ok := cac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CouponAssociation.status"`)}
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponAssociation.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponAssociation.updated_at"`)}
	}
	if _, ok := cac.mutation.CouponID(); !ok {
		return &ValidationError{Name: "coupon_id", err: errors.New(`ent: missing required field "CouponAssociation.coupon_id"`)}
	}
	if v, ok := cac.mutation.CouponID(); ok {
		if err := couponassociation.CouponIDValidator(v); err != nil {
			return &ValidationError{Name: "coupon_id", err: fmt.Errorf(`ent: validator failed for field "CouponAssociation.coupon_id": %w`, err)}
		}
	}
	if _, ok := cac.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`ent: missing required field "CouponAssociation.subscription_id"`)}
	}
	if v, ok := cac.mutation.SubscriptionID(); ok {
		if err := couponassociation.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "CouponAssociation.subscription_id": %w`, err)}
		}
	}
	if len(cac.mutation.CouponIDs()) == 0 {
		return &ValidationError{Name: "coupon", err: errors.New(`ent: missing required edge "CouponAssociation.coupon"`)}
	}
	if len(cac.mutation.SubscriptionIDs()) == 0 {
		return &ValidationError{Name: "subscription", err: errors.New(`ent: missing required edge "CouponAssociation.subscription"`)}
	}
	return nil
}

func (cac *CouponAssociationCreate) sqlSave(ctx context.Context) (*CouponAssociation, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CouponAssociation.ID type: %T", _spec.ID.Value)
		}
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CouponAssociationCreate) createSpec() (*CouponAssociation, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponAssociation{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(couponassociation.Table, sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString))
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.TenantID(); ok {
		_spec.SetField(couponassociation.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cac.mutation.Status(); ok {
		_spec.SetField(couponassociation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(couponassociation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(couponassociation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.CreatedBy(); ok {
		_spec.SetField(couponassociation.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cac.mutation.UpdatedBy(); ok {
		_spec.SetField(couponassociation.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cac.mutation.EnvironmentID(); ok {
		_spec.SetField(couponassociation.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cac.mutation.Metadata(); ok {
		_spec.SetField(couponassociation.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := cac.mutation.CouponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponassociation.CouponTable,
			Columns: []string{couponassociation.CouponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CouponID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponassociation.SubscriptionTable,
			Columns: []string{couponassociation.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.SubscriptionLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponassociation.SubscriptionLineItemTable,
			Columns: []string{couponassociation.SubscriptionLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionLineItemID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   couponassociation.CouponApplicationsTable,
			Columns: couponassociation.CouponApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CouponAssociationCreateBulk is the builder for creating many CouponAssociation entities in bulk.
type CouponAssociationCreateBulk struct {
	config
	err      error
	builders []*CouponAssociationCreate
}

// Save creates the CouponAssociation entities in the database.
func (cacb *CouponAssociationCreateBulk) Save(ctx context.Context) ([]*CouponAssociation, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CouponAssociation, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponAssociationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CouponAssociationCreateBulk) SaveX(ctx context.Context) []*CouponAssociation {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CouponAssociationCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CouponAssociationCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
