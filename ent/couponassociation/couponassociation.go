// Code generated by ent, DO NOT EDIT.

package couponassociation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the couponassociation type in the database.
	Label = "coupon_association"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldCouponID holds the string denoting the coupon_id field in the database.
	FieldCouponID = "coupon_id"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldSubscriptionLineItemID holds the string denoting the subscription_line_item_id field in the database.
	FieldSubscriptionLineItemID = "subscription_line_item_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeCoupon holds the string denoting the coupon edge name in mutations.
	EdgeCoupon = "coupon"
	// EdgeSubscription holds the string denoting the subscription edge name in mutations.
	EdgeSubscription = "subscription"
	// EdgeSubscriptionLineItem holds the string denoting the subscription_line_item edge name in mutations.
	EdgeSubscriptionLineItem = "subscription_line_item"
	// EdgeCouponApplications holds the string denoting the coupon_applications edge name in mutations.
	EdgeCouponApplications = "coupon_applications"
	// Table holds the table name of the couponassociation in the database.
	Table = "coupon_associations"
	// CouponTable is the table that holds the coupon relation/edge.
	CouponTable = "coupon_associations"
	// CouponInverseTable is the table name for the Coupon entity.
	// It exists in this package in order to avoid circular dependency with the "coupon" package.
	CouponInverseTable = "coupons"
	// CouponColumn is the table column denoting the coupon relation/edge.
	CouponColumn = "coupon_id"
	// SubscriptionTable is the table that holds the subscription relation/edge.
	SubscriptionTable = "coupon_associations"
	// SubscriptionInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionInverseTable = "subscriptions"
	// SubscriptionColumn is the table column denoting the subscription relation/edge.
	SubscriptionColumn = "subscription_id"
	// SubscriptionLineItemTable is the table that holds the subscription_line_item relation/edge.
	SubscriptionLineItemTable = "coupon_associations"
	// SubscriptionLineItemInverseTable is the table name for the SubscriptionLineItem entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionlineitem" package.
	SubscriptionLineItemInverseTable = "subscription_line_items"
	// SubscriptionLineItemColumn is the table column denoting the subscription_line_item relation/edge.
	SubscriptionLineItemColumn = "subscription_line_item_id"
	// CouponApplicationsTable is the table that holds the coupon_applications relation/edge. The primary key declared below.
	CouponApplicationsTable = "coupon_association_coupon_applications"
	// CouponApplicationsInverseTable is the table name for the CouponApplication entity.
	// It exists in this package in order to avoid circular dependency with the "couponapplication" package.
	CouponApplicationsInverseTable = "coupon_applications"
)

// Columns holds all SQL columns for couponassociation fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldCouponID,
	FieldSubscriptionID,
	FieldSubscriptionLineItemID,
	FieldMetadata,
}

var (
	// CouponApplicationsPrimaryKey and CouponApplicationsColumn2 are the table columns denoting the
	// primary key for the coupon_applications relation (M2M).
	CouponApplicationsPrimaryKey = []string{"coupon_association_id", "coupon_application_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// CouponIDValidator is a validator for the "coupon_id" field. It is called by the builders before save.
	CouponIDValidator func(string) error
	// SubscriptionIDValidator is a validator for the "subscription_id" field. It is called by the builders before save.
	SubscriptionIDValidator func(string) error
)

// OrderOption defines the ordering options for the CouponAssociation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByCouponID orders the results by the coupon_id field.
func ByCouponID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponID, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// BySubscriptionLineItemID orders the results by the subscription_line_item_id field.
func BySubscriptionLineItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionLineItemID, opts...).ToFunc()
}

// ByCouponField orders the results by coupon field.
func ByCouponField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscriptionField orders the results by subscription field.
func BySubscriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscriptionLineItemField orders the results by subscription_line_item field.
func BySubscriptionLineItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionLineItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByCouponApplicationsCount orders the results by coupon_applications count.
func ByCouponApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponApplicationsStep(), opts...)
	}
}

// ByCouponApplications orders the results by coupon_applications terms.
func ByCouponApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCouponStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CouponTable, CouponColumn),
	)
}
func newSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
	)
}
func newSubscriptionLineItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionLineItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionLineItemTable, SubscriptionLineItemColumn),
	)
}
func newCouponApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CouponApplicationsTable, CouponApplicationsPrimaryKey...),
	)
}
