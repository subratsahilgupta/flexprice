// Code generated by ent, DO NOT EDIT.

package costsheet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the costsheet type in the database.
	Label = "costsheet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldMeterID holds the string denoting the meter_id field in the database.
	FieldMeterID = "meter_id"
	// FieldPriceID holds the string denoting the price_id field in the database.
	FieldPriceID = "price_id"
	// EdgeMeter holds the string denoting the meter edge name in mutations.
	EdgeMeter = "meter"
	// EdgePrice holds the string denoting the price edge name in mutations.
	EdgePrice = "price"
	// Table holds the table name of the costsheet in the database.
	Table = "costsheet"
	// MeterTable is the table that holds the meter relation/edge.
	MeterTable = "costsheet"
	// MeterInverseTable is the table name for the Meter entity.
	// It exists in this package in order to avoid circular dependency with the "meter" package.
	MeterInverseTable = "meters"
	// MeterColumn is the table column denoting the meter relation/edge.
	MeterColumn = "meter_id"
	// PriceTable is the table that holds the price relation/edge.
	PriceTable = "costsheet"
	// PriceInverseTable is the table name for the Price entity.
	// It exists in this package in order to avoid circular dependency with the "price" package.
	PriceInverseTable = "prices"
	// PriceColumn is the table column denoting the price relation/edge.
	PriceColumn = "price_id"
)

// Columns holds all SQL columns for costsheet fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldMeterID,
	FieldPriceID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// MeterIDValidator is a validator for the "meter_id" field. It is called by the builders before save.
	MeterIDValidator func(string) error
	// PriceIDValidator is a validator for the "price_id" field. It is called by the builders before save.
	PriceIDValidator func(string) error
)

// OrderOption defines the ordering options for the Costsheet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByMeterID orders the results by the meter_id field.
func ByMeterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeterID, opts...).ToFunc()
}

// ByPriceID orders the results by the price_id field.
func ByPriceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceID, opts...).ToFunc()
}

// ByMeterField orders the results by meter field.
func ByMeterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMeterStep(), sql.OrderByField(field, opts...))
	}
}

// ByPriceField orders the results by price field.
func ByPriceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPriceStep(), sql.OrderByField(field, opts...))
	}
}
func newMeterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MeterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MeterTable, MeterColumn),
	)
}
func newPriceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PriceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PriceTable, PriceColumn),
	)
}
