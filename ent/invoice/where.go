// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldEnvironmentID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSubscriptionID, v))
}

// InvoiceType applies equality check predicate on the "invoice_type" field. It's identical to InvoiceTypeEQ.
func InvoiceType(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceType, v))
}

// InvoiceStatus applies equality check predicate on the "invoice_status" field. It's identical to InvoiceStatusEQ.
func InvoiceStatus(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceStatus, v))
}

// PaymentStatus applies equality check predicate on the "payment_status" field. It's identical to PaymentStatusEQ.
func PaymentStatus(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentStatus, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// AmountDue applies equality check predicate on the "amount_due" field. It's identical to AmountDueEQ.
func AmountDue(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountDue, v))
}

// AmountPaid applies equality check predicate on the "amount_paid" field. It's identical to AmountPaidEQ.
func AmountPaid(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountPaid, v))
}

// AmountRemaining applies equality check predicate on the "amount_remaining" field. It's identical to AmountRemainingEQ.
func AmountRemaining(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountRemaining, v))
}

// Subtotal applies equality check predicate on the "subtotal" field. It's identical to SubtotalEQ.
func Subtotal(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSubtotal, v))
}

// AdjustmentAmount applies equality check predicate on the "adjustment_amount" field. It's identical to AdjustmentAmountEQ.
func AdjustmentAmount(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAdjustmentAmount, v))
}

// RefundedAmount applies equality check predicate on the "refunded_amount" field. It's identical to RefundedAmountEQ.
func RefundedAmount(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldRefundedAmount, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotal, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDescription, v))
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// PaidAt applies equality check predicate on the "paid_at" field. It's identical to PaidAtEQ.
func PaidAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaidAt, v))
}

// VoidedAt applies equality check predicate on the "voided_at" field. It's identical to VoidedAtEQ.
func VoidedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldVoidedAt, v))
}

// FinalizedAt applies equality check predicate on the "finalized_at" field. It's identical to FinalizedAtEQ.
func FinalizedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFinalizedAt, v))
}

// BillingPeriod applies equality check predicate on the "billing_period" field. It's identical to BillingPeriodEQ.
func BillingPeriod(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingPeriod, v))
}

// PeriodStart applies equality check predicate on the "period_start" field. It's identical to PeriodStartEQ.
func PeriodStart(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodStart, v))
}

// PeriodEnd applies equality check predicate on the "period_end" field. It's identical to PeriodEndEQ.
func PeriodEnd(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodEnd, v))
}

// InvoicePdfURL applies equality check predicate on the "invoice_pdf_url" field. It's identical to InvoicePdfURLEQ.
func InvoicePdfURL(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoicePdfURL, v))
}

// BillingReason applies equality check predicate on the "billing_reason" field. It's identical to BillingReasonEQ.
func BillingReason(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingReason, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldVersion, v))
}

// InvoiceNumber applies equality check predicate on the "invoice_number" field. It's identical to InvoiceNumberEQ.
func InvoiceNumber(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceNumber, v))
}

// BillingSequence applies equality check predicate on the "billing_sequence" field. It's identical to BillingSequenceEQ.
func BillingSequence(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingSequence, v))
}

// IdempotencyKey applies equality check predicate on the "idempotency_key" field. It's identical to IdempotencyKeyEQ.
func IdempotencyKey(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIdempotencyKey, v))
}

// GracePeriodEndTime applies equality check predicate on the "grace_period_end_time" field. It's identical to GracePeriodEndTimeEQ.
func GracePeriodEndTime(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldGracePeriodEndTime, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// InvoiceTypeEQ applies the EQ predicate on the "invoice_type" field.
func InvoiceTypeEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceType, v))
}

// InvoiceTypeNEQ applies the NEQ predicate on the "invoice_type" field.
func InvoiceTypeNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldInvoiceType, v))
}

// InvoiceTypeIn applies the In predicate on the "invoice_type" field.
func InvoiceTypeIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldInvoiceType, vs...))
}

// InvoiceTypeNotIn applies the NotIn predicate on the "invoice_type" field.
func InvoiceTypeNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldInvoiceType, vs...))
}

// InvoiceTypeGT applies the GT predicate on the "invoice_type" field.
func InvoiceTypeGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldInvoiceType, v))
}

// InvoiceTypeGTE applies the GTE predicate on the "invoice_type" field.
func InvoiceTypeGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldInvoiceType, v))
}

// InvoiceTypeLT applies the LT predicate on the "invoice_type" field.
func InvoiceTypeLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldInvoiceType, v))
}

// InvoiceTypeLTE applies the LTE predicate on the "invoice_type" field.
func InvoiceTypeLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldInvoiceType, v))
}

// InvoiceTypeContains applies the Contains predicate on the "invoice_type" field.
func InvoiceTypeContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldInvoiceType, v))
}

// InvoiceTypeHasPrefix applies the HasPrefix predicate on the "invoice_type" field.
func InvoiceTypeHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldInvoiceType, v))
}

// InvoiceTypeHasSuffix applies the HasSuffix predicate on the "invoice_type" field.
func InvoiceTypeHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldInvoiceType, v))
}

// InvoiceTypeEqualFold applies the EqualFold predicate on the "invoice_type" field.
func InvoiceTypeEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldInvoiceType, v))
}

// InvoiceTypeContainsFold applies the ContainsFold predicate on the "invoice_type" field.
func InvoiceTypeContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldInvoiceType, v))
}

// InvoiceStatusEQ applies the EQ predicate on the "invoice_status" field.
func InvoiceStatusEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceStatus, v))
}

// InvoiceStatusNEQ applies the NEQ predicate on the "invoice_status" field.
func InvoiceStatusNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldInvoiceStatus, v))
}

// InvoiceStatusIn applies the In predicate on the "invoice_status" field.
func InvoiceStatusIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldInvoiceStatus, vs...))
}

// InvoiceStatusNotIn applies the NotIn predicate on the "invoice_status" field.
func InvoiceStatusNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldInvoiceStatus, vs...))
}

// InvoiceStatusGT applies the GT predicate on the "invoice_status" field.
func InvoiceStatusGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldInvoiceStatus, v))
}

// InvoiceStatusGTE applies the GTE predicate on the "invoice_status" field.
func InvoiceStatusGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldInvoiceStatus, v))
}

// InvoiceStatusLT applies the LT predicate on the "invoice_status" field.
func InvoiceStatusLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldInvoiceStatus, v))
}

// InvoiceStatusLTE applies the LTE predicate on the "invoice_status" field.
func InvoiceStatusLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldInvoiceStatus, v))
}

// InvoiceStatusContains applies the Contains predicate on the "invoice_status" field.
func InvoiceStatusContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldInvoiceStatus, v))
}

// InvoiceStatusHasPrefix applies the HasPrefix predicate on the "invoice_status" field.
func InvoiceStatusHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldInvoiceStatus, v))
}

// InvoiceStatusHasSuffix applies the HasSuffix predicate on the "invoice_status" field.
func InvoiceStatusHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldInvoiceStatus, v))
}

// InvoiceStatusEqualFold applies the EqualFold predicate on the "invoice_status" field.
func InvoiceStatusEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldInvoiceStatus, v))
}

// InvoiceStatusContainsFold applies the ContainsFold predicate on the "invoice_status" field.
func InvoiceStatusContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldInvoiceStatus, v))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPaymentStatus, v))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPaymentStatus, vs...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPaymentStatus, vs...))
}

// PaymentStatusGT applies the GT predicate on the "payment_status" field.
func PaymentStatusGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPaymentStatus, v))
}

// PaymentStatusGTE applies the GTE predicate on the "payment_status" field.
func PaymentStatusGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPaymentStatus, v))
}

// PaymentStatusLT applies the LT predicate on the "payment_status" field.
func PaymentStatusLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPaymentStatus, v))
}

// PaymentStatusLTE applies the LTE predicate on the "payment_status" field.
func PaymentStatusLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPaymentStatus, v))
}

// PaymentStatusContains applies the Contains predicate on the "payment_status" field.
func PaymentStatusContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldPaymentStatus, v))
}

// PaymentStatusHasPrefix applies the HasPrefix predicate on the "payment_status" field.
func PaymentStatusHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldPaymentStatus, v))
}

// PaymentStatusHasSuffix applies the HasSuffix predicate on the "payment_status" field.
func PaymentStatusHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldPaymentStatus, v))
}

// PaymentStatusEqualFold applies the EqualFold predicate on the "payment_status" field.
func PaymentStatusEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldPaymentStatus, v))
}

// PaymentStatusContainsFold applies the ContainsFold predicate on the "payment_status" field.
func PaymentStatusContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldPaymentStatus, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCurrency, v))
}

// AmountDueEQ applies the EQ predicate on the "amount_due" field.
func AmountDueEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountDue, v))
}

// AmountDueNEQ applies the NEQ predicate on the "amount_due" field.
func AmountDueNEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAmountDue, v))
}

// AmountDueIn applies the In predicate on the "amount_due" field.
func AmountDueIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAmountDue, vs...))
}

// AmountDueNotIn applies the NotIn predicate on the "amount_due" field.
func AmountDueNotIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAmountDue, vs...))
}

// AmountDueGT applies the GT predicate on the "amount_due" field.
func AmountDueGT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAmountDue, v))
}

// AmountDueGTE applies the GTE predicate on the "amount_due" field.
func AmountDueGTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAmountDue, v))
}

// AmountDueLT applies the LT predicate on the "amount_due" field.
func AmountDueLT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAmountDue, v))
}

// AmountDueLTE applies the LTE predicate on the "amount_due" field.
func AmountDueLTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAmountDue, v))
}

// AmountPaidEQ applies the EQ predicate on the "amount_paid" field.
func AmountPaidEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountPaid, v))
}

// AmountPaidNEQ applies the NEQ predicate on the "amount_paid" field.
func AmountPaidNEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAmountPaid, v))
}

// AmountPaidIn applies the In predicate on the "amount_paid" field.
func AmountPaidIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAmountPaid, vs...))
}

// AmountPaidNotIn applies the NotIn predicate on the "amount_paid" field.
func AmountPaidNotIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAmountPaid, vs...))
}

// AmountPaidGT applies the GT predicate on the "amount_paid" field.
func AmountPaidGT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAmountPaid, v))
}

// AmountPaidGTE applies the GTE predicate on the "amount_paid" field.
func AmountPaidGTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAmountPaid, v))
}

// AmountPaidLT applies the LT predicate on the "amount_paid" field.
func AmountPaidLT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAmountPaid, v))
}

// AmountPaidLTE applies the LTE predicate on the "amount_paid" field.
func AmountPaidLTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAmountPaid, v))
}

// AmountRemainingEQ applies the EQ predicate on the "amount_remaining" field.
func AmountRemainingEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountRemaining, v))
}

// AmountRemainingNEQ applies the NEQ predicate on the "amount_remaining" field.
func AmountRemainingNEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAmountRemaining, v))
}

// AmountRemainingIn applies the In predicate on the "amount_remaining" field.
func AmountRemainingIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAmountRemaining, vs...))
}

// AmountRemainingNotIn applies the NotIn predicate on the "amount_remaining" field.
func AmountRemainingNotIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAmountRemaining, vs...))
}

// AmountRemainingGT applies the GT predicate on the "amount_remaining" field.
func AmountRemainingGT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAmountRemaining, v))
}

// AmountRemainingGTE applies the GTE predicate on the "amount_remaining" field.
func AmountRemainingGTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAmountRemaining, v))
}

// AmountRemainingLT applies the LT predicate on the "amount_remaining" field.
func AmountRemainingLT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAmountRemaining, v))
}

// AmountRemainingLTE applies the LTE predicate on the "amount_remaining" field.
func AmountRemainingLTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAmountRemaining, v))
}

// SubtotalEQ applies the EQ predicate on the "subtotal" field.
func SubtotalEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSubtotal, v))
}

// SubtotalNEQ applies the NEQ predicate on the "subtotal" field.
func SubtotalNEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldSubtotal, v))
}

// SubtotalIn applies the In predicate on the "subtotal" field.
func SubtotalIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldSubtotal, vs...))
}

// SubtotalNotIn applies the NotIn predicate on the "subtotal" field.
func SubtotalNotIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldSubtotal, vs...))
}

// SubtotalGT applies the GT predicate on the "subtotal" field.
func SubtotalGT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldSubtotal, v))
}

// SubtotalGTE applies the GTE predicate on the "subtotal" field.
func SubtotalGTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldSubtotal, v))
}

// SubtotalLT applies the LT predicate on the "subtotal" field.
func SubtotalLT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldSubtotal, v))
}

// SubtotalLTE applies the LTE predicate on the "subtotal" field.
func SubtotalLTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldSubtotal, v))
}

// SubtotalIsNil applies the IsNil predicate on the "subtotal" field.
func SubtotalIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldSubtotal))
}

// SubtotalNotNil applies the NotNil predicate on the "subtotal" field.
func SubtotalNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldSubtotal))
}

// AdjustmentAmountEQ applies the EQ predicate on the "adjustment_amount" field.
func AdjustmentAmountEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAdjustmentAmount, v))
}

// AdjustmentAmountNEQ applies the NEQ predicate on the "adjustment_amount" field.
func AdjustmentAmountNEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAdjustmentAmount, v))
}

// AdjustmentAmountIn applies the In predicate on the "adjustment_amount" field.
func AdjustmentAmountIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAdjustmentAmount, vs...))
}

// AdjustmentAmountNotIn applies the NotIn predicate on the "adjustment_amount" field.
func AdjustmentAmountNotIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAdjustmentAmount, vs...))
}

// AdjustmentAmountGT applies the GT predicate on the "adjustment_amount" field.
func AdjustmentAmountGT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAdjustmentAmount, v))
}

// AdjustmentAmountGTE applies the GTE predicate on the "adjustment_amount" field.
func AdjustmentAmountGTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAdjustmentAmount, v))
}

// AdjustmentAmountLT applies the LT predicate on the "adjustment_amount" field.
func AdjustmentAmountLT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAdjustmentAmount, v))
}

// AdjustmentAmountLTE applies the LTE predicate on the "adjustment_amount" field.
func AdjustmentAmountLTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAdjustmentAmount, v))
}

// AdjustmentAmountIsNil applies the IsNil predicate on the "adjustment_amount" field.
func AdjustmentAmountIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldAdjustmentAmount))
}

// AdjustmentAmountNotNil applies the NotNil predicate on the "adjustment_amount" field.
func AdjustmentAmountNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldAdjustmentAmount))
}

// RefundedAmountEQ applies the EQ predicate on the "refunded_amount" field.
func RefundedAmountEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldRefundedAmount, v))
}

// RefundedAmountNEQ applies the NEQ predicate on the "refunded_amount" field.
func RefundedAmountNEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldRefundedAmount, v))
}

// RefundedAmountIn applies the In predicate on the "refunded_amount" field.
func RefundedAmountIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldRefundedAmount, vs...))
}

// RefundedAmountNotIn applies the NotIn predicate on the "refunded_amount" field.
func RefundedAmountNotIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldRefundedAmount, vs...))
}

// RefundedAmountGT applies the GT predicate on the "refunded_amount" field.
func RefundedAmountGT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldRefundedAmount, v))
}

// RefundedAmountGTE applies the GTE predicate on the "refunded_amount" field.
func RefundedAmountGTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldRefundedAmount, v))
}

// RefundedAmountLT applies the LT predicate on the "refunded_amount" field.
func RefundedAmountLT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldRefundedAmount, v))
}

// RefundedAmountLTE applies the LTE predicate on the "refunded_amount" field.
func RefundedAmountLTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldRefundedAmount, v))
}

// RefundedAmountIsNil applies the IsNil predicate on the "refunded_amount" field.
func RefundedAmountIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldRefundedAmount))
}

// RefundedAmountNotNil applies the NotNil predicate on the "refunded_amount" field.
func RefundedAmountNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldRefundedAmount))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v decimal.Decimal) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTotal, v))
}

// TotalIsNil applies the IsNil predicate on the "total" field.
func TotalIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldTotal))
}

// TotalNotNil applies the NotNil predicate on the "total" field.
func TotalNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldTotal))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldDescription, v))
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldDueDate, v))
}

// DueDateIsNil applies the IsNil predicate on the "due_date" field.
func DueDateIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldDueDate))
}

// DueDateNotNil applies the NotNil predicate on the "due_date" field.
func DueDateNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldDueDate))
}

// PaidAtEQ applies the EQ predicate on the "paid_at" field.
func PaidAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaidAt, v))
}

// PaidAtNEQ applies the NEQ predicate on the "paid_at" field.
func PaidAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPaidAt, v))
}

// PaidAtIn applies the In predicate on the "paid_at" field.
func PaidAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPaidAt, vs...))
}

// PaidAtNotIn applies the NotIn predicate on the "paid_at" field.
func PaidAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPaidAt, vs...))
}

// PaidAtGT applies the GT predicate on the "paid_at" field.
func PaidAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPaidAt, v))
}

// PaidAtGTE applies the GTE predicate on the "paid_at" field.
func PaidAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPaidAt, v))
}

// PaidAtLT applies the LT predicate on the "paid_at" field.
func PaidAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPaidAt, v))
}

// PaidAtLTE applies the LTE predicate on the "paid_at" field.
func PaidAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPaidAt, v))
}

// PaidAtIsNil applies the IsNil predicate on the "paid_at" field.
func PaidAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldPaidAt))
}

// PaidAtNotNil applies the NotNil predicate on the "paid_at" field.
func PaidAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldPaidAt))
}

// VoidedAtEQ applies the EQ predicate on the "voided_at" field.
func VoidedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldVoidedAt, v))
}

// VoidedAtNEQ applies the NEQ predicate on the "voided_at" field.
func VoidedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldVoidedAt, v))
}

// VoidedAtIn applies the In predicate on the "voided_at" field.
func VoidedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldVoidedAt, vs...))
}

// VoidedAtNotIn applies the NotIn predicate on the "voided_at" field.
func VoidedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldVoidedAt, vs...))
}

// VoidedAtGT applies the GT predicate on the "voided_at" field.
func VoidedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldVoidedAt, v))
}

// VoidedAtGTE applies the GTE predicate on the "voided_at" field.
func VoidedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldVoidedAt, v))
}

// VoidedAtLT applies the LT predicate on the "voided_at" field.
func VoidedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldVoidedAt, v))
}

// VoidedAtLTE applies the LTE predicate on the "voided_at" field.
func VoidedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldVoidedAt, v))
}

// VoidedAtIsNil applies the IsNil predicate on the "voided_at" field.
func VoidedAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldVoidedAt))
}

// VoidedAtNotNil applies the NotNil predicate on the "voided_at" field.
func VoidedAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldVoidedAt))
}

// FinalizedAtEQ applies the EQ predicate on the "finalized_at" field.
func FinalizedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFinalizedAt, v))
}

// FinalizedAtNEQ applies the NEQ predicate on the "finalized_at" field.
func FinalizedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldFinalizedAt, v))
}

// FinalizedAtIn applies the In predicate on the "finalized_at" field.
func FinalizedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldFinalizedAt, vs...))
}

// FinalizedAtNotIn applies the NotIn predicate on the "finalized_at" field.
func FinalizedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldFinalizedAt, vs...))
}

// FinalizedAtGT applies the GT predicate on the "finalized_at" field.
func FinalizedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldFinalizedAt, v))
}

// FinalizedAtGTE applies the GTE predicate on the "finalized_at" field.
func FinalizedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldFinalizedAt, v))
}

// FinalizedAtLT applies the LT predicate on the "finalized_at" field.
func FinalizedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldFinalizedAt, v))
}

// FinalizedAtLTE applies the LTE predicate on the "finalized_at" field.
func FinalizedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldFinalizedAt, v))
}

// FinalizedAtIsNil applies the IsNil predicate on the "finalized_at" field.
func FinalizedAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldFinalizedAt))
}

// FinalizedAtNotNil applies the NotNil predicate on the "finalized_at" field.
func FinalizedAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldFinalizedAt))
}

// BillingPeriodEQ applies the EQ predicate on the "billing_period" field.
func BillingPeriodEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingPeriod, v))
}

// BillingPeriodNEQ applies the NEQ predicate on the "billing_period" field.
func BillingPeriodNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBillingPeriod, v))
}

// BillingPeriodIn applies the In predicate on the "billing_period" field.
func BillingPeriodIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBillingPeriod, vs...))
}

// BillingPeriodNotIn applies the NotIn predicate on the "billing_period" field.
func BillingPeriodNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBillingPeriod, vs...))
}

// BillingPeriodGT applies the GT predicate on the "billing_period" field.
func BillingPeriodGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBillingPeriod, v))
}

// BillingPeriodGTE applies the GTE predicate on the "billing_period" field.
func BillingPeriodGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBillingPeriod, v))
}

// BillingPeriodLT applies the LT predicate on the "billing_period" field.
func BillingPeriodLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBillingPeriod, v))
}

// BillingPeriodLTE applies the LTE predicate on the "billing_period" field.
func BillingPeriodLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBillingPeriod, v))
}

// BillingPeriodContains applies the Contains predicate on the "billing_period" field.
func BillingPeriodContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldBillingPeriod, v))
}

// BillingPeriodHasPrefix applies the HasPrefix predicate on the "billing_period" field.
func BillingPeriodHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldBillingPeriod, v))
}

// BillingPeriodHasSuffix applies the HasSuffix predicate on the "billing_period" field.
func BillingPeriodHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldBillingPeriod, v))
}

// BillingPeriodIsNil applies the IsNil predicate on the "billing_period" field.
func BillingPeriodIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldBillingPeriod))
}

// BillingPeriodNotNil applies the NotNil predicate on the "billing_period" field.
func BillingPeriodNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldBillingPeriod))
}

// BillingPeriodEqualFold applies the EqualFold predicate on the "billing_period" field.
func BillingPeriodEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldBillingPeriod, v))
}

// BillingPeriodContainsFold applies the ContainsFold predicate on the "billing_period" field.
func BillingPeriodContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldBillingPeriod, v))
}

// PeriodStartEQ applies the EQ predicate on the "period_start" field.
func PeriodStartEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodStart, v))
}

// PeriodStartNEQ applies the NEQ predicate on the "period_start" field.
func PeriodStartNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPeriodStart, v))
}

// PeriodStartIn applies the In predicate on the "period_start" field.
func PeriodStartIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPeriodStart, vs...))
}

// PeriodStartNotIn applies the NotIn predicate on the "period_start" field.
func PeriodStartNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPeriodStart, vs...))
}

// PeriodStartGT applies the GT predicate on the "period_start" field.
func PeriodStartGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPeriodStart, v))
}

// PeriodStartGTE applies the GTE predicate on the "period_start" field.
func PeriodStartGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPeriodStart, v))
}

// PeriodStartLT applies the LT predicate on the "period_start" field.
func PeriodStartLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPeriodStart, v))
}

// PeriodStartLTE applies the LTE predicate on the "period_start" field.
func PeriodStartLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPeriodStart, v))
}

// PeriodStartIsNil applies the IsNil predicate on the "period_start" field.
func PeriodStartIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldPeriodStart))
}

// PeriodStartNotNil applies the NotNil predicate on the "period_start" field.
func PeriodStartNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldPeriodStart))
}

// PeriodEndEQ applies the EQ predicate on the "period_end" field.
func PeriodEndEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodEnd, v))
}

// PeriodEndNEQ applies the NEQ predicate on the "period_end" field.
func PeriodEndNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPeriodEnd, v))
}

// PeriodEndIn applies the In predicate on the "period_end" field.
func PeriodEndIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPeriodEnd, vs...))
}

// PeriodEndNotIn applies the NotIn predicate on the "period_end" field.
func PeriodEndNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPeriodEnd, vs...))
}

// PeriodEndGT applies the GT predicate on the "period_end" field.
func PeriodEndGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPeriodEnd, v))
}

// PeriodEndGTE applies the GTE predicate on the "period_end" field.
func PeriodEndGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPeriodEnd, v))
}

// PeriodEndLT applies the LT predicate on the "period_end" field.
func PeriodEndLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPeriodEnd, v))
}

// PeriodEndLTE applies the LTE predicate on the "period_end" field.
func PeriodEndLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPeriodEnd, v))
}

// PeriodEndIsNil applies the IsNil predicate on the "period_end" field.
func PeriodEndIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldPeriodEnd))
}

// PeriodEndNotNil applies the NotNil predicate on the "period_end" field.
func PeriodEndNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldPeriodEnd))
}

// InvoicePdfURLEQ applies the EQ predicate on the "invoice_pdf_url" field.
func InvoicePdfURLEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoicePdfURL, v))
}

// InvoicePdfURLNEQ applies the NEQ predicate on the "invoice_pdf_url" field.
func InvoicePdfURLNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldInvoicePdfURL, v))
}

// InvoicePdfURLIn applies the In predicate on the "invoice_pdf_url" field.
func InvoicePdfURLIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldInvoicePdfURL, vs...))
}

// InvoicePdfURLNotIn applies the NotIn predicate on the "invoice_pdf_url" field.
func InvoicePdfURLNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldInvoicePdfURL, vs...))
}

// InvoicePdfURLGT applies the GT predicate on the "invoice_pdf_url" field.
func InvoicePdfURLGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldInvoicePdfURL, v))
}

// InvoicePdfURLGTE applies the GTE predicate on the "invoice_pdf_url" field.
func InvoicePdfURLGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldInvoicePdfURL, v))
}

// InvoicePdfURLLT applies the LT predicate on the "invoice_pdf_url" field.
func InvoicePdfURLLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldInvoicePdfURL, v))
}

// InvoicePdfURLLTE applies the LTE predicate on the "invoice_pdf_url" field.
func InvoicePdfURLLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldInvoicePdfURL, v))
}

// InvoicePdfURLContains applies the Contains predicate on the "invoice_pdf_url" field.
func InvoicePdfURLContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldInvoicePdfURL, v))
}

// InvoicePdfURLHasPrefix applies the HasPrefix predicate on the "invoice_pdf_url" field.
func InvoicePdfURLHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldInvoicePdfURL, v))
}

// InvoicePdfURLHasSuffix applies the HasSuffix predicate on the "invoice_pdf_url" field.
func InvoicePdfURLHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldInvoicePdfURL, v))
}

// InvoicePdfURLIsNil applies the IsNil predicate on the "invoice_pdf_url" field.
func InvoicePdfURLIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldInvoicePdfURL))
}

// InvoicePdfURLNotNil applies the NotNil predicate on the "invoice_pdf_url" field.
func InvoicePdfURLNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldInvoicePdfURL))
}

// InvoicePdfURLEqualFold applies the EqualFold predicate on the "invoice_pdf_url" field.
func InvoicePdfURLEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldInvoicePdfURL, v))
}

// InvoicePdfURLContainsFold applies the ContainsFold predicate on the "invoice_pdf_url" field.
func InvoicePdfURLContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldInvoicePdfURL, v))
}

// BillingReasonEQ applies the EQ predicate on the "billing_reason" field.
func BillingReasonEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingReason, v))
}

// BillingReasonNEQ applies the NEQ predicate on the "billing_reason" field.
func BillingReasonNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBillingReason, v))
}

// BillingReasonIn applies the In predicate on the "billing_reason" field.
func BillingReasonIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBillingReason, vs...))
}

// BillingReasonNotIn applies the NotIn predicate on the "billing_reason" field.
func BillingReasonNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBillingReason, vs...))
}

// BillingReasonGT applies the GT predicate on the "billing_reason" field.
func BillingReasonGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBillingReason, v))
}

// BillingReasonGTE applies the GTE predicate on the "billing_reason" field.
func BillingReasonGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBillingReason, v))
}

// BillingReasonLT applies the LT predicate on the "billing_reason" field.
func BillingReasonLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBillingReason, v))
}

// BillingReasonLTE applies the LTE predicate on the "billing_reason" field.
func BillingReasonLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBillingReason, v))
}

// BillingReasonContains applies the Contains predicate on the "billing_reason" field.
func BillingReasonContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldBillingReason, v))
}

// BillingReasonHasPrefix applies the HasPrefix predicate on the "billing_reason" field.
func BillingReasonHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldBillingReason, v))
}

// BillingReasonHasSuffix applies the HasSuffix predicate on the "billing_reason" field.
func BillingReasonHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldBillingReason, v))
}

// BillingReasonIsNil applies the IsNil predicate on the "billing_reason" field.
func BillingReasonIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldBillingReason))
}

// BillingReasonNotNil applies the NotNil predicate on the "billing_reason" field.
func BillingReasonNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldBillingReason))
}

// BillingReasonEqualFold applies the EqualFold predicate on the "billing_reason" field.
func BillingReasonEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldBillingReason, v))
}

// BillingReasonContainsFold applies the ContainsFold predicate on the "billing_reason" field.
func BillingReasonContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldBillingReason, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldMetadata))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldVersion, v))
}

// InvoiceNumberEQ applies the EQ predicate on the "invoice_number" field.
func InvoiceNumberEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceNumber, v))
}

// InvoiceNumberNEQ applies the NEQ predicate on the "invoice_number" field.
func InvoiceNumberNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldInvoiceNumber, v))
}

// InvoiceNumberIn applies the In predicate on the "invoice_number" field.
func InvoiceNumberIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldInvoiceNumber, vs...))
}

// InvoiceNumberNotIn applies the NotIn predicate on the "invoice_number" field.
func InvoiceNumberNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldInvoiceNumber, vs...))
}

// InvoiceNumberGT applies the GT predicate on the "invoice_number" field.
func InvoiceNumberGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldInvoiceNumber, v))
}

// InvoiceNumberGTE applies the GTE predicate on the "invoice_number" field.
func InvoiceNumberGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldInvoiceNumber, v))
}

// InvoiceNumberLT applies the LT predicate on the "invoice_number" field.
func InvoiceNumberLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldInvoiceNumber, v))
}

// InvoiceNumberLTE applies the LTE predicate on the "invoice_number" field.
func InvoiceNumberLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldInvoiceNumber, v))
}

// InvoiceNumberContains applies the Contains predicate on the "invoice_number" field.
func InvoiceNumberContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldInvoiceNumber, v))
}

// InvoiceNumberHasPrefix applies the HasPrefix predicate on the "invoice_number" field.
func InvoiceNumberHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldInvoiceNumber, v))
}

// InvoiceNumberHasSuffix applies the HasSuffix predicate on the "invoice_number" field.
func InvoiceNumberHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldInvoiceNumber, v))
}

// InvoiceNumberIsNil applies the IsNil predicate on the "invoice_number" field.
func InvoiceNumberIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldInvoiceNumber))
}

// InvoiceNumberNotNil applies the NotNil predicate on the "invoice_number" field.
func InvoiceNumberNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldInvoiceNumber))
}

// InvoiceNumberEqualFold applies the EqualFold predicate on the "invoice_number" field.
func InvoiceNumberEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldInvoiceNumber, v))
}

// InvoiceNumberContainsFold applies the ContainsFold predicate on the "invoice_number" field.
func InvoiceNumberContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldInvoiceNumber, v))
}

// BillingSequenceEQ applies the EQ predicate on the "billing_sequence" field.
func BillingSequenceEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingSequence, v))
}

// BillingSequenceNEQ applies the NEQ predicate on the "billing_sequence" field.
func BillingSequenceNEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBillingSequence, v))
}

// BillingSequenceIn applies the In predicate on the "billing_sequence" field.
func BillingSequenceIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBillingSequence, vs...))
}

// BillingSequenceNotIn applies the NotIn predicate on the "billing_sequence" field.
func BillingSequenceNotIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBillingSequence, vs...))
}

// BillingSequenceGT applies the GT predicate on the "billing_sequence" field.
func BillingSequenceGT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBillingSequence, v))
}

// BillingSequenceGTE applies the GTE predicate on the "billing_sequence" field.
func BillingSequenceGTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBillingSequence, v))
}

// BillingSequenceLT applies the LT predicate on the "billing_sequence" field.
func BillingSequenceLT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBillingSequence, v))
}

// BillingSequenceLTE applies the LTE predicate on the "billing_sequence" field.
func BillingSequenceLTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBillingSequence, v))
}

// BillingSequenceIsNil applies the IsNil predicate on the "billing_sequence" field.
func BillingSequenceIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldBillingSequence))
}

// BillingSequenceNotNil applies the NotNil predicate on the "billing_sequence" field.
func BillingSequenceNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldBillingSequence))
}

// IdempotencyKeyEQ applies the EQ predicate on the "idempotency_key" field.
func IdempotencyKeyEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyNEQ applies the NEQ predicate on the "idempotency_key" field.
func IdempotencyKeyNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyIn applies the In predicate on the "idempotency_key" field.
func IdempotencyKeyIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyNotIn applies the NotIn predicate on the "idempotency_key" field.
func IdempotencyKeyNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyGT applies the GT predicate on the "idempotency_key" field.
func IdempotencyKeyGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldIdempotencyKey, v))
}

// IdempotencyKeyGTE applies the GTE predicate on the "idempotency_key" field.
func IdempotencyKeyGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyLT applies the LT predicate on the "idempotency_key" field.
func IdempotencyKeyLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldIdempotencyKey, v))
}

// IdempotencyKeyLTE applies the LTE predicate on the "idempotency_key" field.
func IdempotencyKeyLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyContains applies the Contains predicate on the "idempotency_key" field.
func IdempotencyKeyContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasPrefix applies the HasPrefix predicate on the "idempotency_key" field.
func IdempotencyKeyHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasSuffix applies the HasSuffix predicate on the "idempotency_key" field.
func IdempotencyKeyHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldIdempotencyKey, v))
}

// IdempotencyKeyIsNil applies the IsNil predicate on the "idempotency_key" field.
func IdempotencyKeyIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldIdempotencyKey))
}

// IdempotencyKeyNotNil applies the NotNil predicate on the "idempotency_key" field.
func IdempotencyKeyNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldIdempotencyKey))
}

// IdempotencyKeyEqualFold applies the EqualFold predicate on the "idempotency_key" field.
func IdempotencyKeyEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldIdempotencyKey, v))
}

// IdempotencyKeyContainsFold applies the ContainsFold predicate on the "idempotency_key" field.
func IdempotencyKeyContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldIdempotencyKey, v))
}

// GracePeriodEndTimeEQ applies the EQ predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldGracePeriodEndTime, v))
}

// GracePeriodEndTimeNEQ applies the NEQ predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldGracePeriodEndTime, v))
}

// GracePeriodEndTimeIn applies the In predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldGracePeriodEndTime, vs...))
}

// GracePeriodEndTimeNotIn applies the NotIn predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldGracePeriodEndTime, vs...))
}

// GracePeriodEndTimeGT applies the GT predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldGracePeriodEndTime, v))
}

// GracePeriodEndTimeGTE applies the GTE predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldGracePeriodEndTime, v))
}

// GracePeriodEndTimeLT applies the LT predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldGracePeriodEndTime, v))
}

// GracePeriodEndTimeLTE applies the LTE predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldGracePeriodEndTime, v))
}

// GracePeriodEndTimeIsNil applies the IsNil predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldGracePeriodEndTime))
}

// GracePeriodEndTimeNotNil applies the NotNil predicate on the "grace_period_end_time" field.
func GracePeriodEndTimeNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldGracePeriodEndTime))
}

// HasLineItems applies the HasEdge predicate on the "line_items" edge.
func HasLineItems() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LineItemsTable, LineItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineItemsWith applies the HasEdge predicate on the "line_items" edge with a given conditions (other predicates).
func HasLineItemsWith(preds ...predicate.InvoiceLineItem) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newLineItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.NotPredicates(p))
}
