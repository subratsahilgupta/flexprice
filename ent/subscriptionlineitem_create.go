// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
	"github.com/shopspring/decimal"
)

// SubscriptionLineItemCreate is the builder for creating a SubscriptionLineItem entity.
type SubscriptionLineItemCreate struct {
	config
	mutation *SubscriptionLineItemMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (slic *SubscriptionLineItemCreate) SetTenantID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetTenantID(s)
	return slic
}

// SetStatus sets the "status" field.
func (slic *SubscriptionLineItemCreate) SetStatus(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetStatus(s)
	return slic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableStatus(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetStatus(*s)
	}
	return slic
}

// SetCreatedAt sets the "created_at" field.
func (slic *SubscriptionLineItemCreate) SetCreatedAt(t time.Time) *SubscriptionLineItemCreate {
	slic.mutation.SetCreatedAt(t)
	return slic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionLineItemCreate {
	if t != nil {
		slic.SetCreatedAt(*t)
	}
	return slic
}

// SetUpdatedAt sets the "updated_at" field.
func (slic *SubscriptionLineItemCreate) SetUpdatedAt(t time.Time) *SubscriptionLineItemCreate {
	slic.mutation.SetUpdatedAt(t)
	return slic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionLineItemCreate {
	if t != nil {
		slic.SetUpdatedAt(*t)
	}
	return slic
}

// SetCreatedBy sets the "created_by" field.
func (slic *SubscriptionLineItemCreate) SetCreatedBy(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetCreatedBy(s)
	return slic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableCreatedBy(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetCreatedBy(*s)
	}
	return slic
}

// SetUpdatedBy sets the "updated_by" field.
func (slic *SubscriptionLineItemCreate) SetUpdatedBy(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetUpdatedBy(s)
	return slic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableUpdatedBy(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetUpdatedBy(*s)
	}
	return slic
}

// SetEnvironmentID sets the "environment_id" field.
func (slic *SubscriptionLineItemCreate) SetEnvironmentID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetEnvironmentID(s)
	return slic
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableEnvironmentID(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetEnvironmentID(*s)
	}
	return slic
}

// SetSubscriptionID sets the "subscription_id" field.
func (slic *SubscriptionLineItemCreate) SetSubscriptionID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetSubscriptionID(s)
	return slic
}

// SetCustomerID sets the "customer_id" field.
func (slic *SubscriptionLineItemCreate) SetCustomerID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetCustomerID(s)
	return slic
}

// SetPlanID sets the "plan_id" field.
func (slic *SubscriptionLineItemCreate) SetPlanID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetPlanID(s)
	return slic
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillablePlanID(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetPlanID(*s)
	}
	return slic
}

// SetPlanDisplayName sets the "plan_display_name" field.
func (slic *SubscriptionLineItemCreate) SetPlanDisplayName(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetPlanDisplayName(s)
	return slic
}

// SetNillablePlanDisplayName sets the "plan_display_name" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillablePlanDisplayName(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetPlanDisplayName(*s)
	}
	return slic
}

// SetPriceID sets the "price_id" field.
func (slic *SubscriptionLineItemCreate) SetPriceID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetPriceID(s)
	return slic
}

// SetPriceType sets the "price_type" field.
func (slic *SubscriptionLineItemCreate) SetPriceType(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetPriceType(s)
	return slic
}

// SetNillablePriceType sets the "price_type" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillablePriceType(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetPriceType(*s)
	}
	return slic
}

// SetMeterID sets the "meter_id" field.
func (slic *SubscriptionLineItemCreate) SetMeterID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetMeterID(s)
	return slic
}

// SetNillableMeterID sets the "meter_id" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableMeterID(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetMeterID(*s)
	}
	return slic
}

// SetMeterDisplayName sets the "meter_display_name" field.
func (slic *SubscriptionLineItemCreate) SetMeterDisplayName(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetMeterDisplayName(s)
	return slic
}

// SetNillableMeterDisplayName sets the "meter_display_name" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableMeterDisplayName(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetMeterDisplayName(*s)
	}
	return slic
}

// SetPriceUnitID sets the "price_unit_id" field.
func (slic *SubscriptionLineItemCreate) SetPriceUnitID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetPriceUnitID(s)
	return slic
}

// SetNillablePriceUnitID sets the "price_unit_id" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillablePriceUnitID(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetPriceUnitID(*s)
	}
	return slic
}

// SetPriceUnit sets the "price_unit" field.
func (slic *SubscriptionLineItemCreate) SetPriceUnit(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetPriceUnit(s)
	return slic
}

// SetNillablePriceUnit sets the "price_unit" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillablePriceUnit(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetPriceUnit(*s)
	}
	return slic
}

// SetDisplayName sets the "display_name" field.
func (slic *SubscriptionLineItemCreate) SetDisplayName(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetDisplayName(s)
	return slic
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableDisplayName(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetDisplayName(*s)
	}
	return slic
}

// SetQuantity sets the "quantity" field.
func (slic *SubscriptionLineItemCreate) SetQuantity(d decimal.Decimal) *SubscriptionLineItemCreate {
	slic.mutation.SetQuantity(d)
	return slic
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableQuantity(d *decimal.Decimal) *SubscriptionLineItemCreate {
	if d != nil {
		slic.SetQuantity(*d)
	}
	return slic
}

// SetCurrency sets the "currency" field.
func (slic *SubscriptionLineItemCreate) SetCurrency(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetCurrency(s)
	return slic
}

// SetBillingPeriod sets the "billing_period" field.
func (slic *SubscriptionLineItemCreate) SetBillingPeriod(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetBillingPeriod(s)
	return slic
}

// SetInvoiceCadence sets the "invoice_cadence" field.
func (slic *SubscriptionLineItemCreate) SetInvoiceCadence(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetInvoiceCadence(s)
	return slic
}

// SetNillableInvoiceCadence sets the "invoice_cadence" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableInvoiceCadence(s *string) *SubscriptionLineItemCreate {
	if s != nil {
		slic.SetInvoiceCadence(*s)
	}
	return slic
}

// SetTrialPeriod sets the "trial_period" field.
func (slic *SubscriptionLineItemCreate) SetTrialPeriod(i int) *SubscriptionLineItemCreate {
	slic.mutation.SetTrialPeriod(i)
	return slic
}

// SetNillableTrialPeriod sets the "trial_period" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableTrialPeriod(i *int) *SubscriptionLineItemCreate {
	if i != nil {
		slic.SetTrialPeriod(*i)
	}
	return slic
}

// SetStartDate sets the "start_date" field.
func (slic *SubscriptionLineItemCreate) SetStartDate(t time.Time) *SubscriptionLineItemCreate {
	slic.mutation.SetStartDate(t)
	return slic
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableStartDate(t *time.Time) *SubscriptionLineItemCreate {
	if t != nil {
		slic.SetStartDate(*t)
	}
	return slic
}

// SetEndDate sets the "end_date" field.
func (slic *SubscriptionLineItemCreate) SetEndDate(t time.Time) *SubscriptionLineItemCreate {
	slic.mutation.SetEndDate(t)
	return slic
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (slic *SubscriptionLineItemCreate) SetNillableEndDate(t *time.Time) *SubscriptionLineItemCreate {
	if t != nil {
		slic.SetEndDate(*t)
	}
	return slic
}

// SetMetadata sets the "metadata" field.
func (slic *SubscriptionLineItemCreate) SetMetadata(m map[string]string) *SubscriptionLineItemCreate {
	slic.mutation.SetMetadata(m)
	return slic
}

// SetID sets the "id" field.
func (slic *SubscriptionLineItemCreate) SetID(s string) *SubscriptionLineItemCreate {
	slic.mutation.SetID(s)
	return slic
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (slic *SubscriptionLineItemCreate) SetSubscription(s *Subscription) *SubscriptionLineItemCreate {
	return slic.SetSubscriptionID(s.ID)
}

// AddCouponAssociationIDs adds the "coupon_associations" edge to the CouponAssociation entity by IDs.
func (slic *SubscriptionLineItemCreate) AddCouponAssociationIDs(ids ...string) *SubscriptionLineItemCreate {
	slic.mutation.AddCouponAssociationIDs(ids...)
	return slic
}

// AddCouponAssociations adds the "coupon_associations" edges to the CouponAssociation entity.
func (slic *SubscriptionLineItemCreate) AddCouponAssociations(c ...*CouponAssociation) *SubscriptionLineItemCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return slic.AddCouponAssociationIDs(ids...)
}

// Mutation returns the SubscriptionLineItemMutation object of the builder.
func (slic *SubscriptionLineItemCreate) Mutation() *SubscriptionLineItemMutation {
	return slic.mutation
}

// Save creates the SubscriptionLineItem in the database.
func (slic *SubscriptionLineItemCreate) Save(ctx context.Context) (*SubscriptionLineItem, error) {
	slic.defaults()
	return withHooks(ctx, slic.sqlSave, slic.mutation, slic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slic *SubscriptionLineItemCreate) SaveX(ctx context.Context) *SubscriptionLineItem {
	v, err := slic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slic *SubscriptionLineItemCreate) Exec(ctx context.Context) error {
	_, err := slic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slic *SubscriptionLineItemCreate) ExecX(ctx context.Context) {
	if err := slic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slic *SubscriptionLineItemCreate) defaults() {
	if _, ok := slic.mutation.Status(); !ok {
		v := subscriptionlineitem.DefaultStatus
		slic.mutation.SetStatus(v)
	}
	if _, ok := slic.mutation.CreatedAt(); !ok {
		v := subscriptionlineitem.DefaultCreatedAt()
		slic.mutation.SetCreatedAt(v)
	}
	if _, ok := slic.mutation.UpdatedAt(); !ok {
		v := subscriptionlineitem.DefaultUpdatedAt()
		slic.mutation.SetUpdatedAt(v)
	}
	if _, ok := slic.mutation.EnvironmentID(); !ok {
		v := subscriptionlineitem.DefaultEnvironmentID
		slic.mutation.SetEnvironmentID(v)
	}
	if _, ok := slic.mutation.Quantity(); !ok {
		v := subscriptionlineitem.DefaultQuantity
		slic.mutation.SetQuantity(v)
	}
	if _, ok := slic.mutation.TrialPeriod(); !ok {
		v := subscriptionlineitem.DefaultTrialPeriod
		slic.mutation.SetTrialPeriod(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slic *SubscriptionLineItemCreate) check() error {
	if _, ok := slic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SubscriptionLineItem.tenant_id"`)}
	}
	if v, ok := slic.mutation.TenantID(); ok {
		if err := subscriptionlineitem.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.tenant_id": %w`, err)}
		}
	}
	if _, ok := slic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SubscriptionLineItem.status"`)}
	}
	if _, ok := slic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscriptionLineItem.created_at"`)}
	}
	if _, ok := slic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscriptionLineItem.updated_at"`)}
	}
	if _, ok := slic.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`ent: missing required field "SubscriptionLineItem.subscription_id"`)}
	}
	if v, ok := slic.mutation.SubscriptionID(); ok {
		if err := subscriptionlineitem.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.subscription_id": %w`, err)}
		}
	}
	if _, ok := slic.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "SubscriptionLineItem.customer_id"`)}
	}
	if v, ok := slic.mutation.CustomerID(); ok {
		if err := subscriptionlineitem.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.customer_id": %w`, err)}
		}
	}
	if _, ok := slic.mutation.PriceID(); !ok {
		return &ValidationError{Name: "price_id", err: errors.New(`ent: missing required field "SubscriptionLineItem.price_id"`)}
	}
	if v, ok := slic.mutation.PriceID(); ok {
		if err := subscriptionlineitem.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.price_id": %w`, err)}
		}
	}
	if _, ok := slic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "SubscriptionLineItem.quantity"`)}
	}
	if _, ok := slic.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "SubscriptionLineItem.currency"`)}
	}
	if v, ok := slic.mutation.Currency(); ok {
		if err := subscriptionlineitem.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.currency": %w`, err)}
		}
	}
	if _, ok := slic.mutation.BillingPeriod(); !ok {
		return &ValidationError{Name: "billing_period", err: errors.New(`ent: missing required field "SubscriptionLineItem.billing_period"`)}
	}
	if v, ok := slic.mutation.BillingPeriod(); ok {
		if err := subscriptionlineitem.BillingPeriodValidator(v); err != nil {
			return &ValidationError{Name: "billing_period", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.billing_period": %w`, err)}
		}
	}
	if _, ok := slic.mutation.TrialPeriod(); !ok {
		return &ValidationError{Name: "trial_period", err: errors.New(`ent: missing required field "SubscriptionLineItem.trial_period"`)}
	}
	if len(slic.mutation.SubscriptionIDs()) == 0 {
		return &ValidationError{Name: "subscription", err: errors.New(`ent: missing required edge "SubscriptionLineItem.subscription"`)}
	}
	return nil
}

func (slic *SubscriptionLineItemCreate) sqlSave(ctx context.Context) (*SubscriptionLineItem, error) {
	if err := slic.check(); err != nil {
		return nil, err
	}
	_node, _spec := slic.createSpec()
	if err := sqlgraph.CreateNode(ctx, slic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionLineItem.ID type: %T", _spec.ID.Value)
		}
	}
	slic.mutation.id = &_node.ID
	slic.mutation.done = true
	return _node, nil
}

func (slic *SubscriptionLineItemCreate) createSpec() (*SubscriptionLineItem, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionLineItem{config: slic.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionlineitem.Table, sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString))
	)
	if id, ok := slic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := slic.mutation.TenantID(); ok {
		_spec.SetField(subscriptionlineitem.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := slic.mutation.Status(); ok {
		_spec.SetField(subscriptionlineitem.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := slic.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionlineitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := slic.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionlineitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := slic.mutation.CreatedBy(); ok {
		_spec.SetField(subscriptionlineitem.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := slic.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionlineitem.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := slic.mutation.EnvironmentID(); ok {
		_spec.SetField(subscriptionlineitem.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := slic.mutation.CustomerID(); ok {
		_spec.SetField(subscriptionlineitem.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := slic.mutation.PlanID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPlanID, field.TypeString, value)
		_node.PlanID = &value
	}
	if value, ok := slic.mutation.PlanDisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldPlanDisplayName, field.TypeString, value)
		_node.PlanDisplayName = &value
	}
	if value, ok := slic.mutation.PriceID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceID, field.TypeString, value)
		_node.PriceID = value
	}
	if value, ok := slic.mutation.PriceType(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceType, field.TypeString, value)
		_node.PriceType = &value
	}
	if value, ok := slic.mutation.MeterID(); ok {
		_spec.SetField(subscriptionlineitem.FieldMeterID, field.TypeString, value)
		_node.MeterID = &value
	}
	if value, ok := slic.mutation.MeterDisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldMeterDisplayName, field.TypeString, value)
		_node.MeterDisplayName = &value
	}
	if value, ok := slic.mutation.PriceUnitID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceUnitID, field.TypeString, value)
		_node.PriceUnitID = &value
	}
	if value, ok := slic.mutation.PriceUnit(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceUnit, field.TypeString, value)
		_node.PriceUnit = &value
	}
	if value, ok := slic.mutation.DisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = &value
	}
	if value, ok := slic.mutation.Quantity(); ok {
		_spec.SetField(subscriptionlineitem.FieldQuantity, field.TypeOther, value)
		_node.Quantity = value
	}
	if value, ok := slic.mutation.Currency(); ok {
		_spec.SetField(subscriptionlineitem.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := slic.mutation.BillingPeriod(); ok {
		_spec.SetField(subscriptionlineitem.FieldBillingPeriod, field.TypeString, value)
		_node.BillingPeriod = value
	}
	if value, ok := slic.mutation.InvoiceCadence(); ok {
		_spec.SetField(subscriptionlineitem.FieldInvoiceCadence, field.TypeString, value)
		_node.InvoiceCadence = value
	}
	if value, ok := slic.mutation.TrialPeriod(); ok {
		_spec.SetField(subscriptionlineitem.FieldTrialPeriod, field.TypeInt, value)
		_node.TrialPeriod = value
	}
	if value, ok := slic.mutation.StartDate(); ok {
		_spec.SetField(subscriptionlineitem.FieldStartDate, field.TypeTime, value)
		_node.StartDate = &value
	}
	if value, ok := slic.mutation.EndDate(); ok {
		_spec.SetField(subscriptionlineitem.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := slic.mutation.Metadata(); ok {
		_spec.SetField(subscriptionlineitem.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := slic.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionlineitem.SubscriptionTable,
			Columns: []string{subscriptionlineitem.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slic.mutation.CouponAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionlineitem.CouponAssociationsTable,
			Columns: []string{subscriptionlineitem.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscriptionLineItemCreateBulk is the builder for creating many SubscriptionLineItem entities in bulk.
type SubscriptionLineItemCreateBulk struct {
	config
	err      error
	builders []*SubscriptionLineItemCreate
}

// Save creates the SubscriptionLineItem entities in the database.
func (slicb *SubscriptionLineItemCreateBulk) Save(ctx context.Context) ([]*SubscriptionLineItem, error) {
	if slicb.err != nil {
		return nil, slicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slicb.builders))
	nodes := make([]*SubscriptionLineItem, len(slicb.builders))
	mutators := make([]Mutator, len(slicb.builders))
	for i := range slicb.builders {
		func(i int, root context.Context) {
			builder := slicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionLineItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slicb *SubscriptionLineItemCreateBulk) SaveX(ctx context.Context) []*SubscriptionLineItem {
	v, err := slicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slicb *SubscriptionLineItemCreateBulk) Exec(ctx context.Context) error {
	_, err := slicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slicb *SubscriptionLineItemCreateBulk) ExecX(ctx context.Context) {
	if err := slicb.Exec(ctx); err != nil {
		panic(err)
	}
}
