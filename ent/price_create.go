// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/price"
	"github.com/flexprice/flexprice/ent/schema"
)

// PriceCreate is the builder for creating a Price entity.
type PriceCreate struct {
	config
	mutation *PriceMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (pc *PriceCreate) SetTenantID(s string) *PriceCreate {
	pc.mutation.SetTenantID(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *PriceCreate) SetStatus(s string) *PriceCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PriceCreate) SetNillableStatus(s *string) *PriceCreate {
	if s != nil {
		pc.SetStatus(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PriceCreate) SetCreatedAt(t time.Time) *PriceCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PriceCreate) SetNillableCreatedAt(t *time.Time) *PriceCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PriceCreate) SetUpdatedAt(t time.Time) *PriceCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PriceCreate) SetNillableUpdatedAt(t *time.Time) *PriceCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PriceCreate) SetCreatedBy(s string) *PriceCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PriceCreate) SetNillableCreatedBy(s *string) *PriceCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PriceCreate) SetUpdatedBy(s string) *PriceCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PriceCreate) SetNillableUpdatedBy(s *string) *PriceCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetEnvironmentID sets the "environment_id" field.
func (pc *PriceCreate) SetEnvironmentID(s string) *PriceCreate {
	pc.mutation.SetEnvironmentID(s)
	return pc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (pc *PriceCreate) SetNillableEnvironmentID(s *string) *PriceCreate {
	if s != nil {
		pc.SetEnvironmentID(*s)
	}
	return pc
}

// SetAmount sets the "amount" field.
func (pc *PriceCreate) SetAmount(f float64) *PriceCreate {
	pc.mutation.SetAmount(f)
	return pc
}

// SetCurrency sets the "currency" field.
func (pc *PriceCreate) SetCurrency(s string) *PriceCreate {
	pc.mutation.SetCurrency(s)
	return pc
}

// SetDisplayAmount sets the "display_amount" field.
func (pc *PriceCreate) SetDisplayAmount(s string) *PriceCreate {
	pc.mutation.SetDisplayAmount(s)
	return pc
}

// SetPlanID sets the "plan_id" field.
func (pc *PriceCreate) SetPlanID(s string) *PriceCreate {
	pc.mutation.SetPlanID(s)
	return pc
}

// SetType sets the "type" field.
func (pc *PriceCreate) SetType(s string) *PriceCreate {
	pc.mutation.SetType(s)
	return pc
}

// SetBillingPeriod sets the "billing_period" field.
func (pc *PriceCreate) SetBillingPeriod(s string) *PriceCreate {
	pc.mutation.SetBillingPeriod(s)
	return pc
}

// SetBillingPeriodCount sets the "billing_period_count" field.
func (pc *PriceCreate) SetBillingPeriodCount(i int) *PriceCreate {
	pc.mutation.SetBillingPeriodCount(i)
	return pc
}

// SetBillingModel sets the "billing_model" field.
func (pc *PriceCreate) SetBillingModel(s string) *PriceCreate {
	pc.mutation.SetBillingModel(s)
	return pc
}

// SetBillingCadence sets the "billing_cadence" field.
func (pc *PriceCreate) SetBillingCadence(s string) *PriceCreate {
	pc.mutation.SetBillingCadence(s)
	return pc
}

// SetInvoiceCadence sets the "invoice_cadence" field.
func (pc *PriceCreate) SetInvoiceCadence(s string) *PriceCreate {
	pc.mutation.SetInvoiceCadence(s)
	return pc
}

// SetNillableInvoiceCadence sets the "invoice_cadence" field if the given value is not nil.
func (pc *PriceCreate) SetNillableInvoiceCadence(s *string) *PriceCreate {
	if s != nil {
		pc.SetInvoiceCadence(*s)
	}
	return pc
}

// SetTrialPeriod sets the "trial_period" field.
func (pc *PriceCreate) SetTrialPeriod(i int) *PriceCreate {
	pc.mutation.SetTrialPeriod(i)
	return pc
}

// SetNillableTrialPeriod sets the "trial_period" field if the given value is not nil.
func (pc *PriceCreate) SetNillableTrialPeriod(i *int) *PriceCreate {
	if i != nil {
		pc.SetTrialPeriod(*i)
	}
	return pc
}

// SetMeterID sets the "meter_id" field.
func (pc *PriceCreate) SetMeterID(s string) *PriceCreate {
	pc.mutation.SetMeterID(s)
	return pc
}

// SetNillableMeterID sets the "meter_id" field if the given value is not nil.
func (pc *PriceCreate) SetNillableMeterID(s *string) *PriceCreate {
	if s != nil {
		pc.SetMeterID(*s)
	}
	return pc
}

// SetFilterValues sets the "filter_values" field.
func (pc *PriceCreate) SetFilterValues(m map[string][]string) *PriceCreate {
	pc.mutation.SetFilterValues(m)
	return pc
}

// SetTierMode sets the "tier_mode" field.
func (pc *PriceCreate) SetTierMode(s string) *PriceCreate {
	pc.mutation.SetTierMode(s)
	return pc
}

// SetNillableTierMode sets the "tier_mode" field if the given value is not nil.
func (pc *PriceCreate) SetNillableTierMode(s *string) *PriceCreate {
	if s != nil {
		pc.SetTierMode(*s)
	}
	return pc
}

// SetTiers sets the "tiers" field.
func (pc *PriceCreate) SetTiers(st []schema.PriceTier) *PriceCreate {
	pc.mutation.SetTiers(st)
	return pc
}

// SetTransformQuantity sets the "transform_quantity" field.
func (pc *PriceCreate) SetTransformQuantity(sq schema.TransformQuantity) *PriceCreate {
	pc.mutation.SetTransformQuantity(sq)
	return pc
}

// SetNillableTransformQuantity sets the "transform_quantity" field if the given value is not nil.
func (pc *PriceCreate) SetNillableTransformQuantity(sq *schema.TransformQuantity) *PriceCreate {
	if sq != nil {
		pc.SetTransformQuantity(*sq)
	}
	return pc
}

// SetLookupKey sets the "lookup_key" field.
func (pc *PriceCreate) SetLookupKey(s string) *PriceCreate {
	pc.mutation.SetLookupKey(s)
	return pc
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (pc *PriceCreate) SetNillableLookupKey(s *string) *PriceCreate {
	if s != nil {
		pc.SetLookupKey(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PriceCreate) SetDescription(s string) *PriceCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PriceCreate) SetNillableDescription(s *string) *PriceCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetMetadata sets the "metadata" field.
func (pc *PriceCreate) SetMetadata(m map[string]string) *PriceCreate {
	pc.mutation.SetMetadata(m)
	return pc
}

// SetID sets the "id" field.
func (pc *PriceCreate) SetID(s string) *PriceCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddCostsheetIDs adds the "costsheet" edge to the Costsheet entity by IDs.
func (pc *PriceCreate) AddCostsheetIDs(ids ...string) *PriceCreate {
	pc.mutation.AddCostsheetIDs(ids...)
	return pc
}

// AddCostsheet adds the "costsheet" edges to the Costsheet entity.
func (pc *PriceCreate) AddCostsheet(c ...*Costsheet) *PriceCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCostsheetIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (pc *PriceCreate) Mutation() *PriceMutation {
	return pc.mutation
}

// Save creates the Price in the database.
func (pc *PriceCreate) Save(ctx context.Context) (*Price, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PriceCreate) SaveX(ctx context.Context) *Price {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PriceCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PriceCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PriceCreate) defaults() {
	if _, ok := pc.mutation.Status(); !ok {
		v := price.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := price.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := price.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.EnvironmentID(); !ok {
		v := price.DefaultEnvironmentID
		pc.mutation.SetEnvironmentID(v)
	}
	if _, ok := pc.mutation.TrialPeriod(); !ok {
		v := price.DefaultTrialPeriod
		pc.mutation.SetTrialPeriod(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PriceCreate) check() error {
	if _, ok := pc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Price.tenant_id"`)}
	}
	if v, ok := pc.mutation.TenantID(); ok {
		if err := price.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Price.tenant_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Price.status"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Price.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Price.updated_at"`)}
	}
	if _, ok := pc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Price.amount"`)}
	}
	if _, ok := pc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Price.currency"`)}
	}
	if v, ok := pc.mutation.Currency(); ok {
		if err := price.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Price.currency": %w`, err)}
		}
	}
	if _, ok := pc.mutation.DisplayAmount(); !ok {
		return &ValidationError{Name: "display_amount", err: errors.New(`ent: missing required field "Price.display_amount"`)}
	}
	if v, ok := pc.mutation.DisplayAmount(); ok {
		if err := price.DisplayAmountValidator(v); err != nil {
			return &ValidationError{Name: "display_amount", err: fmt.Errorf(`ent: validator failed for field "Price.display_amount": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`ent: missing required field "Price.plan_id"`)}
	}
	if v, ok := pc.mutation.PlanID(); ok {
		if err := price.PlanIDValidator(v); err != nil {
			return &ValidationError{Name: "plan_id", err: fmt.Errorf(`ent: validator failed for field "Price.plan_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Price.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := price.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Price.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BillingPeriod(); !ok {
		return &ValidationError{Name: "billing_period", err: errors.New(`ent: missing required field "Price.billing_period"`)}
	}
	if v, ok := pc.mutation.BillingPeriod(); ok {
		if err := price.BillingPeriodValidator(v); err != nil {
			return &ValidationError{Name: "billing_period", err: fmt.Errorf(`ent: validator failed for field "Price.billing_period": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BillingPeriodCount(); !ok {
		return &ValidationError{Name: "billing_period_count", err: errors.New(`ent: missing required field "Price.billing_period_count"`)}
	}
	if v, ok := pc.mutation.BillingPeriodCount(); ok {
		if err := price.BillingPeriodCountValidator(v); err != nil {
			return &ValidationError{Name: "billing_period_count", err: fmt.Errorf(`ent: validator failed for field "Price.billing_period_count": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BillingModel(); !ok {
		return &ValidationError{Name: "billing_model", err: errors.New(`ent: missing required field "Price.billing_model"`)}
	}
	if v, ok := pc.mutation.BillingModel(); ok {
		if err := price.BillingModelValidator(v); err != nil {
			return &ValidationError{Name: "billing_model", err: fmt.Errorf(`ent: validator failed for field "Price.billing_model": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BillingCadence(); !ok {
		return &ValidationError{Name: "billing_cadence", err: errors.New(`ent: missing required field "Price.billing_cadence"`)}
	}
	if v, ok := pc.mutation.BillingCadence(); ok {
		if err := price.BillingCadenceValidator(v); err != nil {
			return &ValidationError{Name: "billing_cadence", err: fmt.Errorf(`ent: validator failed for field "Price.billing_cadence": %w`, err)}
		}
	}
	if _, ok := pc.mutation.TrialPeriod(); !ok {
		return &ValidationError{Name: "trial_period", err: errors.New(`ent: missing required field "Price.trial_period"`)}
	}
	return nil
}

func (pc *PriceCreate) sqlSave(ctx context.Context) (*Price, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Price.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PriceCreate) createSpec() (*Price, *sqlgraph.CreateSpec) {
	var (
		_node = &Price{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(price.Table, sqlgraph.NewFieldSpec(price.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.TenantID(); ok {
		_spec.SetField(price.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(price.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(price.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(price.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(price.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(price.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.EnvironmentID(); ok {
		_spec.SetField(price.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := pc.mutation.Amount(); ok {
		_spec.SetField(price.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pc.mutation.Currency(); ok {
		_spec.SetField(price.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := pc.mutation.DisplayAmount(); ok {
		_spec.SetField(price.FieldDisplayAmount, field.TypeString, value)
		_node.DisplayAmount = value
	}
	if value, ok := pc.mutation.PlanID(); ok {
		_spec.SetField(price.FieldPlanID, field.TypeString, value)
		_node.PlanID = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(price.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.BillingPeriod(); ok {
		_spec.SetField(price.FieldBillingPeriod, field.TypeString, value)
		_node.BillingPeriod = value
	}
	if value, ok := pc.mutation.BillingPeriodCount(); ok {
		_spec.SetField(price.FieldBillingPeriodCount, field.TypeInt, value)
		_node.BillingPeriodCount = value
	}
	if value, ok := pc.mutation.BillingModel(); ok {
		_spec.SetField(price.FieldBillingModel, field.TypeString, value)
		_node.BillingModel = value
	}
	if value, ok := pc.mutation.BillingCadence(); ok {
		_spec.SetField(price.FieldBillingCadence, field.TypeString, value)
		_node.BillingCadence = value
	}
	if value, ok := pc.mutation.InvoiceCadence(); ok {
		_spec.SetField(price.FieldInvoiceCadence, field.TypeString, value)
		_node.InvoiceCadence = value
	}
	if value, ok := pc.mutation.TrialPeriod(); ok {
		_spec.SetField(price.FieldTrialPeriod, field.TypeInt, value)
		_node.TrialPeriod = value
	}
	if value, ok := pc.mutation.MeterID(); ok {
		_spec.SetField(price.FieldMeterID, field.TypeString, value)
		_node.MeterID = &value
	}
	if value, ok := pc.mutation.FilterValues(); ok {
		_spec.SetField(price.FieldFilterValues, field.TypeJSON, value)
		_node.FilterValues = value
	}
	if value, ok := pc.mutation.TierMode(); ok {
		_spec.SetField(price.FieldTierMode, field.TypeString, value)
		_node.TierMode = &value
	}
	if value, ok := pc.mutation.Tiers(); ok {
		_spec.SetField(price.FieldTiers, field.TypeJSON, value)
		_node.Tiers = value
	}
	if value, ok := pc.mutation.TransformQuantity(); ok {
		_spec.SetField(price.FieldTransformQuantity, field.TypeJSON, value)
		_node.TransformQuantity = value
	}
	if value, ok := pc.mutation.LookupKey(); ok {
		_spec.SetField(price.FieldLookupKey, field.TypeString, value)
		_node.LookupKey = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(price.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Metadata(); ok {
		_spec.SetField(price.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := pc.mutation.CostsheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.CostsheetTable,
			Columns: []string{price.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PriceCreateBulk is the builder for creating many Price entities in bulk.
type PriceCreateBulk struct {
	config
	err      error
	builders []*PriceCreate
}

// Save creates the Price entities in the database.
func (pcb *PriceCreateBulk) Save(ctx context.Context) ([]*Price, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Price, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PriceCreateBulk) SaveX(ctx context.Context) []*Price {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PriceCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PriceCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
