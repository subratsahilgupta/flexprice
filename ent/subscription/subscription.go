// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldLookupKey holds the string denoting the lookup_key field in the database.
	FieldLookupKey = "lookup_key"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldSubscriptionStatus holds the string denoting the subscription_status field in the database.
	FieldSubscriptionStatus = "subscription_status"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldBillingAnchor holds the string denoting the billing_anchor field in the database.
	FieldBillingAnchor = "billing_anchor"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldCurrentPeriodStart holds the string denoting the current_period_start field in the database.
	FieldCurrentPeriodStart = "current_period_start"
	// FieldCurrentPeriodEnd holds the string denoting the current_period_end field in the database.
	FieldCurrentPeriodEnd = "current_period_end"
	// FieldCancelledAt holds the string denoting the cancelled_at field in the database.
	FieldCancelledAt = "cancelled_at"
	// FieldCancelAt holds the string denoting the cancel_at field in the database.
	FieldCancelAt = "cancel_at"
	// FieldCancelAtPeriodEnd holds the string denoting the cancel_at_period_end field in the database.
	FieldCancelAtPeriodEnd = "cancel_at_period_end"
	// FieldTrialStart holds the string denoting the trial_start field in the database.
	FieldTrialStart = "trial_start"
	// FieldTrialEnd holds the string denoting the trial_end field in the database.
	FieldTrialEnd = "trial_end"
	// FieldBillingCadence holds the string denoting the billing_cadence field in the database.
	FieldBillingCadence = "billing_cadence"
	// FieldBillingPeriod holds the string denoting the billing_period field in the database.
	FieldBillingPeriod = "billing_period"
	// FieldBillingPeriodCount holds the string denoting the billing_period_count field in the database.
	FieldBillingPeriodCount = "billing_period_count"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldPauseStatus holds the string denoting the pause_status field in the database.
	FieldPauseStatus = "pause_status"
	// FieldActivePauseID holds the string denoting the active_pause_id field in the database.
	FieldActivePauseID = "active_pause_id"
	// FieldBillingCycle holds the string denoting the billing_cycle field in the database.
	FieldBillingCycle = "billing_cycle"
	// FieldCommitmentAmount holds the string denoting the commitment_amount field in the database.
	FieldCommitmentAmount = "commitment_amount"
	// FieldOverageFactor holds the string denoting the overage_factor field in the database.
	FieldOverageFactor = "overage_factor"
	// EdgeLineItems holds the string denoting the line_items edge name in mutations.
	EdgeLineItems = "line_items"
	// EdgePauses holds the string denoting the pauses edge name in mutations.
	EdgePauses = "pauses"
	// EdgeCreditGrants holds the string denoting the credit_grants edge name in mutations.
	EdgeCreditGrants = "credit_grants"
	// EdgeSchedule holds the string denoting the schedule edge name in mutations.
	EdgeSchedule = "schedule"
	// EdgeCouponAssociations holds the string denoting the coupon_associations edge name in mutations.
	EdgeCouponAssociations = "coupon_associations"
	// EdgeCouponApplications holds the string denoting the coupon_applications edge name in mutations.
	EdgeCouponApplications = "coupon_applications"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
	// LineItemsTable is the table that holds the line_items relation/edge.
	LineItemsTable = "subscription_line_items"
	// LineItemsInverseTable is the table name for the SubscriptionLineItem entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionlineitem" package.
	LineItemsInverseTable = "subscription_line_items"
	// LineItemsColumn is the table column denoting the line_items relation/edge.
	LineItemsColumn = "subscription_id"
	// PausesTable is the table that holds the pauses relation/edge.
	PausesTable = "subscription_pauses"
	// PausesInverseTable is the table name for the SubscriptionPause entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionpause" package.
	PausesInverseTable = "subscription_pauses"
	// PausesColumn is the table column denoting the pauses relation/edge.
	PausesColumn = "subscription_id"
	// CreditGrantsTable is the table that holds the credit_grants relation/edge.
	CreditGrantsTable = "credit_grants"
	// CreditGrantsInverseTable is the table name for the CreditGrant entity.
	// It exists in this package in order to avoid circular dependency with the "creditgrant" package.
	CreditGrantsInverseTable = "credit_grants"
	// CreditGrantsColumn is the table column denoting the credit_grants relation/edge.
	CreditGrantsColumn = "subscription_id"
	// ScheduleTable is the table that holds the schedule relation/edge.
	ScheduleTable = "subscription_schedules"
	// ScheduleInverseTable is the table name for the SubscriptionSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionschedule" package.
	ScheduleInverseTable = "subscription_schedules"
	// ScheduleColumn is the table column denoting the schedule relation/edge.
	ScheduleColumn = "subscription_id"
	// CouponAssociationsTable is the table that holds the coupon_associations relation/edge.
	CouponAssociationsTable = "coupon_associations"
	// CouponAssociationsInverseTable is the table name for the CouponAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "couponassociation" package.
	CouponAssociationsInverseTable = "coupon_associations"
	// CouponAssociationsColumn is the table column denoting the coupon_associations relation/edge.
	CouponAssociationsColumn = "subscription_id"
	// CouponApplicationsTable is the table that holds the coupon_applications relation/edge.
	CouponApplicationsTable = "coupon_applications"
	// CouponApplicationsInverseTable is the table name for the CouponApplication entity.
	// It exists in this package in order to avoid circular dependency with the "couponapplication" package.
	CouponApplicationsInverseTable = "coupon_applications"
	// CouponApplicationsColumn is the table column denoting the coupon_applications relation/edge.
	CouponApplicationsColumn = "subscription_id"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldLookupKey,
	FieldCustomerID,
	FieldPlanID,
	FieldSubscriptionStatus,
	FieldCurrency,
	FieldBillingAnchor,
	FieldStartDate,
	FieldEndDate,
	FieldCurrentPeriodStart,
	FieldCurrentPeriodEnd,
	FieldCancelledAt,
	FieldCancelAt,
	FieldCancelAtPeriodEnd,
	FieldTrialStart,
	FieldTrialEnd,
	FieldBillingCadence,
	FieldBillingPeriod,
	FieldBillingPeriodCount,
	FieldVersion,
	FieldMetadata,
	FieldPauseStatus,
	FieldActivePauseID,
	FieldBillingCycle,
	FieldCommitmentAmount,
	FieldOverageFactor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// CustomerIDValidator is a validator for the "customer_id" field. It is called by the builders before save.
	CustomerIDValidator func(string) error
	// PlanIDValidator is a validator for the "plan_id" field. It is called by the builders before save.
	PlanIDValidator func(string) error
	// DefaultSubscriptionStatus holds the default value on creation for the "subscription_status" field.
	DefaultSubscriptionStatus string
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultBillingAnchor holds the default value on creation for the "billing_anchor" field.
	DefaultBillingAnchor func() time.Time
	// DefaultStartDate holds the default value on creation for the "start_date" field.
	DefaultStartDate func() time.Time
	// DefaultCurrentPeriodStart holds the default value on creation for the "current_period_start" field.
	DefaultCurrentPeriodStart func() time.Time
	// DefaultCurrentPeriodEnd holds the default value on creation for the "current_period_end" field.
	DefaultCurrentPeriodEnd func() time.Time
	// DefaultCancelAtPeriodEnd holds the default value on creation for the "cancel_at_period_end" field.
	DefaultCancelAtPeriodEnd bool
	// BillingCadenceValidator is a validator for the "billing_cadence" field. It is called by the builders before save.
	BillingCadenceValidator func(string) error
	// BillingPeriodValidator is a validator for the "billing_period" field. It is called by the builders before save.
	BillingPeriodValidator func(string) error
	// DefaultBillingPeriodCount holds the default value on creation for the "billing_period_count" field.
	DefaultBillingPeriodCount int
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// DefaultPauseStatus holds the default value on creation for the "pause_status" field.
	DefaultPauseStatus string
	// DefaultBillingCycle holds the default value on creation for the "billing_cycle" field.
	DefaultBillingCycle string
	// BillingCycleValidator is a validator for the "billing_cycle" field. It is called by the builders before save.
	BillingCycleValidator func(string) error
	// DefaultOverageFactor holds the default value on creation for the "overage_factor" field.
	DefaultOverageFactor decimal.Decimal
)

// OrderOption defines the ordering options for the Subscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByLookupKey orders the results by the lookup_key field.
func ByLookupKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLookupKey, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// BySubscriptionStatus orders the results by the subscription_status field.
func BySubscriptionStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionStatus, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByBillingAnchor orders the results by the billing_anchor field.
func ByBillingAnchor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAnchor, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByCurrentPeriodStart orders the results by the current_period_start field.
func ByCurrentPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPeriodStart, opts...).ToFunc()
}

// ByCurrentPeriodEnd orders the results by the current_period_end field.
func ByCurrentPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPeriodEnd, opts...).ToFunc()
}

// ByCancelledAt orders the results by the cancelled_at field.
func ByCancelledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelledAt, opts...).ToFunc()
}

// ByCancelAt orders the results by the cancel_at field.
func ByCancelAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelAt, opts...).ToFunc()
}

// ByCancelAtPeriodEnd orders the results by the cancel_at_period_end field.
func ByCancelAtPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelAtPeriodEnd, opts...).ToFunc()
}

// ByTrialStart orders the results by the trial_start field.
func ByTrialStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialStart, opts...).ToFunc()
}

// ByTrialEnd orders the results by the trial_end field.
func ByTrialEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialEnd, opts...).ToFunc()
}

// ByBillingCadence orders the results by the billing_cadence field.
func ByBillingCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingCadence, opts...).ToFunc()
}

// ByBillingPeriod orders the results by the billing_period field.
func ByBillingPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingPeriod, opts...).ToFunc()
}

// ByBillingPeriodCount orders the results by the billing_period_count field.
func ByBillingPeriodCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingPeriodCount, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByPauseStatus orders the results by the pause_status field.
func ByPauseStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseStatus, opts...).ToFunc()
}

// ByActivePauseID orders the results by the active_pause_id field.
func ByActivePauseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivePauseID, opts...).ToFunc()
}

// ByBillingCycle orders the results by the billing_cycle field.
func ByBillingCycle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingCycle, opts...).ToFunc()
}

// ByCommitmentAmount orders the results by the commitment_amount field.
func ByCommitmentAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitmentAmount, opts...).ToFunc()
}

// ByOverageFactor orders the results by the overage_factor field.
func ByOverageFactor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverageFactor, opts...).ToFunc()
}

// ByLineItemsCount orders the results by line_items count.
func ByLineItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLineItemsStep(), opts...)
	}
}

// ByLineItems orders the results by line_items terms.
func ByLineItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLineItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPausesCount orders the results by pauses count.
func ByPausesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPausesStep(), opts...)
	}
}

// ByPauses orders the results by pauses terms.
func ByPauses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPausesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreditGrantsCount orders the results by credit_grants count.
func ByCreditGrantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreditGrantsStep(), opts...)
	}
}

// ByCreditGrants orders the results by credit_grants terms.
func ByCreditGrants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreditGrantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheduleField orders the results by schedule field.
func ByScheduleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduleStep(), sql.OrderByField(field, opts...))
	}
}

// ByCouponAssociationsCount orders the results by coupon_associations count.
func ByCouponAssociationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponAssociationsStep(), opts...)
	}
}

// ByCouponAssociations orders the results by coupon_associations terms.
func ByCouponAssociations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponAssociationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCouponApplicationsCount orders the results by coupon_applications count.
func ByCouponApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponApplicationsStep(), opts...)
	}
}

// ByCouponApplications orders the results by coupon_applications terms.
func ByCouponApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLineItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LineItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LineItemsTable, LineItemsColumn),
	)
}
func newPausesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PausesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PausesTable, PausesColumn),
	)
}
func newCreditGrantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreditGrantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreditGrantsTable, CreditGrantsColumn),
	)
}
func newScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ScheduleTable, ScheduleColumn),
	)
}
func newCouponAssociationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponAssociationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CouponAssociationsTable, CouponAssociationsColumn),
	)
}
func newCouponApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CouponApplicationsTable, CouponApplicationsColumn),
	)
}
