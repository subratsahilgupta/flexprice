// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEnvironmentID, v))
}

// LookupKey applies equality check predicate on the "lookup_key" field. It's identical to LookupKeyEQ.
func LookupKey(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldLookupKey, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCustomerID, v))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPlanID, v))
}

// SubscriptionStatus applies equality check predicate on the "subscription_status" field. It's identical to SubscriptionStatusEQ.
func SubscriptionStatus(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSubscriptionStatus, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrency, v))
}

// BillingAnchor applies equality check predicate on the "billing_anchor" field. It's identical to BillingAnchorEQ.
func BillingAnchor(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingAnchor, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEndDate, v))
}

// CurrentPeriodStart applies equality check predicate on the "current_period_start" field. It's identical to CurrentPeriodStartEQ.
func CurrentPeriodStart(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodEnd applies equality check predicate on the "current_period_end" field. It's identical to CurrentPeriodEndEQ.
func CurrentPeriodEnd(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// CancelledAt applies equality check predicate on the "cancelled_at" field. It's identical to CancelledAtEQ.
func CancelledAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCancelledAt, v))
}

// CancelAt applies equality check predicate on the "cancel_at" field. It's identical to CancelAtEQ.
func CancelAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCancelAt, v))
}

// CancelAtPeriodEnd applies equality check predicate on the "cancel_at_period_end" field. It's identical to CancelAtPeriodEndEQ.
func CancelAtPeriodEnd(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCancelAtPeriodEnd, v))
}

// TrialStart applies equality check predicate on the "trial_start" field. It's identical to TrialStartEQ.
func TrialStart(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialStart, v))
}

// TrialEnd applies equality check predicate on the "trial_end" field. It's identical to TrialEndEQ.
func TrialEnd(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialEnd, v))
}

// BillingCadence applies equality check predicate on the "billing_cadence" field. It's identical to BillingCadenceEQ.
func BillingCadence(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingCadence, v))
}

// BillingPeriod applies equality check predicate on the "billing_period" field. It's identical to BillingPeriodEQ.
func BillingPeriod(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingPeriod, v))
}

// BillingPeriodCount applies equality check predicate on the "billing_period_count" field. It's identical to BillingPeriodCountEQ.
func BillingPeriodCount(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingPeriodCount, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldVersion, v))
}

// PauseStatus applies equality check predicate on the "pause_status" field. It's identical to PauseStatusEQ.
func PauseStatus(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPauseStatus, v))
}

// ActivePauseID applies equality check predicate on the "active_pause_id" field. It's identical to ActivePauseIDEQ.
func ActivePauseID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldActivePauseID, v))
}

// BillingCycle applies equality check predicate on the "billing_cycle" field. It's identical to BillingCycleEQ.
func BillingCycle(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingCycle, v))
}

// CommitmentAmount applies equality check predicate on the "commitment_amount" field. It's identical to CommitmentAmountEQ.
func CommitmentAmount(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCommitmentAmount, v))
}

// OverageFactor applies equality check predicate on the "overage_factor" field. It's identical to OverageFactorEQ.
func OverageFactor(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldOverageFactor, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// LookupKeyEQ applies the EQ predicate on the "lookup_key" field.
func LookupKeyEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldLookupKey, v))
}

// LookupKeyNEQ applies the NEQ predicate on the "lookup_key" field.
func LookupKeyNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldLookupKey, v))
}

// LookupKeyIn applies the In predicate on the "lookup_key" field.
func LookupKeyIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldLookupKey, vs...))
}

// LookupKeyNotIn applies the NotIn predicate on the "lookup_key" field.
func LookupKeyNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldLookupKey, vs...))
}

// LookupKeyGT applies the GT predicate on the "lookup_key" field.
func LookupKeyGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldLookupKey, v))
}

// LookupKeyGTE applies the GTE predicate on the "lookup_key" field.
func LookupKeyGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldLookupKey, v))
}

// LookupKeyLT applies the LT predicate on the "lookup_key" field.
func LookupKeyLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldLookupKey, v))
}

// LookupKeyLTE applies the LTE predicate on the "lookup_key" field.
func LookupKeyLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldLookupKey, v))
}

// LookupKeyContains applies the Contains predicate on the "lookup_key" field.
func LookupKeyContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldLookupKey, v))
}

// LookupKeyHasPrefix applies the HasPrefix predicate on the "lookup_key" field.
func LookupKeyHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldLookupKey, v))
}

// LookupKeyHasSuffix applies the HasSuffix predicate on the "lookup_key" field.
func LookupKeyHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldLookupKey, v))
}

// LookupKeyIsNil applies the IsNil predicate on the "lookup_key" field.
func LookupKeyIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldLookupKey))
}

// LookupKeyNotNil applies the NotNil predicate on the "lookup_key" field.
func LookupKeyNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldLookupKey))
}

// LookupKeyEqualFold applies the EqualFold predicate on the "lookup_key" field.
func LookupKeyEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldLookupKey, v))
}

// LookupKeyContainsFold applies the ContainsFold predicate on the "lookup_key" field.
func LookupKeyContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldLookupKey, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldCustomerID, v))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDContains applies the Contains predicate on the "plan_id" field.
func PlanIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldPlanID, v))
}

// PlanIDHasPrefix applies the HasPrefix predicate on the "plan_id" field.
func PlanIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldPlanID, v))
}

// PlanIDHasSuffix applies the HasSuffix predicate on the "plan_id" field.
func PlanIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldPlanID, v))
}

// PlanIDEqualFold applies the EqualFold predicate on the "plan_id" field.
func PlanIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldPlanID, v))
}

// PlanIDContainsFold applies the ContainsFold predicate on the "plan_id" field.
func PlanIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldPlanID, v))
}

// SubscriptionStatusEQ applies the EQ predicate on the "subscription_status" field.
func SubscriptionStatusEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSubscriptionStatus, v))
}

// SubscriptionStatusNEQ applies the NEQ predicate on the "subscription_status" field.
func SubscriptionStatusNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldSubscriptionStatus, v))
}

// SubscriptionStatusIn applies the In predicate on the "subscription_status" field.
func SubscriptionStatusIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldSubscriptionStatus, vs...))
}

// SubscriptionStatusNotIn applies the NotIn predicate on the "subscription_status" field.
func SubscriptionStatusNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldSubscriptionStatus, vs...))
}

// SubscriptionStatusGT applies the GT predicate on the "subscription_status" field.
func SubscriptionStatusGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldSubscriptionStatus, v))
}

// SubscriptionStatusGTE applies the GTE predicate on the "subscription_status" field.
func SubscriptionStatusGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldSubscriptionStatus, v))
}

// SubscriptionStatusLT applies the LT predicate on the "subscription_status" field.
func SubscriptionStatusLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldSubscriptionStatus, v))
}

// SubscriptionStatusLTE applies the LTE predicate on the "subscription_status" field.
func SubscriptionStatusLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldSubscriptionStatus, v))
}

// SubscriptionStatusContains applies the Contains predicate on the "subscription_status" field.
func SubscriptionStatusContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldSubscriptionStatus, v))
}

// SubscriptionStatusHasPrefix applies the HasPrefix predicate on the "subscription_status" field.
func SubscriptionStatusHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldSubscriptionStatus, v))
}

// SubscriptionStatusHasSuffix applies the HasSuffix predicate on the "subscription_status" field.
func SubscriptionStatusHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldSubscriptionStatus, v))
}

// SubscriptionStatusEqualFold applies the EqualFold predicate on the "subscription_status" field.
func SubscriptionStatusEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldSubscriptionStatus, v))
}

// SubscriptionStatusContainsFold applies the ContainsFold predicate on the "subscription_status" field.
func SubscriptionStatusContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldSubscriptionStatus, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldCurrency, v))
}

// BillingAnchorEQ applies the EQ predicate on the "billing_anchor" field.
func BillingAnchorEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingAnchor, v))
}

// BillingAnchorNEQ applies the NEQ predicate on the "billing_anchor" field.
func BillingAnchorNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldBillingAnchor, v))
}

// BillingAnchorIn applies the In predicate on the "billing_anchor" field.
func BillingAnchorIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldBillingAnchor, vs...))
}

// BillingAnchorNotIn applies the NotIn predicate on the "billing_anchor" field.
func BillingAnchorNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldBillingAnchor, vs...))
}

// BillingAnchorGT applies the GT predicate on the "billing_anchor" field.
func BillingAnchorGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldBillingAnchor, v))
}

// BillingAnchorGTE applies the GTE predicate on the "billing_anchor" field.
func BillingAnchorGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldBillingAnchor, v))
}

// BillingAnchorLT applies the LT predicate on the "billing_anchor" field.
func BillingAnchorLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldBillingAnchor, v))
}

// BillingAnchorLTE applies the LTE predicate on the "billing_anchor" field.
func BillingAnchorLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldBillingAnchor, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldEndDate))
}

// CurrentPeriodStartEQ applies the EQ predicate on the "current_period_start" field.
func CurrentPeriodStartEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartNEQ applies the NEQ predicate on the "current_period_start" field.
func CurrentPeriodStartNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartIn applies the In predicate on the "current_period_start" field.
func CurrentPeriodStartIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCurrentPeriodStart, vs...))
}

// CurrentPeriodStartNotIn applies the NotIn predicate on the "current_period_start" field.
func CurrentPeriodStartNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCurrentPeriodStart, vs...))
}

// CurrentPeriodStartGT applies the GT predicate on the "current_period_start" field.
func CurrentPeriodStartGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartGTE applies the GTE predicate on the "current_period_start" field.
func CurrentPeriodStartGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartLT applies the LT predicate on the "current_period_start" field.
func CurrentPeriodStartLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartLTE applies the LTE predicate on the "current_period_start" field.
func CurrentPeriodStartLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCurrentPeriodStart, v))
}

// CurrentPeriodEndEQ applies the EQ predicate on the "current_period_end" field.
func CurrentPeriodEndEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndNEQ applies the NEQ predicate on the "current_period_end" field.
func CurrentPeriodEndNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndIn applies the In predicate on the "current_period_end" field.
func CurrentPeriodEndIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndNotIn applies the NotIn predicate on the "current_period_end" field.
func CurrentPeriodEndNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndGT applies the GT predicate on the "current_period_end" field.
func CurrentPeriodEndGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndGTE applies the GTE predicate on the "current_period_end" field.
func CurrentPeriodEndGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLT applies the LT predicate on the "current_period_end" field.
func CurrentPeriodEndLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLTE applies the LTE predicate on the "current_period_end" field.
func CurrentPeriodEndLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCurrentPeriodEnd, v))
}

// CancelledAtEQ applies the EQ predicate on the "cancelled_at" field.
func CancelledAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCancelledAt, v))
}

// CancelledAtNEQ applies the NEQ predicate on the "cancelled_at" field.
func CancelledAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCancelledAt, v))
}

// CancelledAtIn applies the In predicate on the "cancelled_at" field.
func CancelledAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCancelledAt, vs...))
}

// CancelledAtNotIn applies the NotIn predicate on the "cancelled_at" field.
func CancelledAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCancelledAt, vs...))
}

// CancelledAtGT applies the GT predicate on the "cancelled_at" field.
func CancelledAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCancelledAt, v))
}

// CancelledAtGTE applies the GTE predicate on the "cancelled_at" field.
func CancelledAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCancelledAt, v))
}

// CancelledAtLT applies the LT predicate on the "cancelled_at" field.
func CancelledAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCancelledAt, v))
}

// CancelledAtLTE applies the LTE predicate on the "cancelled_at" field.
func CancelledAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCancelledAt, v))
}

// CancelledAtIsNil applies the IsNil predicate on the "cancelled_at" field.
func CancelledAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCancelledAt))
}

// CancelledAtNotNil applies the NotNil predicate on the "cancelled_at" field.
func CancelledAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCancelledAt))
}

// CancelAtEQ applies the EQ predicate on the "cancel_at" field.
func CancelAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCancelAt, v))
}

// CancelAtNEQ applies the NEQ predicate on the "cancel_at" field.
func CancelAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCancelAt, v))
}

// CancelAtIn applies the In predicate on the "cancel_at" field.
func CancelAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCancelAt, vs...))
}

// CancelAtNotIn applies the NotIn predicate on the "cancel_at" field.
func CancelAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCancelAt, vs...))
}

// CancelAtGT applies the GT predicate on the "cancel_at" field.
func CancelAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCancelAt, v))
}

// CancelAtGTE applies the GTE predicate on the "cancel_at" field.
func CancelAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCancelAt, v))
}

// CancelAtLT applies the LT predicate on the "cancel_at" field.
func CancelAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCancelAt, v))
}

// CancelAtLTE applies the LTE predicate on the "cancel_at" field.
func CancelAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCancelAt, v))
}

// CancelAtIsNil applies the IsNil predicate on the "cancel_at" field.
func CancelAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCancelAt))
}

// CancelAtNotNil applies the NotNil predicate on the "cancel_at" field.
func CancelAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCancelAt))
}

// CancelAtPeriodEndEQ applies the EQ predicate on the "cancel_at_period_end" field.
func CancelAtPeriodEndEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCancelAtPeriodEnd, v))
}

// CancelAtPeriodEndNEQ applies the NEQ predicate on the "cancel_at_period_end" field.
func CancelAtPeriodEndNEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCancelAtPeriodEnd, v))
}

// TrialStartEQ applies the EQ predicate on the "trial_start" field.
func TrialStartEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialStart, v))
}

// TrialStartNEQ applies the NEQ predicate on the "trial_start" field.
func TrialStartNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTrialStart, v))
}

// TrialStartIn applies the In predicate on the "trial_start" field.
func TrialStartIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTrialStart, vs...))
}

// TrialStartNotIn applies the NotIn predicate on the "trial_start" field.
func TrialStartNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTrialStart, vs...))
}

// TrialStartGT applies the GT predicate on the "trial_start" field.
func TrialStartGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldTrialStart, v))
}

// TrialStartGTE applies the GTE predicate on the "trial_start" field.
func TrialStartGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldTrialStart, v))
}

// TrialStartLT applies the LT predicate on the "trial_start" field.
func TrialStartLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldTrialStart, v))
}

// TrialStartLTE applies the LTE predicate on the "trial_start" field.
func TrialStartLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldTrialStart, v))
}

// TrialStartIsNil applies the IsNil predicate on the "trial_start" field.
func TrialStartIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldTrialStart))
}

// TrialStartNotNil applies the NotNil predicate on the "trial_start" field.
func TrialStartNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldTrialStart))
}

// TrialEndEQ applies the EQ predicate on the "trial_end" field.
func TrialEndEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialEnd, v))
}

// TrialEndNEQ applies the NEQ predicate on the "trial_end" field.
func TrialEndNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTrialEnd, v))
}

// TrialEndIn applies the In predicate on the "trial_end" field.
func TrialEndIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTrialEnd, vs...))
}

// TrialEndNotIn applies the NotIn predicate on the "trial_end" field.
func TrialEndNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTrialEnd, vs...))
}

// TrialEndGT applies the GT predicate on the "trial_end" field.
func TrialEndGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldTrialEnd, v))
}

// TrialEndGTE applies the GTE predicate on the "trial_end" field.
func TrialEndGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldTrialEnd, v))
}

// TrialEndLT applies the LT predicate on the "trial_end" field.
func TrialEndLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldTrialEnd, v))
}

// TrialEndLTE applies the LTE predicate on the "trial_end" field.
func TrialEndLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldTrialEnd, v))
}

// TrialEndIsNil applies the IsNil predicate on the "trial_end" field.
func TrialEndIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldTrialEnd))
}

// TrialEndNotNil applies the NotNil predicate on the "trial_end" field.
func TrialEndNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldTrialEnd))
}

// BillingCadenceEQ applies the EQ predicate on the "billing_cadence" field.
func BillingCadenceEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingCadence, v))
}

// BillingCadenceNEQ applies the NEQ predicate on the "billing_cadence" field.
func BillingCadenceNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldBillingCadence, v))
}

// BillingCadenceIn applies the In predicate on the "billing_cadence" field.
func BillingCadenceIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldBillingCadence, vs...))
}

// BillingCadenceNotIn applies the NotIn predicate on the "billing_cadence" field.
func BillingCadenceNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldBillingCadence, vs...))
}

// BillingCadenceGT applies the GT predicate on the "billing_cadence" field.
func BillingCadenceGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldBillingCadence, v))
}

// BillingCadenceGTE applies the GTE predicate on the "billing_cadence" field.
func BillingCadenceGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldBillingCadence, v))
}

// BillingCadenceLT applies the LT predicate on the "billing_cadence" field.
func BillingCadenceLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldBillingCadence, v))
}

// BillingCadenceLTE applies the LTE predicate on the "billing_cadence" field.
func BillingCadenceLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldBillingCadence, v))
}

// BillingCadenceContains applies the Contains predicate on the "billing_cadence" field.
func BillingCadenceContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldBillingCadence, v))
}

// BillingCadenceHasPrefix applies the HasPrefix predicate on the "billing_cadence" field.
func BillingCadenceHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldBillingCadence, v))
}

// BillingCadenceHasSuffix applies the HasSuffix predicate on the "billing_cadence" field.
func BillingCadenceHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldBillingCadence, v))
}

// BillingCadenceEqualFold applies the EqualFold predicate on the "billing_cadence" field.
func BillingCadenceEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldBillingCadence, v))
}

// BillingCadenceContainsFold applies the ContainsFold predicate on the "billing_cadence" field.
func BillingCadenceContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldBillingCadence, v))
}

// BillingPeriodEQ applies the EQ predicate on the "billing_period" field.
func BillingPeriodEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingPeriod, v))
}

// BillingPeriodNEQ applies the NEQ predicate on the "billing_period" field.
func BillingPeriodNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldBillingPeriod, v))
}

// BillingPeriodIn applies the In predicate on the "billing_period" field.
func BillingPeriodIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldBillingPeriod, vs...))
}

// BillingPeriodNotIn applies the NotIn predicate on the "billing_period" field.
func BillingPeriodNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldBillingPeriod, vs...))
}

// BillingPeriodGT applies the GT predicate on the "billing_period" field.
func BillingPeriodGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldBillingPeriod, v))
}

// BillingPeriodGTE applies the GTE predicate on the "billing_period" field.
func BillingPeriodGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldBillingPeriod, v))
}

// BillingPeriodLT applies the LT predicate on the "billing_period" field.
func BillingPeriodLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldBillingPeriod, v))
}

// BillingPeriodLTE applies the LTE predicate on the "billing_period" field.
func BillingPeriodLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldBillingPeriod, v))
}

// BillingPeriodContains applies the Contains predicate on the "billing_period" field.
func BillingPeriodContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldBillingPeriod, v))
}

// BillingPeriodHasPrefix applies the HasPrefix predicate on the "billing_period" field.
func BillingPeriodHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldBillingPeriod, v))
}

// BillingPeriodHasSuffix applies the HasSuffix predicate on the "billing_period" field.
func BillingPeriodHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldBillingPeriod, v))
}

// BillingPeriodEqualFold applies the EqualFold predicate on the "billing_period" field.
func BillingPeriodEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldBillingPeriod, v))
}

// BillingPeriodContainsFold applies the ContainsFold predicate on the "billing_period" field.
func BillingPeriodContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldBillingPeriod, v))
}

// BillingPeriodCountEQ applies the EQ predicate on the "billing_period_count" field.
func BillingPeriodCountEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingPeriodCount, v))
}

// BillingPeriodCountNEQ applies the NEQ predicate on the "billing_period_count" field.
func BillingPeriodCountNEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldBillingPeriodCount, v))
}

// BillingPeriodCountIn applies the In predicate on the "billing_period_count" field.
func BillingPeriodCountIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldBillingPeriodCount, vs...))
}

// BillingPeriodCountNotIn applies the NotIn predicate on the "billing_period_count" field.
func BillingPeriodCountNotIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldBillingPeriodCount, vs...))
}

// BillingPeriodCountGT applies the GT predicate on the "billing_period_count" field.
func BillingPeriodCountGT(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldBillingPeriodCount, v))
}

// BillingPeriodCountGTE applies the GTE predicate on the "billing_period_count" field.
func BillingPeriodCountGTE(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldBillingPeriodCount, v))
}

// BillingPeriodCountLT applies the LT predicate on the "billing_period_count" field.
func BillingPeriodCountLT(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldBillingPeriodCount, v))
}

// BillingPeriodCountLTE applies the LTE predicate on the "billing_period_count" field.
func BillingPeriodCountLTE(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldBillingPeriodCount, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldVersion, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldMetadata))
}

// PauseStatusEQ applies the EQ predicate on the "pause_status" field.
func PauseStatusEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPauseStatus, v))
}

// PauseStatusNEQ applies the NEQ predicate on the "pause_status" field.
func PauseStatusNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPauseStatus, v))
}

// PauseStatusIn applies the In predicate on the "pause_status" field.
func PauseStatusIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPauseStatus, vs...))
}

// PauseStatusNotIn applies the NotIn predicate on the "pause_status" field.
func PauseStatusNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPauseStatus, vs...))
}

// PauseStatusGT applies the GT predicate on the "pause_status" field.
func PauseStatusGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPauseStatus, v))
}

// PauseStatusGTE applies the GTE predicate on the "pause_status" field.
func PauseStatusGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPauseStatus, v))
}

// PauseStatusLT applies the LT predicate on the "pause_status" field.
func PauseStatusLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPauseStatus, v))
}

// PauseStatusLTE applies the LTE predicate on the "pause_status" field.
func PauseStatusLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPauseStatus, v))
}

// PauseStatusContains applies the Contains predicate on the "pause_status" field.
func PauseStatusContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldPauseStatus, v))
}

// PauseStatusHasPrefix applies the HasPrefix predicate on the "pause_status" field.
func PauseStatusHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldPauseStatus, v))
}

// PauseStatusHasSuffix applies the HasSuffix predicate on the "pause_status" field.
func PauseStatusHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldPauseStatus, v))
}

// PauseStatusEqualFold applies the EqualFold predicate on the "pause_status" field.
func PauseStatusEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldPauseStatus, v))
}

// PauseStatusContainsFold applies the ContainsFold predicate on the "pause_status" field.
func PauseStatusContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldPauseStatus, v))
}

// ActivePauseIDEQ applies the EQ predicate on the "active_pause_id" field.
func ActivePauseIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldActivePauseID, v))
}

// ActivePauseIDNEQ applies the NEQ predicate on the "active_pause_id" field.
func ActivePauseIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldActivePauseID, v))
}

// ActivePauseIDIn applies the In predicate on the "active_pause_id" field.
func ActivePauseIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldActivePauseID, vs...))
}

// ActivePauseIDNotIn applies the NotIn predicate on the "active_pause_id" field.
func ActivePauseIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldActivePauseID, vs...))
}

// ActivePauseIDGT applies the GT predicate on the "active_pause_id" field.
func ActivePauseIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldActivePauseID, v))
}

// ActivePauseIDGTE applies the GTE predicate on the "active_pause_id" field.
func ActivePauseIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldActivePauseID, v))
}

// ActivePauseIDLT applies the LT predicate on the "active_pause_id" field.
func ActivePauseIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldActivePauseID, v))
}

// ActivePauseIDLTE applies the LTE predicate on the "active_pause_id" field.
func ActivePauseIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldActivePauseID, v))
}

// ActivePauseIDContains applies the Contains predicate on the "active_pause_id" field.
func ActivePauseIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldActivePauseID, v))
}

// ActivePauseIDHasPrefix applies the HasPrefix predicate on the "active_pause_id" field.
func ActivePauseIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldActivePauseID, v))
}

// ActivePauseIDHasSuffix applies the HasSuffix predicate on the "active_pause_id" field.
func ActivePauseIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldActivePauseID, v))
}

// ActivePauseIDIsNil applies the IsNil predicate on the "active_pause_id" field.
func ActivePauseIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldActivePauseID))
}

// ActivePauseIDNotNil applies the NotNil predicate on the "active_pause_id" field.
func ActivePauseIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldActivePauseID))
}

// ActivePauseIDEqualFold applies the EqualFold predicate on the "active_pause_id" field.
func ActivePauseIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldActivePauseID, v))
}

// ActivePauseIDContainsFold applies the ContainsFold predicate on the "active_pause_id" field.
func ActivePauseIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldActivePauseID, v))
}

// BillingCycleEQ applies the EQ predicate on the "billing_cycle" field.
func BillingCycleEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldBillingCycle, v))
}

// BillingCycleNEQ applies the NEQ predicate on the "billing_cycle" field.
func BillingCycleNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldBillingCycle, v))
}

// BillingCycleIn applies the In predicate on the "billing_cycle" field.
func BillingCycleIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldBillingCycle, vs...))
}

// BillingCycleNotIn applies the NotIn predicate on the "billing_cycle" field.
func BillingCycleNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldBillingCycle, vs...))
}

// BillingCycleGT applies the GT predicate on the "billing_cycle" field.
func BillingCycleGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldBillingCycle, v))
}

// BillingCycleGTE applies the GTE predicate on the "billing_cycle" field.
func BillingCycleGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldBillingCycle, v))
}

// BillingCycleLT applies the LT predicate on the "billing_cycle" field.
func BillingCycleLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldBillingCycle, v))
}

// BillingCycleLTE applies the LTE predicate on the "billing_cycle" field.
func BillingCycleLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldBillingCycle, v))
}

// BillingCycleContains applies the Contains predicate on the "billing_cycle" field.
func BillingCycleContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldBillingCycle, v))
}

// BillingCycleHasPrefix applies the HasPrefix predicate on the "billing_cycle" field.
func BillingCycleHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldBillingCycle, v))
}

// BillingCycleHasSuffix applies the HasSuffix predicate on the "billing_cycle" field.
func BillingCycleHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldBillingCycle, v))
}

// BillingCycleEqualFold applies the EqualFold predicate on the "billing_cycle" field.
func BillingCycleEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldBillingCycle, v))
}

// BillingCycleContainsFold applies the ContainsFold predicate on the "billing_cycle" field.
func BillingCycleContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldBillingCycle, v))
}

// CommitmentAmountEQ applies the EQ predicate on the "commitment_amount" field.
func CommitmentAmountEQ(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCommitmentAmount, v))
}

// CommitmentAmountNEQ applies the NEQ predicate on the "commitment_amount" field.
func CommitmentAmountNEQ(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCommitmentAmount, v))
}

// CommitmentAmountIn applies the In predicate on the "commitment_amount" field.
func CommitmentAmountIn(vs ...decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCommitmentAmount, vs...))
}

// CommitmentAmountNotIn applies the NotIn predicate on the "commitment_amount" field.
func CommitmentAmountNotIn(vs ...decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCommitmentAmount, vs...))
}

// CommitmentAmountGT applies the GT predicate on the "commitment_amount" field.
func CommitmentAmountGT(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCommitmentAmount, v))
}

// CommitmentAmountGTE applies the GTE predicate on the "commitment_amount" field.
func CommitmentAmountGTE(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCommitmentAmount, v))
}

// CommitmentAmountLT applies the LT predicate on the "commitment_amount" field.
func CommitmentAmountLT(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCommitmentAmount, v))
}

// CommitmentAmountLTE applies the LTE predicate on the "commitment_amount" field.
func CommitmentAmountLTE(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCommitmentAmount, v))
}

// CommitmentAmountIsNil applies the IsNil predicate on the "commitment_amount" field.
func CommitmentAmountIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCommitmentAmount))
}

// CommitmentAmountNotNil applies the NotNil predicate on the "commitment_amount" field.
func CommitmentAmountNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCommitmentAmount))
}

// OverageFactorEQ applies the EQ predicate on the "overage_factor" field.
func OverageFactorEQ(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldOverageFactor, v))
}

// OverageFactorNEQ applies the NEQ predicate on the "overage_factor" field.
func OverageFactorNEQ(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldOverageFactor, v))
}

// OverageFactorIn applies the In predicate on the "overage_factor" field.
func OverageFactorIn(vs ...decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldOverageFactor, vs...))
}

// OverageFactorNotIn applies the NotIn predicate on the "overage_factor" field.
func OverageFactorNotIn(vs ...decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldOverageFactor, vs...))
}

// OverageFactorGT applies the GT predicate on the "overage_factor" field.
func OverageFactorGT(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldOverageFactor, v))
}

// OverageFactorGTE applies the GTE predicate on the "overage_factor" field.
func OverageFactorGTE(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldOverageFactor, v))
}

// OverageFactorLT applies the LT predicate on the "overage_factor" field.
func OverageFactorLT(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldOverageFactor, v))
}

// OverageFactorLTE applies the LTE predicate on the "overage_factor" field.
func OverageFactorLTE(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldOverageFactor, v))
}

// OverageFactorIsNil applies the IsNil predicate on the "overage_factor" field.
func OverageFactorIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldOverageFactor))
}

// OverageFactorNotNil applies the NotNil predicate on the "overage_factor" field.
func OverageFactorNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldOverageFactor))
}

// HasLineItems applies the HasEdge predicate on the "line_items" edge.
func HasLineItems() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LineItemsTable, LineItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineItemsWith applies the HasEdge predicate on the "line_items" edge with a given conditions (other predicates).
func HasLineItemsWith(preds ...predicate.SubscriptionLineItem) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newLineItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPauses applies the HasEdge predicate on the "pauses" edge.
func HasPauses() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PausesTable, PausesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPausesWith applies the HasEdge predicate on the "pauses" edge with a given conditions (other predicates).
func HasPausesWith(preds ...predicate.SubscriptionPause) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newPausesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreditGrants applies the HasEdge predicate on the "credit_grants" edge.
func HasCreditGrants() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreditGrantsTable, CreditGrantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreditGrantsWith applies the HasEdge predicate on the "credit_grants" edge with a given conditions (other predicates).
func HasCreditGrantsWith(preds ...predicate.CreditGrant) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newCreditGrantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedule applies the HasEdge predicate on the "schedule" edge.
func HasSchedule() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleWith applies the HasEdge predicate on the "schedule" edge with a given conditions (other predicates).
func HasScheduleWith(preds ...predicate.SubscriptionSchedule) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCouponAssociations applies the HasEdge predicate on the "coupon_associations" edge.
func HasCouponAssociations() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CouponAssociationsTable, CouponAssociationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCouponAssociationsWith applies the HasEdge predicate on the "coupon_associations" edge with a given conditions (other predicates).
func HasCouponAssociationsWith(preds ...predicate.CouponAssociation) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newCouponAssociationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCouponApplications applies the HasEdge predicate on the "coupon_applications" edge.
func HasCouponApplications() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CouponApplicationsTable, CouponApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCouponApplicationsWith applies the HasEdge predicate on the "coupon_applications" edge with a given conditions (other predicates).
func HasCouponApplicationsWith(preds ...predicate.CouponApplication) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newCouponApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.NotPredicates(p))
}
