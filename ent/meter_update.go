// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/schema"
)

// MeterUpdate is the builder for updating Meter entities.
type MeterUpdate struct {
	config
	hooks    []Hook
	mutation *MeterMutation
}

// Where appends a list predicates to the MeterUpdate builder.
func (mu *MeterUpdate) Where(ps ...predicate.Meter) *MeterUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MeterUpdate) SetStatus(s string) *MeterUpdate {
	mu.mutation.SetStatus(s)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableStatus(s *string) *MeterUpdate {
	if s != nil {
		mu.SetStatus(*s)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MeterUpdate) SetUpdatedAt(t time.Time) *MeterUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MeterUpdate) SetUpdatedBy(s string) *MeterUpdate {
	mu.mutation.SetUpdatedBy(s)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableUpdatedBy(s *string) *MeterUpdate {
	if s != nil {
		mu.SetUpdatedBy(*s)
	}
	return mu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mu *MeterUpdate) ClearUpdatedBy() *MeterUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// SetEventName sets the "event_name" field.
func (mu *MeterUpdate) SetEventName(s string) *MeterUpdate {
	mu.mutation.SetEventName(s)
	return mu
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableEventName(s *string) *MeterUpdate {
	if s != nil {
		mu.SetEventName(*s)
	}
	return mu
}

// SetName sets the "name" field.
func (mu *MeterUpdate) SetName(s string) *MeterUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableName(s *string) *MeterUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetAggregation sets the "aggregation" field.
func (mu *MeterUpdate) SetAggregation(sa schema.MeterAggregation) *MeterUpdate {
	mu.mutation.SetAggregation(sa)
	return mu
}

// SetNillableAggregation sets the "aggregation" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableAggregation(sa *schema.MeterAggregation) *MeterUpdate {
	if sa != nil {
		mu.SetAggregation(*sa)
	}
	return mu
}

// SetFilters sets the "filters" field.
func (mu *MeterUpdate) SetFilters(sf []schema.MeterFilter) *MeterUpdate {
	mu.mutation.SetFilters(sf)
	return mu
}

// AppendFilters appends sf to the "filters" field.
func (mu *MeterUpdate) AppendFilters(sf []schema.MeterFilter) *MeterUpdate {
	mu.mutation.AppendFilters(sf)
	return mu
}

// SetResetUsage sets the "reset_usage" field.
func (mu *MeterUpdate) SetResetUsage(s string) *MeterUpdate {
	mu.mutation.SetResetUsage(s)
	return mu
}

// SetNillableResetUsage sets the "reset_usage" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableResetUsage(s *string) *MeterUpdate {
	if s != nil {
		mu.SetResetUsage(*s)
	}
	return mu
}

// AddCostsheetIDs adds the "costsheet" edge to the Costsheet entity by IDs.
func (mu *MeterUpdate) AddCostsheetIDs(ids ...string) *MeterUpdate {
	mu.mutation.AddCostsheetIDs(ids...)
	return mu
}

// AddCostsheet adds the "costsheet" edges to the Costsheet entity.
func (mu *MeterUpdate) AddCostsheet(c ...*Costsheet) *MeterUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCostsheetIDs(ids...)
}

// Mutation returns the MeterMutation object of the builder.
func (mu *MeterUpdate) Mutation() *MeterMutation {
	return mu.mutation
}

// ClearCostsheet clears all "costsheet" edges to the Costsheet entity.
func (mu *MeterUpdate) ClearCostsheet() *MeterUpdate {
	mu.mutation.ClearCostsheet()
	return mu
}

// RemoveCostsheetIDs removes the "costsheet" edge to Costsheet entities by IDs.
func (mu *MeterUpdate) RemoveCostsheetIDs(ids ...string) *MeterUpdate {
	mu.mutation.RemoveCostsheetIDs(ids...)
	return mu
}

// RemoveCostsheet removes "costsheet" edges to Costsheet entities.
func (mu *MeterUpdate) RemoveCostsheet(c ...*Costsheet) *MeterUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCostsheetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MeterUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MeterUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MeterUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MeterUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MeterUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := meter.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MeterUpdate) check() error {
	if v, ok := mu.mutation.EventName(); ok {
		if err := meter.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "Meter.event_name": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Name(); ok {
		if err := meter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Meter.name": %w`, err)}
		}
	}
	return nil
}

func (mu *MeterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(meter.Table, meter.Columns, sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(meter.FieldStatus, field.TypeString, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(meter.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.CreatedByCleared() {
		_spec.ClearField(meter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(meter.FieldUpdatedBy, field.TypeString, value)
	}
	if mu.mutation.UpdatedByCleared() {
		_spec.ClearField(meter.FieldUpdatedBy, field.TypeString)
	}
	if mu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(meter.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := mu.mutation.EventName(); ok {
		_spec.SetField(meter.FieldEventName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(meter.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Aggregation(); ok {
		_spec.SetField(meter.FieldAggregation, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.Filters(); ok {
		_spec.SetField(meter.FieldFilters, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedFilters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, meter.FieldFilters, value)
		})
	}
	if value, ok := mu.mutation.ResetUsage(); ok {
		_spec.SetField(meter.FieldResetUsage, field.TypeString, value)
	}
	if mu.mutation.CostsheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meter.CostsheetTable,
			Columns: []string{meter.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCostsheetIDs(); len(nodes) > 0 && !mu.mutation.CostsheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meter.CostsheetTable,
			Columns: []string{meter.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CostsheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meter.CostsheetTable,
			Columns: []string{meter.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MeterUpdateOne is the builder for updating a single Meter entity.
type MeterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MeterMutation
}

// SetStatus sets the "status" field.
func (muo *MeterUpdateOne) SetStatus(s string) *MeterUpdateOne {
	muo.mutation.SetStatus(s)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableStatus(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetStatus(*s)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MeterUpdateOne) SetUpdatedAt(t time.Time) *MeterUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MeterUpdateOne) SetUpdatedBy(s string) *MeterUpdateOne {
	muo.mutation.SetUpdatedBy(s)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableUpdatedBy(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetUpdatedBy(*s)
	}
	return muo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (muo *MeterUpdateOne) ClearUpdatedBy() *MeterUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// SetEventName sets the "event_name" field.
func (muo *MeterUpdateOne) SetEventName(s string) *MeterUpdateOne {
	muo.mutation.SetEventName(s)
	return muo
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableEventName(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetEventName(*s)
	}
	return muo
}

// SetName sets the "name" field.
func (muo *MeterUpdateOne) SetName(s string) *MeterUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableName(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetAggregation sets the "aggregation" field.
func (muo *MeterUpdateOne) SetAggregation(sa schema.MeterAggregation) *MeterUpdateOne {
	muo.mutation.SetAggregation(sa)
	return muo
}

// SetNillableAggregation sets the "aggregation" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableAggregation(sa *schema.MeterAggregation) *MeterUpdateOne {
	if sa != nil {
		muo.SetAggregation(*sa)
	}
	return muo
}

// SetFilters sets the "filters" field.
func (muo *MeterUpdateOne) SetFilters(sf []schema.MeterFilter) *MeterUpdateOne {
	muo.mutation.SetFilters(sf)
	return muo
}

// AppendFilters appends sf to the "filters" field.
func (muo *MeterUpdateOne) AppendFilters(sf []schema.MeterFilter) *MeterUpdateOne {
	muo.mutation.AppendFilters(sf)
	return muo
}

// SetResetUsage sets the "reset_usage" field.
func (muo *MeterUpdateOne) SetResetUsage(s string) *MeterUpdateOne {
	muo.mutation.SetResetUsage(s)
	return muo
}

// SetNillableResetUsage sets the "reset_usage" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableResetUsage(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetResetUsage(*s)
	}
	return muo
}

// AddCostsheetIDs adds the "costsheet" edge to the Costsheet entity by IDs.
func (muo *MeterUpdateOne) AddCostsheetIDs(ids ...string) *MeterUpdateOne {
	muo.mutation.AddCostsheetIDs(ids...)
	return muo
}

// AddCostsheet adds the "costsheet" edges to the Costsheet entity.
func (muo *MeterUpdateOne) AddCostsheet(c ...*Costsheet) *MeterUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCostsheetIDs(ids...)
}

// Mutation returns the MeterMutation object of the builder.
func (muo *MeterUpdateOne) Mutation() *MeterMutation {
	return muo.mutation
}

// ClearCostsheet clears all "costsheet" edges to the Costsheet entity.
func (muo *MeterUpdateOne) ClearCostsheet() *MeterUpdateOne {
	muo.mutation.ClearCostsheet()
	return muo
}

// RemoveCostsheetIDs removes the "costsheet" edge to Costsheet entities by IDs.
func (muo *MeterUpdateOne) RemoveCostsheetIDs(ids ...string) *MeterUpdateOne {
	muo.mutation.RemoveCostsheetIDs(ids...)
	return muo
}

// RemoveCostsheet removes "costsheet" edges to Costsheet entities.
func (muo *MeterUpdateOne) RemoveCostsheet(c ...*Costsheet) *MeterUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCostsheetIDs(ids...)
}

// Where appends a list predicates to the MeterUpdate builder.
func (muo *MeterUpdateOne) Where(ps ...predicate.Meter) *MeterUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MeterUpdateOne) Select(field string, fields ...string) *MeterUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Meter entity.
func (muo *MeterUpdateOne) Save(ctx context.Context) (*Meter, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MeterUpdateOne) SaveX(ctx context.Context) *Meter {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MeterUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MeterUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MeterUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := meter.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MeterUpdateOne) check() error {
	if v, ok := muo.mutation.EventName(); ok {
		if err := meter.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "Meter.event_name": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Name(); ok {
		if err := meter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Meter.name": %w`, err)}
		}
	}
	return nil
}

func (muo *MeterUpdateOne) sqlSave(ctx context.Context) (_node *Meter, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(meter.Table, meter.Columns, sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Meter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meter.FieldID)
		for _, f := range fields {
			if !meter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(meter.FieldStatus, field.TypeString, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(meter.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.CreatedByCleared() {
		_spec.ClearField(meter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(meter.FieldUpdatedBy, field.TypeString, value)
	}
	if muo.mutation.UpdatedByCleared() {
		_spec.ClearField(meter.FieldUpdatedBy, field.TypeString)
	}
	if muo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(meter.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := muo.mutation.EventName(); ok {
		_spec.SetField(meter.FieldEventName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(meter.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Aggregation(); ok {
		_spec.SetField(meter.FieldAggregation, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.Filters(); ok {
		_spec.SetField(meter.FieldFilters, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedFilters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, meter.FieldFilters, value)
		})
	}
	if value, ok := muo.mutation.ResetUsage(); ok {
		_spec.SetField(meter.FieldResetUsage, field.TypeString, value)
	}
	if muo.mutation.CostsheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meter.CostsheetTable,
			Columns: []string{meter.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCostsheetIDs(); len(nodes) > 0 && !muo.mutation.CostsheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meter.CostsheetTable,
			Columns: []string{meter.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CostsheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meter.CostsheetTable,
			Columns: []string{meter.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Meter{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
