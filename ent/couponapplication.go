// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/invoice"
	"github.com/flexprice/flexprice/ent/invoicelineitem"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/shopspring/decimal"
)

// CouponApplication is the model entity for the CouponApplication schema.
type CouponApplication struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	CouponID string `json:"coupon_id,omitempty"`
	// CouponAssociationID holds the value of the "coupon_association_id" field.
	CouponAssociationID *string `json:"coupon_association_id,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// InvoiceLineItemID holds the value of the "invoice_line_item_id" field.
	InvoiceLineItemID *string `json:"invoice_line_item_id,omitempty"`
	// AppliedAt holds the value of the "applied_at" field.
	AppliedAt time.Time `json:"applied_at,omitempty"`
	// OriginalPrice holds the value of the "original_price" field.
	OriginalPrice decimal.Decimal `json:"original_price,omitempty"`
	// FinalPrice holds the value of the "final_price" field.
	FinalPrice decimal.Decimal `json:"final_price,omitempty"`
	// DiscountedAmount holds the value of the "discounted_amount" field.
	DiscountedAmount decimal.Decimal `json:"discounted_amount,omitempty"`
	// Type of discount applied: fixed or percentage
	DiscountType string `json:"discount_type,omitempty"`
	// Percentage value, only for percentage discounts
	DiscountPercentage *decimal.Decimal `json:"discount_percentage,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency *string `json:"currency,omitempty"`
	// Frozen coupon configuration at time of application
	CouponSnapshot map[string]interface{} `json:"coupon_snapshot,omitempty"`
	// Additional metadata for coupon application
	Metadata map[string]string `json:"metadata,omitempty"`
	// Subscription ID this coupon application is associated with
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CouponApplicationQuery when eager-loading is set.
	Edges        CouponApplicationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CouponApplicationEdges holds the relations/edges for other nodes in the graph.
type CouponApplicationEdges struct {
	// Coupon holds the value of the coupon edge.
	Coupon *Coupon `json:"coupon,omitempty"`
	// CouponAssociation holds the value of the coupon_association edge.
	CouponAssociation []*CouponAssociation `json:"coupon_association,omitempty"`
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// InvoiceLineItem holds the value of the invoice_line_item edge.
	InvoiceLineItem *InvoiceLineItem `json:"invoice_line_item,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CouponOrErr returns the Coupon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponApplicationEdges) CouponOrErr() (*Coupon, error) {
	if e.Coupon != nil {
		return e.Coupon, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: coupon.Label}
	}
	return nil, &NotLoadedError{edge: "coupon"}
}

// CouponAssociationOrErr returns the CouponAssociation value or an error if the edge
// was not loaded in eager-loading.
func (e CouponApplicationEdges) CouponAssociationOrErr() ([]*CouponAssociation, error) {
	if e.loadedTypes[1] {
		return e.CouponAssociation, nil
	}
	return nil, &NotLoadedError{edge: "coupon_association"}
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponApplicationEdges) InvoiceOrErr() (*Invoice, error) {
	if e.Invoice != nil {
		return e.Invoice, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: invoice.Label}
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// InvoiceLineItemOrErr returns the InvoiceLineItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponApplicationEdges) InvoiceLineItemOrErr() (*InvoiceLineItem, error) {
	if e.InvoiceLineItem != nil {
		return e.InvoiceLineItem, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: invoicelineitem.Label}
	}
	return nil, &NotLoadedError{edge: "invoice_line_item"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponApplicationEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponapplication.FieldDiscountPercentage:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case couponapplication.FieldCouponSnapshot, couponapplication.FieldMetadata:
			values[i] = new([]byte)
		case couponapplication.FieldOriginalPrice, couponapplication.FieldFinalPrice, couponapplication.FieldDiscountedAmount:
			values[i] = new(decimal.Decimal)
		case couponapplication.FieldID, couponapplication.FieldTenantID, couponapplication.FieldStatus, couponapplication.FieldCreatedBy, couponapplication.FieldUpdatedBy, couponapplication.FieldEnvironmentID, couponapplication.FieldCouponID, couponapplication.FieldCouponAssociationID, couponapplication.FieldInvoiceID, couponapplication.FieldInvoiceLineItemID, couponapplication.FieldDiscountType, couponapplication.FieldCurrency, couponapplication.FieldSubscriptionID:
			values[i] = new(sql.NullString)
		case couponapplication.FieldCreatedAt, couponapplication.FieldUpdatedAt, couponapplication.FieldAppliedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponApplication fields.
func (ca *CouponApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponapplication.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ca.ID = value.String
			}
		case couponapplication.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ca.TenantID = value.String
			}
		case couponapplication.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ca.Status = value.String
			}
		case couponapplication.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case couponapplication.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		case couponapplication.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ca.CreatedBy = value.String
			}
		case couponapplication.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ca.UpdatedBy = value.String
			}
		case couponapplication.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				ca.EnvironmentID = value.String
			}
		case couponapplication.FieldCouponID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value.Valid {
				ca.CouponID = value.String
			}
		case couponapplication.FieldCouponAssociationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_association_id", values[i])
			} else if value.Valid {
				ca.CouponAssociationID = new(string)
				*ca.CouponAssociationID = value.String
			}
		case couponapplication.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				ca.InvoiceID = value.String
			}
		case couponapplication.FieldInvoiceLineItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_line_item_id", values[i])
			} else if value.Valid {
				ca.InvoiceLineItemID = new(string)
				*ca.InvoiceLineItemID = value.String
			}
		case couponapplication.FieldAppliedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field applied_at", values[i])
			} else if value.Valid {
				ca.AppliedAt = value.Time
			}
		case couponapplication.FieldOriginalPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field original_price", values[i])
			} else if value != nil {
				ca.OriginalPrice = *value
			}
		case couponapplication.FieldFinalPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field final_price", values[i])
			} else if value != nil {
				ca.FinalPrice = *value
			}
		case couponapplication.FieldDiscountedAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discounted_amount", values[i])
			} else if value != nil {
				ca.DiscountedAmount = *value
			}
		case couponapplication.FieldDiscountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_type", values[i])
			} else if value.Valid {
				ca.DiscountType = value.String
			}
		case couponapplication.FieldDiscountPercentage:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field discount_percentage", values[i])
			} else if value.Valid {
				ca.DiscountPercentage = new(decimal.Decimal)
				*ca.DiscountPercentage = *value.S.(*decimal.Decimal)
			}
		case couponapplication.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				ca.Currency = new(string)
				*ca.Currency = value.String
			}
		case couponapplication.FieldCouponSnapshot:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_snapshot", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.CouponSnapshot); err != nil {
					return fmt.Errorf("unmarshal field coupon_snapshot: %w", err)
				}
			}
		case couponapplication.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case couponapplication.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				ca.SubscriptionID = new(string)
				*ca.SubscriptionID = value.String
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CouponApplication.
// This includes values selected through modifiers, order, etc.
func (ca *CouponApplication) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// QueryCoupon queries the "coupon" edge of the CouponApplication entity.
func (ca *CouponApplication) QueryCoupon() *CouponQuery {
	return NewCouponApplicationClient(ca.config).QueryCoupon(ca)
}

// QueryCouponAssociation queries the "coupon_association" edge of the CouponApplication entity.
func (ca *CouponApplication) QueryCouponAssociation() *CouponAssociationQuery {
	return NewCouponApplicationClient(ca.config).QueryCouponAssociation(ca)
}

// QueryInvoice queries the "invoice" edge of the CouponApplication entity.
func (ca *CouponApplication) QueryInvoice() *InvoiceQuery {
	return NewCouponApplicationClient(ca.config).QueryInvoice(ca)
}

// QueryInvoiceLineItem queries the "invoice_line_item" edge of the CouponApplication entity.
func (ca *CouponApplication) QueryInvoiceLineItem() *InvoiceLineItemQuery {
	return NewCouponApplicationClient(ca.config).QueryInvoiceLineItem(ca)
}

// QuerySubscription queries the "subscription" edge of the CouponApplication entity.
func (ca *CouponApplication) QuerySubscription() *SubscriptionQuery {
	return NewCouponApplicationClient(ca.config).QuerySubscription(ca)
}

// Update returns a builder for updating this CouponApplication.
// Note that you need to call CouponApplication.Unwrap() before calling this method if this CouponApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CouponApplication) Update() *CouponApplicationUpdateOne {
	return NewCouponApplicationClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CouponApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CouponApplication) Unwrap() *CouponApplication {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponApplication is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CouponApplication) String() string {
	var builder strings.Builder
	builder.WriteString("CouponApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(ca.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ca.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ca.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ca.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(ca.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(ca.CouponID)
	builder.WriteString(", ")
	if v := ca.CouponAssociationID; v != nil {
		builder.WriteString("coupon_association_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(ca.InvoiceID)
	builder.WriteString(", ")
	if v := ca.InvoiceLineItemID; v != nil {
		builder.WriteString("invoice_line_item_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("applied_at=")
	builder.WriteString(ca.AppliedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("original_price=")
	builder.WriteString(fmt.Sprintf("%v", ca.OriginalPrice))
	builder.WriteString(", ")
	builder.WriteString("final_price=")
	builder.WriteString(fmt.Sprintf("%v", ca.FinalPrice))
	builder.WriteString(", ")
	builder.WriteString("discounted_amount=")
	builder.WriteString(fmt.Sprintf("%v", ca.DiscountedAmount))
	builder.WriteString(", ")
	builder.WriteString("discount_type=")
	builder.WriteString(ca.DiscountType)
	builder.WriteString(", ")
	if v := ca.DiscountPercentage; v != nil {
		builder.WriteString("discount_percentage=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ca.Currency; v != nil {
		builder.WriteString("currency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("coupon_snapshot=")
	builder.WriteString(fmt.Sprintf("%v", ca.CouponSnapshot))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ca.Metadata))
	builder.WriteString(", ")
	if v := ca.SubscriptionID; v != nil {
		builder.WriteString("subscription_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// CouponApplications is a parsable slice of CouponApplication.
type CouponApplications []*CouponApplication
