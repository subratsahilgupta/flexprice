// Code generated by ent, DO NOT EDIT.

package coupon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the coupon type in the database.
	Label = "coupon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRedeemAfter holds the string denoting the redeem_after field in the database.
	FieldRedeemAfter = "redeem_after"
	// FieldRedeemBefore holds the string denoting the redeem_before field in the database.
	FieldRedeemBefore = "redeem_before"
	// FieldMaxRedemptions holds the string denoting the max_redemptions field in the database.
	FieldMaxRedemptions = "max_redemptions"
	// FieldTotalRedemptions holds the string denoting the total_redemptions field in the database.
	FieldTotalRedemptions = "total_redemptions"
	// FieldRules holds the string denoting the rules field in the database.
	FieldRules = "rules"
	// FieldAmountOff holds the string denoting the amount_off field in the database.
	FieldAmountOff = "amount_off"
	// FieldPercentageOff holds the string denoting the percentage_off field in the database.
	FieldPercentageOff = "percentage_off"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCadence holds the string denoting the cadence field in the database.
	FieldCadence = "cadence"
	// FieldDurationInPeriods holds the string denoting the duration_in_periods field in the database.
	FieldDurationInPeriods = "duration_in_periods"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeCouponAssociations holds the string denoting the coupon_associations edge name in mutations.
	EdgeCouponAssociations = "coupon_associations"
	// EdgeCouponApplications holds the string denoting the coupon_applications edge name in mutations.
	EdgeCouponApplications = "coupon_applications"
	// Table holds the table name of the coupon in the database.
	Table = "coupons"
	// CouponAssociationsTable is the table that holds the coupon_associations relation/edge.
	CouponAssociationsTable = "coupon_associations"
	// CouponAssociationsInverseTable is the table name for the CouponAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "couponassociation" package.
	CouponAssociationsInverseTable = "coupon_associations"
	// CouponAssociationsColumn is the table column denoting the coupon_associations relation/edge.
	CouponAssociationsColumn = "coupon_id"
	// CouponApplicationsTable is the table that holds the coupon_applications relation/edge.
	CouponApplicationsTable = "coupon_applications"
	// CouponApplicationsInverseTable is the table name for the CouponApplication entity.
	// It exists in this package in order to avoid circular dependency with the "couponapplication" package.
	CouponApplicationsInverseTable = "coupon_applications"
	// CouponApplicationsColumn is the table column denoting the coupon_applications relation/edge.
	CouponApplicationsColumn = "coupon_id"
)

// Columns holds all SQL columns for coupon fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldName,
	FieldRedeemAfter,
	FieldRedeemBefore,
	FieldMaxRedemptions,
	FieldTotalRedemptions,
	FieldRules,
	FieldAmountOff,
	FieldPercentageOff,
	FieldType,
	FieldCadence,
	FieldDurationInPeriods,
	FieldCurrency,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultTotalRedemptions holds the default value on creation for the "total_redemptions" field.
	DefaultTotalRedemptions int
	// DefaultAmountOff holds the default value on creation for the "amount_off" field.
	DefaultAmountOff decimal.Decimal
	// DefaultPercentageOff holds the default value on creation for the "percentage_off" field.
	DefaultPercentageOff decimal.Decimal
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultCadence holds the default value on creation for the "cadence" field.
	DefaultCadence string
	// CadenceValidator is a validator for the "cadence" field. It is called by the builders before save.
	CadenceValidator func(string) error
)

// OrderOption defines the ordering options for the Coupon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRedeemAfter orders the results by the redeem_after field.
func ByRedeemAfter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedeemAfter, opts...).ToFunc()
}

// ByRedeemBefore orders the results by the redeem_before field.
func ByRedeemBefore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedeemBefore, opts...).ToFunc()
}

// ByMaxRedemptions orders the results by the max_redemptions field.
func ByMaxRedemptions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxRedemptions, opts...).ToFunc()
}

// ByTotalRedemptions orders the results by the total_redemptions field.
func ByTotalRedemptions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalRedemptions, opts...).ToFunc()
}

// ByAmountOff orders the results by the amount_off field.
func ByAmountOff(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountOff, opts...).ToFunc()
}

// ByPercentageOff orders the results by the percentage_off field.
func ByPercentageOff(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPercentageOff, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCadence orders the results by the cadence field.
func ByCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadence, opts...).ToFunc()
}

// ByDurationInPeriods orders the results by the duration_in_periods field.
func ByDurationInPeriods(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationInPeriods, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByCouponAssociationsCount orders the results by coupon_associations count.
func ByCouponAssociationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponAssociationsStep(), opts...)
	}
}

// ByCouponAssociations orders the results by coupon_associations terms.
func ByCouponAssociations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponAssociationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCouponApplicationsCount orders the results by coupon_applications count.
func ByCouponApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponApplicationsStep(), opts...)
	}
}

// ByCouponApplications orders the results by coupon_applications terms.
func ByCouponApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCouponAssociationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponAssociationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CouponAssociationsTable, CouponAssociationsColumn),
	)
}
func newCouponApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CouponApplicationsTable, CouponApplicationsColumn),
	)
}
