// Code generated by ent, DO NOT EDIT.

package couponapplication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the couponapplication type in the database.
	Label = "coupon_application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldCouponID holds the string denoting the coupon_id field in the database.
	FieldCouponID = "coupon_id"
	// FieldCouponAssociationID holds the string denoting the coupon_association_id field in the database.
	FieldCouponAssociationID = "coupon_association_id"
	// FieldInvoiceID holds the string denoting the invoice_id field in the database.
	FieldInvoiceID = "invoice_id"
	// FieldInvoiceLineItemID holds the string denoting the invoice_line_item_id field in the database.
	FieldInvoiceLineItemID = "invoice_line_item_id"
	// FieldAppliedAt holds the string denoting the applied_at field in the database.
	FieldAppliedAt = "applied_at"
	// FieldOriginalPrice holds the string denoting the original_price field in the database.
	FieldOriginalPrice = "original_price"
	// FieldFinalPrice holds the string denoting the final_price field in the database.
	FieldFinalPrice = "final_price"
	// FieldDiscountedAmount holds the string denoting the discounted_amount field in the database.
	FieldDiscountedAmount = "discounted_amount"
	// FieldDiscountType holds the string denoting the discount_type field in the database.
	FieldDiscountType = "discount_type"
	// FieldDiscountPercentage holds the string denoting the discount_percentage field in the database.
	FieldDiscountPercentage = "discount_percentage"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldCouponSnapshot holds the string denoting the coupon_snapshot field in the database.
	FieldCouponSnapshot = "coupon_snapshot"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// EdgeCoupon holds the string denoting the coupon edge name in mutations.
	EdgeCoupon = "coupon"
	// EdgeCouponAssociation holds the string denoting the coupon_association edge name in mutations.
	EdgeCouponAssociation = "coupon_association"
	// EdgeInvoice holds the string denoting the invoice edge name in mutations.
	EdgeInvoice = "invoice"
	// EdgeInvoiceLineItem holds the string denoting the invoice_line_item edge name in mutations.
	EdgeInvoiceLineItem = "invoice_line_item"
	// EdgeSubscription holds the string denoting the subscription edge name in mutations.
	EdgeSubscription = "subscription"
	// Table holds the table name of the couponapplication in the database.
	Table = "coupon_applications"
	// CouponTable is the table that holds the coupon relation/edge.
	CouponTable = "coupon_applications"
	// CouponInverseTable is the table name for the Coupon entity.
	// It exists in this package in order to avoid circular dependency with the "coupon" package.
	CouponInverseTable = "coupons"
	// CouponColumn is the table column denoting the coupon relation/edge.
	CouponColumn = "coupon_id"
	// CouponAssociationTable is the table that holds the coupon_association relation/edge. The primary key declared below.
	CouponAssociationTable = "coupon_association_coupon_applications"
	// CouponAssociationInverseTable is the table name for the CouponAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "couponassociation" package.
	CouponAssociationInverseTable = "coupon_associations"
	// InvoiceTable is the table that holds the invoice relation/edge.
	InvoiceTable = "coupon_applications"
	// InvoiceInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoiceInverseTable = "invoices"
	// InvoiceColumn is the table column denoting the invoice relation/edge.
	InvoiceColumn = "invoice_id"
	// InvoiceLineItemTable is the table that holds the invoice_line_item relation/edge.
	InvoiceLineItemTable = "coupon_applications"
	// InvoiceLineItemInverseTable is the table name for the InvoiceLineItem entity.
	// It exists in this package in order to avoid circular dependency with the "invoicelineitem" package.
	InvoiceLineItemInverseTable = "invoice_line_items"
	// InvoiceLineItemColumn is the table column denoting the invoice_line_item relation/edge.
	InvoiceLineItemColumn = "invoice_line_item_id"
	// SubscriptionTable is the table that holds the subscription relation/edge.
	SubscriptionTable = "coupon_applications"
	// SubscriptionInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionInverseTable = "subscriptions"
	// SubscriptionColumn is the table column denoting the subscription relation/edge.
	SubscriptionColumn = "subscription_id"
)

// Columns holds all SQL columns for couponapplication fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldCouponID,
	FieldCouponAssociationID,
	FieldInvoiceID,
	FieldInvoiceLineItemID,
	FieldAppliedAt,
	FieldOriginalPrice,
	FieldFinalPrice,
	FieldDiscountedAmount,
	FieldDiscountType,
	FieldDiscountPercentage,
	FieldCurrency,
	FieldCouponSnapshot,
	FieldMetadata,
	FieldSubscriptionID,
}

var (
	// CouponAssociationPrimaryKey and CouponAssociationColumn2 are the table columns denoting the
	// primary key for the coupon_association relation (M2M).
	CouponAssociationPrimaryKey = []string{"coupon_association_id", "coupon_application_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// CouponIDValidator is a validator for the "coupon_id" field. It is called by the builders before save.
	CouponIDValidator func(string) error
	// InvoiceIDValidator is a validator for the "invoice_id" field. It is called by the builders before save.
	InvoiceIDValidator func(string) error
	// DefaultAppliedAt holds the default value on creation for the "applied_at" field.
	DefaultAppliedAt func() time.Time
	// DiscountTypeValidator is a validator for the "discount_type" field. It is called by the builders before save.
	DiscountTypeValidator func(string) error
)

// OrderOption defines the ordering options for the CouponApplication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByCouponID orders the results by the coupon_id field.
func ByCouponID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponID, opts...).ToFunc()
}

// ByCouponAssociationID orders the results by the coupon_association_id field.
func ByCouponAssociationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponAssociationID, opts...).ToFunc()
}

// ByInvoiceID orders the results by the invoice_id field.
func ByInvoiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceID, opts...).ToFunc()
}

// ByInvoiceLineItemID orders the results by the invoice_line_item_id field.
func ByInvoiceLineItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceLineItemID, opts...).ToFunc()
}

// ByAppliedAt orders the results by the applied_at field.
func ByAppliedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppliedAt, opts...).ToFunc()
}

// ByOriginalPrice orders the results by the original_price field.
func ByOriginalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalPrice, opts...).ToFunc()
}

// ByFinalPrice orders the results by the final_price field.
func ByFinalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalPrice, opts...).ToFunc()
}

// ByDiscountedAmount orders the results by the discounted_amount field.
func ByDiscountedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountedAmount, opts...).ToFunc()
}

// ByDiscountType orders the results by the discount_type field.
func ByDiscountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountType, opts...).ToFunc()
}

// ByDiscountPercentage orders the results by the discount_percentage field.
func ByDiscountPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountPercentage, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByCouponField orders the results by coupon field.
func ByCouponField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponStep(), sql.OrderByField(field, opts...))
	}
}

// ByCouponAssociationCount orders the results by coupon_association count.
func ByCouponAssociationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponAssociationStep(), opts...)
	}
}

// ByCouponAssociation orders the results by coupon_association terms.
func ByCouponAssociation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponAssociationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvoiceField orders the results by invoice field.
func ByInvoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByInvoiceLineItemField orders the results by invoice_line_item field.
func ByInvoiceLineItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoiceLineItemStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscriptionField orders the results by subscription field.
func BySubscriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionStep(), sql.OrderByField(field, opts...))
	}
}
func newCouponStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CouponTable, CouponColumn),
	)
}
func newCouponAssociationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponAssociationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CouponAssociationTable, CouponAssociationPrimaryKey...),
	)
}
func newInvoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
	)
}
func newInvoiceLineItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoiceLineItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InvoiceLineItemTable, InvoiceLineItemColumn),
	)
}
func newSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
	)
}
