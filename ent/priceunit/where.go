// Code generated by ent, DO NOT EDIT.

package priceunit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldEnvironmentID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldCode, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldSymbol, v))
}

// BaseCurrency applies equality check predicate on the "base_currency" field. It's identical to BaseCurrencyEQ.
func BaseCurrency(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldBaseCurrency, v))
}

// ConversionRate applies equality check predicate on the "conversion_rate" field. It's identical to ConversionRateEQ.
func ConversionRate(v decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldConversionRate, v))
}

// Precision applies equality check predicate on the "precision" field. It's identical to PrecisionEQ.
func Precision(v int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldPrecision, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldCode, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldSymbol, v))
}

// BaseCurrencyEQ applies the EQ predicate on the "base_currency" field.
func BaseCurrencyEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldBaseCurrency, v))
}

// BaseCurrencyNEQ applies the NEQ predicate on the "base_currency" field.
func BaseCurrencyNEQ(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldBaseCurrency, v))
}

// BaseCurrencyIn applies the In predicate on the "base_currency" field.
func BaseCurrencyIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldBaseCurrency, vs...))
}

// BaseCurrencyNotIn applies the NotIn predicate on the "base_currency" field.
func BaseCurrencyNotIn(vs ...string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldBaseCurrency, vs...))
}

// BaseCurrencyGT applies the GT predicate on the "base_currency" field.
func BaseCurrencyGT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldBaseCurrency, v))
}

// BaseCurrencyGTE applies the GTE predicate on the "base_currency" field.
func BaseCurrencyGTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldBaseCurrency, v))
}

// BaseCurrencyLT applies the LT predicate on the "base_currency" field.
func BaseCurrencyLT(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldBaseCurrency, v))
}

// BaseCurrencyLTE applies the LTE predicate on the "base_currency" field.
func BaseCurrencyLTE(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldBaseCurrency, v))
}

// BaseCurrencyContains applies the Contains predicate on the "base_currency" field.
func BaseCurrencyContains(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContains(FieldBaseCurrency, v))
}

// BaseCurrencyHasPrefix applies the HasPrefix predicate on the "base_currency" field.
func BaseCurrencyHasPrefix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasPrefix(FieldBaseCurrency, v))
}

// BaseCurrencyHasSuffix applies the HasSuffix predicate on the "base_currency" field.
func BaseCurrencyHasSuffix(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldHasSuffix(FieldBaseCurrency, v))
}

// BaseCurrencyEqualFold applies the EqualFold predicate on the "base_currency" field.
func BaseCurrencyEqualFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEqualFold(FieldBaseCurrency, v))
}

// BaseCurrencyContainsFold applies the ContainsFold predicate on the "base_currency" field.
func BaseCurrencyContainsFold(v string) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldContainsFold(FieldBaseCurrency, v))
}

// ConversionRateEQ applies the EQ predicate on the "conversion_rate" field.
func ConversionRateEQ(v decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldConversionRate, v))
}

// ConversionRateNEQ applies the NEQ predicate on the "conversion_rate" field.
func ConversionRateNEQ(v decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldConversionRate, v))
}

// ConversionRateIn applies the In predicate on the "conversion_rate" field.
func ConversionRateIn(vs ...decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldConversionRate, vs...))
}

// ConversionRateNotIn applies the NotIn predicate on the "conversion_rate" field.
func ConversionRateNotIn(vs ...decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldConversionRate, vs...))
}

// ConversionRateGT applies the GT predicate on the "conversion_rate" field.
func ConversionRateGT(v decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldConversionRate, v))
}

// ConversionRateGTE applies the GTE predicate on the "conversion_rate" field.
func ConversionRateGTE(v decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldConversionRate, v))
}

// ConversionRateLT applies the LT predicate on the "conversion_rate" field.
func ConversionRateLT(v decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldConversionRate, v))
}

// ConversionRateLTE applies the LTE predicate on the "conversion_rate" field.
func ConversionRateLTE(v decimal.Decimal) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldConversionRate, v))
}

// PrecisionEQ applies the EQ predicate on the "precision" field.
func PrecisionEQ(v int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldEQ(FieldPrecision, v))
}

// PrecisionNEQ applies the NEQ predicate on the "precision" field.
func PrecisionNEQ(v int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNEQ(FieldPrecision, v))
}

// PrecisionIn applies the In predicate on the "precision" field.
func PrecisionIn(vs ...int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldIn(FieldPrecision, vs...))
}

// PrecisionNotIn applies the NotIn predicate on the "precision" field.
func PrecisionNotIn(vs ...int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldNotIn(FieldPrecision, vs...))
}

// PrecisionGT applies the GT predicate on the "precision" field.
func PrecisionGT(v int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGT(FieldPrecision, v))
}

// PrecisionGTE applies the GTE predicate on the "precision" field.
func PrecisionGTE(v int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldGTE(FieldPrecision, v))
}

// PrecisionLT applies the LT predicate on the "precision" field.
func PrecisionLT(v int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLT(FieldPrecision, v))
}

// PrecisionLTE applies the LTE predicate on the "precision" field.
func PrecisionLTE(v int) predicate.PriceUnit {
	return predicate.PriceUnit(sql.FieldLTE(FieldPrecision, v))
}

// HasPrices applies the HasEdge predicate on the "prices" edge.
func HasPrices() predicate.PriceUnit {
	return predicate.PriceUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PricesTable, PricesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPricesWith applies the HasEdge predicate on the "prices" edge with a given conditions (other predicates).
func HasPricesWith(preds ...predicate.Price) predicate.PriceUnit {
	return predicate.PriceUnit(func(s *sql.Selector) {
		step := newPricesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PriceUnit) predicate.PriceUnit {
	return predicate.PriceUnit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PriceUnit) predicate.PriceUnit {
	return predicate.PriceUnit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PriceUnit) predicate.PriceUnit {
	return predicate.PriceUnit(sql.NotPredicates(p))
}
