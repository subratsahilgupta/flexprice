// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
)

// CouponAssociationUpdate is the builder for updating CouponAssociation entities.
type CouponAssociationUpdate struct {
	config
	hooks    []Hook
	mutation *CouponAssociationMutation
}

// Where appends a list predicates to the CouponAssociationUpdate builder.
func (cau *CouponAssociationUpdate) Where(ps ...predicate.CouponAssociation) *CouponAssociationUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetStatus sets the "status" field.
func (cau *CouponAssociationUpdate) SetStatus(s string) *CouponAssociationUpdate {
	cau.mutation.SetStatus(s)
	return cau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cau *CouponAssociationUpdate) SetNillableStatus(s *string) *CouponAssociationUpdate {
	if s != nil {
		cau.SetStatus(*s)
	}
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CouponAssociationUpdate) SetUpdatedAt(t time.Time) *CouponAssociationUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// SetUpdatedBy sets the "updated_by" field.
func (cau *CouponAssociationUpdate) SetUpdatedBy(s string) *CouponAssociationUpdate {
	cau.mutation.SetUpdatedBy(s)
	return cau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cau *CouponAssociationUpdate) SetNillableUpdatedBy(s *string) *CouponAssociationUpdate {
	if s != nil {
		cau.SetUpdatedBy(*s)
	}
	return cau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cau *CouponAssociationUpdate) ClearUpdatedBy() *CouponAssociationUpdate {
	cau.mutation.ClearUpdatedBy()
	return cau
}

// SetSubscriptionLineItemID sets the "subscription_line_item_id" field.
func (cau *CouponAssociationUpdate) SetSubscriptionLineItemID(s string) *CouponAssociationUpdate {
	cau.mutation.SetSubscriptionLineItemID(s)
	return cau
}

// SetNillableSubscriptionLineItemID sets the "subscription_line_item_id" field if the given value is not nil.
func (cau *CouponAssociationUpdate) SetNillableSubscriptionLineItemID(s *string) *CouponAssociationUpdate {
	if s != nil {
		cau.SetSubscriptionLineItemID(*s)
	}
	return cau
}

// ClearSubscriptionLineItemID clears the value of the "subscription_line_item_id" field.
func (cau *CouponAssociationUpdate) ClearSubscriptionLineItemID() *CouponAssociationUpdate {
	cau.mutation.ClearSubscriptionLineItemID()
	return cau
}

// SetMetadata sets the "metadata" field.
func (cau *CouponAssociationUpdate) SetMetadata(m map[string]string) *CouponAssociationUpdate {
	cau.mutation.SetMetadata(m)
	return cau
}

// ClearMetadata clears the value of the "metadata" field.
func (cau *CouponAssociationUpdate) ClearMetadata() *CouponAssociationUpdate {
	cau.mutation.ClearMetadata()
	return cau
}

// SetSubscriptionLineItem sets the "subscription_line_item" edge to the SubscriptionLineItem entity.
func (cau *CouponAssociationUpdate) SetSubscriptionLineItem(s *SubscriptionLineItem) *CouponAssociationUpdate {
	return cau.SetSubscriptionLineItemID(s.ID)
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (cau *CouponAssociationUpdate) AddCouponApplicationIDs(ids ...string) *CouponAssociationUpdate {
	cau.mutation.AddCouponApplicationIDs(ids...)
	return cau
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (cau *CouponAssociationUpdate) AddCouponApplications(c ...*CouponApplication) *CouponAssociationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cau.AddCouponApplicationIDs(ids...)
}

// Mutation returns the CouponAssociationMutation object of the builder.
func (cau *CouponAssociationUpdate) Mutation() *CouponAssociationMutation {
	return cau.mutation
}

// ClearSubscriptionLineItem clears the "subscription_line_item" edge to the SubscriptionLineItem entity.
func (cau *CouponAssociationUpdate) ClearSubscriptionLineItem() *CouponAssociationUpdate {
	cau.mutation.ClearSubscriptionLineItem()
	return cau
}

// ClearCouponApplications clears all "coupon_applications" edges to the CouponApplication entity.
func (cau *CouponAssociationUpdate) ClearCouponApplications() *CouponAssociationUpdate {
	cau.mutation.ClearCouponApplications()
	return cau
}

// RemoveCouponApplicationIDs removes the "coupon_applications" edge to CouponApplication entities by IDs.
func (cau *CouponAssociationUpdate) RemoveCouponApplicationIDs(ids ...string) *CouponAssociationUpdate {
	cau.mutation.RemoveCouponApplicationIDs(ids...)
	return cau
}

// RemoveCouponApplications removes "coupon_applications" edges to CouponApplication entities.
func (cau *CouponAssociationUpdate) RemoveCouponApplications(c ...*CouponApplication) *CouponAssociationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cau.RemoveCouponApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CouponAssociationUpdate) Save(ctx context.Context) (int, error) {
	cau.defaults()
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CouponAssociationUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CouponAssociationUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CouponAssociationUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CouponAssociationUpdate) defaults() {
	if _, ok := cau.mutation.UpdatedAt(); !ok {
		v := couponassociation.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cau *CouponAssociationUpdate) check() error {
	if cau.mutation.CouponCleared() && len(cau.mutation.CouponIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponAssociation.coupon"`)
	}
	if cau.mutation.SubscriptionCleared() && len(cau.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponAssociation.subscription"`)
	}
	return nil
}

func (cau *CouponAssociationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(couponassociation.Table, couponassociation.Columns, sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.Status(); ok {
		_spec.SetField(couponassociation.FieldStatus, field.TypeString, value)
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.SetField(couponassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if cau.mutation.CreatedByCleared() {
		_spec.ClearField(couponassociation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cau.mutation.UpdatedBy(); ok {
		_spec.SetField(couponassociation.FieldUpdatedBy, field.TypeString, value)
	}
	if cau.mutation.UpdatedByCleared() {
		_spec.ClearField(couponassociation.FieldUpdatedBy, field.TypeString)
	}
	if cau.mutation.EnvironmentIDCleared() {
		_spec.ClearField(couponassociation.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cau.mutation.Metadata(); ok {
		_spec.SetField(couponassociation.FieldMetadata, field.TypeJSON, value)
	}
	if cau.mutation.MetadataCleared() {
		_spec.ClearField(couponassociation.FieldMetadata, field.TypeJSON)
	}
	if cau.mutation.SubscriptionLineItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponassociation.SubscriptionLineItemTable,
			Columns: []string{couponassociation.SubscriptionLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.SubscriptionLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponassociation.SubscriptionLineItemTable,
			Columns: []string{couponassociation.SubscriptionLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cau.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   couponassociation.CouponApplicationsTable,
			Columns: couponassociation.CouponApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.RemovedCouponApplicationsIDs(); len(nodes) > 0 && !cau.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   couponassociation.CouponApplicationsTable,
			Columns: couponassociation.CouponApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   couponassociation.CouponApplicationsTable,
			Columns: couponassociation.CouponApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CouponAssociationUpdateOne is the builder for updating a single CouponAssociation entity.
type CouponAssociationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponAssociationMutation
}

// SetStatus sets the "status" field.
func (cauo *CouponAssociationUpdateOne) SetStatus(s string) *CouponAssociationUpdateOne {
	cauo.mutation.SetStatus(s)
	return cauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cauo *CouponAssociationUpdateOne) SetNillableStatus(s *string) *CouponAssociationUpdateOne {
	if s != nil {
		cauo.SetStatus(*s)
	}
	return cauo
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CouponAssociationUpdateOne) SetUpdatedAt(t time.Time) *CouponAssociationUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// SetUpdatedBy sets the "updated_by" field.
func (cauo *CouponAssociationUpdateOne) SetUpdatedBy(s string) *CouponAssociationUpdateOne {
	cauo.mutation.SetUpdatedBy(s)
	return cauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cauo *CouponAssociationUpdateOne) SetNillableUpdatedBy(s *string) *CouponAssociationUpdateOne {
	if s != nil {
		cauo.SetUpdatedBy(*s)
	}
	return cauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cauo *CouponAssociationUpdateOne) ClearUpdatedBy() *CouponAssociationUpdateOne {
	cauo.mutation.ClearUpdatedBy()
	return cauo
}

// SetSubscriptionLineItemID sets the "subscription_line_item_id" field.
func (cauo *CouponAssociationUpdateOne) SetSubscriptionLineItemID(s string) *CouponAssociationUpdateOne {
	cauo.mutation.SetSubscriptionLineItemID(s)
	return cauo
}

// SetNillableSubscriptionLineItemID sets the "subscription_line_item_id" field if the given value is not nil.
func (cauo *CouponAssociationUpdateOne) SetNillableSubscriptionLineItemID(s *string) *CouponAssociationUpdateOne {
	if s != nil {
		cauo.SetSubscriptionLineItemID(*s)
	}
	return cauo
}

// ClearSubscriptionLineItemID clears the value of the "subscription_line_item_id" field.
func (cauo *CouponAssociationUpdateOne) ClearSubscriptionLineItemID() *CouponAssociationUpdateOne {
	cauo.mutation.ClearSubscriptionLineItemID()
	return cauo
}

// SetMetadata sets the "metadata" field.
func (cauo *CouponAssociationUpdateOne) SetMetadata(m map[string]string) *CouponAssociationUpdateOne {
	cauo.mutation.SetMetadata(m)
	return cauo
}

// ClearMetadata clears the value of the "metadata" field.
func (cauo *CouponAssociationUpdateOne) ClearMetadata() *CouponAssociationUpdateOne {
	cauo.mutation.ClearMetadata()
	return cauo
}

// SetSubscriptionLineItem sets the "subscription_line_item" edge to the SubscriptionLineItem entity.
func (cauo *CouponAssociationUpdateOne) SetSubscriptionLineItem(s *SubscriptionLineItem) *CouponAssociationUpdateOne {
	return cauo.SetSubscriptionLineItemID(s.ID)
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (cauo *CouponAssociationUpdateOne) AddCouponApplicationIDs(ids ...string) *CouponAssociationUpdateOne {
	cauo.mutation.AddCouponApplicationIDs(ids...)
	return cauo
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (cauo *CouponAssociationUpdateOne) AddCouponApplications(c ...*CouponApplication) *CouponAssociationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cauo.AddCouponApplicationIDs(ids...)
}

// Mutation returns the CouponAssociationMutation object of the builder.
func (cauo *CouponAssociationUpdateOne) Mutation() *CouponAssociationMutation {
	return cauo.mutation
}

// ClearSubscriptionLineItem clears the "subscription_line_item" edge to the SubscriptionLineItem entity.
func (cauo *CouponAssociationUpdateOne) ClearSubscriptionLineItem() *CouponAssociationUpdateOne {
	cauo.mutation.ClearSubscriptionLineItem()
	return cauo
}

// ClearCouponApplications clears all "coupon_applications" edges to the CouponApplication entity.
func (cauo *CouponAssociationUpdateOne) ClearCouponApplications() *CouponAssociationUpdateOne {
	cauo.mutation.ClearCouponApplications()
	return cauo
}

// RemoveCouponApplicationIDs removes the "coupon_applications" edge to CouponApplication entities by IDs.
func (cauo *CouponAssociationUpdateOne) RemoveCouponApplicationIDs(ids ...string) *CouponAssociationUpdateOne {
	cauo.mutation.RemoveCouponApplicationIDs(ids...)
	return cauo
}

// RemoveCouponApplications removes "coupon_applications" edges to CouponApplication entities.
func (cauo *CouponAssociationUpdateOne) RemoveCouponApplications(c ...*CouponApplication) *CouponAssociationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cauo.RemoveCouponApplicationIDs(ids...)
}

// Where appends a list predicates to the CouponAssociationUpdate builder.
func (cauo *CouponAssociationUpdateOne) Where(ps ...predicate.CouponAssociation) *CouponAssociationUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CouponAssociationUpdateOne) Select(field string, fields ...string) *CouponAssociationUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CouponAssociation entity.
func (cauo *CouponAssociationUpdateOne) Save(ctx context.Context) (*CouponAssociation, error) {
	cauo.defaults()
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CouponAssociationUpdateOne) SaveX(ctx context.Context) *CouponAssociation {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CouponAssociationUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CouponAssociationUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CouponAssociationUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdatedAt(); !ok {
		v := couponassociation.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauo *CouponAssociationUpdateOne) check() error {
	if cauo.mutation.CouponCleared() && len(cauo.mutation.CouponIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponAssociation.coupon"`)
	}
	if cauo.mutation.SubscriptionCleared() && len(cauo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponAssociation.subscription"`)
	}
	return nil
}

func (cauo *CouponAssociationUpdateOne) sqlSave(ctx context.Context) (_node *CouponAssociation, err error) {
	if err := cauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(couponassociation.Table, couponassociation.Columns, sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponAssociation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponassociation.FieldID)
		for _, f := range fields {
			if !couponassociation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != couponassociation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.Status(); ok {
		_spec.SetField(couponassociation.FieldStatus, field.TypeString, value)
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.SetField(couponassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if cauo.mutation.CreatedByCleared() {
		_spec.ClearField(couponassociation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cauo.mutation.UpdatedBy(); ok {
		_spec.SetField(couponassociation.FieldUpdatedBy, field.TypeString, value)
	}
	if cauo.mutation.UpdatedByCleared() {
		_spec.ClearField(couponassociation.FieldUpdatedBy, field.TypeString)
	}
	if cauo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(couponassociation.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cauo.mutation.Metadata(); ok {
		_spec.SetField(couponassociation.FieldMetadata, field.TypeJSON, value)
	}
	if cauo.mutation.MetadataCleared() {
		_spec.ClearField(couponassociation.FieldMetadata, field.TypeJSON)
	}
	if cauo.mutation.SubscriptionLineItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponassociation.SubscriptionLineItemTable,
			Columns: []string{couponassociation.SubscriptionLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.SubscriptionLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponassociation.SubscriptionLineItemTable,
			Columns: []string{couponassociation.SubscriptionLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cauo.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   couponassociation.CouponApplicationsTable,
			Columns: couponassociation.CouponApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.RemovedCouponApplicationsIDs(); len(nodes) > 0 && !cauo.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   couponassociation.CouponApplicationsTable,
			Columns: couponassociation.CouponApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   couponassociation.CouponApplicationsTable,
			Columns: couponassociation.CouponApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CouponAssociation{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
