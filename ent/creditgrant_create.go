// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditgrant"
	"github.com/flexprice/flexprice/ent/plan"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// CreditGrantCreate is the builder for creating a CreditGrant entity.
type CreditGrantCreate struct {
	config
	mutation *CreditGrantMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cgc *CreditGrantCreate) SetTenantID(s string) *CreditGrantCreate {
	cgc.mutation.SetTenantID(s)
	return cgc
}

// SetStatus sets the "status" field.
func (cgc *CreditGrantCreate) SetStatus(s string) *CreditGrantCreate {
	cgc.mutation.SetStatus(s)
	return cgc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableStatus(s *string) *CreditGrantCreate {
	if s != nil {
		cgc.SetStatus(*s)
	}
	return cgc
}

// SetCreatedAt sets the "created_at" field.
func (cgc *CreditGrantCreate) SetCreatedAt(t time.Time) *CreditGrantCreate {
	cgc.mutation.SetCreatedAt(t)
	return cgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableCreatedAt(t *time.Time) *CreditGrantCreate {
	if t != nil {
		cgc.SetCreatedAt(*t)
	}
	return cgc
}

// SetUpdatedAt sets the "updated_at" field.
func (cgc *CreditGrantCreate) SetUpdatedAt(t time.Time) *CreditGrantCreate {
	cgc.mutation.SetUpdatedAt(t)
	return cgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableUpdatedAt(t *time.Time) *CreditGrantCreate {
	if t != nil {
		cgc.SetUpdatedAt(*t)
	}
	return cgc
}

// SetCreatedBy sets the "created_by" field.
func (cgc *CreditGrantCreate) SetCreatedBy(s string) *CreditGrantCreate {
	cgc.mutation.SetCreatedBy(s)
	return cgc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableCreatedBy(s *string) *CreditGrantCreate {
	if s != nil {
		cgc.SetCreatedBy(*s)
	}
	return cgc
}

// SetUpdatedBy sets the "updated_by" field.
func (cgc *CreditGrantCreate) SetUpdatedBy(s string) *CreditGrantCreate {
	cgc.mutation.SetUpdatedBy(s)
	return cgc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableUpdatedBy(s *string) *CreditGrantCreate {
	if s != nil {
		cgc.SetUpdatedBy(*s)
	}
	return cgc
}

// SetEnvironmentID sets the "environment_id" field.
func (cgc *CreditGrantCreate) SetEnvironmentID(s string) *CreditGrantCreate {
	cgc.mutation.SetEnvironmentID(s)
	return cgc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableEnvironmentID(s *string) *CreditGrantCreate {
	if s != nil {
		cgc.SetEnvironmentID(*s)
	}
	return cgc
}

// SetName sets the "name" field.
func (cgc *CreditGrantCreate) SetName(s string) *CreditGrantCreate {
	cgc.mutation.SetName(s)
	return cgc
}

// SetScope sets the "scope" field.
func (cgc *CreditGrantCreate) SetScope(tgs types.CreditGrantScope) *CreditGrantCreate {
	cgc.mutation.SetScope(tgs)
	return cgc
}

// SetPlanID sets the "plan_id" field.
func (cgc *CreditGrantCreate) SetPlanID(s string) *CreditGrantCreate {
	cgc.mutation.SetPlanID(s)
	return cgc
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillablePlanID(s *string) *CreditGrantCreate {
	if s != nil {
		cgc.SetPlanID(*s)
	}
	return cgc
}

// SetSubscriptionID sets the "subscription_id" field.
func (cgc *CreditGrantCreate) SetSubscriptionID(s string) *CreditGrantCreate {
	cgc.mutation.SetSubscriptionID(s)
	return cgc
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableSubscriptionID(s *string) *CreditGrantCreate {
	if s != nil {
		cgc.SetSubscriptionID(*s)
	}
	return cgc
}

// SetCredits sets the "credits" field.
func (cgc *CreditGrantCreate) SetCredits(d decimal.Decimal) *CreditGrantCreate {
	cgc.mutation.SetCredits(d)
	return cgc
}

// SetNillableCredits sets the "credits" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableCredits(d *decimal.Decimal) *CreditGrantCreate {
	if d != nil {
		cgc.SetCredits(*d)
	}
	return cgc
}

// SetCurrency sets the "currency" field.
func (cgc *CreditGrantCreate) SetCurrency(s string) *CreditGrantCreate {
	cgc.mutation.SetCurrency(s)
	return cgc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableCurrency(s *string) *CreditGrantCreate {
	if s != nil {
		cgc.SetCurrency(*s)
	}
	return cgc
}

// SetCadence sets the "cadence" field.
func (cgc *CreditGrantCreate) SetCadence(tgc types.CreditGrantCadence) *CreditGrantCreate {
	cgc.mutation.SetCadence(tgc)
	return cgc
}

// SetPeriod sets the "period" field.
func (cgc *CreditGrantCreate) SetPeriod(tgp types.CreditGrantPeriod) *CreditGrantCreate {
	cgc.mutation.SetPeriod(tgp)
	return cgc
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillablePeriod(tgp *types.CreditGrantPeriod) *CreditGrantCreate {
	if tgp != nil {
		cgc.SetPeriod(*tgp)
	}
	return cgc
}

// SetPeriodCount sets the "period_count" field.
func (cgc *CreditGrantCreate) SetPeriodCount(i int) *CreditGrantCreate {
	cgc.mutation.SetPeriodCount(i)
	return cgc
}

// SetNillablePeriodCount sets the "period_count" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillablePeriodCount(i *int) *CreditGrantCreate {
	if i != nil {
		cgc.SetPeriodCount(*i)
	}
	return cgc
}

// SetExpirationType sets the "expiration_type" field.
func (cgc *CreditGrantCreate) SetExpirationType(tget types.CreditGrantExpiryType) *CreditGrantCreate {
	cgc.mutation.SetExpirationType(tget)
	return cgc
}

// SetNillableExpirationType sets the "expiration_type" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableExpirationType(tget *types.CreditGrantExpiryType) *CreditGrantCreate {
	if tget != nil {
		cgc.SetExpirationType(*tget)
	}
	return cgc
}

// SetExpirationDuration sets the "expiration_duration" field.
func (cgc *CreditGrantCreate) SetExpirationDuration(i int) *CreditGrantCreate {
	cgc.mutation.SetExpirationDuration(i)
	return cgc
}

// SetNillableExpirationDuration sets the "expiration_duration" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableExpirationDuration(i *int) *CreditGrantCreate {
	if i != nil {
		cgc.SetExpirationDuration(*i)
	}
	return cgc
}

// SetExpirationDurationUnit sets the "expiration_duration_unit" field.
func (cgc *CreditGrantCreate) SetExpirationDurationUnit(tgedu types.CreditGrantExpiryDurationUnit) *CreditGrantCreate {
	cgc.mutation.SetExpirationDurationUnit(tgedu)
	return cgc
}

// SetNillableExpirationDurationUnit sets the "expiration_duration_unit" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillableExpirationDurationUnit(tgedu *types.CreditGrantExpiryDurationUnit) *CreditGrantCreate {
	if tgedu != nil {
		cgc.SetExpirationDurationUnit(*tgedu)
	}
	return cgc
}

// SetPriority sets the "priority" field.
func (cgc *CreditGrantCreate) SetPriority(i int) *CreditGrantCreate {
	cgc.mutation.SetPriority(i)
	return cgc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cgc *CreditGrantCreate) SetNillablePriority(i *int) *CreditGrantCreate {
	if i != nil {
		cgc.SetPriority(*i)
	}
	return cgc
}

// SetMetadata sets the "metadata" field.
func (cgc *CreditGrantCreate) SetMetadata(m map[string]string) *CreditGrantCreate {
	cgc.mutation.SetMetadata(m)
	return cgc
}

// SetID sets the "id" field.
func (cgc *CreditGrantCreate) SetID(s string) *CreditGrantCreate {
	cgc.mutation.SetID(s)
	return cgc
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cgc *CreditGrantCreate) SetPlan(p *Plan) *CreditGrantCreate {
	return cgc.SetPlanID(p.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (cgc *CreditGrantCreate) SetSubscription(s *Subscription) *CreditGrantCreate {
	return cgc.SetSubscriptionID(s.ID)
}

// Mutation returns the CreditGrantMutation object of the builder.
func (cgc *CreditGrantCreate) Mutation() *CreditGrantMutation {
	return cgc.mutation
}

// Save creates the CreditGrant in the database.
func (cgc *CreditGrantCreate) Save(ctx context.Context) (*CreditGrant, error) {
	cgc.defaults()
	return withHooks(ctx, cgc.sqlSave, cgc.mutation, cgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cgc *CreditGrantCreate) SaveX(ctx context.Context) *CreditGrant {
	v, err := cgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgc *CreditGrantCreate) Exec(ctx context.Context) error {
	_, err := cgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgc *CreditGrantCreate) ExecX(ctx context.Context) {
	if err := cgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgc *CreditGrantCreate) defaults() {
	if _, ok := cgc.mutation.Status(); !ok {
		v := creditgrant.DefaultStatus
		cgc.mutation.SetStatus(v)
	}
	if _, ok := cgc.mutation.CreatedAt(); !ok {
		v := creditgrant.DefaultCreatedAt()
		cgc.mutation.SetCreatedAt(v)
	}
	if _, ok := cgc.mutation.UpdatedAt(); !ok {
		v := creditgrant.DefaultUpdatedAt()
		cgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cgc.mutation.EnvironmentID(); !ok {
		v := creditgrant.DefaultEnvironmentID
		cgc.mutation.SetEnvironmentID(v)
	}
	if _, ok := cgc.mutation.Credits(); !ok {
		v := creditgrant.DefaultCredits
		cgc.mutation.SetCredits(v)
	}
	if _, ok := cgc.mutation.ExpirationType(); !ok {
		v := creditgrant.DefaultExpirationType
		cgc.mutation.SetExpirationType(v)
	}
	if _, ok := cgc.mutation.Metadata(); !ok {
		v := creditgrant.DefaultMetadata
		cgc.mutation.SetMetadata(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgc *CreditGrantCreate) check() error {
	if _, ok := cgc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CreditGrant.tenant_id"`)}
	}
	if v, ok := cgc.mutation.TenantID(); ok {
		if err := creditgrant.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.tenant_id": %w`, err)}
		}
	}
	if _, ok := cgc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CreditGrant.status"`)}
	}
	if _, ok := cgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CreditGrant.created_at"`)}
	}
	if _, ok := cgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CreditGrant.updated_at"`)}
	}
	if _, ok := cgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CreditGrant.name"`)}
	}
	if v, ok := cgc.mutation.Name(); ok {
		if err := creditgrant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.name": %w`, err)}
		}
	}
	if _, ok := cgc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "CreditGrant.scope"`)}
	}
	if v, ok := cgc.mutation.Scope(); ok {
		if err := creditgrant.ScopeValidator(string(v)); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.scope": %w`, err)}
		}
	}
	if _, ok := cgc.mutation.Credits(); !ok {
		return &ValidationError{Name: "credits", err: errors.New(`ent: missing required field "CreditGrant.credits"`)}
	}
	if _, ok := cgc.mutation.Cadence(); !ok {
		return &ValidationError{Name: "cadence", err: errors.New(`ent: missing required field "CreditGrant.cadence"`)}
	}
	if v, ok := cgc.mutation.Cadence(); ok {
		if err := creditgrant.CadenceValidator(string(v)); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.cadence": %w`, err)}
		}
	}
	if v, ok := cgc.mutation.Period(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "period", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.period": %w`, err)}
		}
	}
	if _, ok := cgc.mutation.ExpirationType(); !ok {
		return &ValidationError{Name: "expiration_type", err: errors.New(`ent: missing required field "CreditGrant.expiration_type"`)}
	}
	if v, ok := cgc.mutation.ExpirationType(); ok {
		if err := creditgrant.ExpirationTypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "expiration_type", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.expiration_type": %w`, err)}
		}
	}
	if v, ok := cgc.mutation.ExpirationDurationUnit(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "expiration_duration_unit", err: fmt.Errorf(`ent: validator failed for field "CreditGrant.expiration_duration_unit": %w`, err)}
		}
	}
	return nil
}

func (cgc *CreditGrantCreate) sqlSave(ctx context.Context) (*CreditGrant, error) {
	if err := cgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CreditGrant.ID type: %T", _spec.ID.Value)
		}
	}
	cgc.mutation.id = &_node.ID
	cgc.mutation.done = true
	return _node, nil
}

func (cgc *CreditGrantCreate) createSpec() (*CreditGrant, *sqlgraph.CreateSpec) {
	var (
		_node = &CreditGrant{config: cgc.config}
		_spec = sqlgraph.NewCreateSpec(creditgrant.Table, sqlgraph.NewFieldSpec(creditgrant.FieldID, field.TypeString))
	)
	if id, ok := cgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cgc.mutation.TenantID(); ok {
		_spec.SetField(creditgrant.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cgc.mutation.Status(); ok {
		_spec.SetField(creditgrant.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cgc.mutation.CreatedAt(); ok {
		_spec.SetField(creditgrant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cgc.mutation.UpdatedAt(); ok {
		_spec.SetField(creditgrant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cgc.mutation.CreatedBy(); ok {
		_spec.SetField(creditgrant.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cgc.mutation.UpdatedBy(); ok {
		_spec.SetField(creditgrant.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cgc.mutation.EnvironmentID(); ok {
		_spec.SetField(creditgrant.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cgc.mutation.Name(); ok {
		_spec.SetField(creditgrant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cgc.mutation.Scope(); ok {
		_spec.SetField(creditgrant.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := cgc.mutation.Credits(); ok {
		_spec.SetField(creditgrant.FieldCredits, field.TypeOther, value)
		_node.Credits = value
	}
	if value, ok := cgc.mutation.Currency(); ok {
		_spec.SetField(creditgrant.FieldCurrency, field.TypeString, value)
		_node.Currency = &value
	}
	if value, ok := cgc.mutation.Cadence(); ok {
		_spec.SetField(creditgrant.FieldCadence, field.TypeString, value)
		_node.Cadence = value
	}
	if value, ok := cgc.mutation.Period(); ok {
		_spec.SetField(creditgrant.FieldPeriod, field.TypeString, value)
		_node.Period = &value
	}
	if value, ok := cgc.mutation.PeriodCount(); ok {
		_spec.SetField(creditgrant.FieldPeriodCount, field.TypeInt, value)
		_node.PeriodCount = &value
	}
	if value, ok := cgc.mutation.ExpirationType(); ok {
		_spec.SetField(creditgrant.FieldExpirationType, field.TypeString, value)
		_node.ExpirationType = value
	}
	if value, ok := cgc.mutation.ExpirationDuration(); ok {
		_spec.SetField(creditgrant.FieldExpirationDuration, field.TypeInt, value)
		_node.ExpirationDuration = &value
	}
	if value, ok := cgc.mutation.ExpirationDurationUnit(); ok {
		_spec.SetField(creditgrant.FieldExpirationDurationUnit, field.TypeString, value)
		_node.ExpirationDurationUnit = &value
	}
	if value, ok := cgc.mutation.Priority(); ok {
		_spec.SetField(creditgrant.FieldPriority, field.TypeInt, value)
		_node.Priority = &value
	}
	if value, ok := cgc.mutation.Metadata(); ok {
		_spec.SetField(creditgrant.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := cgc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.PlanTable,
			Columns: []string{creditgrant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cgc.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditgrant.SubscriptionTable,
			Columns: []string{creditgrant.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CreditGrantCreateBulk is the builder for creating many CreditGrant entities in bulk.
type CreditGrantCreateBulk struct {
	config
	err      error
	builders []*CreditGrantCreate
}

// Save creates the CreditGrant entities in the database.
func (cgcb *CreditGrantCreateBulk) Save(ctx context.Context) ([]*CreditGrant, error) {
	if cgcb.err != nil {
		return nil, cgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cgcb.builders))
	nodes := make([]*CreditGrant, len(cgcb.builders))
	mutators := make([]Mutator, len(cgcb.builders))
	for i := range cgcb.builders {
		func(i int, root context.Context) {
			builder := cgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreditGrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cgcb *CreditGrantCreateBulk) SaveX(ctx context.Context) []*CreditGrant {
	v, err := cgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgcb *CreditGrantCreateBulk) Exec(ctx context.Context) error {
	_, err := cgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgcb *CreditGrantCreateBulk) ExecX(ctx context.Context) {
	if err := cgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
