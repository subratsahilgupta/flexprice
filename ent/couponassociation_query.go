// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
)

// CouponAssociationQuery is the builder for querying CouponAssociation entities.
type CouponAssociationQuery struct {
	config
	ctx                      *QueryContext
	order                    []couponassociation.OrderOption
	inters                   []Interceptor
	predicates               []predicate.CouponAssociation
	withCoupon               *CouponQuery
	withSubscription         *SubscriptionQuery
	withSubscriptionLineItem *SubscriptionLineItemQuery
	withCouponApplications   *CouponApplicationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CouponAssociationQuery builder.
func (caq *CouponAssociationQuery) Where(ps ...predicate.CouponAssociation) *CouponAssociationQuery {
	caq.predicates = append(caq.predicates, ps...)
	return caq
}

// Limit the number of records to be returned by this query.
func (caq *CouponAssociationQuery) Limit(limit int) *CouponAssociationQuery {
	caq.ctx.Limit = &limit
	return caq
}

// Offset to start from.
func (caq *CouponAssociationQuery) Offset(offset int) *CouponAssociationQuery {
	caq.ctx.Offset = &offset
	return caq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (caq *CouponAssociationQuery) Unique(unique bool) *CouponAssociationQuery {
	caq.ctx.Unique = &unique
	return caq
}

// Order specifies how the records should be ordered.
func (caq *CouponAssociationQuery) Order(o ...couponassociation.OrderOption) *CouponAssociationQuery {
	caq.order = append(caq.order, o...)
	return caq
}

// QueryCoupon chains the current query on the "coupon" edge.
func (caq *CouponAssociationQuery) QueryCoupon() *CouponQuery {
	query := (&CouponClient{config: caq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(couponassociation.Table, couponassociation.FieldID, selector),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, couponassociation.CouponTable, couponassociation.CouponColumn),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscription chains the current query on the "subscription" edge.
func (caq *CouponAssociationQuery) QuerySubscription() *SubscriptionQuery {
	query := (&SubscriptionClient{config: caq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(couponassociation.Table, couponassociation.FieldID, selector),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, couponassociation.SubscriptionTable, couponassociation.SubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscriptionLineItem chains the current query on the "subscription_line_item" edge.
func (caq *CouponAssociationQuery) QuerySubscriptionLineItem() *SubscriptionLineItemQuery {
	query := (&SubscriptionLineItemClient{config: caq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(couponassociation.Table, couponassociation.FieldID, selector),
			sqlgraph.To(subscriptionlineitem.Table, subscriptionlineitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, couponassociation.SubscriptionLineItemTable, couponassociation.SubscriptionLineItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCouponApplications chains the current query on the "coupon_applications" edge.
func (caq *CouponAssociationQuery) QueryCouponApplications() *CouponApplicationQuery {
	query := (&CouponApplicationClient{config: caq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(couponassociation.Table, couponassociation.FieldID, selector),
			sqlgraph.To(couponapplication.Table, couponapplication.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, couponassociation.CouponApplicationsTable, couponassociation.CouponApplicationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CouponAssociation entity from the query.
// Returns a *NotFoundError when no CouponAssociation was found.
func (caq *CouponAssociationQuery) First(ctx context.Context) (*CouponAssociation, error) {
	nodes, err := caq.Limit(1).All(setContextOp(ctx, caq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{couponassociation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (caq *CouponAssociationQuery) FirstX(ctx context.Context) *CouponAssociation {
	node, err := caq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CouponAssociation ID from the query.
// Returns a *NotFoundError when no CouponAssociation ID was found.
func (caq *CouponAssociationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = caq.Limit(1).IDs(setContextOp(ctx, caq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{couponassociation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (caq *CouponAssociationQuery) FirstIDX(ctx context.Context) string {
	id, err := caq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CouponAssociation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CouponAssociation entity is found.
// Returns a *NotFoundError when no CouponAssociation entities are found.
func (caq *CouponAssociationQuery) Only(ctx context.Context) (*CouponAssociation, error) {
	nodes, err := caq.Limit(2).All(setContextOp(ctx, caq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{couponassociation.Label}
	default:
		return nil, &NotSingularError{couponassociation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (caq *CouponAssociationQuery) OnlyX(ctx context.Context) *CouponAssociation {
	node, err := caq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CouponAssociation ID in the query.
// Returns a *NotSingularError when more than one CouponAssociation ID is found.
// Returns a *NotFoundError when no entities are found.
func (caq *CouponAssociationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = caq.Limit(2).IDs(setContextOp(ctx, caq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{couponassociation.Label}
	default:
		err = &NotSingularError{couponassociation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (caq *CouponAssociationQuery) OnlyIDX(ctx context.Context) string {
	id, err := caq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CouponAssociations.
func (caq *CouponAssociationQuery) All(ctx context.Context) ([]*CouponAssociation, error) {
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryAll)
	if err := caq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CouponAssociation, *CouponAssociationQuery]()
	return withInterceptors[[]*CouponAssociation](ctx, caq, qr, caq.inters)
}

// AllX is like All, but panics if an error occurs.
func (caq *CouponAssociationQuery) AllX(ctx context.Context) []*CouponAssociation {
	nodes, err := caq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CouponAssociation IDs.
func (caq *CouponAssociationQuery) IDs(ctx context.Context) (ids []string, err error) {
	if caq.ctx.Unique == nil && caq.path != nil {
		caq.Unique(true)
	}
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryIDs)
	if err = caq.Select(couponassociation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (caq *CouponAssociationQuery) IDsX(ctx context.Context) []string {
	ids, err := caq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (caq *CouponAssociationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryCount)
	if err := caq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, caq, querierCount[*CouponAssociationQuery](), caq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (caq *CouponAssociationQuery) CountX(ctx context.Context) int {
	count, err := caq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (caq *CouponAssociationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryExist)
	switch _, err := caq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (caq *CouponAssociationQuery) ExistX(ctx context.Context) bool {
	exist, err := caq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CouponAssociationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (caq *CouponAssociationQuery) Clone() *CouponAssociationQuery {
	if caq == nil {
		return nil
	}
	return &CouponAssociationQuery{
		config:                   caq.config,
		ctx:                      caq.ctx.Clone(),
		order:                    append([]couponassociation.OrderOption{}, caq.order...),
		inters:                   append([]Interceptor{}, caq.inters...),
		predicates:               append([]predicate.CouponAssociation{}, caq.predicates...),
		withCoupon:               caq.withCoupon.Clone(),
		withSubscription:         caq.withSubscription.Clone(),
		withSubscriptionLineItem: caq.withSubscriptionLineItem.Clone(),
		withCouponApplications:   caq.withCouponApplications.Clone(),
		// clone intermediate query.
		sql:  caq.sql.Clone(),
		path: caq.path,
	}
}

// WithCoupon tells the query-builder to eager-load the nodes that are connected to
// the "coupon" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CouponAssociationQuery) WithCoupon(opts ...func(*CouponQuery)) *CouponAssociationQuery {
	query := (&CouponClient{config: caq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caq.withCoupon = query
	return caq
}

// WithSubscription tells the query-builder to eager-load the nodes that are connected to
// the "subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CouponAssociationQuery) WithSubscription(opts ...func(*SubscriptionQuery)) *CouponAssociationQuery {
	query := (&SubscriptionClient{config: caq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caq.withSubscription = query
	return caq
}

// WithSubscriptionLineItem tells the query-builder to eager-load the nodes that are connected to
// the "subscription_line_item" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CouponAssociationQuery) WithSubscriptionLineItem(opts ...func(*SubscriptionLineItemQuery)) *CouponAssociationQuery {
	query := (&SubscriptionLineItemClient{config: caq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caq.withSubscriptionLineItem = query
	return caq
}

// WithCouponApplications tells the query-builder to eager-load the nodes that are connected to
// the "coupon_applications" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CouponAssociationQuery) WithCouponApplications(opts ...func(*CouponApplicationQuery)) *CouponAssociationQuery {
	query := (&CouponApplicationClient{config: caq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caq.withCouponApplications = query
	return caq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CouponAssociation.Query().
//		GroupBy(couponassociation.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (caq *CouponAssociationQuery) GroupBy(field string, fields ...string) *CouponAssociationGroupBy {
	caq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CouponAssociationGroupBy{build: caq}
	grbuild.flds = &caq.ctx.Fields
	grbuild.label = couponassociation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//	}
//
//	client.CouponAssociation.Query().
//		Select(couponassociation.FieldTenantID).
//		Scan(ctx, &v)
func (caq *CouponAssociationQuery) Select(fields ...string) *CouponAssociationSelect {
	caq.ctx.Fields = append(caq.ctx.Fields, fields...)
	sbuild := &CouponAssociationSelect{CouponAssociationQuery: caq}
	sbuild.label = couponassociation.Label
	sbuild.flds, sbuild.scan = &caq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CouponAssociationSelect configured with the given aggregations.
func (caq *CouponAssociationQuery) Aggregate(fns ...AggregateFunc) *CouponAssociationSelect {
	return caq.Select().Aggregate(fns...)
}

func (caq *CouponAssociationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range caq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, caq); err != nil {
				return err
			}
		}
	}
	for _, f := range caq.ctx.Fields {
		if !couponassociation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if caq.path != nil {
		prev, err := caq.path(ctx)
		if err != nil {
			return err
		}
		caq.sql = prev
	}
	return nil
}

func (caq *CouponAssociationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CouponAssociation, error) {
	var (
		nodes       = []*CouponAssociation{}
		_spec       = caq.querySpec()
		loadedTypes = [4]bool{
			caq.withCoupon != nil,
			caq.withSubscription != nil,
			caq.withSubscriptionLineItem != nil,
			caq.withCouponApplications != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CouponAssociation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CouponAssociation{config: caq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, caq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := caq.withCoupon; query != nil {
		if err := caq.loadCoupon(ctx, query, nodes, nil,
			func(n *CouponAssociation, e *Coupon) { n.Edges.Coupon = e }); err != nil {
			return nil, err
		}
	}
	if query := caq.withSubscription; query != nil {
		if err := caq.loadSubscription(ctx, query, nodes, nil,
			func(n *CouponAssociation, e *Subscription) { n.Edges.Subscription = e }); err != nil {
			return nil, err
		}
	}
	if query := caq.withSubscriptionLineItem; query != nil {
		if err := caq.loadSubscriptionLineItem(ctx, query, nodes, nil,
			func(n *CouponAssociation, e *SubscriptionLineItem) { n.Edges.SubscriptionLineItem = e }); err != nil {
			return nil, err
		}
	}
	if query := caq.withCouponApplications; query != nil {
		if err := caq.loadCouponApplications(ctx, query, nodes,
			func(n *CouponAssociation) { n.Edges.CouponApplications = []*CouponApplication{} },
			func(n *CouponAssociation, e *CouponApplication) {
				n.Edges.CouponApplications = append(n.Edges.CouponApplications, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (caq *CouponAssociationQuery) loadCoupon(ctx context.Context, query *CouponQuery, nodes []*CouponAssociation, init func(*CouponAssociation), assign func(*CouponAssociation, *Coupon)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*CouponAssociation)
	for i := range nodes {
		fk := nodes[i].CouponID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(coupon.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "coupon_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (caq *CouponAssociationQuery) loadSubscription(ctx context.Context, query *SubscriptionQuery, nodes []*CouponAssociation, init func(*CouponAssociation), assign func(*CouponAssociation, *Subscription)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*CouponAssociation)
	for i := range nodes {
		fk := nodes[i].SubscriptionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscription.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (caq *CouponAssociationQuery) loadSubscriptionLineItem(ctx context.Context, query *SubscriptionLineItemQuery, nodes []*CouponAssociation, init func(*CouponAssociation), assign func(*CouponAssociation, *SubscriptionLineItem)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*CouponAssociation)
	for i := range nodes {
		if nodes[i].SubscriptionLineItemID == nil {
			continue
		}
		fk := *nodes[i].SubscriptionLineItemID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscriptionlineitem.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_line_item_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (caq *CouponAssociationQuery) loadCouponApplications(ctx context.Context, query *CouponApplicationQuery, nodes []*CouponAssociation, init func(*CouponAssociation), assign func(*CouponAssociation, *CouponApplication)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*CouponAssociation)
	nids := make(map[string]map[*CouponAssociation]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(couponassociation.CouponApplicationsTable)
		s.Join(joinT).On(s.C(couponapplication.FieldID), joinT.C(couponassociation.CouponApplicationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(couponassociation.CouponApplicationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(couponassociation.CouponApplicationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*CouponAssociation]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CouponApplication](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "coupon_applications" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (caq *CouponAssociationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := caq.querySpec()
	_spec.Node.Columns = caq.ctx.Fields
	if len(caq.ctx.Fields) > 0 {
		_spec.Unique = caq.ctx.Unique != nil && *caq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, caq.driver, _spec)
}

func (caq *CouponAssociationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(couponassociation.Table, couponassociation.Columns, sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString))
	_spec.From = caq.sql
	if unique := caq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if caq.path != nil {
		_spec.Unique = true
	}
	if fields := caq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponassociation.FieldID)
		for i := range fields {
			if fields[i] != couponassociation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if caq.withCoupon != nil {
			_spec.Node.AddColumnOnce(couponassociation.FieldCouponID)
		}
		if caq.withSubscription != nil {
			_spec.Node.AddColumnOnce(couponassociation.FieldSubscriptionID)
		}
		if caq.withSubscriptionLineItem != nil {
			_spec.Node.AddColumnOnce(couponassociation.FieldSubscriptionLineItemID)
		}
	}
	if ps := caq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := caq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := caq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := caq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (caq *CouponAssociationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(caq.driver.Dialect())
	t1 := builder.Table(couponassociation.Table)
	columns := caq.ctx.Fields
	if len(columns) == 0 {
		columns = couponassociation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if caq.sql != nil {
		selector = caq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if caq.ctx.Unique != nil && *caq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range caq.predicates {
		p(selector)
	}
	for _, p := range caq.order {
		p(selector)
	}
	if offset := caq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := caq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CouponAssociationGroupBy is the group-by builder for CouponAssociation entities.
type CouponAssociationGroupBy struct {
	selector
	build *CouponAssociationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cagb *CouponAssociationGroupBy) Aggregate(fns ...AggregateFunc) *CouponAssociationGroupBy {
	cagb.fns = append(cagb.fns, fns...)
	return cagb
}

// Scan applies the selector query and scans the result into the given value.
func (cagb *CouponAssociationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cagb.build.ctx, ent.OpQueryGroupBy)
	if err := cagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CouponAssociationQuery, *CouponAssociationGroupBy](ctx, cagb.build, cagb, cagb.build.inters, v)
}

func (cagb *CouponAssociationGroupBy) sqlScan(ctx context.Context, root *CouponAssociationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cagb.fns))
	for _, fn := range cagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cagb.flds)+len(cagb.fns))
		for _, f := range *cagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CouponAssociationSelect is the builder for selecting fields of CouponAssociation entities.
type CouponAssociationSelect struct {
	*CouponAssociationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cas *CouponAssociationSelect) Aggregate(fns ...AggregateFunc) *CouponAssociationSelect {
	cas.fns = append(cas.fns, fns...)
	return cas
}

// Scan applies the selector query and scans the result into the given value.
func (cas *CouponAssociationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cas.ctx, ent.OpQuerySelect)
	if err := cas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CouponAssociationQuery, *CouponAssociationSelect](ctx, cas.CouponAssociationQuery, cas, cas.inters, v)
}

func (cas *CouponAssociationSelect) sqlScan(ctx context.Context, root *CouponAssociationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cas.fns))
	for _, fn := range cas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
