// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
)

// CouponAssociation is the model entity for the CouponAssociation schema.
type CouponAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	CouponID string `json:"coupon_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// SubscriptionLineItemID holds the value of the "subscription_line_item_id" field.
	SubscriptionLineItemID *string `json:"subscription_line_item_id,omitempty"`
	// Additional metadata for coupon association
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CouponAssociationQuery when eager-loading is set.
	Edges        CouponAssociationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CouponAssociationEdges holds the relations/edges for other nodes in the graph.
type CouponAssociationEdges struct {
	// Coupon holds the value of the coupon edge.
	Coupon *Coupon `json:"coupon,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// SubscriptionLineItem holds the value of the subscription_line_item edge.
	SubscriptionLineItem *SubscriptionLineItem `json:"subscription_line_item,omitempty"`
	// CouponAssociation can have multiple coupon applications
	CouponApplications []*CouponApplication `json:"coupon_applications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CouponOrErr returns the Coupon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponAssociationEdges) CouponOrErr() (*Coupon, error) {
	if e.Coupon != nil {
		return e.Coupon, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: coupon.Label}
	}
	return nil, &NotLoadedError{edge: "coupon"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponAssociationEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// SubscriptionLineItemOrErr returns the SubscriptionLineItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponAssociationEdges) SubscriptionLineItemOrErr() (*SubscriptionLineItem, error) {
	if e.SubscriptionLineItem != nil {
		return e.SubscriptionLineItem, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: subscriptionlineitem.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_line_item"}
}

// CouponApplicationsOrErr returns the CouponApplications value or an error if the edge
// was not loaded in eager-loading.
func (e CouponAssociationEdges) CouponApplicationsOrErr() ([]*CouponApplication, error) {
	if e.loadedTypes[3] {
		return e.CouponApplications, nil
	}
	return nil, &NotLoadedError{edge: "coupon_applications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponAssociation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponassociation.FieldMetadata:
			values[i] = new([]byte)
		case couponassociation.FieldID, couponassociation.FieldTenantID, couponassociation.FieldStatus, couponassociation.FieldCreatedBy, couponassociation.FieldUpdatedBy, couponassociation.FieldEnvironmentID, couponassociation.FieldCouponID, couponassociation.FieldSubscriptionID, couponassociation.FieldSubscriptionLineItemID:
			values[i] = new(sql.NullString)
		case couponassociation.FieldCreatedAt, couponassociation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponAssociation fields.
func (ca *CouponAssociation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponassociation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ca.ID = value.String
			}
		case couponassociation.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ca.TenantID = value.String
			}
		case couponassociation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ca.Status = value.String
			}
		case couponassociation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case couponassociation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		case couponassociation.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ca.CreatedBy = value.String
			}
		case couponassociation.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ca.UpdatedBy = value.String
			}
		case couponassociation.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				ca.EnvironmentID = value.String
			}
		case couponassociation.FieldCouponID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value.Valid {
				ca.CouponID = value.String
			}
		case couponassociation.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				ca.SubscriptionID = value.String
			}
		case couponassociation.FieldSubscriptionLineItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_line_item_id", values[i])
			} else if value.Valid {
				ca.SubscriptionLineItemID = new(string)
				*ca.SubscriptionLineItemID = value.String
			}
		case couponassociation.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CouponAssociation.
// This includes values selected through modifiers, order, etc.
func (ca *CouponAssociation) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// QueryCoupon queries the "coupon" edge of the CouponAssociation entity.
func (ca *CouponAssociation) QueryCoupon() *CouponQuery {
	return NewCouponAssociationClient(ca.config).QueryCoupon(ca)
}

// QuerySubscription queries the "subscription" edge of the CouponAssociation entity.
func (ca *CouponAssociation) QuerySubscription() *SubscriptionQuery {
	return NewCouponAssociationClient(ca.config).QuerySubscription(ca)
}

// QuerySubscriptionLineItem queries the "subscription_line_item" edge of the CouponAssociation entity.
func (ca *CouponAssociation) QuerySubscriptionLineItem() *SubscriptionLineItemQuery {
	return NewCouponAssociationClient(ca.config).QuerySubscriptionLineItem(ca)
}

// QueryCouponApplications queries the "coupon_applications" edge of the CouponAssociation entity.
func (ca *CouponAssociation) QueryCouponApplications() *CouponApplicationQuery {
	return NewCouponAssociationClient(ca.config).QueryCouponApplications(ca)
}

// Update returns a builder for updating this CouponAssociation.
// Note that you need to call CouponAssociation.Unwrap() before calling this method if this CouponAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CouponAssociation) Update() *CouponAssociationUpdateOne {
	return NewCouponAssociationClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CouponAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CouponAssociation) Unwrap() *CouponAssociation {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponAssociation is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CouponAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("CouponAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(ca.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ca.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ca.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ca.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(ca.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(ca.CouponID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(ca.SubscriptionID)
	builder.WriteString(", ")
	if v := ca.SubscriptionLineItemID; v != nil {
		builder.WriteString("subscription_line_item_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ca.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// CouponAssociations is a parsable slice of CouponAssociation.
type CouponAssociations []*CouponAssociation
