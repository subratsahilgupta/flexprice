// Code generated by ent, DO NOT EDIT.

package price

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the price type in the database.
	Label = "price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldDisplayAmount holds the string denoting the display_amount field in the database.
	FieldDisplayAmount = "display_amount"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldBillingPeriod holds the string denoting the billing_period field in the database.
	FieldBillingPeriod = "billing_period"
	// FieldBillingPeriodCount holds the string denoting the billing_period_count field in the database.
	FieldBillingPeriodCount = "billing_period_count"
	// FieldBillingModel holds the string denoting the billing_model field in the database.
	FieldBillingModel = "billing_model"
	// FieldBillingCadence holds the string denoting the billing_cadence field in the database.
	FieldBillingCadence = "billing_cadence"
	// FieldInvoiceCadence holds the string denoting the invoice_cadence field in the database.
	FieldInvoiceCadence = "invoice_cadence"
	// FieldTrialPeriod holds the string denoting the trial_period field in the database.
	FieldTrialPeriod = "trial_period"
	// FieldMeterID holds the string denoting the meter_id field in the database.
	FieldMeterID = "meter_id"
	// FieldFilterValues holds the string denoting the filter_values field in the database.
	FieldFilterValues = "filter_values"
	// FieldTierMode holds the string denoting the tier_mode field in the database.
	FieldTierMode = "tier_mode"
	// FieldTiers holds the string denoting the tiers field in the database.
	FieldTiers = "tiers"
	// FieldTransformQuantity holds the string denoting the transform_quantity field in the database.
	FieldTransformQuantity = "transform_quantity"
	// FieldLookupKey holds the string denoting the lookup_key field in the database.
	FieldLookupKey = "lookup_key"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeCostsheet holds the string denoting the costsheet edge name in mutations.
	EdgeCostsheet = "costsheet"
	// Table holds the table name of the price in the database.
	Table = "prices"
	// CostsheetTable is the table that holds the costsheet relation/edge.
	CostsheetTable = "costsheet"
	// CostsheetInverseTable is the table name for the Costsheet entity.
	// It exists in this package in order to avoid circular dependency with the "costsheet" package.
	CostsheetInverseTable = "costsheet"
	// CostsheetColumn is the table column denoting the costsheet relation/edge.
	CostsheetColumn = "price_id"
)

// Columns holds all SQL columns for price fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldAmount,
	FieldCurrency,
	FieldDisplayAmount,
	FieldPlanID,
	FieldType,
	FieldBillingPeriod,
	FieldBillingPeriodCount,
	FieldBillingModel,
	FieldBillingCadence,
	FieldInvoiceCadence,
	FieldTrialPeriod,
	FieldMeterID,
	FieldFilterValues,
	FieldTierMode,
	FieldTiers,
	FieldTransformQuantity,
	FieldLookupKey,
	FieldDescription,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DisplayAmountValidator is a validator for the "display_amount" field. It is called by the builders before save.
	DisplayAmountValidator func(string) error
	// PlanIDValidator is a validator for the "plan_id" field. It is called by the builders before save.
	PlanIDValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// BillingPeriodValidator is a validator for the "billing_period" field. It is called by the builders before save.
	BillingPeriodValidator func(string) error
	// BillingPeriodCountValidator is a validator for the "billing_period_count" field. It is called by the builders before save.
	BillingPeriodCountValidator func(int) error
	// BillingModelValidator is a validator for the "billing_model" field. It is called by the builders before save.
	BillingModelValidator func(string) error
	// BillingCadenceValidator is a validator for the "billing_cadence" field. It is called by the builders before save.
	BillingCadenceValidator func(string) error
	// DefaultTrialPeriod holds the default value on creation for the "trial_period" field.
	DefaultTrialPeriod int
)

// OrderOption defines the ordering options for the Price queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByDisplayAmount orders the results by the display_amount field.
func ByDisplayAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayAmount, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByBillingPeriod orders the results by the billing_period field.
func ByBillingPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingPeriod, opts...).ToFunc()
}

// ByBillingPeriodCount orders the results by the billing_period_count field.
func ByBillingPeriodCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingPeriodCount, opts...).ToFunc()
}

// ByBillingModel orders the results by the billing_model field.
func ByBillingModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingModel, opts...).ToFunc()
}

// ByBillingCadence orders the results by the billing_cadence field.
func ByBillingCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingCadence, opts...).ToFunc()
}

// ByInvoiceCadence orders the results by the invoice_cadence field.
func ByInvoiceCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceCadence, opts...).ToFunc()
}

// ByTrialPeriod orders the results by the trial_period field.
func ByTrialPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialPeriod, opts...).ToFunc()
}

// ByMeterID orders the results by the meter_id field.
func ByMeterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeterID, opts...).ToFunc()
}

// ByTierMode orders the results by the tier_mode field.
func ByTierMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTierMode, opts...).ToFunc()
}

// ByLookupKey orders the results by the lookup_key field.
func ByLookupKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLookupKey, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCostsheetCount orders the results by costsheet count.
func ByCostsheetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCostsheetStep(), opts...)
	}
}

// ByCostsheet orders the results by costsheet terms.
func ByCostsheet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostsheetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCostsheetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostsheetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CostsheetTable, CostsheetColumn),
	)
}
