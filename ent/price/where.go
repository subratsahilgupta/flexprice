// Code generated by ent, DO NOT EDIT.

package price

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldEnvironmentID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCurrency, v))
}

// DisplayAmount applies equality check predicate on the "display_amount" field. It's identical to DisplayAmountEQ.
func DisplayAmount(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDisplayAmount, v))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPlanID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldType, v))
}

// BillingPeriod applies equality check predicate on the "billing_period" field. It's identical to BillingPeriodEQ.
func BillingPeriod(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingPeriod, v))
}

// BillingPeriodCount applies equality check predicate on the "billing_period_count" field. It's identical to BillingPeriodCountEQ.
func BillingPeriodCount(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingPeriodCount, v))
}

// BillingModel applies equality check predicate on the "billing_model" field. It's identical to BillingModelEQ.
func BillingModel(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingModel, v))
}

// BillingCadence applies equality check predicate on the "billing_cadence" field. It's identical to BillingCadenceEQ.
func BillingCadence(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingCadence, v))
}

// InvoiceCadence applies equality check predicate on the "invoice_cadence" field. It's identical to InvoiceCadenceEQ.
func InvoiceCadence(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldInvoiceCadence, v))
}

// TrialPeriod applies equality check predicate on the "trial_period" field. It's identical to TrialPeriodEQ.
func TrialPeriod(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldTrialPeriod, v))
}

// MeterID applies equality check predicate on the "meter_id" field. It's identical to MeterIDEQ.
func MeterID(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldMeterID, v))
}

// TierMode applies equality check predicate on the "tier_mode" field. It's identical to TierModeEQ.
func TierMode(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldTierMode, v))
}

// LookupKey applies equality check predicate on the "lookup_key" field. It's identical to LookupKeyEQ.
func LookupKey(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldLookupKey, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDescription, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldCurrency, v))
}

// DisplayAmountEQ applies the EQ predicate on the "display_amount" field.
func DisplayAmountEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDisplayAmount, v))
}

// DisplayAmountNEQ applies the NEQ predicate on the "display_amount" field.
func DisplayAmountNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldDisplayAmount, v))
}

// DisplayAmountIn applies the In predicate on the "display_amount" field.
func DisplayAmountIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldDisplayAmount, vs...))
}

// DisplayAmountNotIn applies the NotIn predicate on the "display_amount" field.
func DisplayAmountNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldDisplayAmount, vs...))
}

// DisplayAmountGT applies the GT predicate on the "display_amount" field.
func DisplayAmountGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldDisplayAmount, v))
}

// DisplayAmountGTE applies the GTE predicate on the "display_amount" field.
func DisplayAmountGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldDisplayAmount, v))
}

// DisplayAmountLT applies the LT predicate on the "display_amount" field.
func DisplayAmountLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldDisplayAmount, v))
}

// DisplayAmountLTE applies the LTE predicate on the "display_amount" field.
func DisplayAmountLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldDisplayAmount, v))
}

// DisplayAmountContains applies the Contains predicate on the "display_amount" field.
func DisplayAmountContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldDisplayAmount, v))
}

// DisplayAmountHasPrefix applies the HasPrefix predicate on the "display_amount" field.
func DisplayAmountHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldDisplayAmount, v))
}

// DisplayAmountHasSuffix applies the HasSuffix predicate on the "display_amount" field.
func DisplayAmountHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldDisplayAmount, v))
}

// DisplayAmountEqualFold applies the EqualFold predicate on the "display_amount" field.
func DisplayAmountEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldDisplayAmount, v))
}

// DisplayAmountContainsFold applies the ContainsFold predicate on the "display_amount" field.
func DisplayAmountContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldDisplayAmount, v))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDContains applies the Contains predicate on the "plan_id" field.
func PlanIDContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldPlanID, v))
}

// PlanIDHasPrefix applies the HasPrefix predicate on the "plan_id" field.
func PlanIDHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldPlanID, v))
}

// PlanIDHasSuffix applies the HasSuffix predicate on the "plan_id" field.
func PlanIDHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldPlanID, v))
}

// PlanIDEqualFold applies the EqualFold predicate on the "plan_id" field.
func PlanIDEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldPlanID, v))
}

// PlanIDContainsFold applies the ContainsFold predicate on the "plan_id" field.
func PlanIDContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldPlanID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldType, v))
}

// BillingPeriodEQ applies the EQ predicate on the "billing_period" field.
func BillingPeriodEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingPeriod, v))
}

// BillingPeriodNEQ applies the NEQ predicate on the "billing_period" field.
func BillingPeriodNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldBillingPeriod, v))
}

// BillingPeriodIn applies the In predicate on the "billing_period" field.
func BillingPeriodIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldBillingPeriod, vs...))
}

// BillingPeriodNotIn applies the NotIn predicate on the "billing_period" field.
func BillingPeriodNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldBillingPeriod, vs...))
}

// BillingPeriodGT applies the GT predicate on the "billing_period" field.
func BillingPeriodGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldBillingPeriod, v))
}

// BillingPeriodGTE applies the GTE predicate on the "billing_period" field.
func BillingPeriodGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldBillingPeriod, v))
}

// BillingPeriodLT applies the LT predicate on the "billing_period" field.
func BillingPeriodLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldBillingPeriod, v))
}

// BillingPeriodLTE applies the LTE predicate on the "billing_period" field.
func BillingPeriodLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldBillingPeriod, v))
}

// BillingPeriodContains applies the Contains predicate on the "billing_period" field.
func BillingPeriodContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldBillingPeriod, v))
}

// BillingPeriodHasPrefix applies the HasPrefix predicate on the "billing_period" field.
func BillingPeriodHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldBillingPeriod, v))
}

// BillingPeriodHasSuffix applies the HasSuffix predicate on the "billing_period" field.
func BillingPeriodHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldBillingPeriod, v))
}

// BillingPeriodEqualFold applies the EqualFold predicate on the "billing_period" field.
func BillingPeriodEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldBillingPeriod, v))
}

// BillingPeriodContainsFold applies the ContainsFold predicate on the "billing_period" field.
func BillingPeriodContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldBillingPeriod, v))
}

// BillingPeriodCountEQ applies the EQ predicate on the "billing_period_count" field.
func BillingPeriodCountEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingPeriodCount, v))
}

// BillingPeriodCountNEQ applies the NEQ predicate on the "billing_period_count" field.
func BillingPeriodCountNEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldBillingPeriodCount, v))
}

// BillingPeriodCountIn applies the In predicate on the "billing_period_count" field.
func BillingPeriodCountIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldBillingPeriodCount, vs...))
}

// BillingPeriodCountNotIn applies the NotIn predicate on the "billing_period_count" field.
func BillingPeriodCountNotIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldBillingPeriodCount, vs...))
}

// BillingPeriodCountGT applies the GT predicate on the "billing_period_count" field.
func BillingPeriodCountGT(v int) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldBillingPeriodCount, v))
}

// BillingPeriodCountGTE applies the GTE predicate on the "billing_period_count" field.
func BillingPeriodCountGTE(v int) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldBillingPeriodCount, v))
}

// BillingPeriodCountLT applies the LT predicate on the "billing_period_count" field.
func BillingPeriodCountLT(v int) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldBillingPeriodCount, v))
}

// BillingPeriodCountLTE applies the LTE predicate on the "billing_period_count" field.
func BillingPeriodCountLTE(v int) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldBillingPeriodCount, v))
}

// BillingModelEQ applies the EQ predicate on the "billing_model" field.
func BillingModelEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingModel, v))
}

// BillingModelNEQ applies the NEQ predicate on the "billing_model" field.
func BillingModelNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldBillingModel, v))
}

// BillingModelIn applies the In predicate on the "billing_model" field.
func BillingModelIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldBillingModel, vs...))
}

// BillingModelNotIn applies the NotIn predicate on the "billing_model" field.
func BillingModelNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldBillingModel, vs...))
}

// BillingModelGT applies the GT predicate on the "billing_model" field.
func BillingModelGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldBillingModel, v))
}

// BillingModelGTE applies the GTE predicate on the "billing_model" field.
func BillingModelGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldBillingModel, v))
}

// BillingModelLT applies the LT predicate on the "billing_model" field.
func BillingModelLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldBillingModel, v))
}

// BillingModelLTE applies the LTE predicate on the "billing_model" field.
func BillingModelLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldBillingModel, v))
}

// BillingModelContains applies the Contains predicate on the "billing_model" field.
func BillingModelContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldBillingModel, v))
}

// BillingModelHasPrefix applies the HasPrefix predicate on the "billing_model" field.
func BillingModelHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldBillingModel, v))
}

// BillingModelHasSuffix applies the HasSuffix predicate on the "billing_model" field.
func BillingModelHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldBillingModel, v))
}

// BillingModelEqualFold applies the EqualFold predicate on the "billing_model" field.
func BillingModelEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldBillingModel, v))
}

// BillingModelContainsFold applies the ContainsFold predicate on the "billing_model" field.
func BillingModelContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldBillingModel, v))
}

// BillingCadenceEQ applies the EQ predicate on the "billing_cadence" field.
func BillingCadenceEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldBillingCadence, v))
}

// BillingCadenceNEQ applies the NEQ predicate on the "billing_cadence" field.
func BillingCadenceNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldBillingCadence, v))
}

// BillingCadenceIn applies the In predicate on the "billing_cadence" field.
func BillingCadenceIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldBillingCadence, vs...))
}

// BillingCadenceNotIn applies the NotIn predicate on the "billing_cadence" field.
func BillingCadenceNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldBillingCadence, vs...))
}

// BillingCadenceGT applies the GT predicate on the "billing_cadence" field.
func BillingCadenceGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldBillingCadence, v))
}

// BillingCadenceGTE applies the GTE predicate on the "billing_cadence" field.
func BillingCadenceGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldBillingCadence, v))
}

// BillingCadenceLT applies the LT predicate on the "billing_cadence" field.
func BillingCadenceLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldBillingCadence, v))
}

// BillingCadenceLTE applies the LTE predicate on the "billing_cadence" field.
func BillingCadenceLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldBillingCadence, v))
}

// BillingCadenceContains applies the Contains predicate on the "billing_cadence" field.
func BillingCadenceContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldBillingCadence, v))
}

// BillingCadenceHasPrefix applies the HasPrefix predicate on the "billing_cadence" field.
func BillingCadenceHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldBillingCadence, v))
}

// BillingCadenceHasSuffix applies the HasSuffix predicate on the "billing_cadence" field.
func BillingCadenceHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldBillingCadence, v))
}

// BillingCadenceEqualFold applies the EqualFold predicate on the "billing_cadence" field.
func BillingCadenceEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldBillingCadence, v))
}

// BillingCadenceContainsFold applies the ContainsFold predicate on the "billing_cadence" field.
func BillingCadenceContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldBillingCadence, v))
}

// InvoiceCadenceEQ applies the EQ predicate on the "invoice_cadence" field.
func InvoiceCadenceEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldInvoiceCadence, v))
}

// InvoiceCadenceNEQ applies the NEQ predicate on the "invoice_cadence" field.
func InvoiceCadenceNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldInvoiceCadence, v))
}

// InvoiceCadenceIn applies the In predicate on the "invoice_cadence" field.
func InvoiceCadenceIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldInvoiceCadence, vs...))
}

// InvoiceCadenceNotIn applies the NotIn predicate on the "invoice_cadence" field.
func InvoiceCadenceNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldInvoiceCadence, vs...))
}

// InvoiceCadenceGT applies the GT predicate on the "invoice_cadence" field.
func InvoiceCadenceGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldInvoiceCadence, v))
}

// InvoiceCadenceGTE applies the GTE predicate on the "invoice_cadence" field.
func InvoiceCadenceGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldInvoiceCadence, v))
}

// InvoiceCadenceLT applies the LT predicate on the "invoice_cadence" field.
func InvoiceCadenceLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldInvoiceCadence, v))
}

// InvoiceCadenceLTE applies the LTE predicate on the "invoice_cadence" field.
func InvoiceCadenceLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldInvoiceCadence, v))
}

// InvoiceCadenceContains applies the Contains predicate on the "invoice_cadence" field.
func InvoiceCadenceContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldInvoiceCadence, v))
}

// InvoiceCadenceHasPrefix applies the HasPrefix predicate on the "invoice_cadence" field.
func InvoiceCadenceHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldInvoiceCadence, v))
}

// InvoiceCadenceHasSuffix applies the HasSuffix predicate on the "invoice_cadence" field.
func InvoiceCadenceHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldInvoiceCadence, v))
}

// InvoiceCadenceIsNil applies the IsNil predicate on the "invoice_cadence" field.
func InvoiceCadenceIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldInvoiceCadence))
}

// InvoiceCadenceNotNil applies the NotNil predicate on the "invoice_cadence" field.
func InvoiceCadenceNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldInvoiceCadence))
}

// InvoiceCadenceEqualFold applies the EqualFold predicate on the "invoice_cadence" field.
func InvoiceCadenceEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldInvoiceCadence, v))
}

// InvoiceCadenceContainsFold applies the ContainsFold predicate on the "invoice_cadence" field.
func InvoiceCadenceContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldInvoiceCadence, v))
}

// TrialPeriodEQ applies the EQ predicate on the "trial_period" field.
func TrialPeriodEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldTrialPeriod, v))
}

// TrialPeriodNEQ applies the NEQ predicate on the "trial_period" field.
func TrialPeriodNEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldTrialPeriod, v))
}

// TrialPeriodIn applies the In predicate on the "trial_period" field.
func TrialPeriodIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldTrialPeriod, vs...))
}

// TrialPeriodNotIn applies the NotIn predicate on the "trial_period" field.
func TrialPeriodNotIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldTrialPeriod, vs...))
}

// TrialPeriodGT applies the GT predicate on the "trial_period" field.
func TrialPeriodGT(v int) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldTrialPeriod, v))
}

// TrialPeriodGTE applies the GTE predicate on the "trial_period" field.
func TrialPeriodGTE(v int) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldTrialPeriod, v))
}

// TrialPeriodLT applies the LT predicate on the "trial_period" field.
func TrialPeriodLT(v int) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldTrialPeriod, v))
}

// TrialPeriodLTE applies the LTE predicate on the "trial_period" field.
func TrialPeriodLTE(v int) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldTrialPeriod, v))
}

// MeterIDEQ applies the EQ predicate on the "meter_id" field.
func MeterIDEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldMeterID, v))
}

// MeterIDNEQ applies the NEQ predicate on the "meter_id" field.
func MeterIDNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldMeterID, v))
}

// MeterIDIn applies the In predicate on the "meter_id" field.
func MeterIDIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldMeterID, vs...))
}

// MeterIDNotIn applies the NotIn predicate on the "meter_id" field.
func MeterIDNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldMeterID, vs...))
}

// MeterIDGT applies the GT predicate on the "meter_id" field.
func MeterIDGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldMeterID, v))
}

// MeterIDGTE applies the GTE predicate on the "meter_id" field.
func MeterIDGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldMeterID, v))
}

// MeterIDLT applies the LT predicate on the "meter_id" field.
func MeterIDLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldMeterID, v))
}

// MeterIDLTE applies the LTE predicate on the "meter_id" field.
func MeterIDLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldMeterID, v))
}

// MeterIDContains applies the Contains predicate on the "meter_id" field.
func MeterIDContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldMeterID, v))
}

// MeterIDHasPrefix applies the HasPrefix predicate on the "meter_id" field.
func MeterIDHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldMeterID, v))
}

// MeterIDHasSuffix applies the HasSuffix predicate on the "meter_id" field.
func MeterIDHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldMeterID, v))
}

// MeterIDIsNil applies the IsNil predicate on the "meter_id" field.
func MeterIDIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldMeterID))
}

// MeterIDNotNil applies the NotNil predicate on the "meter_id" field.
func MeterIDNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldMeterID))
}

// MeterIDEqualFold applies the EqualFold predicate on the "meter_id" field.
func MeterIDEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldMeterID, v))
}

// MeterIDContainsFold applies the ContainsFold predicate on the "meter_id" field.
func MeterIDContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldMeterID, v))
}

// FilterValuesIsNil applies the IsNil predicate on the "filter_values" field.
func FilterValuesIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldFilterValues))
}

// FilterValuesNotNil applies the NotNil predicate on the "filter_values" field.
func FilterValuesNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldFilterValues))
}

// TierModeEQ applies the EQ predicate on the "tier_mode" field.
func TierModeEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldTierMode, v))
}

// TierModeNEQ applies the NEQ predicate on the "tier_mode" field.
func TierModeNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldTierMode, v))
}

// TierModeIn applies the In predicate on the "tier_mode" field.
func TierModeIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldTierMode, vs...))
}

// TierModeNotIn applies the NotIn predicate on the "tier_mode" field.
func TierModeNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldTierMode, vs...))
}

// TierModeGT applies the GT predicate on the "tier_mode" field.
func TierModeGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldTierMode, v))
}

// TierModeGTE applies the GTE predicate on the "tier_mode" field.
func TierModeGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldTierMode, v))
}

// TierModeLT applies the LT predicate on the "tier_mode" field.
func TierModeLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldTierMode, v))
}

// TierModeLTE applies the LTE predicate on the "tier_mode" field.
func TierModeLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldTierMode, v))
}

// TierModeContains applies the Contains predicate on the "tier_mode" field.
func TierModeContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldTierMode, v))
}

// TierModeHasPrefix applies the HasPrefix predicate on the "tier_mode" field.
func TierModeHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldTierMode, v))
}

// TierModeHasSuffix applies the HasSuffix predicate on the "tier_mode" field.
func TierModeHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldTierMode, v))
}

// TierModeIsNil applies the IsNil predicate on the "tier_mode" field.
func TierModeIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldTierMode))
}

// TierModeNotNil applies the NotNil predicate on the "tier_mode" field.
func TierModeNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldTierMode))
}

// TierModeEqualFold applies the EqualFold predicate on the "tier_mode" field.
func TierModeEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldTierMode, v))
}

// TierModeContainsFold applies the ContainsFold predicate on the "tier_mode" field.
func TierModeContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldTierMode, v))
}

// TiersIsNil applies the IsNil predicate on the "tiers" field.
func TiersIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldTiers))
}

// TiersNotNil applies the NotNil predicate on the "tiers" field.
func TiersNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldTiers))
}

// TransformQuantityIsNil applies the IsNil predicate on the "transform_quantity" field.
func TransformQuantityIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldTransformQuantity))
}

// TransformQuantityNotNil applies the NotNil predicate on the "transform_quantity" field.
func TransformQuantityNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldTransformQuantity))
}

// LookupKeyEQ applies the EQ predicate on the "lookup_key" field.
func LookupKeyEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldLookupKey, v))
}

// LookupKeyNEQ applies the NEQ predicate on the "lookup_key" field.
func LookupKeyNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldLookupKey, v))
}

// LookupKeyIn applies the In predicate on the "lookup_key" field.
func LookupKeyIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldLookupKey, vs...))
}

// LookupKeyNotIn applies the NotIn predicate on the "lookup_key" field.
func LookupKeyNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldLookupKey, vs...))
}

// LookupKeyGT applies the GT predicate on the "lookup_key" field.
func LookupKeyGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldLookupKey, v))
}

// LookupKeyGTE applies the GTE predicate on the "lookup_key" field.
func LookupKeyGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldLookupKey, v))
}

// LookupKeyLT applies the LT predicate on the "lookup_key" field.
func LookupKeyLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldLookupKey, v))
}

// LookupKeyLTE applies the LTE predicate on the "lookup_key" field.
func LookupKeyLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldLookupKey, v))
}

// LookupKeyContains applies the Contains predicate on the "lookup_key" field.
func LookupKeyContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldLookupKey, v))
}

// LookupKeyHasPrefix applies the HasPrefix predicate on the "lookup_key" field.
func LookupKeyHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldLookupKey, v))
}

// LookupKeyHasSuffix applies the HasSuffix predicate on the "lookup_key" field.
func LookupKeyHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldLookupKey, v))
}

// LookupKeyIsNil applies the IsNil predicate on the "lookup_key" field.
func LookupKeyIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldLookupKey))
}

// LookupKeyNotNil applies the NotNil predicate on the "lookup_key" field.
func LookupKeyNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldLookupKey))
}

// LookupKeyEqualFold applies the EqualFold predicate on the "lookup_key" field.
func LookupKeyEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldLookupKey, v))
}

// LookupKeyContainsFold applies the ContainsFold predicate on the "lookup_key" field.
func LookupKeyContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldLookupKey, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldDescription, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldMetadata))
}

// HasCostsheet applies the HasEdge predicate on the "costsheet" edge.
func HasCostsheet() predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CostsheetTable, CostsheetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCostsheetWith applies the HasEdge predicate on the "costsheet" edge with a given conditions (other predicates).
func HasCostsheetWith(preds ...predicate.Costsheet) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := newCostsheetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Price) predicate.Price {
	return predicate.Price(sql.NotPredicates(p))
}
