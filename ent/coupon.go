// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/shopspring/decimal"
)

// Coupon is the model entity for the Coupon schema.
type Coupon struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Coupon name
	Name string `json:"name,omitempty"`
	// Coupon redeem after date
	RedeemAfter *time.Time `json:"redeem_after,omitempty"`
	// Coupon redeem before date
	RedeemBefore *time.Time `json:"redeem_before,omitempty"`
	// Coupon max redemptions
	MaxRedemptions *int `json:"max_redemptions,omitempty"`
	// Coupon total redemptions
	TotalRedemptions int `json:"total_redemptions,omitempty"`
	// Rule engine configuration for discount application
	Rules map[string]interface{} `json:"rules,omitempty"`
	// Coupon amount off
	AmountOff decimal.Decimal `json:"amount_off,omitempty"`
	// Coupon percentage off
	PercentageOff decimal.Decimal `json:"percentage_off,omitempty"`
	// Coupon type: fixed or percentage
	Type string `json:"type,omitempty"`
	// Coupon cadence: once, repeated, forever
	Cadence string `json:"cadence,omitempty"`
	// Coupon duration in periods
	DurationInPeriods *int `json:"duration_in_periods,omitempty"`
	// Coupon currency
	Currency *string `json:"currency,omitempty"`
	// Additional metadata for coupon
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CouponQuery when eager-loading is set.
	Edges        CouponEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CouponEdges holds the relations/edges for other nodes in the graph.
type CouponEdges struct {
	// Coupon can be associated with multiple coupon associations
	CouponAssociations []*CouponAssociation `json:"coupon_associations,omitempty"`
	// Coupon can have multiple coupon applications
	CouponApplications []*CouponApplication `json:"coupon_applications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CouponAssociationsOrErr returns the CouponAssociations value or an error if the edge
// was not loaded in eager-loading.
func (e CouponEdges) CouponAssociationsOrErr() ([]*CouponAssociation, error) {
	if e.loadedTypes[0] {
		return e.CouponAssociations, nil
	}
	return nil, &NotLoadedError{edge: "coupon_associations"}
}

// CouponApplicationsOrErr returns the CouponApplications value or an error if the edge
// was not loaded in eager-loading.
func (e CouponEdges) CouponApplicationsOrErr() ([]*CouponApplication, error) {
	if e.loadedTypes[1] {
		return e.CouponApplications, nil
	}
	return nil, &NotLoadedError{edge: "coupon_applications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coupon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coupon.FieldRules, coupon.FieldMetadata:
			values[i] = new([]byte)
		case coupon.FieldAmountOff, coupon.FieldPercentageOff:
			values[i] = new(decimal.Decimal)
		case coupon.FieldMaxRedemptions, coupon.FieldTotalRedemptions, coupon.FieldDurationInPeriods:
			values[i] = new(sql.NullInt64)
		case coupon.FieldID, coupon.FieldTenantID, coupon.FieldStatus, coupon.FieldCreatedBy, coupon.FieldUpdatedBy, coupon.FieldEnvironmentID, coupon.FieldName, coupon.FieldType, coupon.FieldCadence, coupon.FieldCurrency:
			values[i] = new(sql.NullString)
		case coupon.FieldCreatedAt, coupon.FieldUpdatedAt, coupon.FieldRedeemAfter, coupon.FieldRedeemBefore:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coupon fields.
func (c *Coupon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coupon.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case coupon.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				c.TenantID = value.String
			}
		case coupon.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		case coupon.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case coupon.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case coupon.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				c.CreatedBy = value.String
			}
		case coupon.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				c.UpdatedBy = value.String
			}
		case coupon.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				c.EnvironmentID = value.String
			}
		case coupon.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case coupon.FieldRedeemAfter:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field redeem_after", values[i])
			} else if value.Valid {
				c.RedeemAfter = new(time.Time)
				*c.RedeemAfter = value.Time
			}
		case coupon.FieldRedeemBefore:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field redeem_before", values[i])
			} else if value.Valid {
				c.RedeemBefore = new(time.Time)
				*c.RedeemBefore = value.Time
			}
		case coupon.FieldMaxRedemptions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_redemptions", values[i])
			} else if value.Valid {
				c.MaxRedemptions = new(int)
				*c.MaxRedemptions = int(value.Int64)
			}
		case coupon.FieldTotalRedemptions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_redemptions", values[i])
			} else if value.Valid {
				c.TotalRedemptions = int(value.Int64)
			}
		case coupon.FieldRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Rules); err != nil {
					return fmt.Errorf("unmarshal field rules: %w", err)
				}
			}
		case coupon.FieldAmountOff:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_off", values[i])
			} else if value != nil {
				c.AmountOff = *value
			}
		case coupon.FieldPercentageOff:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field percentage_off", values[i])
			} else if value != nil {
				c.PercentageOff = *value
			}
		case coupon.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case coupon.FieldCadence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cadence", values[i])
			} else if value.Valid {
				c.Cadence = value.String
			}
		case coupon.FieldDurationInPeriods:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_in_periods", values[i])
			} else if value.Valid {
				c.DurationInPeriods = new(int)
				*c.DurationInPeriods = int(value.Int64)
			}
		case coupon.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				c.Currency = new(string)
				*c.Currency = value.String
			}
		case coupon.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Coupon.
// This includes values selected through modifiers, order, etc.
func (c *Coupon) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCouponAssociations queries the "coupon_associations" edge of the Coupon entity.
func (c *Coupon) QueryCouponAssociations() *CouponAssociationQuery {
	return NewCouponClient(c.config).QueryCouponAssociations(c)
}

// QueryCouponApplications queries the "coupon_applications" edge of the Coupon entity.
func (c *Coupon) QueryCouponApplications() *CouponApplicationQuery {
	return NewCouponClient(c.config).QueryCouponApplications(c)
}

// Update returns a builder for updating this Coupon.
// Note that you need to call Coupon.Unwrap() before calling this method if this Coupon
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Coupon) Update() *CouponUpdateOne {
	return NewCouponClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Coupon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Coupon) Unwrap() *Coupon {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Coupon is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Coupon) String() string {
	var builder strings.Builder
	builder.WriteString("Coupon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(c.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(c.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(c.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(c.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(c.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	if v := c.RedeemAfter; v != nil {
		builder.WriteString("redeem_after=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.RedeemBefore; v != nil {
		builder.WriteString("redeem_before=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.MaxRedemptions; v != nil {
		builder.WriteString("max_redemptions=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("total_redemptions=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalRedemptions))
	builder.WriteString(", ")
	builder.WriteString("rules=")
	builder.WriteString(fmt.Sprintf("%v", c.Rules))
	builder.WriteString(", ")
	builder.WriteString("amount_off=")
	builder.WriteString(fmt.Sprintf("%v", c.AmountOff))
	builder.WriteString(", ")
	builder.WriteString("percentage_off=")
	builder.WriteString(fmt.Sprintf("%v", c.PercentageOff))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("cadence=")
	builder.WriteString(c.Cadence)
	builder.WriteString(", ")
	if v := c.DurationInPeriods; v != nil {
		builder.WriteString("duration_in_periods=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.Currency; v != nil {
		builder.WriteString("currency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", c.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Coupons is a parsable slice of Coupon.
type Coupons []*Coupon
