// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/price"
)

// CostsheetUpdate is the builder for updating Costsheet entities.
type CostsheetUpdate struct {
	config
	hooks    []Hook
	mutation *CostsheetMutation
}

// Where appends a list predicates to the CostsheetUpdate builder.
func (cu *CostsheetUpdate) Where(ps ...predicate.Costsheet) *CostsheetUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CostsheetUpdate) SetStatus(s string) *CostsheetUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CostsheetUpdate) SetNillableStatus(s *string) *CostsheetUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CostsheetUpdate) SetUpdatedAt(t time.Time) *CostsheetUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CostsheetUpdate) SetUpdatedBy(s string) *CostsheetUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CostsheetUpdate) SetNillableUpdatedBy(s *string) *CostsheetUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CostsheetUpdate) ClearUpdatedBy() *CostsheetUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetMeterID sets the "meter_id" field.
func (cu *CostsheetUpdate) SetMeterID(s string) *CostsheetUpdate {
	cu.mutation.SetMeterID(s)
	return cu
}

// SetNillableMeterID sets the "meter_id" field if the given value is not nil.
func (cu *CostsheetUpdate) SetNillableMeterID(s *string) *CostsheetUpdate {
	if s != nil {
		cu.SetMeterID(*s)
	}
	return cu
}

// SetPriceID sets the "price_id" field.
func (cu *CostsheetUpdate) SetPriceID(s string) *CostsheetUpdate {
	cu.mutation.SetPriceID(s)
	return cu
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (cu *CostsheetUpdate) SetNillablePriceID(s *string) *CostsheetUpdate {
	if s != nil {
		cu.SetPriceID(*s)
	}
	return cu
}

// SetMeter sets the "meter" edge to the Meter entity.
func (cu *CostsheetUpdate) SetMeter(m *Meter) *CostsheetUpdate {
	return cu.SetMeterID(m.ID)
}

// SetPrice sets the "price" edge to the Price entity.
func (cu *CostsheetUpdate) SetPrice(p *Price) *CostsheetUpdate {
	return cu.SetPriceID(p.ID)
}

// Mutation returns the CostsheetMutation object of the builder.
func (cu *CostsheetUpdate) Mutation() *CostsheetMutation {
	return cu.mutation
}

// ClearMeter clears the "meter" edge to the Meter entity.
func (cu *CostsheetUpdate) ClearMeter() *CostsheetUpdate {
	cu.mutation.ClearMeter()
	return cu
}

// ClearPrice clears the "price" edge to the Price entity.
func (cu *CostsheetUpdate) ClearPrice() *CostsheetUpdate {
	cu.mutation.ClearPrice()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CostsheetUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CostsheetUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CostsheetUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CostsheetUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CostsheetUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := costsheet.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CostsheetUpdate) check() error {
	if v, ok := cu.mutation.MeterID(); ok {
		if err := costsheet.MeterIDValidator(v); err != nil {
			return &ValidationError{Name: "meter_id", err: fmt.Errorf(`ent: validator failed for field "Costsheet.meter_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PriceID(); ok {
		if err := costsheet.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "Costsheet.price_id": %w`, err)}
		}
	}
	if cu.mutation.MeterCleared() && len(cu.mutation.MeterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Costsheet.meter"`)
	}
	if cu.mutation.PriceCleared() && len(cu.mutation.PriceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Costsheet.price"`)
	}
	return nil
}

func (cu *CostsheetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(costsheet.Table, costsheet.Columns, sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(costsheet.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(costsheet.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(costsheet.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(costsheet.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(costsheet.FieldUpdatedBy, field.TypeString)
	}
	if cu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(costsheet.FieldEnvironmentID, field.TypeString)
	}
	if cu.mutation.MeterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.MeterTable,
			Columns: []string{costsheet.MeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MeterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.MeterTable,
			Columns: []string{costsheet.MeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.PriceTable,
			Columns: []string{costsheet.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.PriceTable,
			Columns: []string{costsheet.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costsheet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CostsheetUpdateOne is the builder for updating a single Costsheet entity.
type CostsheetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CostsheetMutation
}

// SetStatus sets the "status" field.
func (cuo *CostsheetUpdateOne) SetStatus(s string) *CostsheetUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CostsheetUpdateOne) SetNillableStatus(s *string) *CostsheetUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CostsheetUpdateOne) SetUpdatedAt(t time.Time) *CostsheetUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CostsheetUpdateOne) SetUpdatedBy(s string) *CostsheetUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CostsheetUpdateOne) SetNillableUpdatedBy(s *string) *CostsheetUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CostsheetUpdateOne) ClearUpdatedBy() *CostsheetUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetMeterID sets the "meter_id" field.
func (cuo *CostsheetUpdateOne) SetMeterID(s string) *CostsheetUpdateOne {
	cuo.mutation.SetMeterID(s)
	return cuo
}

// SetNillableMeterID sets the "meter_id" field if the given value is not nil.
func (cuo *CostsheetUpdateOne) SetNillableMeterID(s *string) *CostsheetUpdateOne {
	if s != nil {
		cuo.SetMeterID(*s)
	}
	return cuo
}

// SetPriceID sets the "price_id" field.
func (cuo *CostsheetUpdateOne) SetPriceID(s string) *CostsheetUpdateOne {
	cuo.mutation.SetPriceID(s)
	return cuo
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (cuo *CostsheetUpdateOne) SetNillablePriceID(s *string) *CostsheetUpdateOne {
	if s != nil {
		cuo.SetPriceID(*s)
	}
	return cuo
}

// SetMeter sets the "meter" edge to the Meter entity.
func (cuo *CostsheetUpdateOne) SetMeter(m *Meter) *CostsheetUpdateOne {
	return cuo.SetMeterID(m.ID)
}

// SetPrice sets the "price" edge to the Price entity.
func (cuo *CostsheetUpdateOne) SetPrice(p *Price) *CostsheetUpdateOne {
	return cuo.SetPriceID(p.ID)
}

// Mutation returns the CostsheetMutation object of the builder.
func (cuo *CostsheetUpdateOne) Mutation() *CostsheetMutation {
	return cuo.mutation
}

// ClearMeter clears the "meter" edge to the Meter entity.
func (cuo *CostsheetUpdateOne) ClearMeter() *CostsheetUpdateOne {
	cuo.mutation.ClearMeter()
	return cuo
}

// ClearPrice clears the "price" edge to the Price entity.
func (cuo *CostsheetUpdateOne) ClearPrice() *CostsheetUpdateOne {
	cuo.mutation.ClearPrice()
	return cuo
}

// Where appends a list predicates to the CostsheetUpdate builder.
func (cuo *CostsheetUpdateOne) Where(ps ...predicate.Costsheet) *CostsheetUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CostsheetUpdateOne) Select(field string, fields ...string) *CostsheetUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Costsheet entity.
func (cuo *CostsheetUpdateOne) Save(ctx context.Context) (*Costsheet, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CostsheetUpdateOne) SaveX(ctx context.Context) *Costsheet {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CostsheetUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CostsheetUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CostsheetUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := costsheet.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CostsheetUpdateOne) check() error {
	if v, ok := cuo.mutation.MeterID(); ok {
		if err := costsheet.MeterIDValidator(v); err != nil {
			return &ValidationError{Name: "meter_id", err: fmt.Errorf(`ent: validator failed for field "Costsheet.meter_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PriceID(); ok {
		if err := costsheet.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "Costsheet.price_id": %w`, err)}
		}
	}
	if cuo.mutation.MeterCleared() && len(cuo.mutation.MeterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Costsheet.meter"`)
	}
	if cuo.mutation.PriceCleared() && len(cuo.mutation.PriceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Costsheet.price"`)
	}
	return nil
}

func (cuo *CostsheetUpdateOne) sqlSave(ctx context.Context) (_node *Costsheet, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(costsheet.Table, costsheet.Columns, sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Costsheet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, costsheet.FieldID)
		for _, f := range fields {
			if !costsheet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != costsheet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(costsheet.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(costsheet.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(costsheet.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(costsheet.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(costsheet.FieldUpdatedBy, field.TypeString)
	}
	if cuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(costsheet.FieldEnvironmentID, field.TypeString)
	}
	if cuo.mutation.MeterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.MeterTable,
			Columns: []string{costsheet.MeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MeterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.MeterTable,
			Columns: []string{costsheet.MeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.PriceTable,
			Columns: []string{costsheet.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.PriceTable,
			Columns: []string{costsheet.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Costsheet{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costsheet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
