// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/invoice"
	"github.com/flexprice/flexprice/ent/invoicelineitem"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/shopspring/decimal"
)

// CouponApplicationCreate is the builder for creating a CouponApplication entity.
type CouponApplicationCreate struct {
	config
	mutation *CouponApplicationMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cac *CouponApplicationCreate) SetTenantID(s string) *CouponApplicationCreate {
	cac.mutation.SetTenantID(s)
	return cac
}

// SetStatus sets the "status" field.
func (cac *CouponApplicationCreate) SetStatus(s string) *CouponApplicationCreate {
	cac.mutation.SetStatus(s)
	return cac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableStatus(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetStatus(*s)
	}
	return cac
}

// SetCreatedAt sets the "created_at" field.
func (cac *CouponApplicationCreate) SetCreatedAt(t time.Time) *CouponApplicationCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableCreatedAt(t *time.Time) *CouponApplicationCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CouponApplicationCreate) SetUpdatedAt(t time.Time) *CouponApplicationCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableUpdatedAt(t *time.Time) *CouponApplicationCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetCreatedBy sets the "created_by" field.
func (cac *CouponApplicationCreate) SetCreatedBy(s string) *CouponApplicationCreate {
	cac.mutation.SetCreatedBy(s)
	return cac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableCreatedBy(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetCreatedBy(*s)
	}
	return cac
}

// SetUpdatedBy sets the "updated_by" field.
func (cac *CouponApplicationCreate) SetUpdatedBy(s string) *CouponApplicationCreate {
	cac.mutation.SetUpdatedBy(s)
	return cac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableUpdatedBy(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetUpdatedBy(*s)
	}
	return cac
}

// SetEnvironmentID sets the "environment_id" field.
func (cac *CouponApplicationCreate) SetEnvironmentID(s string) *CouponApplicationCreate {
	cac.mutation.SetEnvironmentID(s)
	return cac
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableEnvironmentID(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetEnvironmentID(*s)
	}
	return cac
}

// SetCouponID sets the "coupon_id" field.
func (cac *CouponApplicationCreate) SetCouponID(s string) *CouponApplicationCreate {
	cac.mutation.SetCouponID(s)
	return cac
}

// SetCouponAssociationID sets the "coupon_association_id" field.
func (cac *CouponApplicationCreate) SetCouponAssociationID(s string) *CouponApplicationCreate {
	cac.mutation.SetCouponAssociationID(s)
	return cac
}

// SetNillableCouponAssociationID sets the "coupon_association_id" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableCouponAssociationID(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetCouponAssociationID(*s)
	}
	return cac
}

// SetInvoiceID sets the "invoice_id" field.
func (cac *CouponApplicationCreate) SetInvoiceID(s string) *CouponApplicationCreate {
	cac.mutation.SetInvoiceID(s)
	return cac
}

// SetInvoiceLineItemID sets the "invoice_line_item_id" field.
func (cac *CouponApplicationCreate) SetInvoiceLineItemID(s string) *CouponApplicationCreate {
	cac.mutation.SetInvoiceLineItemID(s)
	return cac
}

// SetNillableInvoiceLineItemID sets the "invoice_line_item_id" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableInvoiceLineItemID(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetInvoiceLineItemID(*s)
	}
	return cac
}

// SetAppliedAt sets the "applied_at" field.
func (cac *CouponApplicationCreate) SetAppliedAt(t time.Time) *CouponApplicationCreate {
	cac.mutation.SetAppliedAt(t)
	return cac
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableAppliedAt(t *time.Time) *CouponApplicationCreate {
	if t != nil {
		cac.SetAppliedAt(*t)
	}
	return cac
}

// SetOriginalPrice sets the "original_price" field.
func (cac *CouponApplicationCreate) SetOriginalPrice(d decimal.Decimal) *CouponApplicationCreate {
	cac.mutation.SetOriginalPrice(d)
	return cac
}

// SetFinalPrice sets the "final_price" field.
func (cac *CouponApplicationCreate) SetFinalPrice(d decimal.Decimal) *CouponApplicationCreate {
	cac.mutation.SetFinalPrice(d)
	return cac
}

// SetDiscountedAmount sets the "discounted_amount" field.
func (cac *CouponApplicationCreate) SetDiscountedAmount(d decimal.Decimal) *CouponApplicationCreate {
	cac.mutation.SetDiscountedAmount(d)
	return cac
}

// SetDiscountType sets the "discount_type" field.
func (cac *CouponApplicationCreate) SetDiscountType(s string) *CouponApplicationCreate {
	cac.mutation.SetDiscountType(s)
	return cac
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (cac *CouponApplicationCreate) SetDiscountPercentage(d decimal.Decimal) *CouponApplicationCreate {
	cac.mutation.SetDiscountPercentage(d)
	return cac
}

// SetNillableDiscountPercentage sets the "discount_percentage" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableDiscountPercentage(d *decimal.Decimal) *CouponApplicationCreate {
	if d != nil {
		cac.SetDiscountPercentage(*d)
	}
	return cac
}

// SetCurrency sets the "currency" field.
func (cac *CouponApplicationCreate) SetCurrency(s string) *CouponApplicationCreate {
	cac.mutation.SetCurrency(s)
	return cac
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableCurrency(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetCurrency(*s)
	}
	return cac
}

// SetCouponSnapshot sets the "coupon_snapshot" field.
func (cac *CouponApplicationCreate) SetCouponSnapshot(m map[string]interface{}) *CouponApplicationCreate {
	cac.mutation.SetCouponSnapshot(m)
	return cac
}

// SetMetadata sets the "metadata" field.
func (cac *CouponApplicationCreate) SetMetadata(m map[string]string) *CouponApplicationCreate {
	cac.mutation.SetMetadata(m)
	return cac
}

// SetSubscriptionID sets the "subscription_id" field.
func (cac *CouponApplicationCreate) SetSubscriptionID(s string) *CouponApplicationCreate {
	cac.mutation.SetSubscriptionID(s)
	return cac
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (cac *CouponApplicationCreate) SetNillableSubscriptionID(s *string) *CouponApplicationCreate {
	if s != nil {
		cac.SetSubscriptionID(*s)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *CouponApplicationCreate) SetID(s string) *CouponApplicationCreate {
	cac.mutation.SetID(s)
	return cac
}

// SetCoupon sets the "coupon" edge to the Coupon entity.
func (cac *CouponApplicationCreate) SetCoupon(c *Coupon) *CouponApplicationCreate {
	return cac.SetCouponID(c.ID)
}

// AddCouponAssociationIDs adds the "coupon_association" edge to the CouponAssociation entity by IDs.
func (cac *CouponApplicationCreate) AddCouponAssociationIDs(ids ...string) *CouponApplicationCreate {
	cac.mutation.AddCouponAssociationIDs(ids...)
	return cac
}

// AddCouponAssociation adds the "coupon_association" edges to the CouponAssociation entity.
func (cac *CouponApplicationCreate) AddCouponAssociation(c ...*CouponAssociation) *CouponApplicationCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cac.AddCouponAssociationIDs(ids...)
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (cac *CouponApplicationCreate) SetInvoice(i *Invoice) *CouponApplicationCreate {
	return cac.SetInvoiceID(i.ID)
}

// SetInvoiceLineItem sets the "invoice_line_item" edge to the InvoiceLineItem entity.
func (cac *CouponApplicationCreate) SetInvoiceLineItem(i *InvoiceLineItem) *CouponApplicationCreate {
	return cac.SetInvoiceLineItemID(i.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (cac *CouponApplicationCreate) SetSubscription(s *Subscription) *CouponApplicationCreate {
	return cac.SetSubscriptionID(s.ID)
}

// Mutation returns the CouponApplicationMutation object of the builder.
func (cac *CouponApplicationCreate) Mutation() *CouponApplicationMutation {
	return cac.mutation
}

// Save creates the CouponApplication in the database.
func (cac *CouponApplicationCreate) Save(ctx context.Context) (*CouponApplication, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CouponApplicationCreate) SaveX(ctx context.Context) *CouponApplication {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CouponApplicationCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CouponApplicationCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CouponApplicationCreate) defaults() {
	if _, ok := cac.mutation.Status(); !ok {
		v := couponapplication.DefaultStatus
		cac.mutation.SetStatus(v)
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := couponapplication.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		v := couponapplication.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cac.mutation.EnvironmentID(); !ok {
		v := couponapplication.DefaultEnvironmentID
		cac.mutation.SetEnvironmentID(v)
	}
	if _, ok := cac.mutation.AppliedAt(); !ok {
		v := couponapplication.DefaultAppliedAt()
		cac.mutation.SetAppliedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CouponApplicationCreate) check() error {
	if _, ok := cac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CouponApplication.tenant_id"`)}
	}
	if v, ok := cac.mutation.TenantID(); ok {
		if err := couponapplication.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CouponApplication.tenant_id": %w`, err)}
		}
	}
	if _, ok := cac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CouponApplication.status"`)}
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponApplication.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponApplication.updated_at"`)}
	}
	if _, ok := cac.mutation.CouponID(); !ok {
		return &ValidationError{Name: "coupon_id", err: errors.New(`ent: missing required field "CouponApplication.coupon_id"`)}
	}
	if v, ok := cac.mutation.CouponID(); ok {
		if err := couponapplication.CouponIDValidator(v); err != nil {
			return &ValidationError{Name: "coupon_id", err: fmt.Errorf(`ent: validator failed for field "CouponApplication.coupon_id": %w`, err)}
		}
	}
	if _, ok := cac.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`ent: missing required field "CouponApplication.invoice_id"`)}
	}
	if v, ok := cac.mutation.InvoiceID(); ok {
		if err := couponapplication.InvoiceIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_id", err: fmt.Errorf(`ent: validator failed for field "CouponApplication.invoice_id": %w`, err)}
		}
	}
	if _, ok := cac.mutation.AppliedAt(); !ok {
		return &ValidationError{Name: "applied_at", err: errors.New(`ent: missing required field "CouponApplication.applied_at"`)}
	}
	if _, ok := cac.mutation.OriginalPrice(); !ok {
		return &ValidationError{Name: "original_price", err: errors.New(`ent: missing required field "CouponApplication.original_price"`)}
	}
	if _, ok := cac.mutation.FinalPrice(); !ok {
		return &ValidationError{Name: "final_price", err: errors.New(`ent: missing required field "CouponApplication.final_price"`)}
	}
	if _, ok := cac.mutation.DiscountedAmount(); !ok {
		return &ValidationError{Name: "discounted_amount", err: errors.New(`ent: missing required field "CouponApplication.discounted_amount"`)}
	}
	if _, ok := cac.mutation.DiscountType(); !ok {
		return &ValidationError{Name: "discount_type", err: errors.New(`ent: missing required field "CouponApplication.discount_type"`)}
	}
	if v, ok := cac.mutation.DiscountType(); ok {
		if err := couponapplication.DiscountTypeValidator(v); err != nil {
			return &ValidationError{Name: "discount_type", err: fmt.Errorf(`ent: validator failed for field "CouponApplication.discount_type": %w`, err)}
		}
	}
	if len(cac.mutation.CouponIDs()) == 0 {
		return &ValidationError{Name: "coupon", err: errors.New(`ent: missing required edge "CouponApplication.coupon"`)}
	}
	if len(cac.mutation.InvoiceIDs()) == 0 {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "CouponApplication.invoice"`)}
	}
	return nil
}

func (cac *CouponApplicationCreate) sqlSave(ctx context.Context) (*CouponApplication, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CouponApplication.ID type: %T", _spec.ID.Value)
		}
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CouponApplicationCreate) createSpec() (*CouponApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponApplication{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(couponapplication.Table, sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString))
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.TenantID(); ok {
		_spec.SetField(couponapplication.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cac.mutation.Status(); ok {
		_spec.SetField(couponapplication.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(couponapplication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(couponapplication.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.CreatedBy(); ok {
		_spec.SetField(couponapplication.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cac.mutation.UpdatedBy(); ok {
		_spec.SetField(couponapplication.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cac.mutation.EnvironmentID(); ok {
		_spec.SetField(couponapplication.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cac.mutation.CouponAssociationID(); ok {
		_spec.SetField(couponapplication.FieldCouponAssociationID, field.TypeString, value)
		_node.CouponAssociationID = &value
	}
	if value, ok := cac.mutation.AppliedAt(); ok {
		_spec.SetField(couponapplication.FieldAppliedAt, field.TypeTime, value)
		_node.AppliedAt = value
	}
	if value, ok := cac.mutation.OriginalPrice(); ok {
		_spec.SetField(couponapplication.FieldOriginalPrice, field.TypeOther, value)
		_node.OriginalPrice = value
	}
	if value, ok := cac.mutation.FinalPrice(); ok {
		_spec.SetField(couponapplication.FieldFinalPrice, field.TypeOther, value)
		_node.FinalPrice = value
	}
	if value, ok := cac.mutation.DiscountedAmount(); ok {
		_spec.SetField(couponapplication.FieldDiscountedAmount, field.TypeOther, value)
		_node.DiscountedAmount = value
	}
	if value, ok := cac.mutation.DiscountType(); ok {
		_spec.SetField(couponapplication.FieldDiscountType, field.TypeString, value)
		_node.DiscountType = value
	}
	if value, ok := cac.mutation.DiscountPercentage(); ok {
		_spec.SetField(couponapplication.FieldDiscountPercentage, field.TypeOther, value)
		_node.DiscountPercentage = &value
	}
	if value, ok := cac.mutation.Currency(); ok {
		_spec.SetField(couponapplication.FieldCurrency, field.TypeString, value)
		_node.Currency = &value
	}
	if value, ok := cac.mutation.CouponSnapshot(); ok {
		_spec.SetField(couponapplication.FieldCouponSnapshot, field.TypeJSON, value)
		_node.CouponSnapshot = value
	}
	if value, ok := cac.mutation.Metadata(); ok {
		_spec.SetField(couponapplication.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := cac.mutation.CouponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.CouponTable,
			Columns: []string{couponapplication.CouponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CouponID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.CouponAssociationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   couponapplication.CouponAssociationTable,
			Columns: couponapplication.CouponAssociationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.InvoiceTable,
			Columns: []string{couponapplication.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.InvoiceLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.InvoiceLineItemTable,
			Columns: []string{couponapplication.InvoiceLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceLineItemID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.SubscriptionTable,
			Columns: []string{couponapplication.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CouponApplicationCreateBulk is the builder for creating many CouponApplication entities in bulk.
type CouponApplicationCreateBulk struct {
	config
	err      error
	builders []*CouponApplicationCreate
}

// Save creates the CouponApplication entities in the database.
func (cacb *CouponApplicationCreateBulk) Save(ctx context.Context) ([]*CouponApplication, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CouponApplication, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CouponApplicationCreateBulk) SaveX(ctx context.Context) []*CouponApplication {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CouponApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CouponApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
