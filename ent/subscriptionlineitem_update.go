// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
	"github.com/shopspring/decimal"
)

// SubscriptionLineItemUpdate is the builder for updating SubscriptionLineItem entities.
type SubscriptionLineItemUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionLineItemMutation
}

// Where appends a list predicates to the SubscriptionLineItemUpdate builder.
func (sliu *SubscriptionLineItemUpdate) Where(ps ...predicate.SubscriptionLineItem) *SubscriptionLineItemUpdate {
	sliu.mutation.Where(ps...)
	return sliu
}

// SetStatus sets the "status" field.
func (sliu *SubscriptionLineItemUpdate) SetStatus(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetStatus(s)
	return sliu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableStatus(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetStatus(*s)
	}
	return sliu
}

// SetUpdatedAt sets the "updated_at" field.
func (sliu *SubscriptionLineItemUpdate) SetUpdatedAt(t time.Time) *SubscriptionLineItemUpdate {
	sliu.mutation.SetUpdatedAt(t)
	return sliu
}

// SetUpdatedBy sets the "updated_by" field.
func (sliu *SubscriptionLineItemUpdate) SetUpdatedBy(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetUpdatedBy(s)
	return sliu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableUpdatedBy(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetUpdatedBy(*s)
	}
	return sliu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sliu *SubscriptionLineItemUpdate) ClearUpdatedBy() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearUpdatedBy()
	return sliu
}

// SetPlanID sets the "plan_id" field.
func (sliu *SubscriptionLineItemUpdate) SetPlanID(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetPlanID(s)
	return sliu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillablePlanID(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetPlanID(*s)
	}
	return sliu
}

// ClearPlanID clears the value of the "plan_id" field.
func (sliu *SubscriptionLineItemUpdate) ClearPlanID() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearPlanID()
	return sliu
}

// SetPlanDisplayName sets the "plan_display_name" field.
func (sliu *SubscriptionLineItemUpdate) SetPlanDisplayName(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetPlanDisplayName(s)
	return sliu
}

// SetNillablePlanDisplayName sets the "plan_display_name" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillablePlanDisplayName(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetPlanDisplayName(*s)
	}
	return sliu
}

// ClearPlanDisplayName clears the value of the "plan_display_name" field.
func (sliu *SubscriptionLineItemUpdate) ClearPlanDisplayName() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearPlanDisplayName()
	return sliu
}

// SetPriceID sets the "price_id" field.
func (sliu *SubscriptionLineItemUpdate) SetPriceID(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetPriceID(s)
	return sliu
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillablePriceID(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetPriceID(*s)
	}
	return sliu
}

// SetPriceType sets the "price_type" field.
func (sliu *SubscriptionLineItemUpdate) SetPriceType(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetPriceType(s)
	return sliu
}

// SetNillablePriceType sets the "price_type" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillablePriceType(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetPriceType(*s)
	}
	return sliu
}

// ClearPriceType clears the value of the "price_type" field.
func (sliu *SubscriptionLineItemUpdate) ClearPriceType() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearPriceType()
	return sliu
}

// SetMeterID sets the "meter_id" field.
func (sliu *SubscriptionLineItemUpdate) SetMeterID(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetMeterID(s)
	return sliu
}

// SetNillableMeterID sets the "meter_id" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableMeterID(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetMeterID(*s)
	}
	return sliu
}

// ClearMeterID clears the value of the "meter_id" field.
func (sliu *SubscriptionLineItemUpdate) ClearMeterID() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearMeterID()
	return sliu
}

// SetMeterDisplayName sets the "meter_display_name" field.
func (sliu *SubscriptionLineItemUpdate) SetMeterDisplayName(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetMeterDisplayName(s)
	return sliu
}

// SetNillableMeterDisplayName sets the "meter_display_name" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableMeterDisplayName(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetMeterDisplayName(*s)
	}
	return sliu
}

// ClearMeterDisplayName clears the value of the "meter_display_name" field.
func (sliu *SubscriptionLineItemUpdate) ClearMeterDisplayName() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearMeterDisplayName()
	return sliu
}

// SetPriceUnitID sets the "price_unit_id" field.
func (sliu *SubscriptionLineItemUpdate) SetPriceUnitID(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetPriceUnitID(s)
	return sliu
}

// SetNillablePriceUnitID sets the "price_unit_id" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillablePriceUnitID(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetPriceUnitID(*s)
	}
	return sliu
}

// ClearPriceUnitID clears the value of the "price_unit_id" field.
func (sliu *SubscriptionLineItemUpdate) ClearPriceUnitID() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearPriceUnitID()
	return sliu
}

// SetPriceUnit sets the "price_unit" field.
func (sliu *SubscriptionLineItemUpdate) SetPriceUnit(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetPriceUnit(s)
	return sliu
}

// SetNillablePriceUnit sets the "price_unit" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillablePriceUnit(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetPriceUnit(*s)
	}
	return sliu
}

// ClearPriceUnit clears the value of the "price_unit" field.
func (sliu *SubscriptionLineItemUpdate) ClearPriceUnit() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearPriceUnit()
	return sliu
}

// SetDisplayName sets the "display_name" field.
func (sliu *SubscriptionLineItemUpdate) SetDisplayName(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetDisplayName(s)
	return sliu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableDisplayName(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetDisplayName(*s)
	}
	return sliu
}

// ClearDisplayName clears the value of the "display_name" field.
func (sliu *SubscriptionLineItemUpdate) ClearDisplayName() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearDisplayName()
	return sliu
}

// SetQuantity sets the "quantity" field.
func (sliu *SubscriptionLineItemUpdate) SetQuantity(d decimal.Decimal) *SubscriptionLineItemUpdate {
	sliu.mutation.SetQuantity(d)
	return sliu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableQuantity(d *decimal.Decimal) *SubscriptionLineItemUpdate {
	if d != nil {
		sliu.SetQuantity(*d)
	}
	return sliu
}

// SetCurrency sets the "currency" field.
func (sliu *SubscriptionLineItemUpdate) SetCurrency(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetCurrency(s)
	return sliu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableCurrency(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetCurrency(*s)
	}
	return sliu
}

// SetBillingPeriod sets the "billing_period" field.
func (sliu *SubscriptionLineItemUpdate) SetBillingPeriod(s string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetBillingPeriod(s)
	return sliu
}

// SetNillableBillingPeriod sets the "billing_period" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableBillingPeriod(s *string) *SubscriptionLineItemUpdate {
	if s != nil {
		sliu.SetBillingPeriod(*s)
	}
	return sliu
}

// SetTrialPeriod sets the "trial_period" field.
func (sliu *SubscriptionLineItemUpdate) SetTrialPeriod(i int) *SubscriptionLineItemUpdate {
	sliu.mutation.ResetTrialPeriod()
	sliu.mutation.SetTrialPeriod(i)
	return sliu
}

// SetNillableTrialPeriod sets the "trial_period" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableTrialPeriod(i *int) *SubscriptionLineItemUpdate {
	if i != nil {
		sliu.SetTrialPeriod(*i)
	}
	return sliu
}

// AddTrialPeriod adds i to the "trial_period" field.
func (sliu *SubscriptionLineItemUpdate) AddTrialPeriod(i int) *SubscriptionLineItemUpdate {
	sliu.mutation.AddTrialPeriod(i)
	return sliu
}

// SetStartDate sets the "start_date" field.
func (sliu *SubscriptionLineItemUpdate) SetStartDate(t time.Time) *SubscriptionLineItemUpdate {
	sliu.mutation.SetStartDate(t)
	return sliu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableStartDate(t *time.Time) *SubscriptionLineItemUpdate {
	if t != nil {
		sliu.SetStartDate(*t)
	}
	return sliu
}

// ClearStartDate clears the value of the "start_date" field.
func (sliu *SubscriptionLineItemUpdate) ClearStartDate() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearStartDate()
	return sliu
}

// SetEndDate sets the "end_date" field.
func (sliu *SubscriptionLineItemUpdate) SetEndDate(t time.Time) *SubscriptionLineItemUpdate {
	sliu.mutation.SetEndDate(t)
	return sliu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sliu *SubscriptionLineItemUpdate) SetNillableEndDate(t *time.Time) *SubscriptionLineItemUpdate {
	if t != nil {
		sliu.SetEndDate(*t)
	}
	return sliu
}

// ClearEndDate clears the value of the "end_date" field.
func (sliu *SubscriptionLineItemUpdate) ClearEndDate() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearEndDate()
	return sliu
}

// SetMetadata sets the "metadata" field.
func (sliu *SubscriptionLineItemUpdate) SetMetadata(m map[string]string) *SubscriptionLineItemUpdate {
	sliu.mutation.SetMetadata(m)
	return sliu
}

// ClearMetadata clears the value of the "metadata" field.
func (sliu *SubscriptionLineItemUpdate) ClearMetadata() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearMetadata()
	return sliu
}

// AddCouponAssociationIDs adds the "coupon_associations" edge to the CouponAssociation entity by IDs.
func (sliu *SubscriptionLineItemUpdate) AddCouponAssociationIDs(ids ...string) *SubscriptionLineItemUpdate {
	sliu.mutation.AddCouponAssociationIDs(ids...)
	return sliu
}

// AddCouponAssociations adds the "coupon_associations" edges to the CouponAssociation entity.
func (sliu *SubscriptionLineItemUpdate) AddCouponAssociations(c ...*CouponAssociation) *SubscriptionLineItemUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sliu.AddCouponAssociationIDs(ids...)
}

// Mutation returns the SubscriptionLineItemMutation object of the builder.
func (sliu *SubscriptionLineItemUpdate) Mutation() *SubscriptionLineItemMutation {
	return sliu.mutation
}

// ClearCouponAssociations clears all "coupon_associations" edges to the CouponAssociation entity.
func (sliu *SubscriptionLineItemUpdate) ClearCouponAssociations() *SubscriptionLineItemUpdate {
	sliu.mutation.ClearCouponAssociations()
	return sliu
}

// RemoveCouponAssociationIDs removes the "coupon_associations" edge to CouponAssociation entities by IDs.
func (sliu *SubscriptionLineItemUpdate) RemoveCouponAssociationIDs(ids ...string) *SubscriptionLineItemUpdate {
	sliu.mutation.RemoveCouponAssociationIDs(ids...)
	return sliu
}

// RemoveCouponAssociations removes "coupon_associations" edges to CouponAssociation entities.
func (sliu *SubscriptionLineItemUpdate) RemoveCouponAssociations(c ...*CouponAssociation) *SubscriptionLineItemUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sliu.RemoveCouponAssociationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sliu *SubscriptionLineItemUpdate) Save(ctx context.Context) (int, error) {
	sliu.defaults()
	return withHooks(ctx, sliu.sqlSave, sliu.mutation, sliu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sliu *SubscriptionLineItemUpdate) SaveX(ctx context.Context) int {
	affected, err := sliu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sliu *SubscriptionLineItemUpdate) Exec(ctx context.Context) error {
	_, err := sliu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sliu *SubscriptionLineItemUpdate) ExecX(ctx context.Context) {
	if err := sliu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sliu *SubscriptionLineItemUpdate) defaults() {
	if _, ok := sliu.mutation.UpdatedAt(); !ok {
		v := subscriptionlineitem.UpdateDefaultUpdatedAt()
		sliu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sliu *SubscriptionLineItemUpdate) check() error {
	if v, ok := sliu.mutation.PriceID(); ok {
		if err := subscriptionlineitem.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.price_id": %w`, err)}
		}
	}
	if v, ok := sliu.mutation.Currency(); ok {
		if err := subscriptionlineitem.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.currency": %w`, err)}
		}
	}
	if v, ok := sliu.mutation.BillingPeriod(); ok {
		if err := subscriptionlineitem.BillingPeriodValidator(v); err != nil {
			return &ValidationError{Name: "billing_period", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.billing_period": %w`, err)}
		}
	}
	if sliu.mutation.SubscriptionCleared() && len(sliu.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionLineItem.subscription"`)
	}
	return nil
}

func (sliu *SubscriptionLineItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sliu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionlineitem.Table, subscriptionlineitem.Columns, sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString))
	if ps := sliu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sliu.mutation.Status(); ok {
		_spec.SetField(subscriptionlineitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := sliu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionlineitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if sliu.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionlineitem.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sliu.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionlineitem.FieldUpdatedBy, field.TypeString, value)
	}
	if sliu.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionlineitem.FieldUpdatedBy, field.TypeString)
	}
	if sliu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sliu.mutation.PlanID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPlanID, field.TypeString, value)
	}
	if sliu.mutation.PlanIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPlanID, field.TypeString)
	}
	if value, ok := sliu.mutation.PlanDisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldPlanDisplayName, field.TypeString, value)
	}
	if sliu.mutation.PlanDisplayNameCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPlanDisplayName, field.TypeString)
	}
	if value, ok := sliu.mutation.PriceID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceID, field.TypeString, value)
	}
	if value, ok := sliu.mutation.PriceType(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceType, field.TypeString, value)
	}
	if sliu.mutation.PriceTypeCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPriceType, field.TypeString)
	}
	if value, ok := sliu.mutation.MeterID(); ok {
		_spec.SetField(subscriptionlineitem.FieldMeterID, field.TypeString, value)
	}
	if sliu.mutation.MeterIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldMeterID, field.TypeString)
	}
	if value, ok := sliu.mutation.MeterDisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldMeterDisplayName, field.TypeString, value)
	}
	if sliu.mutation.MeterDisplayNameCleared() {
		_spec.ClearField(subscriptionlineitem.FieldMeterDisplayName, field.TypeString)
	}
	if value, ok := sliu.mutation.PriceUnitID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceUnitID, field.TypeString, value)
	}
	if sliu.mutation.PriceUnitIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPriceUnitID, field.TypeString)
	}
	if value, ok := sliu.mutation.PriceUnit(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceUnit, field.TypeString, value)
	}
	if sliu.mutation.PriceUnitCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPriceUnit, field.TypeString)
	}
	if value, ok := sliu.mutation.DisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldDisplayName, field.TypeString, value)
	}
	if sliu.mutation.DisplayNameCleared() {
		_spec.ClearField(subscriptionlineitem.FieldDisplayName, field.TypeString)
	}
	if value, ok := sliu.mutation.Quantity(); ok {
		_spec.SetField(subscriptionlineitem.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := sliu.mutation.Currency(); ok {
		_spec.SetField(subscriptionlineitem.FieldCurrency, field.TypeString, value)
	}
	if value, ok := sliu.mutation.BillingPeriod(); ok {
		_spec.SetField(subscriptionlineitem.FieldBillingPeriod, field.TypeString, value)
	}
	if sliu.mutation.InvoiceCadenceCleared() {
		_spec.ClearField(subscriptionlineitem.FieldInvoiceCadence, field.TypeString)
	}
	if value, ok := sliu.mutation.TrialPeriod(); ok {
		_spec.SetField(subscriptionlineitem.FieldTrialPeriod, field.TypeInt, value)
	}
	if value, ok := sliu.mutation.AddedTrialPeriod(); ok {
		_spec.AddField(subscriptionlineitem.FieldTrialPeriod, field.TypeInt, value)
	}
	if value, ok := sliu.mutation.StartDate(); ok {
		_spec.SetField(subscriptionlineitem.FieldStartDate, field.TypeTime, value)
	}
	if sliu.mutation.StartDateCleared() {
		_spec.ClearField(subscriptionlineitem.FieldStartDate, field.TypeTime)
	}
	if value, ok := sliu.mutation.EndDate(); ok {
		_spec.SetField(subscriptionlineitem.FieldEndDate, field.TypeTime, value)
	}
	if sliu.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionlineitem.FieldEndDate, field.TypeTime)
	}
	if value, ok := sliu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionlineitem.FieldMetadata, field.TypeJSON, value)
	}
	if sliu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionlineitem.FieldMetadata, field.TypeJSON)
	}
	if sliu.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionlineitem.CouponAssociationsTable,
			Columns: []string{subscriptionlineitem.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sliu.mutation.RemovedCouponAssociationsIDs(); len(nodes) > 0 && !sliu.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionlineitem.CouponAssociationsTable,
			Columns: []string{subscriptionlineitem.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sliu.mutation.CouponAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionlineitem.CouponAssociationsTable,
			Columns: []string{subscriptionlineitem.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sliu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionlineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sliu.mutation.done = true
	return n, nil
}

// SubscriptionLineItemUpdateOne is the builder for updating a single SubscriptionLineItem entity.
type SubscriptionLineItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionLineItemMutation
}

// SetStatus sets the "status" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetStatus(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetStatus(s)
	return sliuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableStatus(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetStatus(*s)
	}
	return sliuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetUpdatedAt(t)
	return sliuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetUpdatedBy(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetUpdatedBy(s)
	return sliuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableUpdatedBy(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetUpdatedBy(*s)
	}
	return sliuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearUpdatedBy() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearUpdatedBy()
	return sliuo
}

// SetPlanID sets the "plan_id" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetPlanID(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetPlanID(s)
	return sliuo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillablePlanID(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetPlanID(*s)
	}
	return sliuo
}

// ClearPlanID clears the value of the "plan_id" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearPlanID() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearPlanID()
	return sliuo
}

// SetPlanDisplayName sets the "plan_display_name" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetPlanDisplayName(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetPlanDisplayName(s)
	return sliuo
}

// SetNillablePlanDisplayName sets the "plan_display_name" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillablePlanDisplayName(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetPlanDisplayName(*s)
	}
	return sliuo
}

// ClearPlanDisplayName clears the value of the "plan_display_name" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearPlanDisplayName() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearPlanDisplayName()
	return sliuo
}

// SetPriceID sets the "price_id" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetPriceID(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetPriceID(s)
	return sliuo
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillablePriceID(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetPriceID(*s)
	}
	return sliuo
}

// SetPriceType sets the "price_type" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetPriceType(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetPriceType(s)
	return sliuo
}

// SetNillablePriceType sets the "price_type" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillablePriceType(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetPriceType(*s)
	}
	return sliuo
}

// ClearPriceType clears the value of the "price_type" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearPriceType() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearPriceType()
	return sliuo
}

// SetMeterID sets the "meter_id" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetMeterID(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetMeterID(s)
	return sliuo
}

// SetNillableMeterID sets the "meter_id" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableMeterID(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetMeterID(*s)
	}
	return sliuo
}

// ClearMeterID clears the value of the "meter_id" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearMeterID() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearMeterID()
	return sliuo
}

// SetMeterDisplayName sets the "meter_display_name" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetMeterDisplayName(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetMeterDisplayName(s)
	return sliuo
}

// SetNillableMeterDisplayName sets the "meter_display_name" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableMeterDisplayName(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetMeterDisplayName(*s)
	}
	return sliuo
}

// ClearMeterDisplayName clears the value of the "meter_display_name" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearMeterDisplayName() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearMeterDisplayName()
	return sliuo
}

// SetPriceUnitID sets the "price_unit_id" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetPriceUnitID(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetPriceUnitID(s)
	return sliuo
}

// SetNillablePriceUnitID sets the "price_unit_id" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillablePriceUnitID(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetPriceUnitID(*s)
	}
	return sliuo
}

// ClearPriceUnitID clears the value of the "price_unit_id" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearPriceUnitID() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearPriceUnitID()
	return sliuo
}

// SetPriceUnit sets the "price_unit" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetPriceUnit(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetPriceUnit(s)
	return sliuo
}

// SetNillablePriceUnit sets the "price_unit" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillablePriceUnit(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetPriceUnit(*s)
	}
	return sliuo
}

// ClearPriceUnit clears the value of the "price_unit" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearPriceUnit() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearPriceUnit()
	return sliuo
}

// SetDisplayName sets the "display_name" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetDisplayName(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetDisplayName(s)
	return sliuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableDisplayName(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetDisplayName(*s)
	}
	return sliuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearDisplayName() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearDisplayName()
	return sliuo
}

// SetQuantity sets the "quantity" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetQuantity(d decimal.Decimal) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetQuantity(d)
	return sliuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableQuantity(d *decimal.Decimal) *SubscriptionLineItemUpdateOne {
	if d != nil {
		sliuo.SetQuantity(*d)
	}
	return sliuo
}

// SetCurrency sets the "currency" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetCurrency(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetCurrency(s)
	return sliuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableCurrency(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetCurrency(*s)
	}
	return sliuo
}

// SetBillingPeriod sets the "billing_period" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetBillingPeriod(s string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetBillingPeriod(s)
	return sliuo
}

// SetNillableBillingPeriod sets the "billing_period" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableBillingPeriod(s *string) *SubscriptionLineItemUpdateOne {
	if s != nil {
		sliuo.SetBillingPeriod(*s)
	}
	return sliuo
}

// SetTrialPeriod sets the "trial_period" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetTrialPeriod(i int) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ResetTrialPeriod()
	sliuo.mutation.SetTrialPeriod(i)
	return sliuo
}

// SetNillableTrialPeriod sets the "trial_period" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableTrialPeriod(i *int) *SubscriptionLineItemUpdateOne {
	if i != nil {
		sliuo.SetTrialPeriod(*i)
	}
	return sliuo
}

// AddTrialPeriod adds i to the "trial_period" field.
func (sliuo *SubscriptionLineItemUpdateOne) AddTrialPeriod(i int) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.AddTrialPeriod(i)
	return sliuo
}

// SetStartDate sets the "start_date" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetStartDate(t time.Time) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetStartDate(t)
	return sliuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableStartDate(t *time.Time) *SubscriptionLineItemUpdateOne {
	if t != nil {
		sliuo.SetStartDate(*t)
	}
	return sliuo
}

// ClearStartDate clears the value of the "start_date" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearStartDate() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearStartDate()
	return sliuo
}

// SetEndDate sets the "end_date" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetEndDate(t time.Time) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetEndDate(t)
	return sliuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sliuo *SubscriptionLineItemUpdateOne) SetNillableEndDate(t *time.Time) *SubscriptionLineItemUpdateOne {
	if t != nil {
		sliuo.SetEndDate(*t)
	}
	return sliuo
}

// ClearEndDate clears the value of the "end_date" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearEndDate() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearEndDate()
	return sliuo
}

// SetMetadata sets the "metadata" field.
func (sliuo *SubscriptionLineItemUpdateOne) SetMetadata(m map[string]string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.SetMetadata(m)
	return sliuo
}

// ClearMetadata clears the value of the "metadata" field.
func (sliuo *SubscriptionLineItemUpdateOne) ClearMetadata() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearMetadata()
	return sliuo
}

// AddCouponAssociationIDs adds the "coupon_associations" edge to the CouponAssociation entity by IDs.
func (sliuo *SubscriptionLineItemUpdateOne) AddCouponAssociationIDs(ids ...string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.AddCouponAssociationIDs(ids...)
	return sliuo
}

// AddCouponAssociations adds the "coupon_associations" edges to the CouponAssociation entity.
func (sliuo *SubscriptionLineItemUpdateOne) AddCouponAssociations(c ...*CouponAssociation) *SubscriptionLineItemUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sliuo.AddCouponAssociationIDs(ids...)
}

// Mutation returns the SubscriptionLineItemMutation object of the builder.
func (sliuo *SubscriptionLineItemUpdateOne) Mutation() *SubscriptionLineItemMutation {
	return sliuo.mutation
}

// ClearCouponAssociations clears all "coupon_associations" edges to the CouponAssociation entity.
func (sliuo *SubscriptionLineItemUpdateOne) ClearCouponAssociations() *SubscriptionLineItemUpdateOne {
	sliuo.mutation.ClearCouponAssociations()
	return sliuo
}

// RemoveCouponAssociationIDs removes the "coupon_associations" edge to CouponAssociation entities by IDs.
func (sliuo *SubscriptionLineItemUpdateOne) RemoveCouponAssociationIDs(ids ...string) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.RemoveCouponAssociationIDs(ids...)
	return sliuo
}

// RemoveCouponAssociations removes "coupon_associations" edges to CouponAssociation entities.
func (sliuo *SubscriptionLineItemUpdateOne) RemoveCouponAssociations(c ...*CouponAssociation) *SubscriptionLineItemUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sliuo.RemoveCouponAssociationIDs(ids...)
}

// Where appends a list predicates to the SubscriptionLineItemUpdate builder.
func (sliuo *SubscriptionLineItemUpdateOne) Where(ps ...predicate.SubscriptionLineItem) *SubscriptionLineItemUpdateOne {
	sliuo.mutation.Where(ps...)
	return sliuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sliuo *SubscriptionLineItemUpdateOne) Select(field string, fields ...string) *SubscriptionLineItemUpdateOne {
	sliuo.fields = append([]string{field}, fields...)
	return sliuo
}

// Save executes the query and returns the updated SubscriptionLineItem entity.
func (sliuo *SubscriptionLineItemUpdateOne) Save(ctx context.Context) (*SubscriptionLineItem, error) {
	sliuo.defaults()
	return withHooks(ctx, sliuo.sqlSave, sliuo.mutation, sliuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sliuo *SubscriptionLineItemUpdateOne) SaveX(ctx context.Context) *SubscriptionLineItem {
	node, err := sliuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sliuo *SubscriptionLineItemUpdateOne) Exec(ctx context.Context) error {
	_, err := sliuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sliuo *SubscriptionLineItemUpdateOne) ExecX(ctx context.Context) {
	if err := sliuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sliuo *SubscriptionLineItemUpdateOne) defaults() {
	if _, ok := sliuo.mutation.UpdatedAt(); !ok {
		v := subscriptionlineitem.UpdateDefaultUpdatedAt()
		sliuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sliuo *SubscriptionLineItemUpdateOne) check() error {
	if v, ok := sliuo.mutation.PriceID(); ok {
		if err := subscriptionlineitem.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.price_id": %w`, err)}
		}
	}
	if v, ok := sliuo.mutation.Currency(); ok {
		if err := subscriptionlineitem.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.currency": %w`, err)}
		}
	}
	if v, ok := sliuo.mutation.BillingPeriod(); ok {
		if err := subscriptionlineitem.BillingPeriodValidator(v); err != nil {
			return &ValidationError{Name: "billing_period", err: fmt.Errorf(`ent: validator failed for field "SubscriptionLineItem.billing_period": %w`, err)}
		}
	}
	if sliuo.mutation.SubscriptionCleared() && len(sliuo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionLineItem.subscription"`)
	}
	return nil
}

func (sliuo *SubscriptionLineItemUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionLineItem, err error) {
	if err := sliuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionlineitem.Table, subscriptionlineitem.Columns, sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString))
	id, ok := sliuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionLineItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sliuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionlineitem.FieldID)
		for _, f := range fields {
			if !subscriptionlineitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionlineitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sliuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sliuo.mutation.Status(); ok {
		_spec.SetField(subscriptionlineitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := sliuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionlineitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if sliuo.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionlineitem.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sliuo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionlineitem.FieldUpdatedBy, field.TypeString, value)
	}
	if sliuo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionlineitem.FieldUpdatedBy, field.TypeString)
	}
	if sliuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sliuo.mutation.PlanID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPlanID, field.TypeString, value)
	}
	if sliuo.mutation.PlanIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPlanID, field.TypeString)
	}
	if value, ok := sliuo.mutation.PlanDisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldPlanDisplayName, field.TypeString, value)
	}
	if sliuo.mutation.PlanDisplayNameCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPlanDisplayName, field.TypeString)
	}
	if value, ok := sliuo.mutation.PriceID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceID, field.TypeString, value)
	}
	if value, ok := sliuo.mutation.PriceType(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceType, field.TypeString, value)
	}
	if sliuo.mutation.PriceTypeCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPriceType, field.TypeString)
	}
	if value, ok := sliuo.mutation.MeterID(); ok {
		_spec.SetField(subscriptionlineitem.FieldMeterID, field.TypeString, value)
	}
	if sliuo.mutation.MeterIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldMeterID, field.TypeString)
	}
	if value, ok := sliuo.mutation.MeterDisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldMeterDisplayName, field.TypeString, value)
	}
	if sliuo.mutation.MeterDisplayNameCleared() {
		_spec.ClearField(subscriptionlineitem.FieldMeterDisplayName, field.TypeString)
	}
	if value, ok := sliuo.mutation.PriceUnitID(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceUnitID, field.TypeString, value)
	}
	if sliuo.mutation.PriceUnitIDCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPriceUnitID, field.TypeString)
	}
	if value, ok := sliuo.mutation.PriceUnit(); ok {
		_spec.SetField(subscriptionlineitem.FieldPriceUnit, field.TypeString, value)
	}
	if sliuo.mutation.PriceUnitCleared() {
		_spec.ClearField(subscriptionlineitem.FieldPriceUnit, field.TypeString)
	}
	if value, ok := sliuo.mutation.DisplayName(); ok {
		_spec.SetField(subscriptionlineitem.FieldDisplayName, field.TypeString, value)
	}
	if sliuo.mutation.DisplayNameCleared() {
		_spec.ClearField(subscriptionlineitem.FieldDisplayName, field.TypeString)
	}
	if value, ok := sliuo.mutation.Quantity(); ok {
		_spec.SetField(subscriptionlineitem.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := sliuo.mutation.Currency(); ok {
		_spec.SetField(subscriptionlineitem.FieldCurrency, field.TypeString, value)
	}
	if value, ok := sliuo.mutation.BillingPeriod(); ok {
		_spec.SetField(subscriptionlineitem.FieldBillingPeriod, field.TypeString, value)
	}
	if sliuo.mutation.InvoiceCadenceCleared() {
		_spec.ClearField(subscriptionlineitem.FieldInvoiceCadence, field.TypeString)
	}
	if value, ok := sliuo.mutation.TrialPeriod(); ok {
		_spec.SetField(subscriptionlineitem.FieldTrialPeriod, field.TypeInt, value)
	}
	if value, ok := sliuo.mutation.AddedTrialPeriod(); ok {
		_spec.AddField(subscriptionlineitem.FieldTrialPeriod, field.TypeInt, value)
	}
	if value, ok := sliuo.mutation.StartDate(); ok {
		_spec.SetField(subscriptionlineitem.FieldStartDate, field.TypeTime, value)
	}
	if sliuo.mutation.StartDateCleared() {
		_spec.ClearField(subscriptionlineitem.FieldStartDate, field.TypeTime)
	}
	if value, ok := sliuo.mutation.EndDate(); ok {
		_spec.SetField(subscriptionlineitem.FieldEndDate, field.TypeTime, value)
	}
	if sliuo.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionlineitem.FieldEndDate, field.TypeTime)
	}
	if value, ok := sliuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionlineitem.FieldMetadata, field.TypeJSON, value)
	}
	if sliuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionlineitem.FieldMetadata, field.TypeJSON)
	}
	if sliuo.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionlineitem.CouponAssociationsTable,
			Columns: []string{subscriptionlineitem.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sliuo.mutation.RemovedCouponAssociationsIDs(); len(nodes) > 0 && !sliuo.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionlineitem.CouponAssociationsTable,
			Columns: []string{subscriptionlineitem.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sliuo.mutation.CouponAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionlineitem.CouponAssociationsTable,
			Columns: []string{subscriptionlineitem.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionLineItem{config: sliuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sliuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionlineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sliuo.mutation.done = true
	return _node, nil
}
