// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
)

// SubscriptionLineItemQuery is the builder for querying SubscriptionLineItem entities.
type SubscriptionLineItemQuery struct {
	config
	ctx                    *QueryContext
	order                  []subscriptionlineitem.OrderOption
	inters                 []Interceptor
	predicates             []predicate.SubscriptionLineItem
	withSubscription       *SubscriptionQuery
	withCouponAssociations *CouponAssociationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscriptionLineItemQuery builder.
func (sliq *SubscriptionLineItemQuery) Where(ps ...predicate.SubscriptionLineItem) *SubscriptionLineItemQuery {
	sliq.predicates = append(sliq.predicates, ps...)
	return sliq
}

// Limit the number of records to be returned by this query.
func (sliq *SubscriptionLineItemQuery) Limit(limit int) *SubscriptionLineItemQuery {
	sliq.ctx.Limit = &limit
	return sliq
}

// Offset to start from.
func (sliq *SubscriptionLineItemQuery) Offset(offset int) *SubscriptionLineItemQuery {
	sliq.ctx.Offset = &offset
	return sliq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sliq *SubscriptionLineItemQuery) Unique(unique bool) *SubscriptionLineItemQuery {
	sliq.ctx.Unique = &unique
	return sliq
}

// Order specifies how the records should be ordered.
func (sliq *SubscriptionLineItemQuery) Order(o ...subscriptionlineitem.OrderOption) *SubscriptionLineItemQuery {
	sliq.order = append(sliq.order, o...)
	return sliq
}

// QuerySubscription chains the current query on the "subscription" edge.
func (sliq *SubscriptionLineItemQuery) QuerySubscription() *SubscriptionQuery {
	query := (&SubscriptionClient{config: sliq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sliq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionlineitem.Table, subscriptionlineitem.FieldID, selector),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionlineitem.SubscriptionTable, subscriptionlineitem.SubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(sliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCouponAssociations chains the current query on the "coupon_associations" edge.
func (sliq *SubscriptionLineItemQuery) QueryCouponAssociations() *CouponAssociationQuery {
	query := (&CouponAssociationClient{config: sliq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sliq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionlineitem.Table, subscriptionlineitem.FieldID, selector),
			sqlgraph.To(couponassociation.Table, couponassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionlineitem.CouponAssociationsTable, subscriptionlineitem.CouponAssociationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscriptionLineItem entity from the query.
// Returns a *NotFoundError when no SubscriptionLineItem was found.
func (sliq *SubscriptionLineItemQuery) First(ctx context.Context) (*SubscriptionLineItem, error) {
	nodes, err := sliq.Limit(1).All(setContextOp(ctx, sliq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscriptionlineitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) FirstX(ctx context.Context) *SubscriptionLineItem {
	node, err := sliq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscriptionLineItem ID from the query.
// Returns a *NotFoundError when no SubscriptionLineItem ID was found.
func (sliq *SubscriptionLineItemQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sliq.Limit(1).IDs(setContextOp(ctx, sliq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscriptionlineitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) FirstIDX(ctx context.Context) string {
	id, err := sliq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscriptionLineItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscriptionLineItem entity is found.
// Returns a *NotFoundError when no SubscriptionLineItem entities are found.
func (sliq *SubscriptionLineItemQuery) Only(ctx context.Context) (*SubscriptionLineItem, error) {
	nodes, err := sliq.Limit(2).All(setContextOp(ctx, sliq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscriptionlineitem.Label}
	default:
		return nil, &NotSingularError{subscriptionlineitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) OnlyX(ctx context.Context) *SubscriptionLineItem {
	node, err := sliq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscriptionLineItem ID in the query.
// Returns a *NotSingularError when more than one SubscriptionLineItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (sliq *SubscriptionLineItemQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sliq.Limit(2).IDs(setContextOp(ctx, sliq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscriptionlineitem.Label}
	default:
		err = &NotSingularError{subscriptionlineitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) OnlyIDX(ctx context.Context) string {
	id, err := sliq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscriptionLineItems.
func (sliq *SubscriptionLineItemQuery) All(ctx context.Context) ([]*SubscriptionLineItem, error) {
	ctx = setContextOp(ctx, sliq.ctx, ent.OpQueryAll)
	if err := sliq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscriptionLineItem, *SubscriptionLineItemQuery]()
	return withInterceptors[[]*SubscriptionLineItem](ctx, sliq, qr, sliq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) AllX(ctx context.Context) []*SubscriptionLineItem {
	nodes, err := sliq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscriptionLineItem IDs.
func (sliq *SubscriptionLineItemQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sliq.ctx.Unique == nil && sliq.path != nil {
		sliq.Unique(true)
	}
	ctx = setContextOp(ctx, sliq.ctx, ent.OpQueryIDs)
	if err = sliq.Select(subscriptionlineitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) IDsX(ctx context.Context) []string {
	ids, err := sliq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sliq *SubscriptionLineItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sliq.ctx, ent.OpQueryCount)
	if err := sliq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sliq, querierCount[*SubscriptionLineItemQuery](), sliq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) CountX(ctx context.Context) int {
	count, err := sliq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sliq *SubscriptionLineItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sliq.ctx, ent.OpQueryExist)
	switch _, err := sliq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sliq *SubscriptionLineItemQuery) ExistX(ctx context.Context) bool {
	exist, err := sliq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscriptionLineItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sliq *SubscriptionLineItemQuery) Clone() *SubscriptionLineItemQuery {
	if sliq == nil {
		return nil
	}
	return &SubscriptionLineItemQuery{
		config:                 sliq.config,
		ctx:                    sliq.ctx.Clone(),
		order:                  append([]subscriptionlineitem.OrderOption{}, sliq.order...),
		inters:                 append([]Interceptor{}, sliq.inters...),
		predicates:             append([]predicate.SubscriptionLineItem{}, sliq.predicates...),
		withSubscription:       sliq.withSubscription.Clone(),
		withCouponAssociations: sliq.withCouponAssociations.Clone(),
		// clone intermediate query.
		sql:  sliq.sql.Clone(),
		path: sliq.path,
	}
}

// WithSubscription tells the query-builder to eager-load the nodes that are connected to
// the "subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (sliq *SubscriptionLineItemQuery) WithSubscription(opts ...func(*SubscriptionQuery)) *SubscriptionLineItemQuery {
	query := (&SubscriptionClient{config: sliq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sliq.withSubscription = query
	return sliq
}

// WithCouponAssociations tells the query-builder to eager-load the nodes that are connected to
// the "coupon_associations" edge. The optional arguments are used to configure the query builder of the edge.
func (sliq *SubscriptionLineItemQuery) WithCouponAssociations(opts ...func(*CouponAssociationQuery)) *SubscriptionLineItemQuery {
	query := (&CouponAssociationClient{config: sliq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sliq.withCouponAssociations = query
	return sliq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscriptionLineItem.Query().
//		GroupBy(subscriptionlineitem.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sliq *SubscriptionLineItemQuery) GroupBy(field string, fields ...string) *SubscriptionLineItemGroupBy {
	sliq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscriptionLineItemGroupBy{build: sliq}
	grbuild.flds = &sliq.ctx.Fields
	grbuild.label = subscriptionlineitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//	}
//
//	client.SubscriptionLineItem.Query().
//		Select(subscriptionlineitem.FieldTenantID).
//		Scan(ctx, &v)
func (sliq *SubscriptionLineItemQuery) Select(fields ...string) *SubscriptionLineItemSelect {
	sliq.ctx.Fields = append(sliq.ctx.Fields, fields...)
	sbuild := &SubscriptionLineItemSelect{SubscriptionLineItemQuery: sliq}
	sbuild.label = subscriptionlineitem.Label
	sbuild.flds, sbuild.scan = &sliq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscriptionLineItemSelect configured with the given aggregations.
func (sliq *SubscriptionLineItemQuery) Aggregate(fns ...AggregateFunc) *SubscriptionLineItemSelect {
	return sliq.Select().Aggregate(fns...)
}

func (sliq *SubscriptionLineItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sliq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sliq); err != nil {
				return err
			}
		}
	}
	for _, f := range sliq.ctx.Fields {
		if !subscriptionlineitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sliq.path != nil {
		prev, err := sliq.path(ctx)
		if err != nil {
			return err
		}
		sliq.sql = prev
	}
	return nil
}

func (sliq *SubscriptionLineItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscriptionLineItem, error) {
	var (
		nodes       = []*SubscriptionLineItem{}
		_spec       = sliq.querySpec()
		loadedTypes = [2]bool{
			sliq.withSubscription != nil,
			sliq.withCouponAssociations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscriptionLineItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscriptionLineItem{config: sliq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sliq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sliq.withSubscription; query != nil {
		if err := sliq.loadSubscription(ctx, query, nodes, nil,
			func(n *SubscriptionLineItem, e *Subscription) { n.Edges.Subscription = e }); err != nil {
			return nil, err
		}
	}
	if query := sliq.withCouponAssociations; query != nil {
		if err := sliq.loadCouponAssociations(ctx, query, nodes,
			func(n *SubscriptionLineItem) { n.Edges.CouponAssociations = []*CouponAssociation{} },
			func(n *SubscriptionLineItem, e *CouponAssociation) {
				n.Edges.CouponAssociations = append(n.Edges.CouponAssociations, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sliq *SubscriptionLineItemQuery) loadSubscription(ctx context.Context, query *SubscriptionQuery, nodes []*SubscriptionLineItem, init func(*SubscriptionLineItem), assign func(*SubscriptionLineItem, *Subscription)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionLineItem)
	for i := range nodes {
		fk := nodes[i].SubscriptionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscription.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sliq *SubscriptionLineItemQuery) loadCouponAssociations(ctx context.Context, query *CouponAssociationQuery, nodes []*SubscriptionLineItem, init func(*SubscriptionLineItem), assign func(*SubscriptionLineItem, *CouponAssociation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*SubscriptionLineItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(couponassociation.FieldSubscriptionLineItemID)
	}
	query.Where(predicate.CouponAssociation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subscriptionlineitem.CouponAssociationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubscriptionLineItemID
		if fk == nil {
			return fmt.Errorf(`foreign-key "subscription_line_item_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "subscription_line_item_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sliq *SubscriptionLineItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sliq.querySpec()
	_spec.Node.Columns = sliq.ctx.Fields
	if len(sliq.ctx.Fields) > 0 {
		_spec.Unique = sliq.ctx.Unique != nil && *sliq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sliq.driver, _spec)
}

func (sliq *SubscriptionLineItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subscriptionlineitem.Table, subscriptionlineitem.Columns, sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString))
	_spec.From = sliq.sql
	if unique := sliq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sliq.path != nil {
		_spec.Unique = true
	}
	if fields := sliq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionlineitem.FieldID)
		for i := range fields {
			if fields[i] != subscriptionlineitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sliq.withSubscription != nil {
			_spec.Node.AddColumnOnce(subscriptionlineitem.FieldSubscriptionID)
		}
	}
	if ps := sliq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sliq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sliq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sliq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sliq *SubscriptionLineItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sliq.driver.Dialect())
	t1 := builder.Table(subscriptionlineitem.Table)
	columns := sliq.ctx.Fields
	if len(columns) == 0 {
		columns = subscriptionlineitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sliq.sql != nil {
		selector = sliq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sliq.ctx.Unique != nil && *sliq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sliq.predicates {
		p(selector)
	}
	for _, p := range sliq.order {
		p(selector)
	}
	if offset := sliq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sliq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SubscriptionLineItemGroupBy is the group-by builder for SubscriptionLineItem entities.
type SubscriptionLineItemGroupBy struct {
	selector
	build *SubscriptionLineItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sligb *SubscriptionLineItemGroupBy) Aggregate(fns ...AggregateFunc) *SubscriptionLineItemGroupBy {
	sligb.fns = append(sligb.fns, fns...)
	return sligb
}

// Scan applies the selector query and scans the result into the given value.
func (sligb *SubscriptionLineItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sligb.build.ctx, ent.OpQueryGroupBy)
	if err := sligb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionLineItemQuery, *SubscriptionLineItemGroupBy](ctx, sligb.build, sligb, sligb.build.inters, v)
}

func (sligb *SubscriptionLineItemGroupBy) sqlScan(ctx context.Context, root *SubscriptionLineItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sligb.fns))
	for _, fn := range sligb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sligb.flds)+len(sligb.fns))
		for _, f := range *sligb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sligb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sligb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscriptionLineItemSelect is the builder for selecting fields of SubscriptionLineItem entities.
type SubscriptionLineItemSelect struct {
	*SubscriptionLineItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (slis *SubscriptionLineItemSelect) Aggregate(fns ...AggregateFunc) *SubscriptionLineItemSelect {
	slis.fns = append(slis.fns, fns...)
	return slis
}

// Scan applies the selector query and scans the result into the given value.
func (slis *SubscriptionLineItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, slis.ctx, ent.OpQuerySelect)
	if err := slis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionLineItemQuery, *SubscriptionLineItemSelect](ctx, slis.SubscriptionLineItemQuery, slis, slis.inters, v)
}

func (slis *SubscriptionLineItemSelect) sqlScan(ctx context.Context, root *SubscriptionLineItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(slis.fns))
	for _, fn := range slis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*slis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := slis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
