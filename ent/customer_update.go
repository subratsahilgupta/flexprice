// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/customer"
	"github.com/flexprice/flexprice/ent/predicate"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CustomerUpdate) SetStatus(s string) *CustomerUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableStatus(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CustomerUpdate) SetUpdatedBy(s string) *CustomerUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableUpdatedBy(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CustomerUpdate) ClearUpdatedBy() *CustomerUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetExternalID sets the "external_id" field.
func (cu *CustomerUpdate) SetExternalID(s string) *CustomerUpdate {
	cu.mutation.SetExternalID(s)
	return cu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableExternalID(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetExternalID(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetEmail sets the "email" field.
func (cu *CustomerUpdate) SetEmail(s string) *CustomerUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableEmail(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *CustomerUpdate) ClearEmail() *CustomerUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetAddressLine1 sets the "address_line1" field.
func (cu *CustomerUpdate) SetAddressLine1(s string) *CustomerUpdate {
	cu.mutation.SetAddressLine1(s)
	return cu
}

// SetNillableAddressLine1 sets the "address_line1" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressLine1(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressLine1(*s)
	}
	return cu
}

// ClearAddressLine1 clears the value of the "address_line1" field.
func (cu *CustomerUpdate) ClearAddressLine1() *CustomerUpdate {
	cu.mutation.ClearAddressLine1()
	return cu
}

// SetAddressLine2 sets the "address_line2" field.
func (cu *CustomerUpdate) SetAddressLine2(s string) *CustomerUpdate {
	cu.mutation.SetAddressLine2(s)
	return cu
}

// SetNillableAddressLine2 sets the "address_line2" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressLine2(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressLine2(*s)
	}
	return cu
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (cu *CustomerUpdate) ClearAddressLine2() *CustomerUpdate {
	cu.mutation.ClearAddressLine2()
	return cu
}

// SetAddressCity sets the "address_city" field.
func (cu *CustomerUpdate) SetAddressCity(s string) *CustomerUpdate {
	cu.mutation.SetAddressCity(s)
	return cu
}

// SetNillableAddressCity sets the "address_city" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressCity(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressCity(*s)
	}
	return cu
}

// ClearAddressCity clears the value of the "address_city" field.
func (cu *CustomerUpdate) ClearAddressCity() *CustomerUpdate {
	cu.mutation.ClearAddressCity()
	return cu
}

// SetAddressState sets the "address_state" field.
func (cu *CustomerUpdate) SetAddressState(s string) *CustomerUpdate {
	cu.mutation.SetAddressState(s)
	return cu
}

// SetNillableAddressState sets the "address_state" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressState(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressState(*s)
	}
	return cu
}

// ClearAddressState clears the value of the "address_state" field.
func (cu *CustomerUpdate) ClearAddressState() *CustomerUpdate {
	cu.mutation.ClearAddressState()
	return cu
}

// SetAddressPostalCode sets the "address_postal_code" field.
func (cu *CustomerUpdate) SetAddressPostalCode(s string) *CustomerUpdate {
	cu.mutation.SetAddressPostalCode(s)
	return cu
}

// SetNillableAddressPostalCode sets the "address_postal_code" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressPostalCode(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressPostalCode(*s)
	}
	return cu
}

// ClearAddressPostalCode clears the value of the "address_postal_code" field.
func (cu *CustomerUpdate) ClearAddressPostalCode() *CustomerUpdate {
	cu.mutation.ClearAddressPostalCode()
	return cu
}

// SetAddressCountry sets the "address_country" field.
func (cu *CustomerUpdate) SetAddressCountry(s string) *CustomerUpdate {
	cu.mutation.SetAddressCountry(s)
	return cu
}

// SetNillableAddressCountry sets the "address_country" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddressCountry(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddressCountry(*s)
	}
	return cu
}

// ClearAddressCountry clears the value of the "address_country" field.
func (cu *CustomerUpdate) ClearAddressCountry() *CustomerUpdate {
	cu.mutation.ClearAddressCountry()
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *CustomerUpdate) SetMetadata(m map[string]string) *CustomerUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *CustomerUpdate) ClearMetadata() *CustomerUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// SetAutoCancelOnUnpaid sets the "auto_cancel_on_unpaid" field.
func (cu *CustomerUpdate) SetAutoCancelOnUnpaid(b bool) *CustomerUpdate {
	cu.mutation.SetAutoCancelOnUnpaid(b)
	return cu
}

// SetNillableAutoCancelOnUnpaid sets the "auto_cancel_on_unpaid" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAutoCancelOnUnpaid(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetAutoCancelOnUnpaid(*b)
	}
	return cu
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.ExternalID(); ok {
		if err := customer.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Customer.external_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(customer.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(customer.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(customer.FieldUpdatedBy, field.TypeString)
	}
	if cu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(customer.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cu.mutation.ExternalID(); ok {
		_spec.SetField(customer.FieldExternalID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if cu.mutation.EmailCleared() {
		_spec.ClearField(customer.FieldEmail, field.TypeString)
	}
	if value, ok := cu.mutation.AddressLine1(); ok {
		_spec.SetField(customer.FieldAddressLine1, field.TypeString, value)
	}
	if cu.mutation.AddressLine1Cleared() {
		_spec.ClearField(customer.FieldAddressLine1, field.TypeString)
	}
	if value, ok := cu.mutation.AddressLine2(); ok {
		_spec.SetField(customer.FieldAddressLine2, field.TypeString, value)
	}
	if cu.mutation.AddressLine2Cleared() {
		_spec.ClearField(customer.FieldAddressLine2, field.TypeString)
	}
	if value, ok := cu.mutation.AddressCity(); ok {
		_spec.SetField(customer.FieldAddressCity, field.TypeString, value)
	}
	if cu.mutation.AddressCityCleared() {
		_spec.ClearField(customer.FieldAddressCity, field.TypeString)
	}
	if value, ok := cu.mutation.AddressState(); ok {
		_spec.SetField(customer.FieldAddressState, field.TypeString, value)
	}
	if cu.mutation.AddressStateCleared() {
		_spec.ClearField(customer.FieldAddressState, field.TypeString)
	}
	if value, ok := cu.mutation.AddressPostalCode(); ok {
		_spec.SetField(customer.FieldAddressPostalCode, field.TypeString, value)
	}
	if cu.mutation.AddressPostalCodeCleared() {
		_spec.ClearField(customer.FieldAddressPostalCode, field.TypeString)
	}
	if value, ok := cu.mutation.AddressCountry(); ok {
		_spec.SetField(customer.FieldAddressCountry, field.TypeString, value)
	}
	if cu.mutation.AddressCountryCleared() {
		_spec.ClearField(customer.FieldAddressCountry, field.TypeString)
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cu.mutation.AutoCancelOnUnpaid(); ok {
		_spec.SetField(customer.FieldAutoCancelOnUnpaid, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetStatus sets the "status" field.
func (cuo *CustomerUpdateOne) SetStatus(s string) *CustomerUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableStatus(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CustomerUpdateOne) SetUpdatedBy(s string) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableUpdatedBy(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CustomerUpdateOne) ClearUpdatedBy() *CustomerUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetExternalID sets the "external_id" field.
func (cuo *CustomerUpdateOne) SetExternalID(s string) *CustomerUpdateOne {
	cuo.mutation.SetExternalID(s)
	return cuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableExternalID(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetExternalID(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CustomerUpdateOne) SetEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableEmail(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *CustomerUpdateOne) ClearEmail() *CustomerUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetAddressLine1 sets the "address_line1" field.
func (cuo *CustomerUpdateOne) SetAddressLine1(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressLine1(s)
	return cuo
}

// SetNillableAddressLine1 sets the "address_line1" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressLine1(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressLine1(*s)
	}
	return cuo
}

// ClearAddressLine1 clears the value of the "address_line1" field.
func (cuo *CustomerUpdateOne) ClearAddressLine1() *CustomerUpdateOne {
	cuo.mutation.ClearAddressLine1()
	return cuo
}

// SetAddressLine2 sets the "address_line2" field.
func (cuo *CustomerUpdateOne) SetAddressLine2(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressLine2(s)
	return cuo
}

// SetNillableAddressLine2 sets the "address_line2" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressLine2(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressLine2(*s)
	}
	return cuo
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (cuo *CustomerUpdateOne) ClearAddressLine2() *CustomerUpdateOne {
	cuo.mutation.ClearAddressLine2()
	return cuo
}

// SetAddressCity sets the "address_city" field.
func (cuo *CustomerUpdateOne) SetAddressCity(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressCity(s)
	return cuo
}

// SetNillableAddressCity sets the "address_city" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressCity(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressCity(*s)
	}
	return cuo
}

// ClearAddressCity clears the value of the "address_city" field.
func (cuo *CustomerUpdateOne) ClearAddressCity() *CustomerUpdateOne {
	cuo.mutation.ClearAddressCity()
	return cuo
}

// SetAddressState sets the "address_state" field.
func (cuo *CustomerUpdateOne) SetAddressState(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressState(s)
	return cuo
}

// SetNillableAddressState sets the "address_state" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressState(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressState(*s)
	}
	return cuo
}

// ClearAddressState clears the value of the "address_state" field.
func (cuo *CustomerUpdateOne) ClearAddressState() *CustomerUpdateOne {
	cuo.mutation.ClearAddressState()
	return cuo
}

// SetAddressPostalCode sets the "address_postal_code" field.
func (cuo *CustomerUpdateOne) SetAddressPostalCode(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressPostalCode(s)
	return cuo
}

// SetNillableAddressPostalCode sets the "address_postal_code" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressPostalCode(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressPostalCode(*s)
	}
	return cuo
}

// ClearAddressPostalCode clears the value of the "address_postal_code" field.
func (cuo *CustomerUpdateOne) ClearAddressPostalCode() *CustomerUpdateOne {
	cuo.mutation.ClearAddressPostalCode()
	return cuo
}

// SetAddressCountry sets the "address_country" field.
func (cuo *CustomerUpdateOne) SetAddressCountry(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddressCountry(s)
	return cuo
}

// SetNillableAddressCountry sets the "address_country" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddressCountry(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddressCountry(*s)
	}
	return cuo
}

// ClearAddressCountry clears the value of the "address_country" field.
func (cuo *CustomerUpdateOne) ClearAddressCountry() *CustomerUpdateOne {
	cuo.mutation.ClearAddressCountry()
	return cuo
}

// SetMetadata sets the "metadata" field.
func (cuo *CustomerUpdateOne) SetMetadata(m map[string]string) *CustomerUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *CustomerUpdateOne) ClearMetadata() *CustomerUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// SetAutoCancelOnUnpaid sets the "auto_cancel_on_unpaid" field.
func (cuo *CustomerUpdateOne) SetAutoCancelOnUnpaid(b bool) *CustomerUpdateOne {
	cuo.mutation.SetAutoCancelOnUnpaid(b)
	return cuo
}

// SetNillableAutoCancelOnUnpaid sets the "auto_cancel_on_unpaid" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAutoCancelOnUnpaid(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetAutoCancelOnUnpaid(*b)
	}
	return cuo
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.ExternalID(); ok {
		if err := customer.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Customer.external_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(customer.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(customer.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(customer.FieldUpdatedBy, field.TypeString)
	}
	if cuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(customer.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cuo.mutation.ExternalID(); ok {
		_spec.SetField(customer.FieldExternalID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if cuo.mutation.EmailCleared() {
		_spec.ClearField(customer.FieldEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.AddressLine1(); ok {
		_spec.SetField(customer.FieldAddressLine1, field.TypeString, value)
	}
	if cuo.mutation.AddressLine1Cleared() {
		_spec.ClearField(customer.FieldAddressLine1, field.TypeString)
	}
	if value, ok := cuo.mutation.AddressLine2(); ok {
		_spec.SetField(customer.FieldAddressLine2, field.TypeString, value)
	}
	if cuo.mutation.AddressLine2Cleared() {
		_spec.ClearField(customer.FieldAddressLine2, field.TypeString)
	}
	if value, ok := cuo.mutation.AddressCity(); ok {
		_spec.SetField(customer.FieldAddressCity, field.TypeString, value)
	}
	if cuo.mutation.AddressCityCleared() {
		_spec.ClearField(customer.FieldAddressCity, field.TypeString)
	}
	if value, ok := cuo.mutation.AddressState(); ok {
		_spec.SetField(customer.FieldAddressState, field.TypeString, value)
	}
	if cuo.mutation.AddressStateCleared() {
		_spec.ClearField(customer.FieldAddressState, field.TypeString)
	}
	if value, ok := cuo.mutation.AddressPostalCode(); ok {
		_spec.SetField(customer.FieldAddressPostalCode, field.TypeString, value)
	}
	if cuo.mutation.AddressPostalCodeCleared() {
		_spec.ClearField(customer.FieldAddressPostalCode, field.TypeString)
	}
	if value, ok := cuo.mutation.AddressCountry(); ok {
		_spec.SetField(customer.FieldAddressCountry, field.TypeString, value)
	}
	if cuo.mutation.AddressCountryCleared() {
		_spec.ClearField(customer.FieldAddressCountry, field.TypeString)
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cuo.mutation.AutoCancelOnUnpaid(); ok {
		_spec.SetField(customer.FieldAutoCancelOnUnpaid, field.TypeBool, value)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
