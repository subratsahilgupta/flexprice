// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/schema"
)

// MeterCreate is the builder for creating a Meter entity.
type MeterCreate struct {
	config
	mutation *MeterMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (mc *MeterCreate) SetTenantID(s string) *MeterCreate {
	mc.mutation.SetTenantID(s)
	return mc
}

// SetStatus sets the "status" field.
func (mc *MeterCreate) SetStatus(s string) *MeterCreate {
	mc.mutation.SetStatus(s)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MeterCreate) SetNillableStatus(s *string) *MeterCreate {
	if s != nil {
		mc.SetStatus(*s)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MeterCreate) SetCreatedAt(t time.Time) *MeterCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MeterCreate) SetNillableCreatedAt(t *time.Time) *MeterCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MeterCreate) SetUpdatedAt(t time.Time) *MeterCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MeterCreate) SetNillableUpdatedAt(t *time.Time) *MeterCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetCreatedBy sets the "created_by" field.
func (mc *MeterCreate) SetCreatedBy(s string) *MeterCreate {
	mc.mutation.SetCreatedBy(s)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *MeterCreate) SetNillableCreatedBy(s *string) *MeterCreate {
	if s != nil {
		mc.SetCreatedBy(*s)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *MeterCreate) SetUpdatedBy(s string) *MeterCreate {
	mc.mutation.SetUpdatedBy(s)
	return mc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mc *MeterCreate) SetNillableUpdatedBy(s *string) *MeterCreate {
	if s != nil {
		mc.SetUpdatedBy(*s)
	}
	return mc
}

// SetEnvironmentID sets the "environment_id" field.
func (mc *MeterCreate) SetEnvironmentID(s string) *MeterCreate {
	mc.mutation.SetEnvironmentID(s)
	return mc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (mc *MeterCreate) SetNillableEnvironmentID(s *string) *MeterCreate {
	if s != nil {
		mc.SetEnvironmentID(*s)
	}
	return mc
}

// SetEventName sets the "event_name" field.
func (mc *MeterCreate) SetEventName(s string) *MeterCreate {
	mc.mutation.SetEventName(s)
	return mc
}

// SetName sets the "name" field.
func (mc *MeterCreate) SetName(s string) *MeterCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetAggregation sets the "aggregation" field.
func (mc *MeterCreate) SetAggregation(sa schema.MeterAggregation) *MeterCreate {
	mc.mutation.SetAggregation(sa)
	return mc
}

// SetNillableAggregation sets the "aggregation" field if the given value is not nil.
func (mc *MeterCreate) SetNillableAggregation(sa *schema.MeterAggregation) *MeterCreate {
	if sa != nil {
		mc.SetAggregation(*sa)
	}
	return mc
}

// SetFilters sets the "filters" field.
func (mc *MeterCreate) SetFilters(sf []schema.MeterFilter) *MeterCreate {
	mc.mutation.SetFilters(sf)
	return mc
}

// SetResetUsage sets the "reset_usage" field.
func (mc *MeterCreate) SetResetUsage(s string) *MeterCreate {
	mc.mutation.SetResetUsage(s)
	return mc
}

// SetNillableResetUsage sets the "reset_usage" field if the given value is not nil.
func (mc *MeterCreate) SetNillableResetUsage(s *string) *MeterCreate {
	if s != nil {
		mc.SetResetUsage(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MeterCreate) SetID(s string) *MeterCreate {
	mc.mutation.SetID(s)
	return mc
}

// AddCostsheetIDs adds the "costsheet" edge to the Costsheet entity by IDs.
func (mc *MeterCreate) AddCostsheetIDs(ids ...string) *MeterCreate {
	mc.mutation.AddCostsheetIDs(ids...)
	return mc
}

// AddCostsheet adds the "costsheet" edges to the Costsheet entity.
func (mc *MeterCreate) AddCostsheet(c ...*Costsheet) *MeterCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCostsheetIDs(ids...)
}

// Mutation returns the MeterMutation object of the builder.
func (mc *MeterCreate) Mutation() *MeterMutation {
	return mc.mutation
}

// Save creates the Meter in the database.
func (mc *MeterCreate) Save(ctx context.Context) (*Meter, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MeterCreate) SaveX(ctx context.Context) *Meter {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MeterCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MeterCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MeterCreate) defaults() {
	if _, ok := mc.mutation.Status(); !ok {
		v := meter.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := meter.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := meter.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.EnvironmentID(); !ok {
		v := meter.DefaultEnvironmentID
		mc.mutation.SetEnvironmentID(v)
	}
	if _, ok := mc.mutation.Aggregation(); !ok {
		v := meter.DefaultAggregation
		mc.mutation.SetAggregation(v)
	}
	if _, ok := mc.mutation.Filters(); !ok {
		v := meter.DefaultFilters
		mc.mutation.SetFilters(v)
	}
	if _, ok := mc.mutation.ResetUsage(); !ok {
		v := meter.DefaultResetUsage
		mc.mutation.SetResetUsage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MeterCreate) check() error {
	if _, ok := mc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Meter.tenant_id"`)}
	}
	if v, ok := mc.mutation.TenantID(); ok {
		if err := meter.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Meter.tenant_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Meter.status"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Meter.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Meter.updated_at"`)}
	}
	if _, ok := mc.mutation.EventName(); !ok {
		return &ValidationError{Name: "event_name", err: errors.New(`ent: missing required field "Meter.event_name"`)}
	}
	if v, ok := mc.mutation.EventName(); ok {
		if err := meter.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "Meter.event_name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Meter.name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := meter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Meter.name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Aggregation(); !ok {
		return &ValidationError{Name: "aggregation", err: errors.New(`ent: missing required field "Meter.aggregation"`)}
	}
	if _, ok := mc.mutation.Filters(); !ok {
		return &ValidationError{Name: "filters", err: errors.New(`ent: missing required field "Meter.filters"`)}
	}
	if _, ok := mc.mutation.ResetUsage(); !ok {
		return &ValidationError{Name: "reset_usage", err: errors.New(`ent: missing required field "Meter.reset_usage"`)}
	}
	return nil
}

func (mc *MeterCreate) sqlSave(ctx context.Context) (*Meter, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Meter.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MeterCreate) createSpec() (*Meter, *sqlgraph.CreateSpec) {
	var (
		_node = &Meter{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(meter.Table, sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.TenantID(); ok {
		_spec.SetField(meter.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(meter.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(meter.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(meter.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.SetField(meter.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.SetField(meter.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.EnvironmentID(); ok {
		_spec.SetField(meter.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := mc.mutation.EventName(); ok {
		_spec.SetField(meter.FieldEventName, field.TypeString, value)
		_node.EventName = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(meter.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Aggregation(); ok {
		_spec.SetField(meter.FieldAggregation, field.TypeJSON, value)
		_node.Aggregation = value
	}
	if value, ok := mc.mutation.Filters(); ok {
		_spec.SetField(meter.FieldFilters, field.TypeJSON, value)
		_node.Filters = value
	}
	if value, ok := mc.mutation.ResetUsage(); ok {
		_spec.SetField(meter.FieldResetUsage, field.TypeString, value)
		_node.ResetUsage = value
	}
	if nodes := mc.mutation.CostsheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meter.CostsheetTable,
			Columns: []string{meter.CostsheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MeterCreateBulk is the builder for creating many Meter entities in bulk.
type MeterCreateBulk struct {
	config
	err      error
	builders []*MeterCreate
}

// Save creates the Meter entities in the database.
func (mcb *MeterCreateBulk) Save(ctx context.Context) ([]*Meter, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Meter, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MeterCreateBulk) SaveX(ctx context.Context) []*Meter {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MeterCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MeterCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
