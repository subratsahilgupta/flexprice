// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/creditgrant"
	"github.com/flexprice/flexprice/ent/plan"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// CreditGrant is the model entity for the CreditGrant schema.
type CreditGrant struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope types.CreditGrantScope `json:"scope,omitempty"`
	// PlanID holds the value of the "plan_id" field.
	PlanID *string `json:"plan_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// Credits holds the value of the "credits" field.
	Credits decimal.Decimal `json:"credits,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency *string `json:"currency,omitempty"`
	// Cadence holds the value of the "cadence" field.
	Cadence types.CreditGrantCadence `json:"cadence,omitempty"`
	// Period holds the value of the "period" field.
	Period *types.CreditGrantPeriod `json:"period,omitempty"`
	// PeriodCount holds the value of the "period_count" field.
	PeriodCount *int `json:"period_count,omitempty"`
	// ExpirationType holds the value of the "expiration_type" field.
	ExpirationType types.CreditGrantExpiryType `json:"expiration_type,omitempty"`
	// ExpirationDuration holds the value of the "expiration_duration" field.
	ExpirationDuration *int `json:"expiration_duration,omitempty"`
	// ExpirationDurationUnit holds the value of the "expiration_duration_unit" field.
	ExpirationDurationUnit *types.CreditGrantExpiryDurationUnit `json:"expiration_duration_unit,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority *int `json:"priority,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CreditGrantQuery when eager-loading is set.
	Edges        CreditGrantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CreditGrantEdges holds the relations/edges for other nodes in the graph.
type CreditGrantEdges struct {
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CreditGrantEdges) PlanOrErr() (*Plan, error) {
	if e.Plan != nil {
		return e.Plan, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: plan.Label}
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CreditGrantEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CreditGrant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case creditgrant.FieldMetadata:
			values[i] = new([]byte)
		case creditgrant.FieldCredits:
			values[i] = new(decimal.Decimal)
		case creditgrant.FieldPeriodCount, creditgrant.FieldExpirationDuration, creditgrant.FieldPriority:
			values[i] = new(sql.NullInt64)
		case creditgrant.FieldID, creditgrant.FieldTenantID, creditgrant.FieldStatus, creditgrant.FieldCreatedBy, creditgrant.FieldUpdatedBy, creditgrant.FieldEnvironmentID, creditgrant.FieldName, creditgrant.FieldScope, creditgrant.FieldPlanID, creditgrant.FieldSubscriptionID, creditgrant.FieldCurrency, creditgrant.FieldCadence, creditgrant.FieldPeriod, creditgrant.FieldExpirationType, creditgrant.FieldExpirationDurationUnit:
			values[i] = new(sql.NullString)
		case creditgrant.FieldCreatedAt, creditgrant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CreditGrant fields.
func (cg *CreditGrant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case creditgrant.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cg.ID = value.String
			}
		case creditgrant.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cg.TenantID = value.String
			}
		case creditgrant.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cg.Status = value.String
			}
		case creditgrant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cg.CreatedAt = value.Time
			}
		case creditgrant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cg.UpdatedAt = value.Time
			}
		case creditgrant.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cg.CreatedBy = value.String
			}
		case creditgrant.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cg.UpdatedBy = value.String
			}
		case creditgrant.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				cg.EnvironmentID = value.String
			}
		case creditgrant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cg.Name = value.String
			}
		case creditgrant.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				cg.Scope = types.CreditGrantScope(value.String)
			}
		case creditgrant.FieldPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				cg.PlanID = new(string)
				*cg.PlanID = value.String
			}
		case creditgrant.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				cg.SubscriptionID = new(string)
				*cg.SubscriptionID = value.String
			}
		case creditgrant.FieldCredits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field credits", values[i])
			} else if value != nil {
				cg.Credits = *value
			}
		case creditgrant.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				cg.Currency = new(string)
				*cg.Currency = value.String
			}
		case creditgrant.FieldCadence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cadence", values[i])
			} else if value.Valid {
				cg.Cadence = types.CreditGrantCadence(value.String)
			}
		case creditgrant.FieldPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				cg.Period = new(types.CreditGrantPeriod)
				*cg.Period = types.CreditGrantPeriod(value.String)
			}
		case creditgrant.FieldPeriodCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period_count", values[i])
			} else if value.Valid {
				cg.PeriodCount = new(int)
				*cg.PeriodCount = int(value.Int64)
			}
		case creditgrant.FieldExpirationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_type", values[i])
			} else if value.Valid {
				cg.ExpirationType = types.CreditGrantExpiryType(value.String)
			}
		case creditgrant.FieldExpirationDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_duration", values[i])
			} else if value.Valid {
				cg.ExpirationDuration = new(int)
				*cg.ExpirationDuration = int(value.Int64)
			}
		case creditgrant.FieldExpirationDurationUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_duration_unit", values[i])
			} else if value.Valid {
				cg.ExpirationDurationUnit = new(types.CreditGrantExpiryDurationUnit)
				*cg.ExpirationDurationUnit = types.CreditGrantExpiryDurationUnit(value.String)
			}
		case creditgrant.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				cg.Priority = new(int)
				*cg.Priority = int(value.Int64)
			}
		case creditgrant.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cg.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			cg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CreditGrant.
// This includes values selected through modifiers, order, etc.
func (cg *CreditGrant) Value(name string) (ent.Value, error) {
	return cg.selectValues.Get(name)
}

// QueryPlan queries the "plan" edge of the CreditGrant entity.
func (cg *CreditGrant) QueryPlan() *PlanQuery {
	return NewCreditGrantClient(cg.config).QueryPlan(cg)
}

// QuerySubscription queries the "subscription" edge of the CreditGrant entity.
func (cg *CreditGrant) QuerySubscription() *SubscriptionQuery {
	return NewCreditGrantClient(cg.config).QuerySubscription(cg)
}

// Update returns a builder for updating this CreditGrant.
// Note that you need to call CreditGrant.Unwrap() before calling this method if this CreditGrant
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *CreditGrant) Update() *CreditGrantUpdateOne {
	return NewCreditGrantClient(cg.config).UpdateOne(cg)
}

// Unwrap unwraps the CreditGrant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cg *CreditGrant) Unwrap() *CreditGrant {
	_tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CreditGrant is not a transactional entity")
	}
	cg.config.driver = _tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *CreditGrant) String() string {
	var builder strings.Builder
	builder.WriteString("CreditGrant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cg.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(cg.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cg.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cg.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cg.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(cg.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cg.Name)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(fmt.Sprintf("%v", cg.Scope))
	builder.WriteString(", ")
	if v := cg.PlanID; v != nil {
		builder.WriteString("plan_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cg.SubscriptionID; v != nil {
		builder.WriteString("subscription_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("credits=")
	builder.WriteString(fmt.Sprintf("%v", cg.Credits))
	builder.WriteString(", ")
	if v := cg.Currency; v != nil {
		builder.WriteString("currency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("cadence=")
	builder.WriteString(fmt.Sprintf("%v", cg.Cadence))
	builder.WriteString(", ")
	if v := cg.Period; v != nil {
		builder.WriteString("period=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cg.PeriodCount; v != nil {
		builder.WriteString("period_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("expiration_type=")
	builder.WriteString(fmt.Sprintf("%v", cg.ExpirationType))
	builder.WriteString(", ")
	if v := cg.ExpirationDuration; v != nil {
		builder.WriteString("expiration_duration=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cg.ExpirationDurationUnit; v != nil {
		builder.WriteString("expiration_duration_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cg.Priority; v != nil {
		builder.WriteString("priority=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", cg.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// CreditGrants is a parsable slice of CreditGrant.
type CreditGrants []*CreditGrant
