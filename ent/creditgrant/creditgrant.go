// Code generated by ent, DO NOT EDIT.

package creditgrant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the creditgrant type in the database.
	Label = "credit_grant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldCredits holds the string denoting the credits field in the database.
	FieldCredits = "credits"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldCadence holds the string denoting the cadence field in the database.
	FieldCadence = "cadence"
	// FieldPeriod holds the string denoting the period field in the database.
	FieldPeriod = "period"
	// FieldPeriodCount holds the string denoting the period_count field in the database.
	FieldPeriodCount = "period_count"
	// FieldExpirationType holds the string denoting the expiration_type field in the database.
	FieldExpirationType = "expiration_type"
	// FieldExpirationDuration holds the string denoting the expiration_duration field in the database.
	FieldExpirationDuration = "expiration_duration"
	// FieldExpirationDurationUnit holds the string denoting the expiration_duration_unit field in the database.
	FieldExpirationDurationUnit = "expiration_duration_unit"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// EdgeSubscription holds the string denoting the subscription edge name in mutations.
	EdgeSubscription = "subscription"
	// Table holds the table name of the creditgrant in the database.
	Table = "credit_grants"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "credit_grants"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plans"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_id"
	// SubscriptionTable is the table that holds the subscription relation/edge.
	SubscriptionTable = "credit_grants"
	// SubscriptionInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionInverseTable = "subscriptions"
	// SubscriptionColumn is the table column denoting the subscription relation/edge.
	SubscriptionColumn = "subscription_id"
)

// Columns holds all SQL columns for creditgrant fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldName,
	FieldScope,
	FieldPlanID,
	FieldSubscriptionID,
	FieldCredits,
	FieldCurrency,
	FieldCadence,
	FieldPeriod,
	FieldPeriodCount,
	FieldExpirationType,
	FieldExpirationDuration,
	FieldExpirationDurationUnit,
	FieldPriority,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ScopeValidator is a validator for the "scope" field. It is called by the builders before save.
	ScopeValidator func(string) error
	// DefaultCredits holds the default value on creation for the "credits" field.
	DefaultCredits decimal.Decimal
	// CadenceValidator is a validator for the "cadence" field. It is called by the builders before save.
	CadenceValidator func(string) error
	// DefaultExpirationType holds the default value on creation for the "expiration_type" field.
	DefaultExpirationType types.CreditGrantExpiryType
	// ExpirationTypeValidator is a validator for the "expiration_type" field. It is called by the builders before save.
	ExpirationTypeValidator func(string) error
	// DefaultMetadata holds the default value on creation for the "metadata" field.
	DefaultMetadata map[string]string
)

// OrderOption defines the ordering options for the CreditGrant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByCredits orders the results by the credits field.
func ByCredits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCredits, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByCadence orders the results by the cadence field.
func ByCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadence, opts...).ToFunc()
}

// ByPeriod orders the results by the period field.
func ByPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriod, opts...).ToFunc()
}

// ByPeriodCount orders the results by the period_count field.
func ByPeriodCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodCount, opts...).ToFunc()
}

// ByExpirationType orders the results by the expiration_type field.
func ByExpirationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationType, opts...).ToFunc()
}

// ByExpirationDuration orders the results by the expiration_duration field.
func ByExpirationDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationDuration, opts...).ToFunc()
}

// ByExpirationDurationUnit orders the results by the expiration_duration_unit field.
func ByExpirationDurationUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationDurationUnit, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByPlanField orders the results by plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscriptionField orders the results by subscription field.
func BySubscriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionStep(), sql.OrderByField(field, opts...))
	}
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
	)
}
func newSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
	)
}
