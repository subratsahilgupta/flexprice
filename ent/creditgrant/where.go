// Code generated by ent, DO NOT EDIT.

package creditgrant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldEnvironmentID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldName, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldScope, vc))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldPlanID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldSubscriptionID, v))
}

// Credits applies equality check predicate on the "credits" field. It's identical to CreditsEQ.
func Credits(v decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCredits, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCurrency, v))
}

// Cadence applies equality check predicate on the "cadence" field. It's identical to CadenceEQ.
func Cadence(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldCadence, vc))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldPeriod, vc))
}

// PeriodCount applies equality check predicate on the "period_count" field. It's identical to PeriodCountEQ.
func PeriodCount(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldPeriodCount, v))
}

// ExpirationType applies equality check predicate on the "expiration_type" field. It's identical to ExpirationTypeEQ.
func ExpirationType(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldExpirationType, vc))
}

// ExpirationDuration applies equality check predicate on the "expiration_duration" field. It's identical to ExpirationDurationEQ.
func ExpirationDuration(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldExpirationDuration, v))
}

// ExpirationDurationUnit applies equality check predicate on the "expiration_duration_unit" field. It's identical to ExpirationDurationUnitEQ.
func ExpirationDurationUnit(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldExpirationDurationUnit, vc))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldPriority, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldName, v))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldScope, vc))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldNEQ(FieldScope, vc))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...types.CreditGrantScope) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldIn(FieldScope, v...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...types.CreditGrantScope) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldNotIn(FieldScope, v...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGT(FieldScope, vc))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGTE(FieldScope, vc))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLT(FieldScope, vc))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLTE(FieldScope, vc))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContains(FieldScope, vc))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldScope, vc))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldScope, vc))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEqualFold(FieldScope, vc))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v types.CreditGrantScope) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContainsFold(FieldScope, vc))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDContains applies the Contains predicate on the "plan_id" field.
func PlanIDContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldPlanID, v))
}

// PlanIDHasPrefix applies the HasPrefix predicate on the "plan_id" field.
func PlanIDHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldPlanID, v))
}

// PlanIDHasSuffix applies the HasSuffix predicate on the "plan_id" field.
func PlanIDHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldPlanID, v))
}

// PlanIDIsNil applies the IsNil predicate on the "plan_id" field.
func PlanIDIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldPlanID))
}

// PlanIDNotNil applies the NotNil predicate on the "plan_id" field.
func PlanIDNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldPlanID))
}

// PlanIDEqualFold applies the EqualFold predicate on the "plan_id" field.
func PlanIDEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldPlanID, v))
}

// PlanIDContainsFold applies the ContainsFold predicate on the "plan_id" field.
func PlanIDContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldPlanID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// CreditsEQ applies the EQ predicate on the "credits" field.
func CreditsEQ(v decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCredits, v))
}

// CreditsNEQ applies the NEQ predicate on the "credits" field.
func CreditsNEQ(v decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldCredits, v))
}

// CreditsIn applies the In predicate on the "credits" field.
func CreditsIn(vs ...decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldCredits, vs...))
}

// CreditsNotIn applies the NotIn predicate on the "credits" field.
func CreditsNotIn(vs ...decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldCredits, vs...))
}

// CreditsGT applies the GT predicate on the "credits" field.
func CreditsGT(v decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldCredits, v))
}

// CreditsGTE applies the GTE predicate on the "credits" field.
func CreditsGTE(v decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldCredits, v))
}

// CreditsLT applies the LT predicate on the "credits" field.
func CreditsLT(v decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldCredits, v))
}

// CreditsLTE applies the LTE predicate on the "credits" field.
func CreditsLTE(v decimal.Decimal) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldCredits, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldCurrency))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldContainsFold(FieldCurrency, v))
}

// CadenceEQ applies the EQ predicate on the "cadence" field.
func CadenceEQ(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldCadence, vc))
}

// CadenceNEQ applies the NEQ predicate on the "cadence" field.
func CadenceNEQ(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldNEQ(FieldCadence, vc))
}

// CadenceIn applies the In predicate on the "cadence" field.
func CadenceIn(vs ...types.CreditGrantCadence) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldIn(FieldCadence, v...))
}

// CadenceNotIn applies the NotIn predicate on the "cadence" field.
func CadenceNotIn(vs ...types.CreditGrantCadence) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldNotIn(FieldCadence, v...))
}

// CadenceGT applies the GT predicate on the "cadence" field.
func CadenceGT(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGT(FieldCadence, vc))
}

// CadenceGTE applies the GTE predicate on the "cadence" field.
func CadenceGTE(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGTE(FieldCadence, vc))
}

// CadenceLT applies the LT predicate on the "cadence" field.
func CadenceLT(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLT(FieldCadence, vc))
}

// CadenceLTE applies the LTE predicate on the "cadence" field.
func CadenceLTE(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLTE(FieldCadence, vc))
}

// CadenceContains applies the Contains predicate on the "cadence" field.
func CadenceContains(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContains(FieldCadence, vc))
}

// CadenceHasPrefix applies the HasPrefix predicate on the "cadence" field.
func CadenceHasPrefix(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldCadence, vc))
}

// CadenceHasSuffix applies the HasSuffix predicate on the "cadence" field.
func CadenceHasSuffix(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldCadence, vc))
}

// CadenceEqualFold applies the EqualFold predicate on the "cadence" field.
func CadenceEqualFold(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEqualFold(FieldCadence, vc))
}

// CadenceContainsFold applies the ContainsFold predicate on the "cadence" field.
func CadenceContainsFold(v types.CreditGrantCadence) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContainsFold(FieldCadence, vc))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldPeriod, vc))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldNEQ(FieldPeriod, vc))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...types.CreditGrantPeriod) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldIn(FieldPeriod, v...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...types.CreditGrantPeriod) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldNotIn(FieldPeriod, v...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGT(FieldPeriod, vc))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGTE(FieldPeriod, vc))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLT(FieldPeriod, vc))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLTE(FieldPeriod, vc))
}

// PeriodContains applies the Contains predicate on the "period" field.
func PeriodContains(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContains(FieldPeriod, vc))
}

// PeriodHasPrefix applies the HasPrefix predicate on the "period" field.
func PeriodHasPrefix(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldPeriod, vc))
}

// PeriodHasSuffix applies the HasSuffix predicate on the "period" field.
func PeriodHasSuffix(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldPeriod, vc))
}

// PeriodIsNil applies the IsNil predicate on the "period" field.
func PeriodIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldPeriod))
}

// PeriodNotNil applies the NotNil predicate on the "period" field.
func PeriodNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldPeriod))
}

// PeriodEqualFold applies the EqualFold predicate on the "period" field.
func PeriodEqualFold(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEqualFold(FieldPeriod, vc))
}

// PeriodContainsFold applies the ContainsFold predicate on the "period" field.
func PeriodContainsFold(v types.CreditGrantPeriod) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContainsFold(FieldPeriod, vc))
}

// PeriodCountEQ applies the EQ predicate on the "period_count" field.
func PeriodCountEQ(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldPeriodCount, v))
}

// PeriodCountNEQ applies the NEQ predicate on the "period_count" field.
func PeriodCountNEQ(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldPeriodCount, v))
}

// PeriodCountIn applies the In predicate on the "period_count" field.
func PeriodCountIn(vs ...int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldPeriodCount, vs...))
}

// PeriodCountNotIn applies the NotIn predicate on the "period_count" field.
func PeriodCountNotIn(vs ...int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldPeriodCount, vs...))
}

// PeriodCountGT applies the GT predicate on the "period_count" field.
func PeriodCountGT(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldPeriodCount, v))
}

// PeriodCountGTE applies the GTE predicate on the "period_count" field.
func PeriodCountGTE(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldPeriodCount, v))
}

// PeriodCountLT applies the LT predicate on the "period_count" field.
func PeriodCountLT(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldPeriodCount, v))
}

// PeriodCountLTE applies the LTE predicate on the "period_count" field.
func PeriodCountLTE(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldPeriodCount, v))
}

// PeriodCountIsNil applies the IsNil predicate on the "period_count" field.
func PeriodCountIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldPeriodCount))
}

// PeriodCountNotNil applies the NotNil predicate on the "period_count" field.
func PeriodCountNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldPeriodCount))
}

// ExpirationTypeEQ applies the EQ predicate on the "expiration_type" field.
func ExpirationTypeEQ(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldExpirationType, vc))
}

// ExpirationTypeNEQ applies the NEQ predicate on the "expiration_type" field.
func ExpirationTypeNEQ(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldNEQ(FieldExpirationType, vc))
}

// ExpirationTypeIn applies the In predicate on the "expiration_type" field.
func ExpirationTypeIn(vs ...types.CreditGrantExpiryType) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldIn(FieldExpirationType, v...))
}

// ExpirationTypeNotIn applies the NotIn predicate on the "expiration_type" field.
func ExpirationTypeNotIn(vs ...types.CreditGrantExpiryType) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldNotIn(FieldExpirationType, v...))
}

// ExpirationTypeGT applies the GT predicate on the "expiration_type" field.
func ExpirationTypeGT(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGT(FieldExpirationType, vc))
}

// ExpirationTypeGTE applies the GTE predicate on the "expiration_type" field.
func ExpirationTypeGTE(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGTE(FieldExpirationType, vc))
}

// ExpirationTypeLT applies the LT predicate on the "expiration_type" field.
func ExpirationTypeLT(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLT(FieldExpirationType, vc))
}

// ExpirationTypeLTE applies the LTE predicate on the "expiration_type" field.
func ExpirationTypeLTE(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLTE(FieldExpirationType, vc))
}

// ExpirationTypeContains applies the Contains predicate on the "expiration_type" field.
func ExpirationTypeContains(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContains(FieldExpirationType, vc))
}

// ExpirationTypeHasPrefix applies the HasPrefix predicate on the "expiration_type" field.
func ExpirationTypeHasPrefix(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldExpirationType, vc))
}

// ExpirationTypeHasSuffix applies the HasSuffix predicate on the "expiration_type" field.
func ExpirationTypeHasSuffix(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldExpirationType, vc))
}

// ExpirationTypeEqualFold applies the EqualFold predicate on the "expiration_type" field.
func ExpirationTypeEqualFold(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEqualFold(FieldExpirationType, vc))
}

// ExpirationTypeContainsFold applies the ContainsFold predicate on the "expiration_type" field.
func ExpirationTypeContainsFold(v types.CreditGrantExpiryType) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContainsFold(FieldExpirationType, vc))
}

// ExpirationDurationEQ applies the EQ predicate on the "expiration_duration" field.
func ExpirationDurationEQ(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldExpirationDuration, v))
}

// ExpirationDurationNEQ applies the NEQ predicate on the "expiration_duration" field.
func ExpirationDurationNEQ(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldExpirationDuration, v))
}

// ExpirationDurationIn applies the In predicate on the "expiration_duration" field.
func ExpirationDurationIn(vs ...int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldExpirationDuration, vs...))
}

// ExpirationDurationNotIn applies the NotIn predicate on the "expiration_duration" field.
func ExpirationDurationNotIn(vs ...int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldExpirationDuration, vs...))
}

// ExpirationDurationGT applies the GT predicate on the "expiration_duration" field.
func ExpirationDurationGT(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldExpirationDuration, v))
}

// ExpirationDurationGTE applies the GTE predicate on the "expiration_duration" field.
func ExpirationDurationGTE(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldExpirationDuration, v))
}

// ExpirationDurationLT applies the LT predicate on the "expiration_duration" field.
func ExpirationDurationLT(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldExpirationDuration, v))
}

// ExpirationDurationLTE applies the LTE predicate on the "expiration_duration" field.
func ExpirationDurationLTE(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldExpirationDuration, v))
}

// ExpirationDurationIsNil applies the IsNil predicate on the "expiration_duration" field.
func ExpirationDurationIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldExpirationDuration))
}

// ExpirationDurationNotNil applies the NotNil predicate on the "expiration_duration" field.
func ExpirationDurationNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldExpirationDuration))
}

// ExpirationDurationUnitEQ applies the EQ predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitEQ(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEQ(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitNEQ applies the NEQ predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitNEQ(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldNEQ(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitIn applies the In predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitIn(vs ...types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldIn(FieldExpirationDurationUnit, v...))
}

// ExpirationDurationUnitNotIn applies the NotIn predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitNotIn(vs ...types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditGrant(sql.FieldNotIn(FieldExpirationDurationUnit, v...))
}

// ExpirationDurationUnitGT applies the GT predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitGT(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGT(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitGTE applies the GTE predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitGTE(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldGTE(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitLT applies the LT predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitLT(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLT(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitLTE applies the LTE predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitLTE(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldLTE(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitContains applies the Contains predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitContains(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContains(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitHasPrefix applies the HasPrefix predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitHasPrefix(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasPrefix(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitHasSuffix applies the HasSuffix predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitHasSuffix(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldHasSuffix(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitIsNil applies the IsNil predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldExpirationDurationUnit))
}

// ExpirationDurationUnitNotNil applies the NotNil predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldExpirationDurationUnit))
}

// ExpirationDurationUnitEqualFold applies the EqualFold predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitEqualFold(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldEqualFold(FieldExpirationDurationUnit, vc))
}

// ExpirationDurationUnitContainsFold applies the ContainsFold predicate on the "expiration_duration_unit" field.
func ExpirationDurationUnitContainsFold(v types.CreditGrantExpiryDurationUnit) predicate.CreditGrant {
	vc := string(v)
	return predicate.CreditGrant(sql.FieldContainsFold(FieldExpirationDurationUnit, vc))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldLTE(FieldPriority, v))
}

// PriorityIsNil applies the IsNil predicate on the "priority" field.
func PriorityIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldPriority))
}

// PriorityNotNil applies the NotNil predicate on the "priority" field.
func PriorityNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldPriority))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.CreditGrant {
	return predicate.CreditGrant(sql.FieldNotNull(FieldMetadata))
}

// HasPlan applies the HasEdge predicate on the "plan" edge.
func HasPlan() predicate.CreditGrant {
	return predicate.CreditGrant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanWith applies the HasEdge predicate on the "plan" edge with a given conditions (other predicates).
func HasPlanWith(preds ...predicate.Plan) predicate.CreditGrant {
	return predicate.CreditGrant(func(s *sql.Selector) {
		step := newPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.CreditGrant {
	return predicate.CreditGrant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.CreditGrant {
	return predicate.CreditGrant(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CreditGrant) predicate.CreditGrant {
	return predicate.CreditGrant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CreditGrant) predicate.CreditGrant {
	return predicate.CreditGrant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CreditGrant) predicate.CreditGrant {
	return predicate.CreditGrant(sql.NotPredicates(p))
}
