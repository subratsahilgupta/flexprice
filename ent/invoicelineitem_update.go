// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/invoicelineitem"
	"github.com/flexprice/flexprice/ent/predicate"
)

// InvoiceLineItemUpdate is the builder for updating InvoiceLineItem entities.
type InvoiceLineItemUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceLineItemMutation
}

// Where appends a list predicates to the InvoiceLineItemUpdate builder.
func (iliu *InvoiceLineItemUpdate) Where(ps ...predicate.InvoiceLineItem) *InvoiceLineItemUpdate {
	iliu.mutation.Where(ps...)
	return iliu
}

// SetStatus sets the "status" field.
func (iliu *InvoiceLineItemUpdate) SetStatus(s string) *InvoiceLineItemUpdate {
	iliu.mutation.SetStatus(s)
	return iliu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iliu *InvoiceLineItemUpdate) SetNillableStatus(s *string) *InvoiceLineItemUpdate {
	if s != nil {
		iliu.SetStatus(*s)
	}
	return iliu
}

// SetUpdatedAt sets the "updated_at" field.
func (iliu *InvoiceLineItemUpdate) SetUpdatedAt(t time.Time) *InvoiceLineItemUpdate {
	iliu.mutation.SetUpdatedAt(t)
	return iliu
}

// SetUpdatedBy sets the "updated_by" field.
func (iliu *InvoiceLineItemUpdate) SetUpdatedBy(s string) *InvoiceLineItemUpdate {
	iliu.mutation.SetUpdatedBy(s)
	return iliu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iliu *InvoiceLineItemUpdate) SetNillableUpdatedBy(s *string) *InvoiceLineItemUpdate {
	if s != nil {
		iliu.SetUpdatedBy(*s)
	}
	return iliu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iliu *InvoiceLineItemUpdate) ClearUpdatedBy() *InvoiceLineItemUpdate {
	iliu.mutation.ClearUpdatedBy()
	return iliu
}

// SetPeriodStart sets the "period_start" field.
func (iliu *InvoiceLineItemUpdate) SetPeriodStart(t time.Time) *InvoiceLineItemUpdate {
	iliu.mutation.SetPeriodStart(t)
	return iliu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (iliu *InvoiceLineItemUpdate) SetNillablePeriodStart(t *time.Time) *InvoiceLineItemUpdate {
	if t != nil {
		iliu.SetPeriodStart(*t)
	}
	return iliu
}

// ClearPeriodStart clears the value of the "period_start" field.
func (iliu *InvoiceLineItemUpdate) ClearPeriodStart() *InvoiceLineItemUpdate {
	iliu.mutation.ClearPeriodStart()
	return iliu
}

// SetPeriodEnd sets the "period_end" field.
func (iliu *InvoiceLineItemUpdate) SetPeriodEnd(t time.Time) *InvoiceLineItemUpdate {
	iliu.mutation.SetPeriodEnd(t)
	return iliu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (iliu *InvoiceLineItemUpdate) SetNillablePeriodEnd(t *time.Time) *InvoiceLineItemUpdate {
	if t != nil {
		iliu.SetPeriodEnd(*t)
	}
	return iliu
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (iliu *InvoiceLineItemUpdate) ClearPeriodEnd() *InvoiceLineItemUpdate {
	iliu.mutation.ClearPeriodEnd()
	return iliu
}

// SetMetadata sets the "metadata" field.
func (iliu *InvoiceLineItemUpdate) SetMetadata(m map[string]string) *InvoiceLineItemUpdate {
	iliu.mutation.SetMetadata(m)
	return iliu
}

// ClearMetadata clears the value of the "metadata" field.
func (iliu *InvoiceLineItemUpdate) ClearMetadata() *InvoiceLineItemUpdate {
	iliu.mutation.ClearMetadata()
	return iliu
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (iliu *InvoiceLineItemUpdate) AddCouponApplicationIDs(ids ...string) *InvoiceLineItemUpdate {
	iliu.mutation.AddCouponApplicationIDs(ids...)
	return iliu
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (iliu *InvoiceLineItemUpdate) AddCouponApplications(c ...*CouponApplication) *InvoiceLineItemUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iliu.AddCouponApplicationIDs(ids...)
}

// Mutation returns the InvoiceLineItemMutation object of the builder.
func (iliu *InvoiceLineItemUpdate) Mutation() *InvoiceLineItemMutation {
	return iliu.mutation
}

// ClearCouponApplications clears all "coupon_applications" edges to the CouponApplication entity.
func (iliu *InvoiceLineItemUpdate) ClearCouponApplications() *InvoiceLineItemUpdate {
	iliu.mutation.ClearCouponApplications()
	return iliu
}

// RemoveCouponApplicationIDs removes the "coupon_applications" edge to CouponApplication entities by IDs.
func (iliu *InvoiceLineItemUpdate) RemoveCouponApplicationIDs(ids ...string) *InvoiceLineItemUpdate {
	iliu.mutation.RemoveCouponApplicationIDs(ids...)
	return iliu
}

// RemoveCouponApplications removes "coupon_applications" edges to CouponApplication entities.
func (iliu *InvoiceLineItemUpdate) RemoveCouponApplications(c ...*CouponApplication) *InvoiceLineItemUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iliu.RemoveCouponApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iliu *InvoiceLineItemUpdate) Save(ctx context.Context) (int, error) {
	iliu.defaults()
	return withHooks(ctx, iliu.sqlSave, iliu.mutation, iliu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iliu *InvoiceLineItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iliu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iliu *InvoiceLineItemUpdate) Exec(ctx context.Context) error {
	_, err := iliu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iliu *InvoiceLineItemUpdate) ExecX(ctx context.Context) {
	if err := iliu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iliu *InvoiceLineItemUpdate) defaults() {
	if _, ok := iliu.mutation.UpdatedAt(); !ok {
		v := invoicelineitem.UpdateDefaultUpdatedAt()
		iliu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iliu *InvoiceLineItemUpdate) check() error {
	if iliu.mutation.InvoiceCleared() && len(iliu.mutation.InvoiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InvoiceLineItem.invoice"`)
	}
	return nil
}

func (iliu *InvoiceLineItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iliu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoicelineitem.Table, invoicelineitem.Columns, sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeString))
	if ps := iliu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iliu.mutation.Status(); ok {
		_spec.SetField(invoicelineitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := iliu.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicelineitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if iliu.mutation.CreatedByCleared() {
		_spec.ClearField(invoicelineitem.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iliu.mutation.UpdatedBy(); ok {
		_spec.SetField(invoicelineitem.FieldUpdatedBy, field.TypeString, value)
	}
	if iliu.mutation.UpdatedByCleared() {
		_spec.ClearField(invoicelineitem.FieldUpdatedBy, field.TypeString)
	}
	if iliu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(invoicelineitem.FieldEnvironmentID, field.TypeString)
	}
	if iliu.mutation.SubscriptionIDCleared() {
		_spec.ClearField(invoicelineitem.FieldSubscriptionID, field.TypeString)
	}
	if iliu.mutation.PlanIDCleared() {
		_spec.ClearField(invoicelineitem.FieldPlanID, field.TypeString)
	}
	if iliu.mutation.PlanDisplayNameCleared() {
		_spec.ClearField(invoicelineitem.FieldPlanDisplayName, field.TypeString)
	}
	if iliu.mutation.PriceIDCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceID, field.TypeString)
	}
	if iliu.mutation.PriceTypeCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceType, field.TypeString)
	}
	if iliu.mutation.MeterIDCleared() {
		_spec.ClearField(invoicelineitem.FieldMeterID, field.TypeString)
	}
	if iliu.mutation.MeterDisplayNameCleared() {
		_spec.ClearField(invoicelineitem.FieldMeterDisplayName, field.TypeString)
	}
	if iliu.mutation.PriceUnitIDCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceUnitID, field.TypeString)
	}
	if iliu.mutation.PriceUnitCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceUnit, field.TypeString)
	}
	if iliu.mutation.PriceUnitAmountCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceUnitAmount, field.TypeOther)
	}
	if iliu.mutation.DisplayNameCleared() {
		_spec.ClearField(invoicelineitem.FieldDisplayName, field.TypeString)
	}
	if value, ok := iliu.mutation.PeriodStart(); ok {
		_spec.SetField(invoicelineitem.FieldPeriodStart, field.TypeTime, value)
	}
	if iliu.mutation.PeriodStartCleared() {
		_spec.ClearField(invoicelineitem.FieldPeriodStart, field.TypeTime)
	}
	if value, ok := iliu.mutation.PeriodEnd(); ok {
		_spec.SetField(invoicelineitem.FieldPeriodEnd, field.TypeTime, value)
	}
	if iliu.mutation.PeriodEndCleared() {
		_spec.ClearField(invoicelineitem.FieldPeriodEnd, field.TypeTime)
	}
	if value, ok := iliu.mutation.Metadata(); ok {
		_spec.SetField(invoicelineitem.FieldMetadata, field.TypeJSON, value)
	}
	if iliu.mutation.MetadataCleared() {
		_spec.ClearField(invoicelineitem.FieldMetadata, field.TypeJSON)
	}
	if iliu.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoicelineitem.CouponApplicationsTable,
			Columns: []string{invoicelineitem.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iliu.mutation.RemovedCouponApplicationsIDs(); len(nodes) > 0 && !iliu.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoicelineitem.CouponApplicationsTable,
			Columns: []string{invoicelineitem.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iliu.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoicelineitem.CouponApplicationsTable,
			Columns: []string{invoicelineitem.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iliu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoicelineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iliu.mutation.done = true
	return n, nil
}

// InvoiceLineItemUpdateOne is the builder for updating a single InvoiceLineItem entity.
type InvoiceLineItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceLineItemMutation
}

// SetStatus sets the "status" field.
func (iliuo *InvoiceLineItemUpdateOne) SetStatus(s string) *InvoiceLineItemUpdateOne {
	iliuo.mutation.SetStatus(s)
	return iliuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iliuo *InvoiceLineItemUpdateOne) SetNillableStatus(s *string) *InvoiceLineItemUpdateOne {
	if s != nil {
		iliuo.SetStatus(*s)
	}
	return iliuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iliuo *InvoiceLineItemUpdateOne) SetUpdatedAt(t time.Time) *InvoiceLineItemUpdateOne {
	iliuo.mutation.SetUpdatedAt(t)
	return iliuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iliuo *InvoiceLineItemUpdateOne) SetUpdatedBy(s string) *InvoiceLineItemUpdateOne {
	iliuo.mutation.SetUpdatedBy(s)
	return iliuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iliuo *InvoiceLineItemUpdateOne) SetNillableUpdatedBy(s *string) *InvoiceLineItemUpdateOne {
	if s != nil {
		iliuo.SetUpdatedBy(*s)
	}
	return iliuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iliuo *InvoiceLineItemUpdateOne) ClearUpdatedBy() *InvoiceLineItemUpdateOne {
	iliuo.mutation.ClearUpdatedBy()
	return iliuo
}

// SetPeriodStart sets the "period_start" field.
func (iliuo *InvoiceLineItemUpdateOne) SetPeriodStart(t time.Time) *InvoiceLineItemUpdateOne {
	iliuo.mutation.SetPeriodStart(t)
	return iliuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (iliuo *InvoiceLineItemUpdateOne) SetNillablePeriodStart(t *time.Time) *InvoiceLineItemUpdateOne {
	if t != nil {
		iliuo.SetPeriodStart(*t)
	}
	return iliuo
}

// ClearPeriodStart clears the value of the "period_start" field.
func (iliuo *InvoiceLineItemUpdateOne) ClearPeriodStart() *InvoiceLineItemUpdateOne {
	iliuo.mutation.ClearPeriodStart()
	return iliuo
}

// SetPeriodEnd sets the "period_end" field.
func (iliuo *InvoiceLineItemUpdateOne) SetPeriodEnd(t time.Time) *InvoiceLineItemUpdateOne {
	iliuo.mutation.SetPeriodEnd(t)
	return iliuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (iliuo *InvoiceLineItemUpdateOne) SetNillablePeriodEnd(t *time.Time) *InvoiceLineItemUpdateOne {
	if t != nil {
		iliuo.SetPeriodEnd(*t)
	}
	return iliuo
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (iliuo *InvoiceLineItemUpdateOne) ClearPeriodEnd() *InvoiceLineItemUpdateOne {
	iliuo.mutation.ClearPeriodEnd()
	return iliuo
}

// SetMetadata sets the "metadata" field.
func (iliuo *InvoiceLineItemUpdateOne) SetMetadata(m map[string]string) *InvoiceLineItemUpdateOne {
	iliuo.mutation.SetMetadata(m)
	return iliuo
}

// ClearMetadata clears the value of the "metadata" field.
func (iliuo *InvoiceLineItemUpdateOne) ClearMetadata() *InvoiceLineItemUpdateOne {
	iliuo.mutation.ClearMetadata()
	return iliuo
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (iliuo *InvoiceLineItemUpdateOne) AddCouponApplicationIDs(ids ...string) *InvoiceLineItemUpdateOne {
	iliuo.mutation.AddCouponApplicationIDs(ids...)
	return iliuo
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (iliuo *InvoiceLineItemUpdateOne) AddCouponApplications(c ...*CouponApplication) *InvoiceLineItemUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iliuo.AddCouponApplicationIDs(ids...)
}

// Mutation returns the InvoiceLineItemMutation object of the builder.
func (iliuo *InvoiceLineItemUpdateOne) Mutation() *InvoiceLineItemMutation {
	return iliuo.mutation
}

// ClearCouponApplications clears all "coupon_applications" edges to the CouponApplication entity.
func (iliuo *InvoiceLineItemUpdateOne) ClearCouponApplications() *InvoiceLineItemUpdateOne {
	iliuo.mutation.ClearCouponApplications()
	return iliuo
}

// RemoveCouponApplicationIDs removes the "coupon_applications" edge to CouponApplication entities by IDs.
func (iliuo *InvoiceLineItemUpdateOne) RemoveCouponApplicationIDs(ids ...string) *InvoiceLineItemUpdateOne {
	iliuo.mutation.RemoveCouponApplicationIDs(ids...)
	return iliuo
}

// RemoveCouponApplications removes "coupon_applications" edges to CouponApplication entities.
func (iliuo *InvoiceLineItemUpdateOne) RemoveCouponApplications(c ...*CouponApplication) *InvoiceLineItemUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iliuo.RemoveCouponApplicationIDs(ids...)
}

// Where appends a list predicates to the InvoiceLineItemUpdate builder.
func (iliuo *InvoiceLineItemUpdateOne) Where(ps ...predicate.InvoiceLineItem) *InvoiceLineItemUpdateOne {
	iliuo.mutation.Where(ps...)
	return iliuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iliuo *InvoiceLineItemUpdateOne) Select(field string, fields ...string) *InvoiceLineItemUpdateOne {
	iliuo.fields = append([]string{field}, fields...)
	return iliuo
}

// Save executes the query and returns the updated InvoiceLineItem entity.
func (iliuo *InvoiceLineItemUpdateOne) Save(ctx context.Context) (*InvoiceLineItem, error) {
	iliuo.defaults()
	return withHooks(ctx, iliuo.sqlSave, iliuo.mutation, iliuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iliuo *InvoiceLineItemUpdateOne) SaveX(ctx context.Context) *InvoiceLineItem {
	node, err := iliuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iliuo *InvoiceLineItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iliuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iliuo *InvoiceLineItemUpdateOne) ExecX(ctx context.Context) {
	if err := iliuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iliuo *InvoiceLineItemUpdateOne) defaults() {
	if _, ok := iliuo.mutation.UpdatedAt(); !ok {
		v := invoicelineitem.UpdateDefaultUpdatedAt()
		iliuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iliuo *InvoiceLineItemUpdateOne) check() error {
	if iliuo.mutation.InvoiceCleared() && len(iliuo.mutation.InvoiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InvoiceLineItem.invoice"`)
	}
	return nil
}

func (iliuo *InvoiceLineItemUpdateOne) sqlSave(ctx context.Context) (_node *InvoiceLineItem, err error) {
	if err := iliuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoicelineitem.Table, invoicelineitem.Columns, sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeString))
	id, ok := iliuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvoiceLineItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iliuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoicelineitem.FieldID)
		for _, f := range fields {
			if !invoicelineitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoicelineitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iliuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iliuo.mutation.Status(); ok {
		_spec.SetField(invoicelineitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := iliuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicelineitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if iliuo.mutation.CreatedByCleared() {
		_spec.ClearField(invoicelineitem.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iliuo.mutation.UpdatedBy(); ok {
		_spec.SetField(invoicelineitem.FieldUpdatedBy, field.TypeString, value)
	}
	if iliuo.mutation.UpdatedByCleared() {
		_spec.ClearField(invoicelineitem.FieldUpdatedBy, field.TypeString)
	}
	if iliuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(invoicelineitem.FieldEnvironmentID, field.TypeString)
	}
	if iliuo.mutation.SubscriptionIDCleared() {
		_spec.ClearField(invoicelineitem.FieldSubscriptionID, field.TypeString)
	}
	if iliuo.mutation.PlanIDCleared() {
		_spec.ClearField(invoicelineitem.FieldPlanID, field.TypeString)
	}
	if iliuo.mutation.PlanDisplayNameCleared() {
		_spec.ClearField(invoicelineitem.FieldPlanDisplayName, field.TypeString)
	}
	if iliuo.mutation.PriceIDCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceID, field.TypeString)
	}
	if iliuo.mutation.PriceTypeCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceType, field.TypeString)
	}
	if iliuo.mutation.MeterIDCleared() {
		_spec.ClearField(invoicelineitem.FieldMeterID, field.TypeString)
	}
	if iliuo.mutation.MeterDisplayNameCleared() {
		_spec.ClearField(invoicelineitem.FieldMeterDisplayName, field.TypeString)
	}
	if iliuo.mutation.PriceUnitIDCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceUnitID, field.TypeString)
	}
	if iliuo.mutation.PriceUnitCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceUnit, field.TypeString)
	}
	if iliuo.mutation.PriceUnitAmountCleared() {
		_spec.ClearField(invoicelineitem.FieldPriceUnitAmount, field.TypeOther)
	}
	if iliuo.mutation.DisplayNameCleared() {
		_spec.ClearField(invoicelineitem.FieldDisplayName, field.TypeString)
	}
	if value, ok := iliuo.mutation.PeriodStart(); ok {
		_spec.SetField(invoicelineitem.FieldPeriodStart, field.TypeTime, value)
	}
	if iliuo.mutation.PeriodStartCleared() {
		_spec.ClearField(invoicelineitem.FieldPeriodStart, field.TypeTime)
	}
	if value, ok := iliuo.mutation.PeriodEnd(); ok {
		_spec.SetField(invoicelineitem.FieldPeriodEnd, field.TypeTime, value)
	}
	if iliuo.mutation.PeriodEndCleared() {
		_spec.ClearField(invoicelineitem.FieldPeriodEnd, field.TypeTime)
	}
	if value, ok := iliuo.mutation.Metadata(); ok {
		_spec.SetField(invoicelineitem.FieldMetadata, field.TypeJSON, value)
	}
	if iliuo.mutation.MetadataCleared() {
		_spec.ClearField(invoicelineitem.FieldMetadata, field.TypeJSON)
	}
	if iliuo.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoicelineitem.CouponApplicationsTable,
			Columns: []string{invoicelineitem.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iliuo.mutation.RemovedCouponApplicationsIDs(); len(nodes) > 0 && !iliuo.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoicelineitem.CouponApplicationsTable,
			Columns: []string{invoicelineitem.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iliuo.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoicelineitem.CouponApplicationsTable,
			Columns: []string{invoicelineitem.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvoiceLineItem{config: iliuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iliuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoicelineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iliuo.mutation.done = true
	return _node, nil
}
