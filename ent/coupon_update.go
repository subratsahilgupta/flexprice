// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks    []Hook
	mutation *CouponMutation
}

// Where appends a list predicates to the CouponUpdate builder.
func (cu *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CouponUpdate) SetStatus(s string) *CouponUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableStatus(s *string) *CouponUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CouponUpdate) SetUpdatedAt(t time.Time) *CouponUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CouponUpdate) SetUpdatedBy(s string) *CouponUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableUpdatedBy(s *string) *CouponUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CouponUpdate) ClearUpdatedBy() *CouponUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetName sets the "name" field.
func (cu *CouponUpdate) SetName(s string) *CouponUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableName(s *string) *CouponUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetRedeemAfter sets the "redeem_after" field.
func (cu *CouponUpdate) SetRedeemAfter(t time.Time) *CouponUpdate {
	cu.mutation.SetRedeemAfter(t)
	return cu
}

// SetNillableRedeemAfter sets the "redeem_after" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableRedeemAfter(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetRedeemAfter(*t)
	}
	return cu
}

// ClearRedeemAfter clears the value of the "redeem_after" field.
func (cu *CouponUpdate) ClearRedeemAfter() *CouponUpdate {
	cu.mutation.ClearRedeemAfter()
	return cu
}

// SetRedeemBefore sets the "redeem_before" field.
func (cu *CouponUpdate) SetRedeemBefore(t time.Time) *CouponUpdate {
	cu.mutation.SetRedeemBefore(t)
	return cu
}

// SetNillableRedeemBefore sets the "redeem_before" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableRedeemBefore(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetRedeemBefore(*t)
	}
	return cu
}

// ClearRedeemBefore clears the value of the "redeem_before" field.
func (cu *CouponUpdate) ClearRedeemBefore() *CouponUpdate {
	cu.mutation.ClearRedeemBefore()
	return cu
}

// SetMaxRedemptions sets the "max_redemptions" field.
func (cu *CouponUpdate) SetMaxRedemptions(i int) *CouponUpdate {
	cu.mutation.ResetMaxRedemptions()
	cu.mutation.SetMaxRedemptions(i)
	return cu
}

// SetNillableMaxRedemptions sets the "max_redemptions" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableMaxRedemptions(i *int) *CouponUpdate {
	if i != nil {
		cu.SetMaxRedemptions(*i)
	}
	return cu
}

// AddMaxRedemptions adds i to the "max_redemptions" field.
func (cu *CouponUpdate) AddMaxRedemptions(i int) *CouponUpdate {
	cu.mutation.AddMaxRedemptions(i)
	return cu
}

// ClearMaxRedemptions clears the value of the "max_redemptions" field.
func (cu *CouponUpdate) ClearMaxRedemptions() *CouponUpdate {
	cu.mutation.ClearMaxRedemptions()
	return cu
}

// SetTotalRedemptions sets the "total_redemptions" field.
func (cu *CouponUpdate) SetTotalRedemptions(i int) *CouponUpdate {
	cu.mutation.ResetTotalRedemptions()
	cu.mutation.SetTotalRedemptions(i)
	return cu
}

// SetNillableTotalRedemptions sets the "total_redemptions" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableTotalRedemptions(i *int) *CouponUpdate {
	if i != nil {
		cu.SetTotalRedemptions(*i)
	}
	return cu
}

// AddTotalRedemptions adds i to the "total_redemptions" field.
func (cu *CouponUpdate) AddTotalRedemptions(i int) *CouponUpdate {
	cu.mutation.AddTotalRedemptions(i)
	return cu
}

// SetRules sets the "rules" field.
func (cu *CouponUpdate) SetRules(m map[string]interface{}) *CouponUpdate {
	cu.mutation.SetRules(m)
	return cu
}

// ClearRules clears the value of the "rules" field.
func (cu *CouponUpdate) ClearRules() *CouponUpdate {
	cu.mutation.ClearRules()
	return cu
}

// SetAmountOff sets the "amount_off" field.
func (cu *CouponUpdate) SetAmountOff(d decimal.Decimal) *CouponUpdate {
	cu.mutation.SetAmountOff(d)
	return cu
}

// SetNillableAmountOff sets the "amount_off" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableAmountOff(d *decimal.Decimal) *CouponUpdate {
	if d != nil {
		cu.SetAmountOff(*d)
	}
	return cu
}

// ClearAmountOff clears the value of the "amount_off" field.
func (cu *CouponUpdate) ClearAmountOff() *CouponUpdate {
	cu.mutation.ClearAmountOff()
	return cu
}

// SetPercentageOff sets the "percentage_off" field.
func (cu *CouponUpdate) SetPercentageOff(d decimal.Decimal) *CouponUpdate {
	cu.mutation.SetPercentageOff(d)
	return cu
}

// SetNillablePercentageOff sets the "percentage_off" field if the given value is not nil.
func (cu *CouponUpdate) SetNillablePercentageOff(d *decimal.Decimal) *CouponUpdate {
	if d != nil {
		cu.SetPercentageOff(*d)
	}
	return cu
}

// ClearPercentageOff clears the value of the "percentage_off" field.
func (cu *CouponUpdate) ClearPercentageOff() *CouponUpdate {
	cu.mutation.ClearPercentageOff()
	return cu
}

// SetType sets the "type" field.
func (cu *CouponUpdate) SetType(s string) *CouponUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableType(s *string) *CouponUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetCadence sets the "cadence" field.
func (cu *CouponUpdate) SetCadence(s string) *CouponUpdate {
	cu.mutation.SetCadence(s)
	return cu
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCadence(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCadence(*s)
	}
	return cu
}

// SetDurationInPeriods sets the "duration_in_periods" field.
func (cu *CouponUpdate) SetDurationInPeriods(i int) *CouponUpdate {
	cu.mutation.ResetDurationInPeriods()
	cu.mutation.SetDurationInPeriods(i)
	return cu
}

// SetNillableDurationInPeriods sets the "duration_in_periods" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableDurationInPeriods(i *int) *CouponUpdate {
	if i != nil {
		cu.SetDurationInPeriods(*i)
	}
	return cu
}

// AddDurationInPeriods adds i to the "duration_in_periods" field.
func (cu *CouponUpdate) AddDurationInPeriods(i int) *CouponUpdate {
	cu.mutation.AddDurationInPeriods(i)
	return cu
}

// ClearDurationInPeriods clears the value of the "duration_in_periods" field.
func (cu *CouponUpdate) ClearDurationInPeriods() *CouponUpdate {
	cu.mutation.ClearDurationInPeriods()
	return cu
}

// SetCurrency sets the "currency" field.
func (cu *CouponUpdate) SetCurrency(s string) *CouponUpdate {
	cu.mutation.SetCurrency(s)
	return cu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCurrency(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCurrency(*s)
	}
	return cu
}

// ClearCurrency clears the value of the "currency" field.
func (cu *CouponUpdate) ClearCurrency() *CouponUpdate {
	cu.mutation.ClearCurrency()
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *CouponUpdate) SetMetadata(m map[string]string) *CouponUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *CouponUpdate) ClearMetadata() *CouponUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// AddCouponAssociationIDs adds the "coupon_associations" edge to the CouponAssociation entity by IDs.
func (cu *CouponUpdate) AddCouponAssociationIDs(ids ...string) *CouponUpdate {
	cu.mutation.AddCouponAssociationIDs(ids...)
	return cu
}

// AddCouponAssociations adds the "coupon_associations" edges to the CouponAssociation entity.
func (cu *CouponUpdate) AddCouponAssociations(c ...*CouponAssociation) *CouponUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCouponAssociationIDs(ids...)
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (cu *CouponUpdate) AddCouponApplicationIDs(ids ...string) *CouponUpdate {
	cu.mutation.AddCouponApplicationIDs(ids...)
	return cu
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (cu *CouponUpdate) AddCouponApplications(c ...*CouponApplication) *CouponUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCouponApplicationIDs(ids...)
}

// Mutation returns the CouponMutation object of the builder.
func (cu *CouponUpdate) Mutation() *CouponMutation {
	return cu.mutation
}

// ClearCouponAssociations clears all "coupon_associations" edges to the CouponAssociation entity.
func (cu *CouponUpdate) ClearCouponAssociations() *CouponUpdate {
	cu.mutation.ClearCouponAssociations()
	return cu
}

// RemoveCouponAssociationIDs removes the "coupon_associations" edge to CouponAssociation entities by IDs.
func (cu *CouponUpdate) RemoveCouponAssociationIDs(ids ...string) *CouponUpdate {
	cu.mutation.RemoveCouponAssociationIDs(ids...)
	return cu
}

// RemoveCouponAssociations removes "coupon_associations" edges to CouponAssociation entities.
func (cu *CouponUpdate) RemoveCouponAssociations(c ...*CouponAssociation) *CouponUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCouponAssociationIDs(ids...)
}

// ClearCouponApplications clears all "coupon_applications" edges to the CouponApplication entity.
func (cu *CouponUpdate) ClearCouponApplications() *CouponUpdate {
	cu.mutation.ClearCouponApplications()
	return cu
}

// RemoveCouponApplicationIDs removes the "coupon_applications" edge to CouponApplication entities by IDs.
func (cu *CouponUpdate) RemoveCouponApplicationIDs(ids ...string) *CouponUpdate {
	cu.mutation.RemoveCouponApplicationIDs(ids...)
	return cu
}

// RemoveCouponApplications removes "coupon_applications" edges to CouponApplication entities.
func (cu *CouponUpdate) RemoveCouponApplications(c ...*CouponApplication) *CouponUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCouponApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CouponUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CouponUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CouponUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CouponUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := coupon.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CouponUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := coupon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Coupon.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := coupon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Coupon.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Cadence(); ok {
		if err := coupon.CadenceValidator(v); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`ent: validator failed for field "Coupon.cadence": %w`, err)}
		}
	}
	return nil
}

func (cu *CouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(coupon.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(coupon.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(coupon.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(coupon.FieldUpdatedBy, field.TypeString)
	}
	if cu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(coupon.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.RedeemAfter(); ok {
		_spec.SetField(coupon.FieldRedeemAfter, field.TypeTime, value)
	}
	if cu.mutation.RedeemAfterCleared() {
		_spec.ClearField(coupon.FieldRedeemAfter, field.TypeTime)
	}
	if value, ok := cu.mutation.RedeemBefore(); ok {
		_spec.SetField(coupon.FieldRedeemBefore, field.TypeTime, value)
	}
	if cu.mutation.RedeemBeforeCleared() {
		_spec.ClearField(coupon.FieldRedeemBefore, field.TypeTime)
	}
	if value, ok := cu.mutation.MaxRedemptions(); ok {
		_spec.SetField(coupon.FieldMaxRedemptions, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMaxRedemptions(); ok {
		_spec.AddField(coupon.FieldMaxRedemptions, field.TypeInt, value)
	}
	if cu.mutation.MaxRedemptionsCleared() {
		_spec.ClearField(coupon.FieldMaxRedemptions, field.TypeInt)
	}
	if value, ok := cu.mutation.TotalRedemptions(); ok {
		_spec.SetField(coupon.FieldTotalRedemptions, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTotalRedemptions(); ok {
		_spec.AddField(coupon.FieldTotalRedemptions, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Rules(); ok {
		_spec.SetField(coupon.FieldRules, field.TypeJSON, value)
	}
	if cu.mutation.RulesCleared() {
		_spec.ClearField(coupon.FieldRules, field.TypeJSON)
	}
	if value, ok := cu.mutation.AmountOff(); ok {
		_spec.SetField(coupon.FieldAmountOff, field.TypeOther, value)
	}
	if cu.mutation.AmountOffCleared() {
		_spec.ClearField(coupon.FieldAmountOff, field.TypeOther)
	}
	if value, ok := cu.mutation.PercentageOff(); ok {
		_spec.SetField(coupon.FieldPercentageOff, field.TypeOther, value)
	}
	if cu.mutation.PercentageOffCleared() {
		_spec.ClearField(coupon.FieldPercentageOff, field.TypeOther)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(coupon.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.Cadence(); ok {
		_spec.SetField(coupon.FieldCadence, field.TypeString, value)
	}
	if value, ok := cu.mutation.DurationInPeriods(); ok {
		_spec.SetField(coupon.FieldDurationInPeriods, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDurationInPeriods(); ok {
		_spec.AddField(coupon.FieldDurationInPeriods, field.TypeInt, value)
	}
	if cu.mutation.DurationInPeriodsCleared() {
		_spec.ClearField(coupon.FieldDurationInPeriods, field.TypeInt)
	}
	if value, ok := cu.mutation.Currency(); ok {
		_spec.SetField(coupon.FieldCurrency, field.TypeString, value)
	}
	if cu.mutation.CurrencyCleared() {
		_spec.ClearField(coupon.FieldCurrency, field.TypeString)
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(coupon.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(coupon.FieldMetadata, field.TypeJSON)
	}
	if cu.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponAssociationsTable,
			Columns: []string{coupon.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCouponAssociationsIDs(); len(nodes) > 0 && !cu.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponAssociationsTable,
			Columns: []string{coupon.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CouponAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponAssociationsTable,
			Columns: []string{coupon.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponApplicationsTable,
			Columns: []string{coupon.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCouponApplicationsIDs(); len(nodes) > 0 && !cu.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponApplicationsTable,
			Columns: []string{coupon.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponApplicationsTable,
			Columns: []string{coupon.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponMutation
}

// SetStatus sets the "status" field.
func (cuo *CouponUpdateOne) SetStatus(s string) *CouponUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableStatus(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CouponUpdateOne) SetUpdatedAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CouponUpdateOne) SetUpdatedBy(s string) *CouponUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableUpdatedBy(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CouponUpdateOne) ClearUpdatedBy() *CouponUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CouponUpdateOne) SetName(s string) *CouponUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableName(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetRedeemAfter sets the "redeem_after" field.
func (cuo *CouponUpdateOne) SetRedeemAfter(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetRedeemAfter(t)
	return cuo
}

// SetNillableRedeemAfter sets the "redeem_after" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableRedeemAfter(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetRedeemAfter(*t)
	}
	return cuo
}

// ClearRedeemAfter clears the value of the "redeem_after" field.
func (cuo *CouponUpdateOne) ClearRedeemAfter() *CouponUpdateOne {
	cuo.mutation.ClearRedeemAfter()
	return cuo
}

// SetRedeemBefore sets the "redeem_before" field.
func (cuo *CouponUpdateOne) SetRedeemBefore(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetRedeemBefore(t)
	return cuo
}

// SetNillableRedeemBefore sets the "redeem_before" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableRedeemBefore(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetRedeemBefore(*t)
	}
	return cuo
}

// ClearRedeemBefore clears the value of the "redeem_before" field.
func (cuo *CouponUpdateOne) ClearRedeemBefore() *CouponUpdateOne {
	cuo.mutation.ClearRedeemBefore()
	return cuo
}

// SetMaxRedemptions sets the "max_redemptions" field.
func (cuo *CouponUpdateOne) SetMaxRedemptions(i int) *CouponUpdateOne {
	cuo.mutation.ResetMaxRedemptions()
	cuo.mutation.SetMaxRedemptions(i)
	return cuo
}

// SetNillableMaxRedemptions sets the "max_redemptions" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableMaxRedemptions(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetMaxRedemptions(*i)
	}
	return cuo
}

// AddMaxRedemptions adds i to the "max_redemptions" field.
func (cuo *CouponUpdateOne) AddMaxRedemptions(i int) *CouponUpdateOne {
	cuo.mutation.AddMaxRedemptions(i)
	return cuo
}

// ClearMaxRedemptions clears the value of the "max_redemptions" field.
func (cuo *CouponUpdateOne) ClearMaxRedemptions() *CouponUpdateOne {
	cuo.mutation.ClearMaxRedemptions()
	return cuo
}

// SetTotalRedemptions sets the "total_redemptions" field.
func (cuo *CouponUpdateOne) SetTotalRedemptions(i int) *CouponUpdateOne {
	cuo.mutation.ResetTotalRedemptions()
	cuo.mutation.SetTotalRedemptions(i)
	return cuo
}

// SetNillableTotalRedemptions sets the "total_redemptions" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableTotalRedemptions(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetTotalRedemptions(*i)
	}
	return cuo
}

// AddTotalRedemptions adds i to the "total_redemptions" field.
func (cuo *CouponUpdateOne) AddTotalRedemptions(i int) *CouponUpdateOne {
	cuo.mutation.AddTotalRedemptions(i)
	return cuo
}

// SetRules sets the "rules" field.
func (cuo *CouponUpdateOne) SetRules(m map[string]interface{}) *CouponUpdateOne {
	cuo.mutation.SetRules(m)
	return cuo
}

// ClearRules clears the value of the "rules" field.
func (cuo *CouponUpdateOne) ClearRules() *CouponUpdateOne {
	cuo.mutation.ClearRules()
	return cuo
}

// SetAmountOff sets the "amount_off" field.
func (cuo *CouponUpdateOne) SetAmountOff(d decimal.Decimal) *CouponUpdateOne {
	cuo.mutation.SetAmountOff(d)
	return cuo
}

// SetNillableAmountOff sets the "amount_off" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableAmountOff(d *decimal.Decimal) *CouponUpdateOne {
	if d != nil {
		cuo.SetAmountOff(*d)
	}
	return cuo
}

// ClearAmountOff clears the value of the "amount_off" field.
func (cuo *CouponUpdateOne) ClearAmountOff() *CouponUpdateOne {
	cuo.mutation.ClearAmountOff()
	return cuo
}

// SetPercentageOff sets the "percentage_off" field.
func (cuo *CouponUpdateOne) SetPercentageOff(d decimal.Decimal) *CouponUpdateOne {
	cuo.mutation.SetPercentageOff(d)
	return cuo
}

// SetNillablePercentageOff sets the "percentage_off" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillablePercentageOff(d *decimal.Decimal) *CouponUpdateOne {
	if d != nil {
		cuo.SetPercentageOff(*d)
	}
	return cuo
}

// ClearPercentageOff clears the value of the "percentage_off" field.
func (cuo *CouponUpdateOne) ClearPercentageOff() *CouponUpdateOne {
	cuo.mutation.ClearPercentageOff()
	return cuo
}

// SetType sets the "type" field.
func (cuo *CouponUpdateOne) SetType(s string) *CouponUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableType(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetCadence sets the "cadence" field.
func (cuo *CouponUpdateOne) SetCadence(s string) *CouponUpdateOne {
	cuo.mutation.SetCadence(s)
	return cuo
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCadence(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCadence(*s)
	}
	return cuo
}

// SetDurationInPeriods sets the "duration_in_periods" field.
func (cuo *CouponUpdateOne) SetDurationInPeriods(i int) *CouponUpdateOne {
	cuo.mutation.ResetDurationInPeriods()
	cuo.mutation.SetDurationInPeriods(i)
	return cuo
}

// SetNillableDurationInPeriods sets the "duration_in_periods" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableDurationInPeriods(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetDurationInPeriods(*i)
	}
	return cuo
}

// AddDurationInPeriods adds i to the "duration_in_periods" field.
func (cuo *CouponUpdateOne) AddDurationInPeriods(i int) *CouponUpdateOne {
	cuo.mutation.AddDurationInPeriods(i)
	return cuo
}

// ClearDurationInPeriods clears the value of the "duration_in_periods" field.
func (cuo *CouponUpdateOne) ClearDurationInPeriods() *CouponUpdateOne {
	cuo.mutation.ClearDurationInPeriods()
	return cuo
}

// SetCurrency sets the "currency" field.
func (cuo *CouponUpdateOne) SetCurrency(s string) *CouponUpdateOne {
	cuo.mutation.SetCurrency(s)
	return cuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCurrency(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCurrency(*s)
	}
	return cuo
}

// ClearCurrency clears the value of the "currency" field.
func (cuo *CouponUpdateOne) ClearCurrency() *CouponUpdateOne {
	cuo.mutation.ClearCurrency()
	return cuo
}

// SetMetadata sets the "metadata" field.
func (cuo *CouponUpdateOne) SetMetadata(m map[string]string) *CouponUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *CouponUpdateOne) ClearMetadata() *CouponUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// AddCouponAssociationIDs adds the "coupon_associations" edge to the CouponAssociation entity by IDs.
func (cuo *CouponUpdateOne) AddCouponAssociationIDs(ids ...string) *CouponUpdateOne {
	cuo.mutation.AddCouponAssociationIDs(ids...)
	return cuo
}

// AddCouponAssociations adds the "coupon_associations" edges to the CouponAssociation entity.
func (cuo *CouponUpdateOne) AddCouponAssociations(c ...*CouponAssociation) *CouponUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCouponAssociationIDs(ids...)
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (cuo *CouponUpdateOne) AddCouponApplicationIDs(ids ...string) *CouponUpdateOne {
	cuo.mutation.AddCouponApplicationIDs(ids...)
	return cuo
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (cuo *CouponUpdateOne) AddCouponApplications(c ...*CouponApplication) *CouponUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCouponApplicationIDs(ids...)
}

// Mutation returns the CouponMutation object of the builder.
func (cuo *CouponUpdateOne) Mutation() *CouponMutation {
	return cuo.mutation
}

// ClearCouponAssociations clears all "coupon_associations" edges to the CouponAssociation entity.
func (cuo *CouponUpdateOne) ClearCouponAssociations() *CouponUpdateOne {
	cuo.mutation.ClearCouponAssociations()
	return cuo
}

// RemoveCouponAssociationIDs removes the "coupon_associations" edge to CouponAssociation entities by IDs.
func (cuo *CouponUpdateOne) RemoveCouponAssociationIDs(ids ...string) *CouponUpdateOne {
	cuo.mutation.RemoveCouponAssociationIDs(ids...)
	return cuo
}

// RemoveCouponAssociations removes "coupon_associations" edges to CouponAssociation entities.
func (cuo *CouponUpdateOne) RemoveCouponAssociations(c ...*CouponAssociation) *CouponUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCouponAssociationIDs(ids...)
}

// ClearCouponApplications clears all "coupon_applications" edges to the CouponApplication entity.
func (cuo *CouponUpdateOne) ClearCouponApplications() *CouponUpdateOne {
	cuo.mutation.ClearCouponApplications()
	return cuo
}

// RemoveCouponApplicationIDs removes the "coupon_applications" edge to CouponApplication entities by IDs.
func (cuo *CouponUpdateOne) RemoveCouponApplicationIDs(ids ...string) *CouponUpdateOne {
	cuo.mutation.RemoveCouponApplicationIDs(ids...)
	return cuo
}

// RemoveCouponApplications removes "coupon_applications" edges to CouponApplication entities.
func (cuo *CouponUpdateOne) RemoveCouponApplications(c ...*CouponApplication) *CouponUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCouponApplicationIDs(ids...)
}

// Where appends a list predicates to the CouponUpdate builder.
func (cuo *CouponUpdateOne) Where(ps ...predicate.Coupon) *CouponUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coupon entity.
func (cuo *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CouponUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := coupon.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CouponUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := coupon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Coupon.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := coupon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Coupon.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Cadence(); ok {
		if err := coupon.CadenceValidator(v); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`ent: validator failed for field "Coupon.cadence": %w`, err)}
		}
	}
	return nil
}

func (cuo *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for _, f := range fields {
			if !coupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(coupon.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(coupon.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(coupon.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(coupon.FieldUpdatedBy, field.TypeString)
	}
	if cuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(coupon.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.RedeemAfter(); ok {
		_spec.SetField(coupon.FieldRedeemAfter, field.TypeTime, value)
	}
	if cuo.mutation.RedeemAfterCleared() {
		_spec.ClearField(coupon.FieldRedeemAfter, field.TypeTime)
	}
	if value, ok := cuo.mutation.RedeemBefore(); ok {
		_spec.SetField(coupon.FieldRedeemBefore, field.TypeTime, value)
	}
	if cuo.mutation.RedeemBeforeCleared() {
		_spec.ClearField(coupon.FieldRedeemBefore, field.TypeTime)
	}
	if value, ok := cuo.mutation.MaxRedemptions(); ok {
		_spec.SetField(coupon.FieldMaxRedemptions, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMaxRedemptions(); ok {
		_spec.AddField(coupon.FieldMaxRedemptions, field.TypeInt, value)
	}
	if cuo.mutation.MaxRedemptionsCleared() {
		_spec.ClearField(coupon.FieldMaxRedemptions, field.TypeInt)
	}
	if value, ok := cuo.mutation.TotalRedemptions(); ok {
		_spec.SetField(coupon.FieldTotalRedemptions, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTotalRedemptions(); ok {
		_spec.AddField(coupon.FieldTotalRedemptions, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Rules(); ok {
		_spec.SetField(coupon.FieldRules, field.TypeJSON, value)
	}
	if cuo.mutation.RulesCleared() {
		_spec.ClearField(coupon.FieldRules, field.TypeJSON)
	}
	if value, ok := cuo.mutation.AmountOff(); ok {
		_spec.SetField(coupon.FieldAmountOff, field.TypeOther, value)
	}
	if cuo.mutation.AmountOffCleared() {
		_spec.ClearField(coupon.FieldAmountOff, field.TypeOther)
	}
	if value, ok := cuo.mutation.PercentageOff(); ok {
		_spec.SetField(coupon.FieldPercentageOff, field.TypeOther, value)
	}
	if cuo.mutation.PercentageOffCleared() {
		_spec.ClearField(coupon.FieldPercentageOff, field.TypeOther)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(coupon.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Cadence(); ok {
		_spec.SetField(coupon.FieldCadence, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DurationInPeriods(); ok {
		_spec.SetField(coupon.FieldDurationInPeriods, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDurationInPeriods(); ok {
		_spec.AddField(coupon.FieldDurationInPeriods, field.TypeInt, value)
	}
	if cuo.mutation.DurationInPeriodsCleared() {
		_spec.ClearField(coupon.FieldDurationInPeriods, field.TypeInt)
	}
	if value, ok := cuo.mutation.Currency(); ok {
		_spec.SetField(coupon.FieldCurrency, field.TypeString, value)
	}
	if cuo.mutation.CurrencyCleared() {
		_spec.ClearField(coupon.FieldCurrency, field.TypeString)
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(coupon.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(coupon.FieldMetadata, field.TypeJSON)
	}
	if cuo.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponAssociationsTable,
			Columns: []string{coupon.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCouponAssociationsIDs(); len(nodes) > 0 && !cuo.mutation.CouponAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponAssociationsTable,
			Columns: []string{coupon.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CouponAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponAssociationsTable,
			Columns: []string{coupon.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponApplicationsTable,
			Columns: []string{coupon.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCouponApplicationsIDs(); len(nodes) > 0 && !cuo.mutation.CouponApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponApplicationsTable,
			Columns: []string{coupon.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponApplicationsTable,
			Columns: []string{coupon.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Coupon{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
