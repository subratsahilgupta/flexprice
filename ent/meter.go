// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/schema"
)

// Meter is the model entity for the Meter schema.
type Meter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// EventName holds the value of the "event_name" field.
	EventName string `json:"event_name,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Aggregation holds the value of the "aggregation" field.
	Aggregation schema.MeterAggregation `json:"aggregation,omitempty"`
	// Filters holds the value of the "filters" field.
	Filters []schema.MeterFilter `json:"filters,omitempty"`
	// ResetUsage holds the value of the "reset_usage" field.
	ResetUsage string `json:"reset_usage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MeterQuery when eager-loading is set.
	Edges        MeterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MeterEdges holds the relations/edges for other nodes in the graph.
type MeterEdges struct {
	// Costsheet holds the value of the costsheet edge.
	Costsheet []*Costsheet `json:"costsheet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CostsheetOrErr returns the Costsheet value or an error if the edge
// was not loaded in eager-loading.
func (e MeterEdges) CostsheetOrErr() ([]*Costsheet, error) {
	if e.loadedTypes[0] {
		return e.Costsheet, nil
	}
	return nil, &NotLoadedError{edge: "costsheet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Meter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meter.FieldAggregation, meter.FieldFilters:
			values[i] = new([]byte)
		case meter.FieldID, meter.FieldTenantID, meter.FieldStatus, meter.FieldCreatedBy, meter.FieldUpdatedBy, meter.FieldEnvironmentID, meter.FieldEventName, meter.FieldName, meter.FieldResetUsage:
			values[i] = new(sql.NullString)
		case meter.FieldCreatedAt, meter.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Meter fields.
func (m *Meter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case meter.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				m.TenantID = value.String
			}
		case meter.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = value.String
			}
		case meter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case meter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case meter.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				m.CreatedBy = value.String
			}
		case meter.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				m.UpdatedBy = value.String
			}
		case meter.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				m.EnvironmentID = value.String
			}
		case meter.FieldEventName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_name", values[i])
			} else if value.Valid {
				m.EventName = value.String
			}
		case meter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case meter.FieldAggregation:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field aggregation", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Aggregation); err != nil {
					return fmt.Errorf("unmarshal field aggregation: %w", err)
				}
			}
		case meter.FieldFilters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field filters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Filters); err != nil {
					return fmt.Errorf("unmarshal field filters: %w", err)
				}
			}
		case meter.FieldResetUsage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reset_usage", values[i])
			} else if value.Valid {
				m.ResetUsage = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Meter.
// This includes values selected through modifiers, order, etc.
func (m *Meter) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryCostsheet queries the "costsheet" edge of the Meter entity.
func (m *Meter) QueryCostsheet() *CostsheetQuery {
	return NewMeterClient(m.config).QueryCostsheet(m)
}

// Update returns a builder for updating this Meter.
// Note that you need to call Meter.Unwrap() before calling this method if this Meter
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Meter) Update() *MeterUpdateOne {
	return NewMeterClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Meter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Meter) Unwrap() *Meter {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Meter is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Meter) String() string {
	var builder strings.Builder
	builder.WriteString("Meter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(m.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(m.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("event_name=")
	builder.WriteString(m.EventName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("aggregation=")
	builder.WriteString(fmt.Sprintf("%v", m.Aggregation))
	builder.WriteString(", ")
	builder.WriteString("filters=")
	builder.WriteString(fmt.Sprintf("%v", m.Filters))
	builder.WriteString(", ")
	builder.WriteString("reset_usage=")
	builder.WriteString(m.ResetUsage)
	builder.WriteByte(')')
	return builder.String()
}

// Meters is a parsable slice of Meter.
type Meters []*Meter
