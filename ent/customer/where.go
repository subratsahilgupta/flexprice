// Code generated by ent, DO NOT EDIT.

package customer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldEnvironmentID, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldExternalID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldEmail, v))
}

// AddressLine1 applies equality check predicate on the "address_line1" field. It's identical to AddressLine1EQ.
func AddressLine1(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressLine1, v))
}

// AddressLine2 applies equality check predicate on the "address_line2" field. It's identical to AddressLine2EQ.
func AddressLine2(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressLine2, v))
}

// AddressCity applies equality check predicate on the "address_city" field. It's identical to AddressCityEQ.
func AddressCity(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressCity, v))
}

// AddressState applies equality check predicate on the "address_state" field. It's identical to AddressStateEQ.
func AddressState(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressState, v))
}

// AddressPostalCode applies equality check predicate on the "address_postal_code" field. It's identical to AddressPostalCodeEQ.
func AddressPostalCode(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressPostalCode, v))
}

// AddressCountry applies equality check predicate on the "address_country" field. It's identical to AddressCountryEQ.
func AddressCountry(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressCountry, v))
}

// AutoCancelOnUnpaid applies equality check predicate on the "auto_cancel_on_unpaid" field. It's identical to AutoCancelOnUnpaidEQ.
func AutoCancelOnUnpaid(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAutoCancelOnUnpaid, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldExternalID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldEmail, v))
}

// AddressLine1EQ applies the EQ predicate on the "address_line1" field.
func AddressLine1EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressLine1, v))
}

// AddressLine1NEQ applies the NEQ predicate on the "address_line1" field.
func AddressLine1NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAddressLine1, v))
}

// AddressLine1In applies the In predicate on the "address_line1" field.
func AddressLine1In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldAddressLine1, vs...))
}

// AddressLine1NotIn applies the NotIn predicate on the "address_line1" field.
func AddressLine1NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldAddressLine1, vs...))
}

// AddressLine1GT applies the GT predicate on the "address_line1" field.
func AddressLine1GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldAddressLine1, v))
}

// AddressLine1GTE applies the GTE predicate on the "address_line1" field.
func AddressLine1GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldAddressLine1, v))
}

// AddressLine1LT applies the LT predicate on the "address_line1" field.
func AddressLine1LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldAddressLine1, v))
}

// AddressLine1LTE applies the LTE predicate on the "address_line1" field.
func AddressLine1LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldAddressLine1, v))
}

// AddressLine1Contains applies the Contains predicate on the "address_line1" field.
func AddressLine1Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldAddressLine1, v))
}

// AddressLine1HasPrefix applies the HasPrefix predicate on the "address_line1" field.
func AddressLine1HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldAddressLine1, v))
}

// AddressLine1HasSuffix applies the HasSuffix predicate on the "address_line1" field.
func AddressLine1HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldAddressLine1, v))
}

// AddressLine1IsNil applies the IsNil predicate on the "address_line1" field.
func AddressLine1IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldAddressLine1))
}

// AddressLine1NotNil applies the NotNil predicate on the "address_line1" field.
func AddressLine1NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldAddressLine1))
}

// AddressLine1EqualFold applies the EqualFold predicate on the "address_line1" field.
func AddressLine1EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldAddressLine1, v))
}

// AddressLine1ContainsFold applies the ContainsFold predicate on the "address_line1" field.
func AddressLine1ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldAddressLine1, v))
}

// AddressLine2EQ applies the EQ predicate on the "address_line2" field.
func AddressLine2EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressLine2, v))
}

// AddressLine2NEQ applies the NEQ predicate on the "address_line2" field.
func AddressLine2NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAddressLine2, v))
}

// AddressLine2In applies the In predicate on the "address_line2" field.
func AddressLine2In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldAddressLine2, vs...))
}

// AddressLine2NotIn applies the NotIn predicate on the "address_line2" field.
func AddressLine2NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldAddressLine2, vs...))
}

// AddressLine2GT applies the GT predicate on the "address_line2" field.
func AddressLine2GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldAddressLine2, v))
}

// AddressLine2GTE applies the GTE predicate on the "address_line2" field.
func AddressLine2GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldAddressLine2, v))
}

// AddressLine2LT applies the LT predicate on the "address_line2" field.
func AddressLine2LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldAddressLine2, v))
}

// AddressLine2LTE applies the LTE predicate on the "address_line2" field.
func AddressLine2LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldAddressLine2, v))
}

// AddressLine2Contains applies the Contains predicate on the "address_line2" field.
func AddressLine2Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldAddressLine2, v))
}

// AddressLine2HasPrefix applies the HasPrefix predicate on the "address_line2" field.
func AddressLine2HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldAddressLine2, v))
}

// AddressLine2HasSuffix applies the HasSuffix predicate on the "address_line2" field.
func AddressLine2HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldAddressLine2, v))
}

// AddressLine2IsNil applies the IsNil predicate on the "address_line2" field.
func AddressLine2IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldAddressLine2))
}

// AddressLine2NotNil applies the NotNil predicate on the "address_line2" field.
func AddressLine2NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldAddressLine2))
}

// AddressLine2EqualFold applies the EqualFold predicate on the "address_line2" field.
func AddressLine2EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldAddressLine2, v))
}

// AddressLine2ContainsFold applies the ContainsFold predicate on the "address_line2" field.
func AddressLine2ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldAddressLine2, v))
}

// AddressCityEQ applies the EQ predicate on the "address_city" field.
func AddressCityEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressCity, v))
}

// AddressCityNEQ applies the NEQ predicate on the "address_city" field.
func AddressCityNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAddressCity, v))
}

// AddressCityIn applies the In predicate on the "address_city" field.
func AddressCityIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldAddressCity, vs...))
}

// AddressCityNotIn applies the NotIn predicate on the "address_city" field.
func AddressCityNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldAddressCity, vs...))
}

// AddressCityGT applies the GT predicate on the "address_city" field.
func AddressCityGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldAddressCity, v))
}

// AddressCityGTE applies the GTE predicate on the "address_city" field.
func AddressCityGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldAddressCity, v))
}

// AddressCityLT applies the LT predicate on the "address_city" field.
func AddressCityLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldAddressCity, v))
}

// AddressCityLTE applies the LTE predicate on the "address_city" field.
func AddressCityLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldAddressCity, v))
}

// AddressCityContains applies the Contains predicate on the "address_city" field.
func AddressCityContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldAddressCity, v))
}

// AddressCityHasPrefix applies the HasPrefix predicate on the "address_city" field.
func AddressCityHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldAddressCity, v))
}

// AddressCityHasSuffix applies the HasSuffix predicate on the "address_city" field.
func AddressCityHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldAddressCity, v))
}

// AddressCityIsNil applies the IsNil predicate on the "address_city" field.
func AddressCityIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldAddressCity))
}

// AddressCityNotNil applies the NotNil predicate on the "address_city" field.
func AddressCityNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldAddressCity))
}

// AddressCityEqualFold applies the EqualFold predicate on the "address_city" field.
func AddressCityEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldAddressCity, v))
}

// AddressCityContainsFold applies the ContainsFold predicate on the "address_city" field.
func AddressCityContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldAddressCity, v))
}

// AddressStateEQ applies the EQ predicate on the "address_state" field.
func AddressStateEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressState, v))
}

// AddressStateNEQ applies the NEQ predicate on the "address_state" field.
func AddressStateNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAddressState, v))
}

// AddressStateIn applies the In predicate on the "address_state" field.
func AddressStateIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldAddressState, vs...))
}

// AddressStateNotIn applies the NotIn predicate on the "address_state" field.
func AddressStateNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldAddressState, vs...))
}

// AddressStateGT applies the GT predicate on the "address_state" field.
func AddressStateGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldAddressState, v))
}

// AddressStateGTE applies the GTE predicate on the "address_state" field.
func AddressStateGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldAddressState, v))
}

// AddressStateLT applies the LT predicate on the "address_state" field.
func AddressStateLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldAddressState, v))
}

// AddressStateLTE applies the LTE predicate on the "address_state" field.
func AddressStateLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldAddressState, v))
}

// AddressStateContains applies the Contains predicate on the "address_state" field.
func AddressStateContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldAddressState, v))
}

// AddressStateHasPrefix applies the HasPrefix predicate on the "address_state" field.
func AddressStateHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldAddressState, v))
}

// AddressStateHasSuffix applies the HasSuffix predicate on the "address_state" field.
func AddressStateHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldAddressState, v))
}

// AddressStateIsNil applies the IsNil predicate on the "address_state" field.
func AddressStateIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldAddressState))
}

// AddressStateNotNil applies the NotNil predicate on the "address_state" field.
func AddressStateNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldAddressState))
}

// AddressStateEqualFold applies the EqualFold predicate on the "address_state" field.
func AddressStateEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldAddressState, v))
}

// AddressStateContainsFold applies the ContainsFold predicate on the "address_state" field.
func AddressStateContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldAddressState, v))
}

// AddressPostalCodeEQ applies the EQ predicate on the "address_postal_code" field.
func AddressPostalCodeEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressPostalCode, v))
}

// AddressPostalCodeNEQ applies the NEQ predicate on the "address_postal_code" field.
func AddressPostalCodeNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAddressPostalCode, v))
}

// AddressPostalCodeIn applies the In predicate on the "address_postal_code" field.
func AddressPostalCodeIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldAddressPostalCode, vs...))
}

// AddressPostalCodeNotIn applies the NotIn predicate on the "address_postal_code" field.
func AddressPostalCodeNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldAddressPostalCode, vs...))
}

// AddressPostalCodeGT applies the GT predicate on the "address_postal_code" field.
func AddressPostalCodeGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldAddressPostalCode, v))
}

// AddressPostalCodeGTE applies the GTE predicate on the "address_postal_code" field.
func AddressPostalCodeGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldAddressPostalCode, v))
}

// AddressPostalCodeLT applies the LT predicate on the "address_postal_code" field.
func AddressPostalCodeLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldAddressPostalCode, v))
}

// AddressPostalCodeLTE applies the LTE predicate on the "address_postal_code" field.
func AddressPostalCodeLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldAddressPostalCode, v))
}

// AddressPostalCodeContains applies the Contains predicate on the "address_postal_code" field.
func AddressPostalCodeContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldAddressPostalCode, v))
}

// AddressPostalCodeHasPrefix applies the HasPrefix predicate on the "address_postal_code" field.
func AddressPostalCodeHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldAddressPostalCode, v))
}

// AddressPostalCodeHasSuffix applies the HasSuffix predicate on the "address_postal_code" field.
func AddressPostalCodeHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldAddressPostalCode, v))
}

// AddressPostalCodeIsNil applies the IsNil predicate on the "address_postal_code" field.
func AddressPostalCodeIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldAddressPostalCode))
}

// AddressPostalCodeNotNil applies the NotNil predicate on the "address_postal_code" field.
func AddressPostalCodeNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldAddressPostalCode))
}

// AddressPostalCodeEqualFold applies the EqualFold predicate on the "address_postal_code" field.
func AddressPostalCodeEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldAddressPostalCode, v))
}

// AddressPostalCodeContainsFold applies the ContainsFold predicate on the "address_postal_code" field.
func AddressPostalCodeContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldAddressPostalCode, v))
}

// AddressCountryEQ applies the EQ predicate on the "address_country" field.
func AddressCountryEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAddressCountry, v))
}

// AddressCountryNEQ applies the NEQ predicate on the "address_country" field.
func AddressCountryNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAddressCountry, v))
}

// AddressCountryIn applies the In predicate on the "address_country" field.
func AddressCountryIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldAddressCountry, vs...))
}

// AddressCountryNotIn applies the NotIn predicate on the "address_country" field.
func AddressCountryNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldAddressCountry, vs...))
}

// AddressCountryGT applies the GT predicate on the "address_country" field.
func AddressCountryGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldAddressCountry, v))
}

// AddressCountryGTE applies the GTE predicate on the "address_country" field.
func AddressCountryGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldAddressCountry, v))
}

// AddressCountryLT applies the LT predicate on the "address_country" field.
func AddressCountryLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldAddressCountry, v))
}

// AddressCountryLTE applies the LTE predicate on the "address_country" field.
func AddressCountryLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldAddressCountry, v))
}

// AddressCountryContains applies the Contains predicate on the "address_country" field.
func AddressCountryContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldAddressCountry, v))
}

// AddressCountryHasPrefix applies the HasPrefix predicate on the "address_country" field.
func AddressCountryHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldAddressCountry, v))
}

// AddressCountryHasSuffix applies the HasSuffix predicate on the "address_country" field.
func AddressCountryHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldAddressCountry, v))
}

// AddressCountryIsNil applies the IsNil predicate on the "address_country" field.
func AddressCountryIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldAddressCountry))
}

// AddressCountryNotNil applies the NotNil predicate on the "address_country" field.
func AddressCountryNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldAddressCountry))
}

// AddressCountryEqualFold applies the EqualFold predicate on the "address_country" field.
func AddressCountryEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldAddressCountry, v))
}

// AddressCountryContainsFold applies the ContainsFold predicate on the "address_country" field.
func AddressCountryContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldAddressCountry, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldMetadata))
}

// AutoCancelOnUnpaidEQ applies the EQ predicate on the "auto_cancel_on_unpaid" field.
func AutoCancelOnUnpaidEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAutoCancelOnUnpaid, v))
}

// AutoCancelOnUnpaidNEQ applies the NEQ predicate on the "auto_cancel_on_unpaid" field.
func AutoCancelOnUnpaidNEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAutoCancelOnUnpaid, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.NotPredicates(p))
}
