// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/invoice"
	"github.com/shopspring/decimal"
)

// Invoice is the model entity for the Invoice schema.
type Invoice struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// InvoiceType holds the value of the "invoice_type" field.
	InvoiceType string `json:"invoice_type,omitempty"`
	// InvoiceStatus holds the value of the "invoice_status" field.
	InvoiceStatus string `json:"invoice_status,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus string `json:"payment_status,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// AmountDue holds the value of the "amount_due" field.
	AmountDue decimal.Decimal `json:"amount_due,omitempty"`
	// AmountPaid holds the value of the "amount_paid" field.
	AmountPaid decimal.Decimal `json:"amount_paid,omitempty"`
	// AmountRemaining holds the value of the "amount_remaining" field.
	AmountRemaining decimal.Decimal `json:"amount_remaining,omitempty"`
	// Subtotal holds the value of the "subtotal" field.
	Subtotal decimal.Decimal `json:"subtotal,omitempty"`
	// AdjustmentAmount holds the value of the "adjustment_amount" field.
	AdjustmentAmount decimal.Decimal `json:"adjustment_amount,omitempty"`
	// RefundedAmount holds the value of the "refunded_amount" field.
	RefundedAmount decimal.Decimal `json:"refunded_amount,omitempty"`
	// TotalDiscount holds the value of the "total_discount" field.
	TotalDiscount *decimal.Decimal `json:"total_discount,omitempty"`
	// Total holds the value of the "total" field.
	Total decimal.Decimal `json:"total,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate *time.Time `json:"due_date,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt *time.Time `json:"paid_at,omitempty"`
	// VoidedAt holds the value of the "voided_at" field.
	VoidedAt *time.Time `json:"voided_at,omitempty"`
	// FinalizedAt holds the value of the "finalized_at" field.
	FinalizedAt *time.Time `json:"finalized_at,omitempty"`
	// BillingPeriod holds the value of the "billing_period" field.
	BillingPeriod *string `json:"billing_period,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart *time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd *time.Time `json:"period_end,omitempty"`
	// InvoicePdfURL holds the value of the "invoice_pdf_url" field.
	InvoicePdfURL *string `json:"invoice_pdf_url,omitempty"`
	// BillingReason holds the value of the "billing_reason" field.
	BillingReason string `json:"billing_reason,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// Generated invoice number unique per tenant
	InvoiceNumber *string `json:"invoice_number,omitempty"`
	// Sequence number for subscription billing periods
	BillingSequence *int `json:"billing_sequence,omitempty"`
	// Key for ensuring idempotent invoice creation
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceQuery when eager-loading is set.
	Edges        InvoiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InvoiceEdges holds the relations/edges for other nodes in the graph.
type InvoiceEdges struct {
	// LineItems holds the value of the line_items edge.
	LineItems []*InvoiceLineItem `json:"line_items,omitempty"`
	// Invoice can have multiple coupon applications
	CouponApplications []*CouponApplication `json:"coupon_applications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LineItemsOrErr returns the LineItems value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) LineItemsOrErr() ([]*InvoiceLineItem, error) {
	if e.loadedTypes[0] {
		return e.LineItems, nil
	}
	return nil, &NotLoadedError{edge: "line_items"}
}

// CouponApplicationsOrErr returns the CouponApplications value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) CouponApplicationsOrErr() ([]*CouponApplication, error) {
	if e.loadedTypes[1] {
		return e.CouponApplications, nil
	}
	return nil, &NotLoadedError{edge: "coupon_applications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoice.FieldTotalDiscount:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case invoice.FieldMetadata:
			values[i] = new([]byte)
		case invoice.FieldAmountDue, invoice.FieldAmountPaid, invoice.FieldAmountRemaining, invoice.FieldSubtotal, invoice.FieldAdjustmentAmount, invoice.FieldRefundedAmount, invoice.FieldTotal:
			values[i] = new(decimal.Decimal)
		case invoice.FieldVersion, invoice.FieldBillingSequence:
			values[i] = new(sql.NullInt64)
		case invoice.FieldID, invoice.FieldTenantID, invoice.FieldStatus, invoice.FieldCreatedBy, invoice.FieldUpdatedBy, invoice.FieldEnvironmentID, invoice.FieldCustomerID, invoice.FieldSubscriptionID, invoice.FieldInvoiceType, invoice.FieldInvoiceStatus, invoice.FieldPaymentStatus, invoice.FieldCurrency, invoice.FieldDescription, invoice.FieldBillingPeriod, invoice.FieldInvoicePdfURL, invoice.FieldBillingReason, invoice.FieldInvoiceNumber, invoice.FieldIdempotencyKey:
			values[i] = new(sql.NullString)
		case invoice.FieldCreatedAt, invoice.FieldUpdatedAt, invoice.FieldDueDate, invoice.FieldPaidAt, invoice.FieldVoidedAt, invoice.FieldFinalizedAt, invoice.FieldPeriodStart, invoice.FieldPeriodEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoice fields.
func (i *Invoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invoice.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case invoice.FieldTenantID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[j])
			} else if value.Valid {
				i.TenantID = value.String
			}
		case invoice.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		case invoice.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case invoice.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case invoice.FieldCreatedBy:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[j])
			} else if value.Valid {
				i.CreatedBy = value.String
			}
		case invoice.FieldUpdatedBy:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[j])
			} else if value.Valid {
				i.UpdatedBy = value.String
			}
		case invoice.FieldEnvironmentID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[j])
			} else if value.Valid {
				i.EnvironmentID = value.String
			}
		case invoice.FieldCustomerID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[j])
			} else if value.Valid {
				i.CustomerID = value.String
			}
		case invoice.FieldSubscriptionID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[j])
			} else if value.Valid {
				i.SubscriptionID = new(string)
				*i.SubscriptionID = value.String
			}
		case invoice.FieldInvoiceType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_type", values[j])
			} else if value.Valid {
				i.InvoiceType = value.String
			}
		case invoice.FieldInvoiceStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_status", values[j])
			} else if value.Valid {
				i.InvoiceStatus = value.String
			}
		case invoice.FieldPaymentStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[j])
			} else if value.Valid {
				i.PaymentStatus = value.String
			}
		case invoice.FieldCurrency:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[j])
			} else if value.Valid {
				i.Currency = value.String
			}
		case invoice.FieldAmountDue:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_due", values[j])
			} else if value != nil {
				i.AmountDue = *value
			}
		case invoice.FieldAmountPaid:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_paid", values[j])
			} else if value != nil {
				i.AmountPaid = *value
			}
		case invoice.FieldAmountRemaining:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_remaining", values[j])
			} else if value != nil {
				i.AmountRemaining = *value
			}
		case invoice.FieldSubtotal:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[j])
			} else if value != nil {
				i.Subtotal = *value
			}
		case invoice.FieldAdjustmentAmount:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field adjustment_amount", values[j])
			} else if value != nil {
				i.AdjustmentAmount = *value
			}
		case invoice.FieldRefundedAmount:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field refunded_amount", values[j])
			} else if value != nil {
				i.RefundedAmount = *value
			}
		case invoice.FieldTotalDiscount:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field total_discount", values[j])
			} else if value.Valid {
				i.TotalDiscount = new(decimal.Decimal)
				*i.TotalDiscount = *value.S.(*decimal.Decimal)
			}
		case invoice.FieldTotal:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[j])
			} else if value != nil {
				i.Total = *value
			}
		case invoice.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case invoice.FieldDueDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[j])
			} else if value.Valid {
				i.DueDate = new(time.Time)
				*i.DueDate = value.Time
			}
		case invoice.FieldPaidAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[j])
			} else if value.Valid {
				i.PaidAt = new(time.Time)
				*i.PaidAt = value.Time
			}
		case invoice.FieldVoidedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field voided_at", values[j])
			} else if value.Valid {
				i.VoidedAt = new(time.Time)
				*i.VoidedAt = value.Time
			}
		case invoice.FieldFinalizedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finalized_at", values[j])
			} else if value.Valid {
				i.FinalizedAt = new(time.Time)
				*i.FinalizedAt = value.Time
			}
		case invoice.FieldBillingPeriod:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_period", values[j])
			} else if value.Valid {
				i.BillingPeriod = new(string)
				*i.BillingPeriod = value.String
			}
		case invoice.FieldPeriodStart:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[j])
			} else if value.Valid {
				i.PeriodStart = new(time.Time)
				*i.PeriodStart = value.Time
			}
		case invoice.FieldPeriodEnd:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[j])
			} else if value.Valid {
				i.PeriodEnd = new(time.Time)
				*i.PeriodEnd = value.Time
			}
		case invoice.FieldInvoicePdfURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_pdf_url", values[j])
			} else if value.Valid {
				i.InvoicePdfURL = new(string)
				*i.InvoicePdfURL = value.String
			}
		case invoice.FieldBillingReason:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_reason", values[j])
			} else if value.Valid {
				i.BillingReason = value.String
			}
		case invoice.FieldMetadata:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case invoice.FieldVersion:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[j])
			} else if value.Valid {
				i.Version = int(value.Int64)
			}
		case invoice.FieldInvoiceNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_number", values[j])
			} else if value.Valid {
				i.InvoiceNumber = new(string)
				*i.InvoiceNumber = value.String
			}
		case invoice.FieldBillingSequence:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field billing_sequence", values[j])
			} else if value.Valid {
				i.BillingSequence = new(int)
				*i.BillingSequence = int(value.Int64)
			}
		case invoice.FieldIdempotencyKey:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[j])
			} else if value.Valid {
				i.IdempotencyKey = new(string)
				*i.IdempotencyKey = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoice.
// This includes values selected through modifiers, order, etc.
func (i *Invoice) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryLineItems queries the "line_items" edge of the Invoice entity.
func (i *Invoice) QueryLineItems() *InvoiceLineItemQuery {
	return NewInvoiceClient(i.config).QueryLineItems(i)
}

// QueryCouponApplications queries the "coupon_applications" edge of the Invoice entity.
func (i *Invoice) QueryCouponApplications() *CouponApplicationQuery {
	return NewInvoiceClient(i.config).QueryCouponApplications(i)
}

// Update returns a builder for updating this Invoice.
// Note that you need to call Invoice.Unwrap() before calling this method if this Invoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invoice) Update() *InvoiceUpdateOne {
	return NewInvoiceClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invoice) Unwrap() *Invoice {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invoice is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invoice) String() string {
	var builder strings.Builder
	builder.WriteString("Invoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(i.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(i.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(i.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(i.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(i.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(i.CustomerID)
	builder.WriteString(", ")
	if v := i.SubscriptionID; v != nil {
		builder.WriteString("subscription_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("invoice_type=")
	builder.WriteString(i.InvoiceType)
	builder.WriteString(", ")
	builder.WriteString("invoice_status=")
	builder.WriteString(i.InvoiceStatus)
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(i.PaymentStatus)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(i.Currency)
	builder.WriteString(", ")
	builder.WriteString("amount_due=")
	builder.WriteString(fmt.Sprintf("%v", i.AmountDue))
	builder.WriteString(", ")
	builder.WriteString("amount_paid=")
	builder.WriteString(fmt.Sprintf("%v", i.AmountPaid))
	builder.WriteString(", ")
	builder.WriteString("amount_remaining=")
	builder.WriteString(fmt.Sprintf("%v", i.AmountRemaining))
	builder.WriteString(", ")
	builder.WriteString("subtotal=")
	builder.WriteString(fmt.Sprintf("%v", i.Subtotal))
	builder.WriteString(", ")
	builder.WriteString("adjustment_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.AdjustmentAmount))
	builder.WriteString(", ")
	builder.WriteString("refunded_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.RefundedAmount))
	builder.WriteString(", ")
	if v := i.TotalDiscount; v != nil {
		builder.WriteString("total_discount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", i.Total))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	if v := i.DueDate; v != nil {
		builder.WriteString("due_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.PaidAt; v != nil {
		builder.WriteString("paid_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.VoidedAt; v != nil {
		builder.WriteString("voided_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.FinalizedAt; v != nil {
		builder.WriteString("finalized_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.BillingPeriod; v != nil {
		builder.WriteString("billing_period=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.PeriodStart; v != nil {
		builder.WriteString("period_start=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.PeriodEnd; v != nil {
		builder.WriteString("period_end=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.InvoicePdfURL; v != nil {
		builder.WriteString("invoice_pdf_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("billing_reason=")
	builder.WriteString(i.BillingReason)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", i.Metadata))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", i.Version))
	builder.WriteString(", ")
	if v := i.InvoiceNumber; v != nil {
		builder.WriteString("invoice_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.BillingSequence; v != nil {
		builder.WriteString("billing_sequence=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := i.IdempotencyKey; v != nil {
		builder.WriteString("idempotency_key=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Invoices is a parsable slice of Invoice.
type Invoices []*Invoice
