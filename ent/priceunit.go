// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/priceunit"
	"github.com/shopspring/decimal"
)

// PriceUnit is the model entity for the PriceUnit schema.
type PriceUnit struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// BaseCurrency holds the value of the "base_currency" field.
	BaseCurrency string `json:"base_currency,omitempty"`
	// ConversionRate holds the value of the "conversion_rate" field.
	ConversionRate decimal.Decimal `json:"conversion_rate,omitempty"`
	// Precision holds the value of the "precision" field.
	Precision int `json:"precision,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PriceUnitQuery when eager-loading is set.
	Edges        PriceUnitEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PriceUnitEdges holds the relations/edges for other nodes in the graph.
type PriceUnitEdges struct {
	// Prices holds the value of the prices edge.
	Prices []*Price `json:"prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PricesOrErr returns the Prices value or an error if the edge
// was not loaded in eager-loading.
func (e PriceUnitEdges) PricesOrErr() ([]*Price, error) {
	if e.loadedTypes[0] {
		return e.Prices, nil
	}
	return nil, &NotLoadedError{edge: "prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PriceUnit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case priceunit.FieldConversionRate:
			values[i] = new(decimal.Decimal)
		case priceunit.FieldPrecision:
			values[i] = new(sql.NullInt64)
		case priceunit.FieldID, priceunit.FieldTenantID, priceunit.FieldStatus, priceunit.FieldCreatedBy, priceunit.FieldUpdatedBy, priceunit.FieldEnvironmentID, priceunit.FieldName, priceunit.FieldCode, priceunit.FieldSymbol, priceunit.FieldBaseCurrency:
			values[i] = new(sql.NullString)
		case priceunit.FieldCreatedAt, priceunit.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PriceUnit fields.
func (pu *PriceUnit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case priceunit.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pu.ID = value.String
			}
		case priceunit.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pu.TenantID = value.String
			}
		case priceunit.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pu.Status = value.String
			}
		case priceunit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pu.CreatedAt = value.Time
			}
		case priceunit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pu.UpdatedAt = value.Time
			}
		case priceunit.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pu.CreatedBy = value.String
			}
		case priceunit.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pu.UpdatedBy = value.String
			}
		case priceunit.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				pu.EnvironmentID = value.String
			}
		case priceunit.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pu.Name = value.String
			}
		case priceunit.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pu.Code = value.String
			}
		case priceunit.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				pu.Symbol = value.String
			}
		case priceunit.FieldBaseCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_currency", values[i])
			} else if value.Valid {
				pu.BaseCurrency = value.String
			}
		case priceunit.FieldConversionRate:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field conversion_rate", values[i])
			} else if value != nil {
				pu.ConversionRate = *value
			}
		case priceunit.FieldPrecision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field precision", values[i])
			} else if value.Valid {
				pu.Precision = int(value.Int64)
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PriceUnit.
// This includes values selected through modifiers, order, etc.
func (pu *PriceUnit) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// QueryPrices queries the "prices" edge of the PriceUnit entity.
func (pu *PriceUnit) QueryPrices() *PriceQuery {
	return NewPriceUnitClient(pu.config).QueryPrices(pu)
}

// Update returns a builder for updating this PriceUnit.
// Note that you need to call PriceUnit.Unwrap() before calling this method if this PriceUnit
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *PriceUnit) Update() *PriceUnitUpdateOne {
	return NewPriceUnitClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the PriceUnit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *PriceUnit) Unwrap() *PriceUnit {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: PriceUnit is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *PriceUnit) String() string {
	var builder strings.Builder
	builder.WriteString("PriceUnit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(pu.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pu.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pu.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pu.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(pu.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pu.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(pu.Code)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(pu.Symbol)
	builder.WriteString(", ")
	builder.WriteString("base_currency=")
	builder.WriteString(pu.BaseCurrency)
	builder.WriteString(", ")
	builder.WriteString("conversion_rate=")
	builder.WriteString(fmt.Sprintf("%v", pu.ConversionRate))
	builder.WriteString(", ")
	builder.WriteString("precision=")
	builder.WriteString(fmt.Sprintf("%v", pu.Precision))
	builder.WriteByte(')')
	return builder.String()
}

// PriceUnits is a parsable slice of PriceUnit.
type PriceUnits []*PriceUnit
