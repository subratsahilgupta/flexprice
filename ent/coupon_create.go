// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/coupon"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/shopspring/decimal"
)

// CouponCreate is the builder for creating a Coupon entity.
type CouponCreate struct {
	config
	mutation *CouponMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cc *CouponCreate) SetTenantID(s string) *CouponCreate {
	cc.mutation.SetTenantID(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CouponCreate) SetStatus(s string) *CouponCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CouponCreate) SetNillableStatus(s *string) *CouponCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CouponCreate) SetCreatedAt(t time.Time) *CouponCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCreatedAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CouponCreate) SetUpdatedAt(t time.Time) *CouponCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUpdatedAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *CouponCreate) SetCreatedBy(s string) *CouponCreate {
	cc.mutation.SetCreatedBy(s)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCreatedBy(s *string) *CouponCreate {
	if s != nil {
		cc.SetCreatedBy(*s)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CouponCreate) SetUpdatedBy(s string) *CouponCreate {
	cc.mutation.SetUpdatedBy(s)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUpdatedBy(s *string) *CouponCreate {
	if s != nil {
		cc.SetUpdatedBy(*s)
	}
	return cc
}

// SetEnvironmentID sets the "environment_id" field.
func (cc *CouponCreate) SetEnvironmentID(s string) *CouponCreate {
	cc.mutation.SetEnvironmentID(s)
	return cc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableEnvironmentID(s *string) *CouponCreate {
	if s != nil {
		cc.SetEnvironmentID(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CouponCreate) SetName(s string) *CouponCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetRedeemAfter sets the "redeem_after" field.
func (cc *CouponCreate) SetRedeemAfter(t time.Time) *CouponCreate {
	cc.mutation.SetRedeemAfter(t)
	return cc
}

// SetNillableRedeemAfter sets the "redeem_after" field if the given value is not nil.
func (cc *CouponCreate) SetNillableRedeemAfter(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetRedeemAfter(*t)
	}
	return cc
}

// SetRedeemBefore sets the "redeem_before" field.
func (cc *CouponCreate) SetRedeemBefore(t time.Time) *CouponCreate {
	cc.mutation.SetRedeemBefore(t)
	return cc
}

// SetNillableRedeemBefore sets the "redeem_before" field if the given value is not nil.
func (cc *CouponCreate) SetNillableRedeemBefore(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetRedeemBefore(*t)
	}
	return cc
}

// SetMaxRedemptions sets the "max_redemptions" field.
func (cc *CouponCreate) SetMaxRedemptions(i int) *CouponCreate {
	cc.mutation.SetMaxRedemptions(i)
	return cc
}

// SetNillableMaxRedemptions sets the "max_redemptions" field if the given value is not nil.
func (cc *CouponCreate) SetNillableMaxRedemptions(i *int) *CouponCreate {
	if i != nil {
		cc.SetMaxRedemptions(*i)
	}
	return cc
}

// SetTotalRedemptions sets the "total_redemptions" field.
func (cc *CouponCreate) SetTotalRedemptions(i int) *CouponCreate {
	cc.mutation.SetTotalRedemptions(i)
	return cc
}

// SetNillableTotalRedemptions sets the "total_redemptions" field if the given value is not nil.
func (cc *CouponCreate) SetNillableTotalRedemptions(i *int) *CouponCreate {
	if i != nil {
		cc.SetTotalRedemptions(*i)
	}
	return cc
}

// SetRules sets the "rules" field.
func (cc *CouponCreate) SetRules(m map[string]interface{}) *CouponCreate {
	cc.mutation.SetRules(m)
	return cc
}

// SetAmountOff sets the "amount_off" field.
func (cc *CouponCreate) SetAmountOff(d decimal.Decimal) *CouponCreate {
	cc.mutation.SetAmountOff(d)
	return cc
}

// SetNillableAmountOff sets the "amount_off" field if the given value is not nil.
func (cc *CouponCreate) SetNillableAmountOff(d *decimal.Decimal) *CouponCreate {
	if d != nil {
		cc.SetAmountOff(*d)
	}
	return cc
}

// SetPercentageOff sets the "percentage_off" field.
func (cc *CouponCreate) SetPercentageOff(d decimal.Decimal) *CouponCreate {
	cc.mutation.SetPercentageOff(d)
	return cc
}

// SetNillablePercentageOff sets the "percentage_off" field if the given value is not nil.
func (cc *CouponCreate) SetNillablePercentageOff(d *decimal.Decimal) *CouponCreate {
	if d != nil {
		cc.SetPercentageOff(*d)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CouponCreate) SetType(s string) *CouponCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CouponCreate) SetNillableType(s *string) *CouponCreate {
	if s != nil {
		cc.SetType(*s)
	}
	return cc
}

// SetCadence sets the "cadence" field.
func (cc *CouponCreate) SetCadence(s string) *CouponCreate {
	cc.mutation.SetCadence(s)
	return cc
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCadence(s *string) *CouponCreate {
	if s != nil {
		cc.SetCadence(*s)
	}
	return cc
}

// SetDurationInPeriods sets the "duration_in_periods" field.
func (cc *CouponCreate) SetDurationInPeriods(i int) *CouponCreate {
	cc.mutation.SetDurationInPeriods(i)
	return cc
}

// SetNillableDurationInPeriods sets the "duration_in_periods" field if the given value is not nil.
func (cc *CouponCreate) SetNillableDurationInPeriods(i *int) *CouponCreate {
	if i != nil {
		cc.SetDurationInPeriods(*i)
	}
	return cc
}

// SetCurrency sets the "currency" field.
func (cc *CouponCreate) SetCurrency(s string) *CouponCreate {
	cc.mutation.SetCurrency(s)
	return cc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCurrency(s *string) *CouponCreate {
	if s != nil {
		cc.SetCurrency(*s)
	}
	return cc
}

// SetMetadata sets the "metadata" field.
func (cc *CouponCreate) SetMetadata(m map[string]string) *CouponCreate {
	cc.mutation.SetMetadata(m)
	return cc
}

// SetID sets the "id" field.
func (cc *CouponCreate) SetID(s string) *CouponCreate {
	cc.mutation.SetID(s)
	return cc
}

// AddCouponAssociationIDs adds the "coupon_associations" edge to the CouponAssociation entity by IDs.
func (cc *CouponCreate) AddCouponAssociationIDs(ids ...string) *CouponCreate {
	cc.mutation.AddCouponAssociationIDs(ids...)
	return cc
}

// AddCouponAssociations adds the "coupon_associations" edges to the CouponAssociation entity.
func (cc *CouponCreate) AddCouponAssociations(c ...*CouponAssociation) *CouponCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCouponAssociationIDs(ids...)
}

// AddCouponApplicationIDs adds the "coupon_applications" edge to the CouponApplication entity by IDs.
func (cc *CouponCreate) AddCouponApplicationIDs(ids ...string) *CouponCreate {
	cc.mutation.AddCouponApplicationIDs(ids...)
	return cc
}

// AddCouponApplications adds the "coupon_applications" edges to the CouponApplication entity.
func (cc *CouponCreate) AddCouponApplications(c ...*CouponApplication) *CouponCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCouponApplicationIDs(ids...)
}

// Mutation returns the CouponMutation object of the builder.
func (cc *CouponCreate) Mutation() *CouponMutation {
	return cc.mutation
}

// Save creates the Coupon in the database.
func (cc *CouponCreate) Save(ctx context.Context) (*Coupon, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CouponCreate) SaveX(ctx context.Context) *Coupon {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CouponCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CouponCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CouponCreate) defaults() {
	if _, ok := cc.mutation.Status(); !ok {
		v := coupon.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := coupon.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := coupon.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.EnvironmentID(); !ok {
		v := coupon.DefaultEnvironmentID
		cc.mutation.SetEnvironmentID(v)
	}
	if _, ok := cc.mutation.TotalRedemptions(); !ok {
		v := coupon.DefaultTotalRedemptions
		cc.mutation.SetTotalRedemptions(v)
	}
	if _, ok := cc.mutation.AmountOff(); !ok {
		v := coupon.DefaultAmountOff
		cc.mutation.SetAmountOff(v)
	}
	if _, ok := cc.mutation.PercentageOff(); !ok {
		v := coupon.DefaultPercentageOff
		cc.mutation.SetPercentageOff(v)
	}
	if _, ok := cc.mutation.GetType(); !ok {
		v := coupon.DefaultType
		cc.mutation.SetType(v)
	}
	if _, ok := cc.mutation.Cadence(); !ok {
		v := coupon.DefaultCadence
		cc.mutation.SetCadence(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CouponCreate) check() error {
	if _, ok := cc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Coupon.tenant_id"`)}
	}
	if v, ok := cc.mutation.TenantID(); ok {
		if err := coupon.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Coupon.tenant_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Coupon.status"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Coupon.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Coupon.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Coupon.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := coupon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Coupon.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.TotalRedemptions(); !ok {
		return &ValidationError{Name: "total_redemptions", err: errors.New(`ent: missing required field "Coupon.total_redemptions"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Coupon.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := coupon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Coupon.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Cadence(); !ok {
		return &ValidationError{Name: "cadence", err: errors.New(`ent: missing required field "Coupon.cadence"`)}
	}
	if v, ok := cc.mutation.Cadence(); ok {
		if err := coupon.CadenceValidator(v); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`ent: validator failed for field "Coupon.cadence": %w`, err)}
		}
	}
	return nil
}

func (cc *CouponCreate) sqlSave(ctx context.Context) (*Coupon, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Coupon.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CouponCreate) createSpec() (*Coupon, *sqlgraph.CreateSpec) {
	var (
		_node = &Coupon{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(coupon.Table, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.TenantID(); ok {
		_spec.SetField(coupon.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(coupon.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(coupon.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(coupon.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.EnvironmentID(); ok {
		_spec.SetField(coupon.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.RedeemAfter(); ok {
		_spec.SetField(coupon.FieldRedeemAfter, field.TypeTime, value)
		_node.RedeemAfter = &value
	}
	if value, ok := cc.mutation.RedeemBefore(); ok {
		_spec.SetField(coupon.FieldRedeemBefore, field.TypeTime, value)
		_node.RedeemBefore = &value
	}
	if value, ok := cc.mutation.MaxRedemptions(); ok {
		_spec.SetField(coupon.FieldMaxRedemptions, field.TypeInt, value)
		_node.MaxRedemptions = &value
	}
	if value, ok := cc.mutation.TotalRedemptions(); ok {
		_spec.SetField(coupon.FieldTotalRedemptions, field.TypeInt, value)
		_node.TotalRedemptions = value
	}
	if value, ok := cc.mutation.Rules(); ok {
		_spec.SetField(coupon.FieldRules, field.TypeJSON, value)
		_node.Rules = value
	}
	if value, ok := cc.mutation.AmountOff(); ok {
		_spec.SetField(coupon.FieldAmountOff, field.TypeOther, value)
		_node.AmountOff = value
	}
	if value, ok := cc.mutation.PercentageOff(); ok {
		_spec.SetField(coupon.FieldPercentageOff, field.TypeOther, value)
		_node.PercentageOff = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(coupon.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Cadence(); ok {
		_spec.SetField(coupon.FieldCadence, field.TypeString, value)
		_node.Cadence = value
	}
	if value, ok := cc.mutation.DurationInPeriods(); ok {
		_spec.SetField(coupon.FieldDurationInPeriods, field.TypeInt, value)
		_node.DurationInPeriods = &value
	}
	if value, ok := cc.mutation.Currency(); ok {
		_spec.SetField(coupon.FieldCurrency, field.TypeString, value)
		_node.Currency = &value
	}
	if value, ok := cc.mutation.Metadata(); ok {
		_spec.SetField(coupon.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := cc.mutation.CouponAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponAssociationsTable,
			Columns: []string{coupon.CouponAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CouponApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupon.CouponApplicationsTable,
			Columns: []string{coupon.CouponApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CouponCreateBulk is the builder for creating many Coupon entities in bulk.
type CouponCreateBulk struct {
	config
	err      error
	builders []*CouponCreate
}

// Save creates the Coupon entities in the database.
func (ccb *CouponCreateBulk) Save(ctx context.Context) ([]*Coupon, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coupon, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CouponCreateBulk) SaveX(ctx context.Context) []*Coupon {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CouponCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CouponCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
