// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/couponapplication"
	"github.com/flexprice/flexprice/ent/couponassociation"
	"github.com/flexprice/flexprice/ent/invoicelineitem"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/shopspring/decimal"
)

// CouponApplicationUpdate is the builder for updating CouponApplication entities.
type CouponApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *CouponApplicationMutation
}

// Where appends a list predicates to the CouponApplicationUpdate builder.
func (cau *CouponApplicationUpdate) Where(ps ...predicate.CouponApplication) *CouponApplicationUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetStatus sets the "status" field.
func (cau *CouponApplicationUpdate) SetStatus(s string) *CouponApplicationUpdate {
	cau.mutation.SetStatus(s)
	return cau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableStatus(s *string) *CouponApplicationUpdate {
	if s != nil {
		cau.SetStatus(*s)
	}
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CouponApplicationUpdate) SetUpdatedAt(t time.Time) *CouponApplicationUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// SetUpdatedBy sets the "updated_by" field.
func (cau *CouponApplicationUpdate) SetUpdatedBy(s string) *CouponApplicationUpdate {
	cau.mutation.SetUpdatedBy(s)
	return cau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableUpdatedBy(s *string) *CouponApplicationUpdate {
	if s != nil {
		cau.SetUpdatedBy(*s)
	}
	return cau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cau *CouponApplicationUpdate) ClearUpdatedBy() *CouponApplicationUpdate {
	cau.mutation.ClearUpdatedBy()
	return cau
}

// SetInvoiceLineItemID sets the "invoice_line_item_id" field.
func (cau *CouponApplicationUpdate) SetInvoiceLineItemID(s string) *CouponApplicationUpdate {
	cau.mutation.SetInvoiceLineItemID(s)
	return cau
}

// SetNillableInvoiceLineItemID sets the "invoice_line_item_id" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableInvoiceLineItemID(s *string) *CouponApplicationUpdate {
	if s != nil {
		cau.SetInvoiceLineItemID(*s)
	}
	return cau
}

// ClearInvoiceLineItemID clears the value of the "invoice_line_item_id" field.
func (cau *CouponApplicationUpdate) ClearInvoiceLineItemID() *CouponApplicationUpdate {
	cau.mutation.ClearInvoiceLineItemID()
	return cau
}

// SetOriginalPrice sets the "original_price" field.
func (cau *CouponApplicationUpdate) SetOriginalPrice(d decimal.Decimal) *CouponApplicationUpdate {
	cau.mutation.SetOriginalPrice(d)
	return cau
}

// SetNillableOriginalPrice sets the "original_price" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableOriginalPrice(d *decimal.Decimal) *CouponApplicationUpdate {
	if d != nil {
		cau.SetOriginalPrice(*d)
	}
	return cau
}

// SetFinalPrice sets the "final_price" field.
func (cau *CouponApplicationUpdate) SetFinalPrice(d decimal.Decimal) *CouponApplicationUpdate {
	cau.mutation.SetFinalPrice(d)
	return cau
}

// SetNillableFinalPrice sets the "final_price" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableFinalPrice(d *decimal.Decimal) *CouponApplicationUpdate {
	if d != nil {
		cau.SetFinalPrice(*d)
	}
	return cau
}

// SetDiscountedAmount sets the "discounted_amount" field.
func (cau *CouponApplicationUpdate) SetDiscountedAmount(d decimal.Decimal) *CouponApplicationUpdate {
	cau.mutation.SetDiscountedAmount(d)
	return cau
}

// SetNillableDiscountedAmount sets the "discounted_amount" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableDiscountedAmount(d *decimal.Decimal) *CouponApplicationUpdate {
	if d != nil {
		cau.SetDiscountedAmount(*d)
	}
	return cau
}

// SetDiscountType sets the "discount_type" field.
func (cau *CouponApplicationUpdate) SetDiscountType(s string) *CouponApplicationUpdate {
	cau.mutation.SetDiscountType(s)
	return cau
}

// SetNillableDiscountType sets the "discount_type" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableDiscountType(s *string) *CouponApplicationUpdate {
	if s != nil {
		cau.SetDiscountType(*s)
	}
	return cau
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (cau *CouponApplicationUpdate) SetDiscountPercentage(d decimal.Decimal) *CouponApplicationUpdate {
	cau.mutation.SetDiscountPercentage(d)
	return cau
}

// SetNillableDiscountPercentage sets the "discount_percentage" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableDiscountPercentage(d *decimal.Decimal) *CouponApplicationUpdate {
	if d != nil {
		cau.SetDiscountPercentage(*d)
	}
	return cau
}

// ClearDiscountPercentage clears the value of the "discount_percentage" field.
func (cau *CouponApplicationUpdate) ClearDiscountPercentage() *CouponApplicationUpdate {
	cau.mutation.ClearDiscountPercentage()
	return cau
}

// SetCurrency sets the "currency" field.
func (cau *CouponApplicationUpdate) SetCurrency(s string) *CouponApplicationUpdate {
	cau.mutation.SetCurrency(s)
	return cau
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableCurrency(s *string) *CouponApplicationUpdate {
	if s != nil {
		cau.SetCurrency(*s)
	}
	return cau
}

// ClearCurrency clears the value of the "currency" field.
func (cau *CouponApplicationUpdate) ClearCurrency() *CouponApplicationUpdate {
	cau.mutation.ClearCurrency()
	return cau
}

// SetCouponSnapshot sets the "coupon_snapshot" field.
func (cau *CouponApplicationUpdate) SetCouponSnapshot(m map[string]interface{}) *CouponApplicationUpdate {
	cau.mutation.SetCouponSnapshot(m)
	return cau
}

// ClearCouponSnapshot clears the value of the "coupon_snapshot" field.
func (cau *CouponApplicationUpdate) ClearCouponSnapshot() *CouponApplicationUpdate {
	cau.mutation.ClearCouponSnapshot()
	return cau
}

// SetMetadata sets the "metadata" field.
func (cau *CouponApplicationUpdate) SetMetadata(m map[string]string) *CouponApplicationUpdate {
	cau.mutation.SetMetadata(m)
	return cau
}

// ClearMetadata clears the value of the "metadata" field.
func (cau *CouponApplicationUpdate) ClearMetadata() *CouponApplicationUpdate {
	cau.mutation.ClearMetadata()
	return cau
}

// SetSubscriptionID sets the "subscription_id" field.
func (cau *CouponApplicationUpdate) SetSubscriptionID(s string) *CouponApplicationUpdate {
	cau.mutation.SetSubscriptionID(s)
	return cau
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (cau *CouponApplicationUpdate) SetNillableSubscriptionID(s *string) *CouponApplicationUpdate {
	if s != nil {
		cau.SetSubscriptionID(*s)
	}
	return cau
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (cau *CouponApplicationUpdate) ClearSubscriptionID() *CouponApplicationUpdate {
	cau.mutation.ClearSubscriptionID()
	return cau
}

// AddCouponAssociationIDs adds the "coupon_association" edge to the CouponAssociation entity by IDs.
func (cau *CouponApplicationUpdate) AddCouponAssociationIDs(ids ...string) *CouponApplicationUpdate {
	cau.mutation.AddCouponAssociationIDs(ids...)
	return cau
}

// AddCouponAssociation adds the "coupon_association" edges to the CouponAssociation entity.
func (cau *CouponApplicationUpdate) AddCouponAssociation(c ...*CouponAssociation) *CouponApplicationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cau.AddCouponAssociationIDs(ids...)
}

// SetInvoiceLineItem sets the "invoice_line_item" edge to the InvoiceLineItem entity.
func (cau *CouponApplicationUpdate) SetInvoiceLineItem(i *InvoiceLineItem) *CouponApplicationUpdate {
	return cau.SetInvoiceLineItemID(i.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (cau *CouponApplicationUpdate) SetSubscription(s *Subscription) *CouponApplicationUpdate {
	return cau.SetSubscriptionID(s.ID)
}

// Mutation returns the CouponApplicationMutation object of the builder.
func (cau *CouponApplicationUpdate) Mutation() *CouponApplicationMutation {
	return cau.mutation
}

// ClearCouponAssociation clears all "coupon_association" edges to the CouponAssociation entity.
func (cau *CouponApplicationUpdate) ClearCouponAssociation() *CouponApplicationUpdate {
	cau.mutation.ClearCouponAssociation()
	return cau
}

// RemoveCouponAssociationIDs removes the "coupon_association" edge to CouponAssociation entities by IDs.
func (cau *CouponApplicationUpdate) RemoveCouponAssociationIDs(ids ...string) *CouponApplicationUpdate {
	cau.mutation.RemoveCouponAssociationIDs(ids...)
	return cau
}

// RemoveCouponAssociation removes "coupon_association" edges to CouponAssociation entities.
func (cau *CouponApplicationUpdate) RemoveCouponAssociation(c ...*CouponAssociation) *CouponApplicationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cau.RemoveCouponAssociationIDs(ids...)
}

// ClearInvoiceLineItem clears the "invoice_line_item" edge to the InvoiceLineItem entity.
func (cau *CouponApplicationUpdate) ClearInvoiceLineItem() *CouponApplicationUpdate {
	cau.mutation.ClearInvoiceLineItem()
	return cau
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (cau *CouponApplicationUpdate) ClearSubscription() *CouponApplicationUpdate {
	cau.mutation.ClearSubscription()
	return cau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CouponApplicationUpdate) Save(ctx context.Context) (int, error) {
	cau.defaults()
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CouponApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CouponApplicationUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CouponApplicationUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CouponApplicationUpdate) defaults() {
	if _, ok := cau.mutation.UpdatedAt(); !ok {
		v := couponapplication.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cau *CouponApplicationUpdate) check() error {
	if v, ok := cau.mutation.DiscountType(); ok {
		if err := couponapplication.DiscountTypeValidator(v); err != nil {
			return &ValidationError{Name: "discount_type", err: fmt.Errorf(`ent: validator failed for field "CouponApplication.discount_type": %w`, err)}
		}
	}
	if cau.mutation.CouponCleared() && len(cau.mutation.CouponIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponApplication.coupon"`)
	}
	if cau.mutation.InvoiceCleared() && len(cau.mutation.InvoiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponApplication.invoice"`)
	}
	return nil
}

func (cau *CouponApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(couponapplication.Table, couponapplication.Columns, sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.Status(); ok {
		_spec.SetField(couponapplication.FieldStatus, field.TypeString, value)
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.SetField(couponapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if cau.mutation.CreatedByCleared() {
		_spec.ClearField(couponapplication.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cau.mutation.UpdatedBy(); ok {
		_spec.SetField(couponapplication.FieldUpdatedBy, field.TypeString, value)
	}
	if cau.mutation.UpdatedByCleared() {
		_spec.ClearField(couponapplication.FieldUpdatedBy, field.TypeString)
	}
	if cau.mutation.EnvironmentIDCleared() {
		_spec.ClearField(couponapplication.FieldEnvironmentID, field.TypeString)
	}
	if cau.mutation.CouponAssociationIDCleared() {
		_spec.ClearField(couponapplication.FieldCouponAssociationID, field.TypeString)
	}
	if value, ok := cau.mutation.OriginalPrice(); ok {
		_spec.SetField(couponapplication.FieldOriginalPrice, field.TypeOther, value)
	}
	if value, ok := cau.mutation.FinalPrice(); ok {
		_spec.SetField(couponapplication.FieldFinalPrice, field.TypeOther, value)
	}
	if value, ok := cau.mutation.DiscountedAmount(); ok {
		_spec.SetField(couponapplication.FieldDiscountedAmount, field.TypeOther, value)
	}
	if value, ok := cau.mutation.DiscountType(); ok {
		_spec.SetField(couponapplication.FieldDiscountType, field.TypeString, value)
	}
	if value, ok := cau.mutation.DiscountPercentage(); ok {
		_spec.SetField(couponapplication.FieldDiscountPercentage, field.TypeOther, value)
	}
	if cau.mutation.DiscountPercentageCleared() {
		_spec.ClearField(couponapplication.FieldDiscountPercentage, field.TypeOther)
	}
	if value, ok := cau.mutation.Currency(); ok {
		_spec.SetField(couponapplication.FieldCurrency, field.TypeString, value)
	}
	if cau.mutation.CurrencyCleared() {
		_spec.ClearField(couponapplication.FieldCurrency, field.TypeString)
	}
	if value, ok := cau.mutation.CouponSnapshot(); ok {
		_spec.SetField(couponapplication.FieldCouponSnapshot, field.TypeJSON, value)
	}
	if cau.mutation.CouponSnapshotCleared() {
		_spec.ClearField(couponapplication.FieldCouponSnapshot, field.TypeJSON)
	}
	if value, ok := cau.mutation.Metadata(); ok {
		_spec.SetField(couponapplication.FieldMetadata, field.TypeJSON, value)
	}
	if cau.mutation.MetadataCleared() {
		_spec.ClearField(couponapplication.FieldMetadata, field.TypeJSON)
	}
	if cau.mutation.CouponAssociationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   couponapplication.CouponAssociationTable,
			Columns: couponapplication.CouponAssociationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.RemovedCouponAssociationIDs(); len(nodes) > 0 && !cau.mutation.CouponAssociationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   couponapplication.CouponAssociationTable,
			Columns: couponapplication.CouponAssociationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.CouponAssociationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   couponapplication.CouponAssociationTable,
			Columns: couponapplication.CouponAssociationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cau.mutation.InvoiceLineItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.InvoiceLineItemTable,
			Columns: []string{couponapplication.InvoiceLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.InvoiceLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.InvoiceLineItemTable,
			Columns: []string{couponapplication.InvoiceLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cau.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.SubscriptionTable,
			Columns: []string{couponapplication.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.SubscriptionTable,
			Columns: []string{couponapplication.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CouponApplicationUpdateOne is the builder for updating a single CouponApplication entity.
type CouponApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponApplicationMutation
}

// SetStatus sets the "status" field.
func (cauo *CouponApplicationUpdateOne) SetStatus(s string) *CouponApplicationUpdateOne {
	cauo.mutation.SetStatus(s)
	return cauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableStatus(s *string) *CouponApplicationUpdateOne {
	if s != nil {
		cauo.SetStatus(*s)
	}
	return cauo
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CouponApplicationUpdateOne) SetUpdatedAt(t time.Time) *CouponApplicationUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// SetUpdatedBy sets the "updated_by" field.
func (cauo *CouponApplicationUpdateOne) SetUpdatedBy(s string) *CouponApplicationUpdateOne {
	cauo.mutation.SetUpdatedBy(s)
	return cauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableUpdatedBy(s *string) *CouponApplicationUpdateOne {
	if s != nil {
		cauo.SetUpdatedBy(*s)
	}
	return cauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cauo *CouponApplicationUpdateOne) ClearUpdatedBy() *CouponApplicationUpdateOne {
	cauo.mutation.ClearUpdatedBy()
	return cauo
}

// SetInvoiceLineItemID sets the "invoice_line_item_id" field.
func (cauo *CouponApplicationUpdateOne) SetInvoiceLineItemID(s string) *CouponApplicationUpdateOne {
	cauo.mutation.SetInvoiceLineItemID(s)
	return cauo
}

// SetNillableInvoiceLineItemID sets the "invoice_line_item_id" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableInvoiceLineItemID(s *string) *CouponApplicationUpdateOne {
	if s != nil {
		cauo.SetInvoiceLineItemID(*s)
	}
	return cauo
}

// ClearInvoiceLineItemID clears the value of the "invoice_line_item_id" field.
func (cauo *CouponApplicationUpdateOne) ClearInvoiceLineItemID() *CouponApplicationUpdateOne {
	cauo.mutation.ClearInvoiceLineItemID()
	return cauo
}

// SetOriginalPrice sets the "original_price" field.
func (cauo *CouponApplicationUpdateOne) SetOriginalPrice(d decimal.Decimal) *CouponApplicationUpdateOne {
	cauo.mutation.SetOriginalPrice(d)
	return cauo
}

// SetNillableOriginalPrice sets the "original_price" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableOriginalPrice(d *decimal.Decimal) *CouponApplicationUpdateOne {
	if d != nil {
		cauo.SetOriginalPrice(*d)
	}
	return cauo
}

// SetFinalPrice sets the "final_price" field.
func (cauo *CouponApplicationUpdateOne) SetFinalPrice(d decimal.Decimal) *CouponApplicationUpdateOne {
	cauo.mutation.SetFinalPrice(d)
	return cauo
}

// SetNillableFinalPrice sets the "final_price" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableFinalPrice(d *decimal.Decimal) *CouponApplicationUpdateOne {
	if d != nil {
		cauo.SetFinalPrice(*d)
	}
	return cauo
}

// SetDiscountedAmount sets the "discounted_amount" field.
func (cauo *CouponApplicationUpdateOne) SetDiscountedAmount(d decimal.Decimal) *CouponApplicationUpdateOne {
	cauo.mutation.SetDiscountedAmount(d)
	return cauo
}

// SetNillableDiscountedAmount sets the "discounted_amount" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableDiscountedAmount(d *decimal.Decimal) *CouponApplicationUpdateOne {
	if d != nil {
		cauo.SetDiscountedAmount(*d)
	}
	return cauo
}

// SetDiscountType sets the "discount_type" field.
func (cauo *CouponApplicationUpdateOne) SetDiscountType(s string) *CouponApplicationUpdateOne {
	cauo.mutation.SetDiscountType(s)
	return cauo
}

// SetNillableDiscountType sets the "discount_type" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableDiscountType(s *string) *CouponApplicationUpdateOne {
	if s != nil {
		cauo.SetDiscountType(*s)
	}
	return cauo
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (cauo *CouponApplicationUpdateOne) SetDiscountPercentage(d decimal.Decimal) *CouponApplicationUpdateOne {
	cauo.mutation.SetDiscountPercentage(d)
	return cauo
}

// SetNillableDiscountPercentage sets the "discount_percentage" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableDiscountPercentage(d *decimal.Decimal) *CouponApplicationUpdateOne {
	if d != nil {
		cauo.SetDiscountPercentage(*d)
	}
	return cauo
}

// ClearDiscountPercentage clears the value of the "discount_percentage" field.
func (cauo *CouponApplicationUpdateOne) ClearDiscountPercentage() *CouponApplicationUpdateOne {
	cauo.mutation.ClearDiscountPercentage()
	return cauo
}

// SetCurrency sets the "currency" field.
func (cauo *CouponApplicationUpdateOne) SetCurrency(s string) *CouponApplicationUpdateOne {
	cauo.mutation.SetCurrency(s)
	return cauo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableCurrency(s *string) *CouponApplicationUpdateOne {
	if s != nil {
		cauo.SetCurrency(*s)
	}
	return cauo
}

// ClearCurrency clears the value of the "currency" field.
func (cauo *CouponApplicationUpdateOne) ClearCurrency() *CouponApplicationUpdateOne {
	cauo.mutation.ClearCurrency()
	return cauo
}

// SetCouponSnapshot sets the "coupon_snapshot" field.
func (cauo *CouponApplicationUpdateOne) SetCouponSnapshot(m map[string]interface{}) *CouponApplicationUpdateOne {
	cauo.mutation.SetCouponSnapshot(m)
	return cauo
}

// ClearCouponSnapshot clears the value of the "coupon_snapshot" field.
func (cauo *CouponApplicationUpdateOne) ClearCouponSnapshot() *CouponApplicationUpdateOne {
	cauo.mutation.ClearCouponSnapshot()
	return cauo
}

// SetMetadata sets the "metadata" field.
func (cauo *CouponApplicationUpdateOne) SetMetadata(m map[string]string) *CouponApplicationUpdateOne {
	cauo.mutation.SetMetadata(m)
	return cauo
}

// ClearMetadata clears the value of the "metadata" field.
func (cauo *CouponApplicationUpdateOne) ClearMetadata() *CouponApplicationUpdateOne {
	cauo.mutation.ClearMetadata()
	return cauo
}

// SetSubscriptionID sets the "subscription_id" field.
func (cauo *CouponApplicationUpdateOne) SetSubscriptionID(s string) *CouponApplicationUpdateOne {
	cauo.mutation.SetSubscriptionID(s)
	return cauo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (cauo *CouponApplicationUpdateOne) SetNillableSubscriptionID(s *string) *CouponApplicationUpdateOne {
	if s != nil {
		cauo.SetSubscriptionID(*s)
	}
	return cauo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (cauo *CouponApplicationUpdateOne) ClearSubscriptionID() *CouponApplicationUpdateOne {
	cauo.mutation.ClearSubscriptionID()
	return cauo
}

// AddCouponAssociationIDs adds the "coupon_association" edge to the CouponAssociation entity by IDs.
func (cauo *CouponApplicationUpdateOne) AddCouponAssociationIDs(ids ...string) *CouponApplicationUpdateOne {
	cauo.mutation.AddCouponAssociationIDs(ids...)
	return cauo
}

// AddCouponAssociation adds the "coupon_association" edges to the CouponAssociation entity.
func (cauo *CouponApplicationUpdateOne) AddCouponAssociation(c ...*CouponAssociation) *CouponApplicationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cauo.AddCouponAssociationIDs(ids...)
}

// SetInvoiceLineItem sets the "invoice_line_item" edge to the InvoiceLineItem entity.
func (cauo *CouponApplicationUpdateOne) SetInvoiceLineItem(i *InvoiceLineItem) *CouponApplicationUpdateOne {
	return cauo.SetInvoiceLineItemID(i.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (cauo *CouponApplicationUpdateOne) SetSubscription(s *Subscription) *CouponApplicationUpdateOne {
	return cauo.SetSubscriptionID(s.ID)
}

// Mutation returns the CouponApplicationMutation object of the builder.
func (cauo *CouponApplicationUpdateOne) Mutation() *CouponApplicationMutation {
	return cauo.mutation
}

// ClearCouponAssociation clears all "coupon_association" edges to the CouponAssociation entity.
func (cauo *CouponApplicationUpdateOne) ClearCouponAssociation() *CouponApplicationUpdateOne {
	cauo.mutation.ClearCouponAssociation()
	return cauo
}

// RemoveCouponAssociationIDs removes the "coupon_association" edge to CouponAssociation entities by IDs.
func (cauo *CouponApplicationUpdateOne) RemoveCouponAssociationIDs(ids ...string) *CouponApplicationUpdateOne {
	cauo.mutation.RemoveCouponAssociationIDs(ids...)
	return cauo
}

// RemoveCouponAssociation removes "coupon_association" edges to CouponAssociation entities.
func (cauo *CouponApplicationUpdateOne) RemoveCouponAssociation(c ...*CouponAssociation) *CouponApplicationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cauo.RemoveCouponAssociationIDs(ids...)
}

// ClearInvoiceLineItem clears the "invoice_line_item" edge to the InvoiceLineItem entity.
func (cauo *CouponApplicationUpdateOne) ClearInvoiceLineItem() *CouponApplicationUpdateOne {
	cauo.mutation.ClearInvoiceLineItem()
	return cauo
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (cauo *CouponApplicationUpdateOne) ClearSubscription() *CouponApplicationUpdateOne {
	cauo.mutation.ClearSubscription()
	return cauo
}

// Where appends a list predicates to the CouponApplicationUpdate builder.
func (cauo *CouponApplicationUpdateOne) Where(ps ...predicate.CouponApplication) *CouponApplicationUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CouponApplicationUpdateOne) Select(field string, fields ...string) *CouponApplicationUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CouponApplication entity.
func (cauo *CouponApplicationUpdateOne) Save(ctx context.Context) (*CouponApplication, error) {
	cauo.defaults()
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CouponApplicationUpdateOne) SaveX(ctx context.Context) *CouponApplication {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CouponApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CouponApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CouponApplicationUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdatedAt(); !ok {
		v := couponapplication.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauo *CouponApplicationUpdateOne) check() error {
	if v, ok := cauo.mutation.DiscountType(); ok {
		if err := couponapplication.DiscountTypeValidator(v); err != nil {
			return &ValidationError{Name: "discount_type", err: fmt.Errorf(`ent: validator failed for field "CouponApplication.discount_type": %w`, err)}
		}
	}
	if cauo.mutation.CouponCleared() && len(cauo.mutation.CouponIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponApplication.coupon"`)
	}
	if cauo.mutation.InvoiceCleared() && len(cauo.mutation.InvoiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponApplication.invoice"`)
	}
	return nil
}

func (cauo *CouponApplicationUpdateOne) sqlSave(ctx context.Context) (_node *CouponApplication, err error) {
	if err := cauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(couponapplication.Table, couponapplication.Columns, sqlgraph.NewFieldSpec(couponapplication.FieldID, field.TypeString))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponapplication.FieldID)
		for _, f := range fields {
			if !couponapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != couponapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.Status(); ok {
		_spec.SetField(couponapplication.FieldStatus, field.TypeString, value)
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.SetField(couponapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if cauo.mutation.CreatedByCleared() {
		_spec.ClearField(couponapplication.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cauo.mutation.UpdatedBy(); ok {
		_spec.SetField(couponapplication.FieldUpdatedBy, field.TypeString, value)
	}
	if cauo.mutation.UpdatedByCleared() {
		_spec.ClearField(couponapplication.FieldUpdatedBy, field.TypeString)
	}
	if cauo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(couponapplication.FieldEnvironmentID, field.TypeString)
	}
	if cauo.mutation.CouponAssociationIDCleared() {
		_spec.ClearField(couponapplication.FieldCouponAssociationID, field.TypeString)
	}
	if value, ok := cauo.mutation.OriginalPrice(); ok {
		_spec.SetField(couponapplication.FieldOriginalPrice, field.TypeOther, value)
	}
	if value, ok := cauo.mutation.FinalPrice(); ok {
		_spec.SetField(couponapplication.FieldFinalPrice, field.TypeOther, value)
	}
	if value, ok := cauo.mutation.DiscountedAmount(); ok {
		_spec.SetField(couponapplication.FieldDiscountedAmount, field.TypeOther, value)
	}
	if value, ok := cauo.mutation.DiscountType(); ok {
		_spec.SetField(couponapplication.FieldDiscountType, field.TypeString, value)
	}
	if value, ok := cauo.mutation.DiscountPercentage(); ok {
		_spec.SetField(couponapplication.FieldDiscountPercentage, field.TypeOther, value)
	}
	if cauo.mutation.DiscountPercentageCleared() {
		_spec.ClearField(couponapplication.FieldDiscountPercentage, field.TypeOther)
	}
	if value, ok := cauo.mutation.Currency(); ok {
		_spec.SetField(couponapplication.FieldCurrency, field.TypeString, value)
	}
	if cauo.mutation.CurrencyCleared() {
		_spec.ClearField(couponapplication.FieldCurrency, field.TypeString)
	}
	if value, ok := cauo.mutation.CouponSnapshot(); ok {
		_spec.SetField(couponapplication.FieldCouponSnapshot, field.TypeJSON, value)
	}
	if cauo.mutation.CouponSnapshotCleared() {
		_spec.ClearField(couponapplication.FieldCouponSnapshot, field.TypeJSON)
	}
	if value, ok := cauo.mutation.Metadata(); ok {
		_spec.SetField(couponapplication.FieldMetadata, field.TypeJSON, value)
	}
	if cauo.mutation.MetadataCleared() {
		_spec.ClearField(couponapplication.FieldMetadata, field.TypeJSON)
	}
	if cauo.mutation.CouponAssociationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   couponapplication.CouponAssociationTable,
			Columns: couponapplication.CouponAssociationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.RemovedCouponAssociationIDs(); len(nodes) > 0 && !cauo.mutation.CouponAssociationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   couponapplication.CouponAssociationTable,
			Columns: couponapplication.CouponAssociationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.CouponAssociationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   couponapplication.CouponAssociationTable,
			Columns: couponapplication.CouponAssociationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassociation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cauo.mutation.InvoiceLineItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.InvoiceLineItemTable,
			Columns: []string{couponapplication.InvoiceLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.InvoiceLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.InvoiceLineItemTable,
			Columns: []string{couponapplication.InvoiceLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cauo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.SubscriptionTable,
			Columns: []string{couponapplication.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponapplication.SubscriptionTable,
			Columns: []string{couponapplication.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CouponApplication{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
