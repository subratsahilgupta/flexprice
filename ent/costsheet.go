// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/price"
)

// Costsheet is the model entity for the Costsheet schema.
type Costsheet struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// MeterID holds the value of the "meter_id" field.
	MeterID string `json:"meter_id,omitempty"`
	// PriceID holds the value of the "price_id" field.
	PriceID string `json:"price_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CostsheetQuery when eager-loading is set.
	Edges        CostsheetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CostsheetEdges holds the relations/edges for other nodes in the graph.
type CostsheetEdges struct {
	// Meter holds the value of the meter edge.
	Meter *Meter `json:"meter,omitempty"`
	// Price holds the value of the price edge.
	Price *Price `json:"price,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MeterOrErr returns the Meter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CostsheetEdges) MeterOrErr() (*Meter, error) {
	if e.Meter != nil {
		return e.Meter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: meter.Label}
	}
	return nil, &NotLoadedError{edge: "meter"}
}

// PriceOrErr returns the Price value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CostsheetEdges) PriceOrErr() (*Price, error) {
	if e.Price != nil {
		return e.Price, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: price.Label}
	}
	return nil, &NotLoadedError{edge: "price"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Costsheet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case costsheet.FieldID, costsheet.FieldTenantID, costsheet.FieldStatus, costsheet.FieldCreatedBy, costsheet.FieldUpdatedBy, costsheet.FieldEnvironmentID, costsheet.FieldMeterID, costsheet.FieldPriceID:
			values[i] = new(sql.NullString)
		case costsheet.FieldCreatedAt, costsheet.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Costsheet fields.
func (c *Costsheet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case costsheet.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case costsheet.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				c.TenantID = value.String
			}
		case costsheet.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		case costsheet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case costsheet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case costsheet.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				c.CreatedBy = value.String
			}
		case costsheet.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				c.UpdatedBy = value.String
			}
		case costsheet.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				c.EnvironmentID = value.String
			}
		case costsheet.FieldMeterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meter_id", values[i])
			} else if value.Valid {
				c.MeterID = value.String
			}
		case costsheet.FieldPriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_id", values[i])
			} else if value.Valid {
				c.PriceID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Costsheet.
// This includes values selected through modifiers, order, etc.
func (c *Costsheet) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryMeter queries the "meter" edge of the Costsheet entity.
func (c *Costsheet) QueryMeter() *MeterQuery {
	return NewCostsheetClient(c.config).QueryMeter(c)
}

// QueryPrice queries the "price" edge of the Costsheet entity.
func (c *Costsheet) QueryPrice() *PriceQuery {
	return NewCostsheetClient(c.config).QueryPrice(c)
}

// Update returns a builder for updating this Costsheet.
// Note that you need to call Costsheet.Unwrap() before calling this method if this Costsheet
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Costsheet) Update() *CostsheetUpdateOne {
	return NewCostsheetClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Costsheet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Costsheet) Unwrap() *Costsheet {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Costsheet is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Costsheet) String() string {
	var builder strings.Builder
	builder.WriteString("Costsheet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(c.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(c.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(c.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(c.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(c.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("meter_id=")
	builder.WriteString(c.MeterID)
	builder.WriteString(", ")
	builder.WriteString("price_id=")
	builder.WriteString(c.PriceID)
	builder.WriteByte(')')
	return builder.String()
}

// Costsheets is a parsable slice of Costsheet.
type Costsheets []*Costsheet
