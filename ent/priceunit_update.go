// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/price"
	"github.com/flexprice/flexprice/ent/priceunit"
	"github.com/shopspring/decimal"
)

// PriceUnitUpdate is the builder for updating PriceUnit entities.
type PriceUnitUpdate struct {
	config
	hooks    []Hook
	mutation *PriceUnitMutation
}

// Where appends a list predicates to the PriceUnitUpdate builder.
func (puu *PriceUnitUpdate) Where(ps ...predicate.PriceUnit) *PriceUnitUpdate {
	puu.mutation.Where(ps...)
	return puu
}

// SetStatus sets the "status" field.
func (puu *PriceUnitUpdate) SetStatus(s string) *PriceUnitUpdate {
	puu.mutation.SetStatus(s)
	return puu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillableStatus(s *string) *PriceUnitUpdate {
	if s != nil {
		puu.SetStatus(*s)
	}
	return puu
}

// SetUpdatedAt sets the "updated_at" field.
func (puu *PriceUnitUpdate) SetUpdatedAt(t time.Time) *PriceUnitUpdate {
	puu.mutation.SetUpdatedAt(t)
	return puu
}

// SetUpdatedBy sets the "updated_by" field.
func (puu *PriceUnitUpdate) SetUpdatedBy(s string) *PriceUnitUpdate {
	puu.mutation.SetUpdatedBy(s)
	return puu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillableUpdatedBy(s *string) *PriceUnitUpdate {
	if s != nil {
		puu.SetUpdatedBy(*s)
	}
	return puu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puu *PriceUnitUpdate) ClearUpdatedBy() *PriceUnitUpdate {
	puu.mutation.ClearUpdatedBy()
	return puu
}

// SetName sets the "name" field.
func (puu *PriceUnitUpdate) SetName(s string) *PriceUnitUpdate {
	puu.mutation.SetName(s)
	return puu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillableName(s *string) *PriceUnitUpdate {
	if s != nil {
		puu.SetName(*s)
	}
	return puu
}

// SetCode sets the "code" field.
func (puu *PriceUnitUpdate) SetCode(s string) *PriceUnitUpdate {
	puu.mutation.SetCode(s)
	return puu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillableCode(s *string) *PriceUnitUpdate {
	if s != nil {
		puu.SetCode(*s)
	}
	return puu
}

// SetSymbol sets the "symbol" field.
func (puu *PriceUnitUpdate) SetSymbol(s string) *PriceUnitUpdate {
	puu.mutation.SetSymbol(s)
	return puu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillableSymbol(s *string) *PriceUnitUpdate {
	if s != nil {
		puu.SetSymbol(*s)
	}
	return puu
}

// SetBaseCurrency sets the "base_currency" field.
func (puu *PriceUnitUpdate) SetBaseCurrency(s string) *PriceUnitUpdate {
	puu.mutation.SetBaseCurrency(s)
	return puu
}

// SetNillableBaseCurrency sets the "base_currency" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillableBaseCurrency(s *string) *PriceUnitUpdate {
	if s != nil {
		puu.SetBaseCurrency(*s)
	}
	return puu
}

// SetConversionRate sets the "conversion_rate" field.
func (puu *PriceUnitUpdate) SetConversionRate(d decimal.Decimal) *PriceUnitUpdate {
	puu.mutation.SetConversionRate(d)
	return puu
}

// SetNillableConversionRate sets the "conversion_rate" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillableConversionRate(d *decimal.Decimal) *PriceUnitUpdate {
	if d != nil {
		puu.SetConversionRate(*d)
	}
	return puu
}

// SetPrecision sets the "precision" field.
func (puu *PriceUnitUpdate) SetPrecision(i int) *PriceUnitUpdate {
	puu.mutation.ResetPrecision()
	puu.mutation.SetPrecision(i)
	return puu
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (puu *PriceUnitUpdate) SetNillablePrecision(i *int) *PriceUnitUpdate {
	if i != nil {
		puu.SetPrecision(*i)
	}
	return puu
}

// AddPrecision adds i to the "precision" field.
func (puu *PriceUnitUpdate) AddPrecision(i int) *PriceUnitUpdate {
	puu.mutation.AddPrecision(i)
	return puu
}

// AddPriceIDs adds the "prices" edge to the Price entity by IDs.
func (puu *PriceUnitUpdate) AddPriceIDs(ids ...string) *PriceUnitUpdate {
	puu.mutation.AddPriceIDs(ids...)
	return puu
}

// AddPrices adds the "prices" edges to the Price entity.
func (puu *PriceUnitUpdate) AddPrices(p ...*Price) *PriceUnitUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.AddPriceIDs(ids...)
}

// Mutation returns the PriceUnitMutation object of the builder.
func (puu *PriceUnitUpdate) Mutation() *PriceUnitMutation {
	return puu.mutation
}

// ClearPrices clears all "prices" edges to the Price entity.
func (puu *PriceUnitUpdate) ClearPrices() *PriceUnitUpdate {
	puu.mutation.ClearPrices()
	return puu
}

// RemovePriceIDs removes the "prices" edge to Price entities by IDs.
func (puu *PriceUnitUpdate) RemovePriceIDs(ids ...string) *PriceUnitUpdate {
	puu.mutation.RemovePriceIDs(ids...)
	return puu
}

// RemovePrices removes "prices" edges to Price entities.
func (puu *PriceUnitUpdate) RemovePrices(p ...*Price) *PriceUnitUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.RemovePriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (puu *PriceUnitUpdate) Save(ctx context.Context) (int, error) {
	puu.defaults()
	return withHooks(ctx, puu.sqlSave, puu.mutation, puu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puu *PriceUnitUpdate) SaveX(ctx context.Context) int {
	affected, err := puu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (puu *PriceUnitUpdate) Exec(ctx context.Context) error {
	_, err := puu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puu *PriceUnitUpdate) ExecX(ctx context.Context) {
	if err := puu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puu *PriceUnitUpdate) defaults() {
	if _, ok := puu.mutation.UpdatedAt(); !ok {
		v := priceunit.UpdateDefaultUpdatedAt()
		puu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puu *PriceUnitUpdate) check() error {
	if v, ok := puu.mutation.Name(); ok {
		if err := priceunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.name": %w`, err)}
		}
	}
	if v, ok := puu.mutation.Code(); ok {
		if err := priceunit.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.code": %w`, err)}
		}
	}
	if v, ok := puu.mutation.Symbol(); ok {
		if err := priceunit.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.symbol": %w`, err)}
		}
	}
	if v, ok := puu.mutation.BaseCurrency(); ok {
		if err := priceunit.BaseCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "base_currency", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.base_currency": %w`, err)}
		}
	}
	if v, ok := puu.mutation.Precision(); ok {
		if err := priceunit.PrecisionValidator(v); err != nil {
			return &ValidationError{Name: "precision", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.precision": %w`, err)}
		}
	}
	return nil
}

func (puu *PriceUnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := puu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(priceunit.Table, priceunit.Columns, sqlgraph.NewFieldSpec(priceunit.FieldID, field.TypeString))
	if ps := puu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puu.mutation.Status(); ok {
		_spec.SetField(priceunit.FieldStatus, field.TypeString, value)
	}
	if value, ok := puu.mutation.UpdatedAt(); ok {
		_spec.SetField(priceunit.FieldUpdatedAt, field.TypeTime, value)
	}
	if puu.mutation.CreatedByCleared() {
		_spec.ClearField(priceunit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puu.mutation.UpdatedBy(); ok {
		_spec.SetField(priceunit.FieldUpdatedBy, field.TypeString, value)
	}
	if puu.mutation.UpdatedByCleared() {
		_spec.ClearField(priceunit.FieldUpdatedBy, field.TypeString)
	}
	if puu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(priceunit.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := puu.mutation.Name(); ok {
		_spec.SetField(priceunit.FieldName, field.TypeString, value)
	}
	if value, ok := puu.mutation.Code(); ok {
		_spec.SetField(priceunit.FieldCode, field.TypeString, value)
	}
	if value, ok := puu.mutation.Symbol(); ok {
		_spec.SetField(priceunit.FieldSymbol, field.TypeString, value)
	}
	if value, ok := puu.mutation.BaseCurrency(); ok {
		_spec.SetField(priceunit.FieldBaseCurrency, field.TypeString, value)
	}
	if value, ok := puu.mutation.ConversionRate(); ok {
		_spec.SetField(priceunit.FieldConversionRate, field.TypeOther, value)
	}
	if value, ok := puu.mutation.Precision(); ok {
		_spec.SetField(priceunit.FieldPrecision, field.TypeInt, value)
	}
	if value, ok := puu.mutation.AddedPrecision(); ok {
		_spec.AddField(priceunit.FieldPrecision, field.TypeInt, value)
	}
	if puu.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   priceunit.PricesTable,
			Columns: []string{priceunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.RemovedPricesIDs(); len(nodes) > 0 && !puu.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   priceunit.PricesTable,
			Columns: []string{priceunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   priceunit.PricesTable,
			Columns: []string{priceunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, puu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{priceunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	puu.mutation.done = true
	return n, nil
}

// PriceUnitUpdateOne is the builder for updating a single PriceUnit entity.
type PriceUnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceUnitMutation
}

// SetStatus sets the "status" field.
func (puuo *PriceUnitUpdateOne) SetStatus(s string) *PriceUnitUpdateOne {
	puuo.mutation.SetStatus(s)
	return puuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillableStatus(s *string) *PriceUnitUpdateOne {
	if s != nil {
		puuo.SetStatus(*s)
	}
	return puuo
}

// SetUpdatedAt sets the "updated_at" field.
func (puuo *PriceUnitUpdateOne) SetUpdatedAt(t time.Time) *PriceUnitUpdateOne {
	puuo.mutation.SetUpdatedAt(t)
	return puuo
}

// SetUpdatedBy sets the "updated_by" field.
func (puuo *PriceUnitUpdateOne) SetUpdatedBy(s string) *PriceUnitUpdateOne {
	puuo.mutation.SetUpdatedBy(s)
	return puuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillableUpdatedBy(s *string) *PriceUnitUpdateOne {
	if s != nil {
		puuo.SetUpdatedBy(*s)
	}
	return puuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puuo *PriceUnitUpdateOne) ClearUpdatedBy() *PriceUnitUpdateOne {
	puuo.mutation.ClearUpdatedBy()
	return puuo
}

// SetName sets the "name" field.
func (puuo *PriceUnitUpdateOne) SetName(s string) *PriceUnitUpdateOne {
	puuo.mutation.SetName(s)
	return puuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillableName(s *string) *PriceUnitUpdateOne {
	if s != nil {
		puuo.SetName(*s)
	}
	return puuo
}

// SetCode sets the "code" field.
func (puuo *PriceUnitUpdateOne) SetCode(s string) *PriceUnitUpdateOne {
	puuo.mutation.SetCode(s)
	return puuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillableCode(s *string) *PriceUnitUpdateOne {
	if s != nil {
		puuo.SetCode(*s)
	}
	return puuo
}

// SetSymbol sets the "symbol" field.
func (puuo *PriceUnitUpdateOne) SetSymbol(s string) *PriceUnitUpdateOne {
	puuo.mutation.SetSymbol(s)
	return puuo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillableSymbol(s *string) *PriceUnitUpdateOne {
	if s != nil {
		puuo.SetSymbol(*s)
	}
	return puuo
}

// SetBaseCurrency sets the "base_currency" field.
func (puuo *PriceUnitUpdateOne) SetBaseCurrency(s string) *PriceUnitUpdateOne {
	puuo.mutation.SetBaseCurrency(s)
	return puuo
}

// SetNillableBaseCurrency sets the "base_currency" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillableBaseCurrency(s *string) *PriceUnitUpdateOne {
	if s != nil {
		puuo.SetBaseCurrency(*s)
	}
	return puuo
}

// SetConversionRate sets the "conversion_rate" field.
func (puuo *PriceUnitUpdateOne) SetConversionRate(d decimal.Decimal) *PriceUnitUpdateOne {
	puuo.mutation.SetConversionRate(d)
	return puuo
}

// SetNillableConversionRate sets the "conversion_rate" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillableConversionRate(d *decimal.Decimal) *PriceUnitUpdateOne {
	if d != nil {
		puuo.SetConversionRate(*d)
	}
	return puuo
}

// SetPrecision sets the "precision" field.
func (puuo *PriceUnitUpdateOne) SetPrecision(i int) *PriceUnitUpdateOne {
	puuo.mutation.ResetPrecision()
	puuo.mutation.SetPrecision(i)
	return puuo
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (puuo *PriceUnitUpdateOne) SetNillablePrecision(i *int) *PriceUnitUpdateOne {
	if i != nil {
		puuo.SetPrecision(*i)
	}
	return puuo
}

// AddPrecision adds i to the "precision" field.
func (puuo *PriceUnitUpdateOne) AddPrecision(i int) *PriceUnitUpdateOne {
	puuo.mutation.AddPrecision(i)
	return puuo
}

// AddPriceIDs adds the "prices" edge to the Price entity by IDs.
func (puuo *PriceUnitUpdateOne) AddPriceIDs(ids ...string) *PriceUnitUpdateOne {
	puuo.mutation.AddPriceIDs(ids...)
	return puuo
}

// AddPrices adds the "prices" edges to the Price entity.
func (puuo *PriceUnitUpdateOne) AddPrices(p ...*Price) *PriceUnitUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.AddPriceIDs(ids...)
}

// Mutation returns the PriceUnitMutation object of the builder.
func (puuo *PriceUnitUpdateOne) Mutation() *PriceUnitMutation {
	return puuo.mutation
}

// ClearPrices clears all "prices" edges to the Price entity.
func (puuo *PriceUnitUpdateOne) ClearPrices() *PriceUnitUpdateOne {
	puuo.mutation.ClearPrices()
	return puuo
}

// RemovePriceIDs removes the "prices" edge to Price entities by IDs.
func (puuo *PriceUnitUpdateOne) RemovePriceIDs(ids ...string) *PriceUnitUpdateOne {
	puuo.mutation.RemovePriceIDs(ids...)
	return puuo
}

// RemovePrices removes "prices" edges to Price entities.
func (puuo *PriceUnitUpdateOne) RemovePrices(p ...*Price) *PriceUnitUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.RemovePriceIDs(ids...)
}

// Where appends a list predicates to the PriceUnitUpdate builder.
func (puuo *PriceUnitUpdateOne) Where(ps ...predicate.PriceUnit) *PriceUnitUpdateOne {
	puuo.mutation.Where(ps...)
	return puuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puuo *PriceUnitUpdateOne) Select(field string, fields ...string) *PriceUnitUpdateOne {
	puuo.fields = append([]string{field}, fields...)
	return puuo
}

// Save executes the query and returns the updated PriceUnit entity.
func (puuo *PriceUnitUpdateOne) Save(ctx context.Context) (*PriceUnit, error) {
	puuo.defaults()
	return withHooks(ctx, puuo.sqlSave, puuo.mutation, puuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puuo *PriceUnitUpdateOne) SaveX(ctx context.Context) *PriceUnit {
	node, err := puuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puuo *PriceUnitUpdateOne) Exec(ctx context.Context) error {
	_, err := puuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puuo *PriceUnitUpdateOne) ExecX(ctx context.Context) {
	if err := puuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puuo *PriceUnitUpdateOne) defaults() {
	if _, ok := puuo.mutation.UpdatedAt(); !ok {
		v := priceunit.UpdateDefaultUpdatedAt()
		puuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puuo *PriceUnitUpdateOne) check() error {
	if v, ok := puuo.mutation.Name(); ok {
		if err := priceunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.name": %w`, err)}
		}
	}
	if v, ok := puuo.mutation.Code(); ok {
		if err := priceunit.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.code": %w`, err)}
		}
	}
	if v, ok := puuo.mutation.Symbol(); ok {
		if err := priceunit.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.symbol": %w`, err)}
		}
	}
	if v, ok := puuo.mutation.BaseCurrency(); ok {
		if err := priceunit.BaseCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "base_currency", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.base_currency": %w`, err)}
		}
	}
	if v, ok := puuo.mutation.Precision(); ok {
		if err := priceunit.PrecisionValidator(v); err != nil {
			return &ValidationError{Name: "precision", err: fmt.Errorf(`ent: validator failed for field "PriceUnit.precision": %w`, err)}
		}
	}
	return nil
}

func (puuo *PriceUnitUpdateOne) sqlSave(ctx context.Context) (_node *PriceUnit, err error) {
	if err := puuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(priceunit.Table, priceunit.Columns, sqlgraph.NewFieldSpec(priceunit.FieldID, field.TypeString))
	id, ok := puuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PriceUnit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, priceunit.FieldID)
		for _, f := range fields {
			if !priceunit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != priceunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puuo.mutation.Status(); ok {
		_spec.SetField(priceunit.FieldStatus, field.TypeString, value)
	}
	if value, ok := puuo.mutation.UpdatedAt(); ok {
		_spec.SetField(priceunit.FieldUpdatedAt, field.TypeTime, value)
	}
	if puuo.mutation.CreatedByCleared() {
		_spec.ClearField(priceunit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puuo.mutation.UpdatedBy(); ok {
		_spec.SetField(priceunit.FieldUpdatedBy, field.TypeString, value)
	}
	if puuo.mutation.UpdatedByCleared() {
		_spec.ClearField(priceunit.FieldUpdatedBy, field.TypeString)
	}
	if puuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(priceunit.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := puuo.mutation.Name(); ok {
		_spec.SetField(priceunit.FieldName, field.TypeString, value)
	}
	if value, ok := puuo.mutation.Code(); ok {
		_spec.SetField(priceunit.FieldCode, field.TypeString, value)
	}
	if value, ok := puuo.mutation.Symbol(); ok {
		_spec.SetField(priceunit.FieldSymbol, field.TypeString, value)
	}
	if value, ok := puuo.mutation.BaseCurrency(); ok {
		_spec.SetField(priceunit.FieldBaseCurrency, field.TypeString, value)
	}
	if value, ok := puuo.mutation.ConversionRate(); ok {
		_spec.SetField(priceunit.FieldConversionRate, field.TypeOther, value)
	}
	if value, ok := puuo.mutation.Precision(); ok {
		_spec.SetField(priceunit.FieldPrecision, field.TypeInt, value)
	}
	if value, ok := puuo.mutation.AddedPrecision(); ok {
		_spec.AddField(priceunit.FieldPrecision, field.TypeInt, value)
	}
	if puuo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   priceunit.PricesTable,
			Columns: []string{priceunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.RemovedPricesIDs(); len(nodes) > 0 && !puuo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   priceunit.PricesTable,
			Columns: []string{priceunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   priceunit.PricesTable,
			Columns: []string{priceunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PriceUnit{config: puuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{priceunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puuo.mutation.done = true
	return _node, nil
}
