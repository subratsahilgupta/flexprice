// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/price"
)

// CostsheetCreate is the builder for creating a Costsheet entity.
type CostsheetCreate struct {
	config
	mutation *CostsheetMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cc *CostsheetCreate) SetTenantID(s string) *CostsheetCreate {
	cc.mutation.SetTenantID(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CostsheetCreate) SetStatus(s string) *CostsheetCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CostsheetCreate) SetNillableStatus(s *string) *CostsheetCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CostsheetCreate) SetCreatedAt(t time.Time) *CostsheetCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CostsheetCreate) SetNillableCreatedAt(t *time.Time) *CostsheetCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CostsheetCreate) SetUpdatedAt(t time.Time) *CostsheetCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CostsheetCreate) SetNillableUpdatedAt(t *time.Time) *CostsheetCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *CostsheetCreate) SetCreatedBy(s string) *CostsheetCreate {
	cc.mutation.SetCreatedBy(s)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *CostsheetCreate) SetNillableCreatedBy(s *string) *CostsheetCreate {
	if s != nil {
		cc.SetCreatedBy(*s)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CostsheetCreate) SetUpdatedBy(s string) *CostsheetCreate {
	cc.mutation.SetUpdatedBy(s)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CostsheetCreate) SetNillableUpdatedBy(s *string) *CostsheetCreate {
	if s != nil {
		cc.SetUpdatedBy(*s)
	}
	return cc
}

// SetEnvironmentID sets the "environment_id" field.
func (cc *CostsheetCreate) SetEnvironmentID(s string) *CostsheetCreate {
	cc.mutation.SetEnvironmentID(s)
	return cc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cc *CostsheetCreate) SetNillableEnvironmentID(s *string) *CostsheetCreate {
	if s != nil {
		cc.SetEnvironmentID(*s)
	}
	return cc
}

// SetMeterID sets the "meter_id" field.
func (cc *CostsheetCreate) SetMeterID(s string) *CostsheetCreate {
	cc.mutation.SetMeterID(s)
	return cc
}

// SetPriceID sets the "price_id" field.
func (cc *CostsheetCreate) SetPriceID(s string) *CostsheetCreate {
	cc.mutation.SetPriceID(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CostsheetCreate) SetID(s string) *CostsheetCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetMeter sets the "meter" edge to the Meter entity.
func (cc *CostsheetCreate) SetMeter(m *Meter) *CostsheetCreate {
	return cc.SetMeterID(m.ID)
}

// SetPrice sets the "price" edge to the Price entity.
func (cc *CostsheetCreate) SetPrice(p *Price) *CostsheetCreate {
	return cc.SetPriceID(p.ID)
}

// Mutation returns the CostsheetMutation object of the builder.
func (cc *CostsheetCreate) Mutation() *CostsheetMutation {
	return cc.mutation
}

// Save creates the Costsheet in the database.
func (cc *CostsheetCreate) Save(ctx context.Context) (*Costsheet, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CostsheetCreate) SaveX(ctx context.Context) *Costsheet {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CostsheetCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CostsheetCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CostsheetCreate) defaults() {
	if _, ok := cc.mutation.Status(); !ok {
		v := costsheet.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := costsheet.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := costsheet.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.EnvironmentID(); !ok {
		v := costsheet.DefaultEnvironmentID
		cc.mutation.SetEnvironmentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CostsheetCreate) check() error {
	if _, ok := cc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Costsheet.tenant_id"`)}
	}
	if v, ok := cc.mutation.TenantID(); ok {
		if err := costsheet.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Costsheet.tenant_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Costsheet.status"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Costsheet.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Costsheet.updated_at"`)}
	}
	if _, ok := cc.mutation.MeterID(); !ok {
		return &ValidationError{Name: "meter_id", err: errors.New(`ent: missing required field "Costsheet.meter_id"`)}
	}
	if v, ok := cc.mutation.MeterID(); ok {
		if err := costsheet.MeterIDValidator(v); err != nil {
			return &ValidationError{Name: "meter_id", err: fmt.Errorf(`ent: validator failed for field "Costsheet.meter_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.PriceID(); !ok {
		return &ValidationError{Name: "price_id", err: errors.New(`ent: missing required field "Costsheet.price_id"`)}
	}
	if v, ok := cc.mutation.PriceID(); ok {
		if err := costsheet.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "Costsheet.price_id": %w`, err)}
		}
	}
	if len(cc.mutation.MeterIDs()) == 0 {
		return &ValidationError{Name: "meter", err: errors.New(`ent: missing required edge "Costsheet.meter"`)}
	}
	if len(cc.mutation.PriceIDs()) == 0 {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required edge "Costsheet.price"`)}
	}
	return nil
}

func (cc *CostsheetCreate) sqlSave(ctx context.Context) (*Costsheet, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Costsheet.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CostsheetCreate) createSpec() (*Costsheet, *sqlgraph.CreateSpec) {
	var (
		_node = &Costsheet{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(costsheet.Table, sqlgraph.NewFieldSpec(costsheet.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.TenantID(); ok {
		_spec.SetField(costsheet.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(costsheet.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(costsheet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(costsheet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(costsheet.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(costsheet.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.EnvironmentID(); ok {
		_spec.SetField(costsheet.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if nodes := cc.mutation.MeterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.MeterTable,
			Columns: []string{costsheet.MeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MeterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costsheet.PriceTable,
			Columns: []string{costsheet.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PriceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CostsheetCreateBulk is the builder for creating many Costsheet entities in bulk.
type CostsheetCreateBulk struct {
	config
	err      error
	builders []*CostsheetCreate
}

// Save creates the Costsheet entities in the database.
func (ccb *CostsheetCreateBulk) Save(ctx context.Context) ([]*Costsheet, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Costsheet, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CostsheetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CostsheetCreateBulk) SaveX(ctx context.Context) []*Costsheet {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CostsheetCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CostsheetCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
