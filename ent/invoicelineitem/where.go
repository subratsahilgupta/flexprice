// Code generated by ent, DO NOT EDIT.

package invoicelineitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldEnvironmentID, v))
}

// InvoiceID applies equality check predicate on the "invoice_id" field. It's identical to InvoiceIDEQ.
func InvoiceID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldInvoiceID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCustomerID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldSubscriptionID, v))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPlanID, v))
}

// PlanDisplayName applies equality check predicate on the "plan_display_name" field. It's identical to PlanDisplayNameEQ.
func PlanDisplayName(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPlanDisplayName, v))
}

// PriceID applies equality check predicate on the "price_id" field. It's identical to PriceIDEQ.
func PriceID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceID, v))
}

// PriceType applies equality check predicate on the "price_type" field. It's identical to PriceTypeEQ.
func PriceType(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceType, v))
}

// MeterID applies equality check predicate on the "meter_id" field. It's identical to MeterIDEQ.
func MeterID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldMeterID, v))
}

// MeterDisplayName applies equality check predicate on the "meter_display_name" field. It's identical to MeterDisplayNameEQ.
func MeterDisplayName(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldMeterDisplayName, v))
}

// PriceUnitID applies equality check predicate on the "price_unit_id" field. It's identical to PriceUnitIDEQ.
func PriceUnitID(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceUnitID, v))
}

// PriceUnit applies equality check predicate on the "price_unit" field. It's identical to PriceUnitEQ.
func PriceUnit(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceUnit, v))
}

// PriceUnitAmount applies equality check predicate on the "price_unit_amount" field. It's identical to PriceUnitAmountEQ.
func PriceUnitAmount(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceUnitAmount, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldDisplayName, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldAmount, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldQuantity, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCurrency, v))
}

// PeriodStart applies equality check predicate on the "period_start" field. It's identical to PeriodStartEQ.
func PeriodStart(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPeriodStart, v))
}

// PeriodEnd applies equality check predicate on the "period_end" field. It's identical to PeriodEndEQ.
func PeriodEnd(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPeriodEnd, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// InvoiceIDEQ applies the EQ predicate on the "invoice_id" field.
func InvoiceIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldInvoiceID, v))
}

// InvoiceIDNEQ applies the NEQ predicate on the "invoice_id" field.
func InvoiceIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldInvoiceID, v))
}

// InvoiceIDIn applies the In predicate on the "invoice_id" field.
func InvoiceIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldInvoiceID, vs...))
}

// InvoiceIDNotIn applies the NotIn predicate on the "invoice_id" field.
func InvoiceIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldInvoiceID, vs...))
}

// InvoiceIDGT applies the GT predicate on the "invoice_id" field.
func InvoiceIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldInvoiceID, v))
}

// InvoiceIDGTE applies the GTE predicate on the "invoice_id" field.
func InvoiceIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldInvoiceID, v))
}

// InvoiceIDLT applies the LT predicate on the "invoice_id" field.
func InvoiceIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldInvoiceID, v))
}

// InvoiceIDLTE applies the LTE predicate on the "invoice_id" field.
func InvoiceIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldInvoiceID, v))
}

// InvoiceIDContains applies the Contains predicate on the "invoice_id" field.
func InvoiceIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldInvoiceID, v))
}

// InvoiceIDHasPrefix applies the HasPrefix predicate on the "invoice_id" field.
func InvoiceIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldInvoiceID, v))
}

// InvoiceIDHasSuffix applies the HasSuffix predicate on the "invoice_id" field.
func InvoiceIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldInvoiceID, v))
}

// InvoiceIDEqualFold applies the EqualFold predicate on the "invoice_id" field.
func InvoiceIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldInvoiceID, v))
}

// InvoiceIDContainsFold applies the ContainsFold predicate on the "invoice_id" field.
func InvoiceIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldInvoiceID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldCustomerID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDContains applies the Contains predicate on the "plan_id" field.
func PlanIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldPlanID, v))
}

// PlanIDHasPrefix applies the HasPrefix predicate on the "plan_id" field.
func PlanIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldPlanID, v))
}

// PlanIDHasSuffix applies the HasSuffix predicate on the "plan_id" field.
func PlanIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldPlanID, v))
}

// PlanIDIsNil applies the IsNil predicate on the "plan_id" field.
func PlanIDIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPlanID))
}

// PlanIDNotNil applies the NotNil predicate on the "plan_id" field.
func PlanIDNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPlanID))
}

// PlanIDEqualFold applies the EqualFold predicate on the "plan_id" field.
func PlanIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldPlanID, v))
}

// PlanIDContainsFold applies the ContainsFold predicate on the "plan_id" field.
func PlanIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldPlanID, v))
}

// PlanDisplayNameEQ applies the EQ predicate on the "plan_display_name" field.
func PlanDisplayNameEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPlanDisplayName, v))
}

// PlanDisplayNameNEQ applies the NEQ predicate on the "plan_display_name" field.
func PlanDisplayNameNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPlanDisplayName, v))
}

// PlanDisplayNameIn applies the In predicate on the "plan_display_name" field.
func PlanDisplayNameIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPlanDisplayName, vs...))
}

// PlanDisplayNameNotIn applies the NotIn predicate on the "plan_display_name" field.
func PlanDisplayNameNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPlanDisplayName, vs...))
}

// PlanDisplayNameGT applies the GT predicate on the "plan_display_name" field.
func PlanDisplayNameGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPlanDisplayName, v))
}

// PlanDisplayNameGTE applies the GTE predicate on the "plan_display_name" field.
func PlanDisplayNameGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPlanDisplayName, v))
}

// PlanDisplayNameLT applies the LT predicate on the "plan_display_name" field.
func PlanDisplayNameLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPlanDisplayName, v))
}

// PlanDisplayNameLTE applies the LTE predicate on the "plan_display_name" field.
func PlanDisplayNameLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPlanDisplayName, v))
}

// PlanDisplayNameContains applies the Contains predicate on the "plan_display_name" field.
func PlanDisplayNameContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldPlanDisplayName, v))
}

// PlanDisplayNameHasPrefix applies the HasPrefix predicate on the "plan_display_name" field.
func PlanDisplayNameHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldPlanDisplayName, v))
}

// PlanDisplayNameHasSuffix applies the HasSuffix predicate on the "plan_display_name" field.
func PlanDisplayNameHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldPlanDisplayName, v))
}

// PlanDisplayNameIsNil applies the IsNil predicate on the "plan_display_name" field.
func PlanDisplayNameIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPlanDisplayName))
}

// PlanDisplayNameNotNil applies the NotNil predicate on the "plan_display_name" field.
func PlanDisplayNameNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPlanDisplayName))
}

// PlanDisplayNameEqualFold applies the EqualFold predicate on the "plan_display_name" field.
func PlanDisplayNameEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldPlanDisplayName, v))
}

// PlanDisplayNameContainsFold applies the ContainsFold predicate on the "plan_display_name" field.
func PlanDisplayNameContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldPlanDisplayName, v))
}

// PriceIDEQ applies the EQ predicate on the "price_id" field.
func PriceIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceID, v))
}

// PriceIDNEQ applies the NEQ predicate on the "price_id" field.
func PriceIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPriceID, v))
}

// PriceIDIn applies the In predicate on the "price_id" field.
func PriceIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPriceID, vs...))
}

// PriceIDNotIn applies the NotIn predicate on the "price_id" field.
func PriceIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPriceID, vs...))
}

// PriceIDGT applies the GT predicate on the "price_id" field.
func PriceIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPriceID, v))
}

// PriceIDGTE applies the GTE predicate on the "price_id" field.
func PriceIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPriceID, v))
}

// PriceIDLT applies the LT predicate on the "price_id" field.
func PriceIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPriceID, v))
}

// PriceIDLTE applies the LTE predicate on the "price_id" field.
func PriceIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPriceID, v))
}

// PriceIDContains applies the Contains predicate on the "price_id" field.
func PriceIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldPriceID, v))
}

// PriceIDHasPrefix applies the HasPrefix predicate on the "price_id" field.
func PriceIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldPriceID, v))
}

// PriceIDHasSuffix applies the HasSuffix predicate on the "price_id" field.
func PriceIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldPriceID, v))
}

// PriceIDIsNil applies the IsNil predicate on the "price_id" field.
func PriceIDIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPriceID))
}

// PriceIDNotNil applies the NotNil predicate on the "price_id" field.
func PriceIDNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPriceID))
}

// PriceIDEqualFold applies the EqualFold predicate on the "price_id" field.
func PriceIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldPriceID, v))
}

// PriceIDContainsFold applies the ContainsFold predicate on the "price_id" field.
func PriceIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldPriceID, v))
}

// PriceTypeEQ applies the EQ predicate on the "price_type" field.
func PriceTypeEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceType, v))
}

// PriceTypeNEQ applies the NEQ predicate on the "price_type" field.
func PriceTypeNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPriceType, v))
}

// PriceTypeIn applies the In predicate on the "price_type" field.
func PriceTypeIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPriceType, vs...))
}

// PriceTypeNotIn applies the NotIn predicate on the "price_type" field.
func PriceTypeNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPriceType, vs...))
}

// PriceTypeGT applies the GT predicate on the "price_type" field.
func PriceTypeGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPriceType, v))
}

// PriceTypeGTE applies the GTE predicate on the "price_type" field.
func PriceTypeGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPriceType, v))
}

// PriceTypeLT applies the LT predicate on the "price_type" field.
func PriceTypeLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPriceType, v))
}

// PriceTypeLTE applies the LTE predicate on the "price_type" field.
func PriceTypeLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPriceType, v))
}

// PriceTypeContains applies the Contains predicate on the "price_type" field.
func PriceTypeContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldPriceType, v))
}

// PriceTypeHasPrefix applies the HasPrefix predicate on the "price_type" field.
func PriceTypeHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldPriceType, v))
}

// PriceTypeHasSuffix applies the HasSuffix predicate on the "price_type" field.
func PriceTypeHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldPriceType, v))
}

// PriceTypeIsNil applies the IsNil predicate on the "price_type" field.
func PriceTypeIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPriceType))
}

// PriceTypeNotNil applies the NotNil predicate on the "price_type" field.
func PriceTypeNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPriceType))
}

// PriceTypeEqualFold applies the EqualFold predicate on the "price_type" field.
func PriceTypeEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldPriceType, v))
}

// PriceTypeContainsFold applies the ContainsFold predicate on the "price_type" field.
func PriceTypeContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldPriceType, v))
}

// MeterIDEQ applies the EQ predicate on the "meter_id" field.
func MeterIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldMeterID, v))
}

// MeterIDNEQ applies the NEQ predicate on the "meter_id" field.
func MeterIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldMeterID, v))
}

// MeterIDIn applies the In predicate on the "meter_id" field.
func MeterIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldMeterID, vs...))
}

// MeterIDNotIn applies the NotIn predicate on the "meter_id" field.
func MeterIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldMeterID, vs...))
}

// MeterIDGT applies the GT predicate on the "meter_id" field.
func MeterIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldMeterID, v))
}

// MeterIDGTE applies the GTE predicate on the "meter_id" field.
func MeterIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldMeterID, v))
}

// MeterIDLT applies the LT predicate on the "meter_id" field.
func MeterIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldMeterID, v))
}

// MeterIDLTE applies the LTE predicate on the "meter_id" field.
func MeterIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldMeterID, v))
}

// MeterIDContains applies the Contains predicate on the "meter_id" field.
func MeterIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldMeterID, v))
}

// MeterIDHasPrefix applies the HasPrefix predicate on the "meter_id" field.
func MeterIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldMeterID, v))
}

// MeterIDHasSuffix applies the HasSuffix predicate on the "meter_id" field.
func MeterIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldMeterID, v))
}

// MeterIDIsNil applies the IsNil predicate on the "meter_id" field.
func MeterIDIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldMeterID))
}

// MeterIDNotNil applies the NotNil predicate on the "meter_id" field.
func MeterIDNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldMeterID))
}

// MeterIDEqualFold applies the EqualFold predicate on the "meter_id" field.
func MeterIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldMeterID, v))
}

// MeterIDContainsFold applies the ContainsFold predicate on the "meter_id" field.
func MeterIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldMeterID, v))
}

// MeterDisplayNameEQ applies the EQ predicate on the "meter_display_name" field.
func MeterDisplayNameEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldMeterDisplayName, v))
}

// MeterDisplayNameNEQ applies the NEQ predicate on the "meter_display_name" field.
func MeterDisplayNameNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldMeterDisplayName, v))
}

// MeterDisplayNameIn applies the In predicate on the "meter_display_name" field.
func MeterDisplayNameIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldMeterDisplayName, vs...))
}

// MeterDisplayNameNotIn applies the NotIn predicate on the "meter_display_name" field.
func MeterDisplayNameNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldMeterDisplayName, vs...))
}

// MeterDisplayNameGT applies the GT predicate on the "meter_display_name" field.
func MeterDisplayNameGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldMeterDisplayName, v))
}

// MeterDisplayNameGTE applies the GTE predicate on the "meter_display_name" field.
func MeterDisplayNameGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldMeterDisplayName, v))
}

// MeterDisplayNameLT applies the LT predicate on the "meter_display_name" field.
func MeterDisplayNameLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldMeterDisplayName, v))
}

// MeterDisplayNameLTE applies the LTE predicate on the "meter_display_name" field.
func MeterDisplayNameLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldMeterDisplayName, v))
}

// MeterDisplayNameContains applies the Contains predicate on the "meter_display_name" field.
func MeterDisplayNameContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldMeterDisplayName, v))
}

// MeterDisplayNameHasPrefix applies the HasPrefix predicate on the "meter_display_name" field.
func MeterDisplayNameHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldMeterDisplayName, v))
}

// MeterDisplayNameHasSuffix applies the HasSuffix predicate on the "meter_display_name" field.
func MeterDisplayNameHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldMeterDisplayName, v))
}

// MeterDisplayNameIsNil applies the IsNil predicate on the "meter_display_name" field.
func MeterDisplayNameIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldMeterDisplayName))
}

// MeterDisplayNameNotNil applies the NotNil predicate on the "meter_display_name" field.
func MeterDisplayNameNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldMeterDisplayName))
}

// MeterDisplayNameEqualFold applies the EqualFold predicate on the "meter_display_name" field.
func MeterDisplayNameEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldMeterDisplayName, v))
}

// MeterDisplayNameContainsFold applies the ContainsFold predicate on the "meter_display_name" field.
func MeterDisplayNameContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldMeterDisplayName, v))
}

// PriceUnitIDEQ applies the EQ predicate on the "price_unit_id" field.
func PriceUnitIDEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceUnitID, v))
}

// PriceUnitIDNEQ applies the NEQ predicate on the "price_unit_id" field.
func PriceUnitIDNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPriceUnitID, v))
}

// PriceUnitIDIn applies the In predicate on the "price_unit_id" field.
func PriceUnitIDIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPriceUnitID, vs...))
}

// PriceUnitIDNotIn applies the NotIn predicate on the "price_unit_id" field.
func PriceUnitIDNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPriceUnitID, vs...))
}

// PriceUnitIDGT applies the GT predicate on the "price_unit_id" field.
func PriceUnitIDGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPriceUnitID, v))
}

// PriceUnitIDGTE applies the GTE predicate on the "price_unit_id" field.
func PriceUnitIDGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPriceUnitID, v))
}

// PriceUnitIDLT applies the LT predicate on the "price_unit_id" field.
func PriceUnitIDLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPriceUnitID, v))
}

// PriceUnitIDLTE applies the LTE predicate on the "price_unit_id" field.
func PriceUnitIDLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPriceUnitID, v))
}

// PriceUnitIDContains applies the Contains predicate on the "price_unit_id" field.
func PriceUnitIDContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldPriceUnitID, v))
}

// PriceUnitIDHasPrefix applies the HasPrefix predicate on the "price_unit_id" field.
func PriceUnitIDHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldPriceUnitID, v))
}

// PriceUnitIDHasSuffix applies the HasSuffix predicate on the "price_unit_id" field.
func PriceUnitIDHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldPriceUnitID, v))
}

// PriceUnitIDIsNil applies the IsNil predicate on the "price_unit_id" field.
func PriceUnitIDIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPriceUnitID))
}

// PriceUnitIDNotNil applies the NotNil predicate on the "price_unit_id" field.
func PriceUnitIDNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPriceUnitID))
}

// PriceUnitIDEqualFold applies the EqualFold predicate on the "price_unit_id" field.
func PriceUnitIDEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldPriceUnitID, v))
}

// PriceUnitIDContainsFold applies the ContainsFold predicate on the "price_unit_id" field.
func PriceUnitIDContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldPriceUnitID, v))
}

// PriceUnitEQ applies the EQ predicate on the "price_unit" field.
func PriceUnitEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceUnit, v))
}

// PriceUnitNEQ applies the NEQ predicate on the "price_unit" field.
func PriceUnitNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPriceUnit, v))
}

// PriceUnitIn applies the In predicate on the "price_unit" field.
func PriceUnitIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPriceUnit, vs...))
}

// PriceUnitNotIn applies the NotIn predicate on the "price_unit" field.
func PriceUnitNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPriceUnit, vs...))
}

// PriceUnitGT applies the GT predicate on the "price_unit" field.
func PriceUnitGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPriceUnit, v))
}

// PriceUnitGTE applies the GTE predicate on the "price_unit" field.
func PriceUnitGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPriceUnit, v))
}

// PriceUnitLT applies the LT predicate on the "price_unit" field.
func PriceUnitLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPriceUnit, v))
}

// PriceUnitLTE applies the LTE predicate on the "price_unit" field.
func PriceUnitLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPriceUnit, v))
}

// PriceUnitContains applies the Contains predicate on the "price_unit" field.
func PriceUnitContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldPriceUnit, v))
}

// PriceUnitHasPrefix applies the HasPrefix predicate on the "price_unit" field.
func PriceUnitHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldPriceUnit, v))
}

// PriceUnitHasSuffix applies the HasSuffix predicate on the "price_unit" field.
func PriceUnitHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldPriceUnit, v))
}

// PriceUnitIsNil applies the IsNil predicate on the "price_unit" field.
func PriceUnitIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPriceUnit))
}

// PriceUnitNotNil applies the NotNil predicate on the "price_unit" field.
func PriceUnitNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPriceUnit))
}

// PriceUnitEqualFold applies the EqualFold predicate on the "price_unit" field.
func PriceUnitEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldPriceUnit, v))
}

// PriceUnitContainsFold applies the ContainsFold predicate on the "price_unit" field.
func PriceUnitContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldPriceUnit, v))
}

// PriceUnitAmountEQ applies the EQ predicate on the "price_unit_amount" field.
func PriceUnitAmountEQ(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPriceUnitAmount, v))
}

// PriceUnitAmountNEQ applies the NEQ predicate on the "price_unit_amount" field.
func PriceUnitAmountNEQ(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPriceUnitAmount, v))
}

// PriceUnitAmountIn applies the In predicate on the "price_unit_amount" field.
func PriceUnitAmountIn(vs ...decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPriceUnitAmount, vs...))
}

// PriceUnitAmountNotIn applies the NotIn predicate on the "price_unit_amount" field.
func PriceUnitAmountNotIn(vs ...decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPriceUnitAmount, vs...))
}

// PriceUnitAmountGT applies the GT predicate on the "price_unit_amount" field.
func PriceUnitAmountGT(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPriceUnitAmount, v))
}

// PriceUnitAmountGTE applies the GTE predicate on the "price_unit_amount" field.
func PriceUnitAmountGTE(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPriceUnitAmount, v))
}

// PriceUnitAmountLT applies the LT predicate on the "price_unit_amount" field.
func PriceUnitAmountLT(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPriceUnitAmount, v))
}

// PriceUnitAmountLTE applies the LTE predicate on the "price_unit_amount" field.
func PriceUnitAmountLTE(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPriceUnitAmount, v))
}

// PriceUnitAmountIsNil applies the IsNil predicate on the "price_unit_amount" field.
func PriceUnitAmountIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPriceUnitAmount))
}

// PriceUnitAmountNotNil applies the NotNil predicate on the "price_unit_amount" field.
func PriceUnitAmountNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPriceUnitAmount))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldDisplayName, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldAmount, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v decimal.Decimal) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldQuantity, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldContainsFold(FieldCurrency, v))
}

// PeriodStartEQ applies the EQ predicate on the "period_start" field.
func PeriodStartEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPeriodStart, v))
}

// PeriodStartNEQ applies the NEQ predicate on the "period_start" field.
func PeriodStartNEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPeriodStart, v))
}

// PeriodStartIn applies the In predicate on the "period_start" field.
func PeriodStartIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPeriodStart, vs...))
}

// PeriodStartNotIn applies the NotIn predicate on the "period_start" field.
func PeriodStartNotIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPeriodStart, vs...))
}

// PeriodStartGT applies the GT predicate on the "period_start" field.
func PeriodStartGT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPeriodStart, v))
}

// PeriodStartGTE applies the GTE predicate on the "period_start" field.
func PeriodStartGTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPeriodStart, v))
}

// PeriodStartLT applies the LT predicate on the "period_start" field.
func PeriodStartLT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPeriodStart, v))
}

// PeriodStartLTE applies the LTE predicate on the "period_start" field.
func PeriodStartLTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPeriodStart, v))
}

// PeriodStartIsNil applies the IsNil predicate on the "period_start" field.
func PeriodStartIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPeriodStart))
}

// PeriodStartNotNil applies the NotNil predicate on the "period_start" field.
func PeriodStartNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPeriodStart))
}

// PeriodEndEQ applies the EQ predicate on the "period_end" field.
func PeriodEndEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldEQ(FieldPeriodEnd, v))
}

// PeriodEndNEQ applies the NEQ predicate on the "period_end" field.
func PeriodEndNEQ(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNEQ(FieldPeriodEnd, v))
}

// PeriodEndIn applies the In predicate on the "period_end" field.
func PeriodEndIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIn(FieldPeriodEnd, vs...))
}

// PeriodEndNotIn applies the NotIn predicate on the "period_end" field.
func PeriodEndNotIn(vs ...time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotIn(FieldPeriodEnd, vs...))
}

// PeriodEndGT applies the GT predicate on the "period_end" field.
func PeriodEndGT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGT(FieldPeriodEnd, v))
}

// PeriodEndGTE applies the GTE predicate on the "period_end" field.
func PeriodEndGTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldGTE(FieldPeriodEnd, v))
}

// PeriodEndLT applies the LT predicate on the "period_end" field.
func PeriodEndLT(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLT(FieldPeriodEnd, v))
}

// PeriodEndLTE applies the LTE predicate on the "period_end" field.
func PeriodEndLTE(v time.Time) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldLTE(FieldPeriodEnd, v))
}

// PeriodEndIsNil applies the IsNil predicate on the "period_end" field.
func PeriodEndIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldPeriodEnd))
}

// PeriodEndNotNil applies the NotNil predicate on the "period_end" field.
func PeriodEndNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldPeriodEnd))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.FieldNotNull(FieldMetadata))
}

// HasInvoice applies the HasEdge predicate on the "invoice" edge.
func HasInvoice() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoiceWith applies the HasEdge predicate on the "invoice" edge with a given conditions (other predicates).
func HasInvoiceWith(preds ...predicate.Invoice) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(func(s *sql.Selector) {
		step := newInvoiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCouponApplications applies the HasEdge predicate on the "coupon_applications" edge.
func HasCouponApplications() predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CouponApplicationsTable, CouponApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCouponApplicationsWith applies the HasEdge predicate on the "coupon_applications" edge with a given conditions (other predicates).
func HasCouponApplicationsWith(preds ...predicate.CouponApplication) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(func(s *sql.Selector) {
		step := newCouponApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InvoiceLineItem) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InvoiceLineItem) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InvoiceLineItem) predicate.InvoiceLineItem {
	return predicate.InvoiceLineItem(sql.NotPredicates(p))
}
