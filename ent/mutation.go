// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/auth"
	"github.com/flexprice/flexprice/ent/billingsequence"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/creditgrant"
	"github.com/flexprice/flexprice/ent/creditgrantapplication"
	"github.com/flexprice/flexprice/ent/creditnote"
	"github.com/flexprice/flexprice/ent/creditnotelineitem"
	"github.com/flexprice/flexprice/ent/customer"
	"github.com/flexprice/flexprice/ent/entitlement"
	"github.com/flexprice/flexprice/ent/environment"
	"github.com/flexprice/flexprice/ent/feature"
	"github.com/flexprice/flexprice/ent/invoice"
	"github.com/flexprice/flexprice/ent/invoicelineitem"
	"github.com/flexprice/flexprice/ent/invoicesequence"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/payment"
	"github.com/flexprice/flexprice/ent/paymentattempt"
	"github.com/flexprice/flexprice/ent/plan"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/price"
	"github.com/flexprice/flexprice/ent/priceunit"
	"github.com/flexprice/flexprice/ent/schema"
	"github.com/flexprice/flexprice/ent/secret"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
	"github.com/flexprice/flexprice/ent/subscriptionpause"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
	"github.com/flexprice/flexprice/ent/task"
	"github.com/flexprice/flexprice/ent/tenant"
	"github.com/flexprice/flexprice/ent/user"
	"github.com/flexprice/flexprice/ent/wallet"
	"github.com/flexprice/flexprice/ent/wallettransaction"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuth                      = "Auth"
	TypeBillingSequence           = "BillingSequence"
	TypeCostsheet                 = "Costsheet"
	TypeCreditGrant               = "CreditGrant"
	TypeCreditGrantApplication    = "CreditGrantApplication"
	TypeCreditNote                = "CreditNote"
	TypeCreditNoteLineItem        = "CreditNoteLineItem"
	TypeCustomer                  = "Customer"
	TypeEntitlement               = "Entitlement"
	TypeEnvironment               = "Environment"
	TypeFeature                   = "Feature"
	TypeInvoice                   = "Invoice"
	TypeInvoiceLineItem           = "InvoiceLineItem"
	TypeInvoiceSequence           = "InvoiceSequence"
	TypeMeter                     = "Meter"
	TypePayment                   = "Payment"
	TypePaymentAttempt            = "PaymentAttempt"
	TypePlan                      = "Plan"
	TypePrice                     = "Price"
	TypePriceUnit                 = "PriceUnit"
	TypeSecret                    = "Secret"
	TypeSubscription              = "Subscription"
	TypeSubscriptionLineItem      = "SubscriptionLineItem"
	TypeSubscriptionPause         = "SubscriptionPause"
	TypeSubscriptionSchedule      = "SubscriptionSchedule"
	TypeSubscriptionSchedulePhase = "SubscriptionSchedulePhase"
	TypeTask                      = "Task"
	TypeTenant                    = "Tenant"
	TypeUser                      = "User"
	TypeWallet                    = "Wallet"
	TypeWalletTransaction         = "WalletTransaction"
)

// AuthMutation represents an operation that mutates the Auth nodes in the graph.
type AuthMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_id       *string
	provider      *string
	token         *string
	status        *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Auth, error)
	predicates    []predicate.Auth
}

var _ ent.Mutation = (*AuthMutation)(nil)

// authOption allows management of the mutation configuration using functional options.
type authOption func(*AuthMutation)

// newAuthMutation creates new mutation for the Auth entity.
func newAuthMutation(c config, op Op, opts ...authOption) *AuthMutation {
	m := &AuthMutation{
		config:        c,
		op:            op,
		typ:           TypeAuth,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthID sets the ID field of the mutation.
func withAuthID(id int) authOption {
	return func(m *AuthMutation) {
		var (
			err   error
			once  sync.Once
			value *Auth
		)
		m.oldValue = func(ctx context.Context) (*Auth, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Auth.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuth sets the old Auth of the mutation.
func withAuth(node *Auth) authOption {
	return func(m *AuthMutation) {
		m.oldValue = func(context.Context) (*Auth, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Auth.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *AuthMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AuthMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Auth entity.
// If the Auth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AuthMutation) ResetUserID() {
	m.user_id = nil
}

// SetProvider sets the "provider" field.
func (m *AuthMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *AuthMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the Auth entity.
// If the Auth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *AuthMutation) ResetProvider() {
	m.provider = nil
}

// SetToken sets the "token" field.
func (m *AuthMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *AuthMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Auth entity.
// If the Auth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *AuthMutation) ResetToken() {
	m.token = nil
}

// SetStatus sets the "status" field.
func (m *AuthMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *AuthMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Auth entity.
// If the Auth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *AuthMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Auth entity.
// If the Auth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AuthMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AuthMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Auth entity.
// If the Auth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AuthMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the AuthMutation builder.
func (m *AuthMutation) Where(ps ...predicate.Auth) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Auth, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Auth).
func (m *AuthMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user_id != nil {
		fields = append(fields, auth.FieldUserID)
	}
	if m.provider != nil {
		fields = append(fields, auth.FieldProvider)
	}
	if m.token != nil {
		fields = append(fields, auth.FieldToken)
	}
	if m.status != nil {
		fields = append(fields, auth.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, auth.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, auth.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case auth.FieldUserID:
		return m.UserID()
	case auth.FieldProvider:
		return m.Provider()
	case auth.FieldToken:
		return m.Token()
	case auth.FieldStatus:
		return m.Status()
	case auth.FieldCreatedAt:
		return m.CreatedAt()
	case auth.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case auth.FieldUserID:
		return m.OldUserID(ctx)
	case auth.FieldProvider:
		return m.OldProvider(ctx)
	case auth.FieldToken:
		return m.OldToken(ctx)
	case auth.FieldStatus:
		return m.OldStatus(ctx)
	case auth.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case auth.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Auth field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthMutation) SetField(name string, value ent.Value) error {
	switch name {
	case auth.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case auth.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case auth.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case auth.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case auth.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case auth.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Auth field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Auth numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Auth nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthMutation) ResetField(name string) error {
	switch name {
	case auth.FieldUserID:
		m.ResetUserID()
		return nil
	case auth.FieldProvider:
		m.ResetProvider()
		return nil
	case auth.FieldToken:
		m.ResetToken()
		return nil
	case auth.FieldStatus:
		m.ResetStatus()
		return nil
	case auth.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case auth.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Auth field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Auth unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Auth edge %s", name)
}

// BillingSequenceMutation represents an operation that mutates the BillingSequence nodes in the graph.
type BillingSequenceMutation struct {
	config
	op               Op
	typ              string
	id               *int
	tenant_id        *string
	subscription_id  *string
	last_sequence    *int
	addlast_sequence *int
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*BillingSequence, error)
	predicates       []predicate.BillingSequence
}

var _ ent.Mutation = (*BillingSequenceMutation)(nil)

// billingsequenceOption allows management of the mutation configuration using functional options.
type billingsequenceOption func(*BillingSequenceMutation)

// newBillingSequenceMutation creates new mutation for the BillingSequence entity.
func newBillingSequenceMutation(c config, op Op, opts ...billingsequenceOption) *BillingSequenceMutation {
	m := &BillingSequenceMutation{
		config:        c,
		op:            op,
		typ:           TypeBillingSequence,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBillingSequenceID sets the ID field of the mutation.
func withBillingSequenceID(id int) billingsequenceOption {
	return func(m *BillingSequenceMutation) {
		var (
			err   error
			once  sync.Once
			value *BillingSequence
		)
		m.oldValue = func(ctx context.Context) (*BillingSequence, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BillingSequence.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBillingSequence sets the old BillingSequence of the mutation.
func withBillingSequence(node *BillingSequence) billingsequenceOption {
	return func(m *BillingSequenceMutation) {
		m.oldValue = func(context.Context) (*BillingSequence, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BillingSequenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BillingSequenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BillingSequenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BillingSequenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BillingSequence.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *BillingSequenceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *BillingSequenceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the BillingSequence entity.
// If the BillingSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillingSequenceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *BillingSequenceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *BillingSequenceMutation) SetSubscriptionID(s string) {
	m.subscription_id = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *BillingSequenceMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the BillingSequence entity.
// If the BillingSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillingSequenceMutation) OldSubscriptionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *BillingSequenceMutation) ResetSubscriptionID() {
	m.subscription_id = nil
}

// SetLastSequence sets the "last_sequence" field.
func (m *BillingSequenceMutation) SetLastSequence(i int) {
	m.last_sequence = &i
	m.addlast_sequence = nil
}

// LastSequence returns the value of the "last_sequence" field in the mutation.
func (m *BillingSequenceMutation) LastSequence() (r int, exists bool) {
	v := m.last_sequence
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSequence returns the old "last_sequence" field's value of the BillingSequence entity.
// If the BillingSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillingSequenceMutation) OldLastSequence(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSequence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSequence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSequence: %w", err)
	}
	return oldValue.LastSequence, nil
}

// AddLastSequence adds i to the "last_sequence" field.
func (m *BillingSequenceMutation) AddLastSequence(i int) {
	if m.addlast_sequence != nil {
		*m.addlast_sequence += i
	} else {
		m.addlast_sequence = &i
	}
}

// AddedLastSequence returns the value that was added to the "last_sequence" field in this mutation.
func (m *BillingSequenceMutation) AddedLastSequence() (r int, exists bool) {
	v := m.addlast_sequence
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastSequence resets all changes to the "last_sequence" field.
func (m *BillingSequenceMutation) ResetLastSequence() {
	m.last_sequence = nil
	m.addlast_sequence = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BillingSequenceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BillingSequenceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BillingSequence entity.
// If the BillingSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillingSequenceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BillingSequenceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BillingSequenceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BillingSequenceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BillingSequence entity.
// If the BillingSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillingSequenceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BillingSequenceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the BillingSequenceMutation builder.
func (m *BillingSequenceMutation) Where(ps ...predicate.BillingSequence) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BillingSequenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BillingSequenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BillingSequence, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BillingSequenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BillingSequenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BillingSequence).
func (m *BillingSequenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BillingSequenceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.tenant_id != nil {
		fields = append(fields, billingsequence.FieldTenantID)
	}
	if m.subscription_id != nil {
		fields = append(fields, billingsequence.FieldSubscriptionID)
	}
	if m.last_sequence != nil {
		fields = append(fields, billingsequence.FieldLastSequence)
	}
	if m.created_at != nil {
		fields = append(fields, billingsequence.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, billingsequence.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BillingSequenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case billingsequence.FieldTenantID:
		return m.TenantID()
	case billingsequence.FieldSubscriptionID:
		return m.SubscriptionID()
	case billingsequence.FieldLastSequence:
		return m.LastSequence()
	case billingsequence.FieldCreatedAt:
		return m.CreatedAt()
	case billingsequence.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BillingSequenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case billingsequence.FieldTenantID:
		return m.OldTenantID(ctx)
	case billingsequence.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case billingsequence.FieldLastSequence:
		return m.OldLastSequence(ctx)
	case billingsequence.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case billingsequence.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown BillingSequence field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillingSequenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case billingsequence.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case billingsequence.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case billingsequence.FieldLastSequence:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSequence(v)
		return nil
	case billingsequence.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case billingsequence.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BillingSequence field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BillingSequenceMutation) AddedFields() []string {
	var fields []string
	if m.addlast_sequence != nil {
		fields = append(fields, billingsequence.FieldLastSequence)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BillingSequenceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case billingsequence.FieldLastSequence:
		return m.AddedLastSequence()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillingSequenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case billingsequence.FieldLastSequence:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastSequence(v)
		return nil
	}
	return fmt.Errorf("unknown BillingSequence numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BillingSequenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BillingSequenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BillingSequenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BillingSequence nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BillingSequenceMutation) ResetField(name string) error {
	switch name {
	case billingsequence.FieldTenantID:
		m.ResetTenantID()
		return nil
	case billingsequence.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case billingsequence.FieldLastSequence:
		m.ResetLastSequence()
		return nil
	case billingsequence.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case billingsequence.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown BillingSequence field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BillingSequenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BillingSequenceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BillingSequenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BillingSequenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BillingSequenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BillingSequenceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BillingSequenceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BillingSequence unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BillingSequenceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BillingSequence edge %s", name)
}

// CostsheetMutation represents an operation that mutates the Costsheet nodes in the graph.
type CostsheetMutation struct {
	config
	op             Op
	typ            string
	id             *string
	tenant_id      *string
	status         *string
	created_at     *time.Time
	updated_at     *time.Time
	created_by     *string
	updated_by     *string
	environment_id *string
	clearedFields  map[string]struct{}
	meter          *string
	clearedmeter   bool
	price          *string
	clearedprice   bool
	done           bool
	oldValue       func(context.Context) (*Costsheet, error)
	predicates     []predicate.Costsheet
}

var _ ent.Mutation = (*CostsheetMutation)(nil)

// costsheetOption allows management of the mutation configuration using functional options.
type costsheetOption func(*CostsheetMutation)

// newCostsheetMutation creates new mutation for the Costsheet entity.
func newCostsheetMutation(c config, op Op, opts ...costsheetOption) *CostsheetMutation {
	m := &CostsheetMutation{
		config:        c,
		op:            op,
		typ:           TypeCostsheet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCostsheetID sets the ID field of the mutation.
func withCostsheetID(id string) costsheetOption {
	return func(m *CostsheetMutation) {
		var (
			err   error
			once  sync.Once
			value *Costsheet
		)
		m.oldValue = func(ctx context.Context) (*Costsheet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Costsheet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCostsheet sets the old Costsheet of the mutation.
func withCostsheet(node *Costsheet) costsheetOption {
	return func(m *CostsheetMutation) {
		m.oldValue = func(context.Context) (*Costsheet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CostsheetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CostsheetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Costsheet entities.
func (m *CostsheetMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CostsheetMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CostsheetMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Costsheet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *CostsheetMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *CostsheetMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *CostsheetMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *CostsheetMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CostsheetMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CostsheetMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CostsheetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CostsheetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CostsheetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CostsheetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CostsheetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CostsheetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CostsheetMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CostsheetMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CostsheetMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[costsheet.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CostsheetMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[costsheet.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CostsheetMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, costsheet.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CostsheetMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CostsheetMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CostsheetMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[costsheet.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CostsheetMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[costsheet.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CostsheetMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, costsheet.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *CostsheetMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *CostsheetMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *CostsheetMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[costsheet.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *CostsheetMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[costsheet.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *CostsheetMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, costsheet.FieldEnvironmentID)
}

// SetMeterID sets the "meter_id" field.
func (m *CostsheetMutation) SetMeterID(s string) {
	m.meter = &s
}

// MeterID returns the value of the "meter_id" field in the mutation.
func (m *CostsheetMutation) MeterID() (r string, exists bool) {
	v := m.meter
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterID returns the old "meter_id" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldMeterID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterID: %w", err)
	}
	return oldValue.MeterID, nil
}

// ResetMeterID resets all changes to the "meter_id" field.
func (m *CostsheetMutation) ResetMeterID() {
	m.meter = nil
}

// SetPriceID sets the "price_id" field.
func (m *CostsheetMutation) SetPriceID(s string) {
	m.price = &s
}

// PriceID returns the value of the "price_id" field in the mutation.
func (m *CostsheetMutation) PriceID() (r string, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceID returns the old "price_id" field's value of the Costsheet entity.
// If the Costsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CostsheetMutation) OldPriceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceID: %w", err)
	}
	return oldValue.PriceID, nil
}

// ResetPriceID resets all changes to the "price_id" field.
func (m *CostsheetMutation) ResetPriceID() {
	m.price = nil
}

// ClearMeter clears the "meter" edge to the Meter entity.
func (m *CostsheetMutation) ClearMeter() {
	m.clearedmeter = true
	m.clearedFields[costsheet.FieldMeterID] = struct{}{}
}

// MeterCleared reports if the "meter" edge to the Meter entity was cleared.
func (m *CostsheetMutation) MeterCleared() bool {
	return m.clearedmeter
}

// MeterIDs returns the "meter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MeterID instead. It exists only for internal usage by the builders.
func (m *CostsheetMutation) MeterIDs() (ids []string) {
	if id := m.meter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMeter resets all changes to the "meter" edge.
func (m *CostsheetMutation) ResetMeter() {
	m.meter = nil
	m.clearedmeter = false
}

// ClearPrice clears the "price" edge to the Price entity.
func (m *CostsheetMutation) ClearPrice() {
	m.clearedprice = true
	m.clearedFields[costsheet.FieldPriceID] = struct{}{}
}

// PriceCleared reports if the "price" edge to the Price entity was cleared.
func (m *CostsheetMutation) PriceCleared() bool {
	return m.clearedprice
}

// PriceIDs returns the "price" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PriceID instead. It exists only for internal usage by the builders.
func (m *CostsheetMutation) PriceIDs() (ids []string) {
	if id := m.price; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrice resets all changes to the "price" edge.
func (m *CostsheetMutation) ResetPrice() {
	m.price = nil
	m.clearedprice = false
}

// Where appends a list predicates to the CostsheetMutation builder.
func (m *CostsheetMutation) Where(ps ...predicate.Costsheet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CostsheetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CostsheetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Costsheet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CostsheetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CostsheetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Costsheet).
func (m *CostsheetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CostsheetMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.tenant_id != nil {
		fields = append(fields, costsheet.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, costsheet.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, costsheet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, costsheet.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, costsheet.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, costsheet.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, costsheet.FieldEnvironmentID)
	}
	if m.meter != nil {
		fields = append(fields, costsheet.FieldMeterID)
	}
	if m.price != nil {
		fields = append(fields, costsheet.FieldPriceID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CostsheetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case costsheet.FieldTenantID:
		return m.TenantID()
	case costsheet.FieldStatus:
		return m.Status()
	case costsheet.FieldCreatedAt:
		return m.CreatedAt()
	case costsheet.FieldUpdatedAt:
		return m.UpdatedAt()
	case costsheet.FieldCreatedBy:
		return m.CreatedBy()
	case costsheet.FieldUpdatedBy:
		return m.UpdatedBy()
	case costsheet.FieldEnvironmentID:
		return m.EnvironmentID()
	case costsheet.FieldMeterID:
		return m.MeterID()
	case costsheet.FieldPriceID:
		return m.PriceID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CostsheetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case costsheet.FieldTenantID:
		return m.OldTenantID(ctx)
	case costsheet.FieldStatus:
		return m.OldStatus(ctx)
	case costsheet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case costsheet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case costsheet.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case costsheet.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case costsheet.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case costsheet.FieldMeterID:
		return m.OldMeterID(ctx)
	case costsheet.FieldPriceID:
		return m.OldPriceID(ctx)
	}
	return nil, fmt.Errorf("unknown Costsheet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CostsheetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case costsheet.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case costsheet.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case costsheet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case costsheet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case costsheet.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case costsheet.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case costsheet.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case costsheet.FieldMeterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterID(v)
		return nil
	case costsheet.FieldPriceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceID(v)
		return nil
	}
	return fmt.Errorf("unknown Costsheet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CostsheetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CostsheetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CostsheetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Costsheet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CostsheetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(costsheet.FieldCreatedBy) {
		fields = append(fields, costsheet.FieldCreatedBy)
	}
	if m.FieldCleared(costsheet.FieldUpdatedBy) {
		fields = append(fields, costsheet.FieldUpdatedBy)
	}
	if m.FieldCleared(costsheet.FieldEnvironmentID) {
		fields = append(fields, costsheet.FieldEnvironmentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CostsheetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CostsheetMutation) ClearField(name string) error {
	switch name {
	case costsheet.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case costsheet.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case costsheet.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	}
	return fmt.Errorf("unknown Costsheet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CostsheetMutation) ResetField(name string) error {
	switch name {
	case costsheet.FieldTenantID:
		m.ResetTenantID()
		return nil
	case costsheet.FieldStatus:
		m.ResetStatus()
		return nil
	case costsheet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case costsheet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case costsheet.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case costsheet.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case costsheet.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case costsheet.FieldMeterID:
		m.ResetMeterID()
		return nil
	case costsheet.FieldPriceID:
		m.ResetPriceID()
		return nil
	}
	return fmt.Errorf("unknown Costsheet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CostsheetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.meter != nil {
		edges = append(edges, costsheet.EdgeMeter)
	}
	if m.price != nil {
		edges = append(edges, costsheet.EdgePrice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CostsheetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case costsheet.EdgeMeter:
		if id := m.meter; id != nil {
			return []ent.Value{*id}
		}
	case costsheet.EdgePrice:
		if id := m.price; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CostsheetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CostsheetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CostsheetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmeter {
		edges = append(edges, costsheet.EdgeMeter)
	}
	if m.clearedprice {
		edges = append(edges, costsheet.EdgePrice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CostsheetMutation) EdgeCleared(name string) bool {
	switch name {
	case costsheet.EdgeMeter:
		return m.clearedmeter
	case costsheet.EdgePrice:
		return m.clearedprice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CostsheetMutation) ClearEdge(name string) error {
	switch name {
	case costsheet.EdgeMeter:
		m.ClearMeter()
		return nil
	case costsheet.EdgePrice:
		m.ClearPrice()
		return nil
	}
	return fmt.Errorf("unknown Costsheet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CostsheetMutation) ResetEdge(name string) error {
	switch name {
	case costsheet.EdgeMeter:
		m.ResetMeter()
		return nil
	case costsheet.EdgePrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown Costsheet edge %s", name)
}

// CreditGrantMutation represents an operation that mutates the CreditGrant nodes in the graph.
type CreditGrantMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	tenant_id                *string
	status                   *string
	created_at               *time.Time
	updated_at               *time.Time
	created_by               *string
	updated_by               *string
	environment_id           *string
	name                     *string
	scope                    *types.CreditGrantScope
	credits                  *decimal.Decimal
	cadence                  *types.CreditGrantCadence
	period                   *types.CreditGrantPeriod
	period_count             *int
	addperiod_count          *int
	expiration_type          *types.CreditGrantExpiryType
	expiration_duration      *int
	addexpiration_duration   *int
	expiration_duration_unit *types.CreditGrantExpiryDurationUnit
	priority                 *int
	addpriority              *int
	metadata                 *map[string]string
	clearedFields            map[string]struct{}
	plan                     *string
	clearedplan              bool
	subscription             *string
	clearedsubscription      bool
	done                     bool
	oldValue                 func(context.Context) (*CreditGrant, error)
	predicates               []predicate.CreditGrant
}

var _ ent.Mutation = (*CreditGrantMutation)(nil)

// creditgrantOption allows management of the mutation configuration using functional options.
type creditgrantOption func(*CreditGrantMutation)

// newCreditGrantMutation creates new mutation for the CreditGrant entity.
func newCreditGrantMutation(c config, op Op, opts ...creditgrantOption) *CreditGrantMutation {
	m := &CreditGrantMutation{
		config:        c,
		op:            op,
		typ:           TypeCreditGrant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCreditGrantID sets the ID field of the mutation.
func withCreditGrantID(id string) creditgrantOption {
	return func(m *CreditGrantMutation) {
		var (
			err   error
			once  sync.Once
			value *CreditGrant
		)
		m.oldValue = func(ctx context.Context) (*CreditGrant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CreditGrant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCreditGrant sets the old CreditGrant of the mutation.
func withCreditGrant(node *CreditGrant) creditgrantOption {
	return func(m *CreditGrantMutation) {
		m.oldValue = func(context.Context) (*CreditGrant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CreditGrantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CreditGrantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CreditGrant entities.
func (m *CreditGrantMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CreditGrantMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CreditGrantMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CreditGrant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *CreditGrantMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *CreditGrantMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *CreditGrantMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *CreditGrantMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CreditGrantMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CreditGrantMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CreditGrantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CreditGrantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CreditGrantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CreditGrantMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CreditGrantMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CreditGrantMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CreditGrantMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CreditGrantMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CreditGrantMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[creditgrant.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CreditGrantMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CreditGrantMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, creditgrant.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CreditGrantMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CreditGrantMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CreditGrantMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[creditgrant.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CreditGrantMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CreditGrantMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, creditgrant.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *CreditGrantMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *CreditGrantMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *CreditGrantMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[creditgrant.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *CreditGrantMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *CreditGrantMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, creditgrant.FieldEnvironmentID)
}

// SetName sets the "name" field.
func (m *CreditGrantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CreditGrantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CreditGrantMutation) ResetName() {
	m.name = nil
}

// SetScope sets the "scope" field.
func (m *CreditGrantMutation) SetScope(tgs types.CreditGrantScope) {
	m.scope = &tgs
}

// Scope returns the value of the "scope" field in the mutation.
func (m *CreditGrantMutation) Scope() (r types.CreditGrantScope, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldScope(ctx context.Context) (v types.CreditGrantScope, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *CreditGrantMutation) ResetScope() {
	m.scope = nil
}

// SetPlanID sets the "plan_id" field.
func (m *CreditGrantMutation) SetPlanID(s string) {
	m.plan = &s
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *CreditGrantMutation) PlanID() (r string, exists bool) {
	v := m.plan
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldPlanID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ClearPlanID clears the value of the "plan_id" field.
func (m *CreditGrantMutation) ClearPlanID() {
	m.plan = nil
	m.clearedFields[creditgrant.FieldPlanID] = struct{}{}
}

// PlanIDCleared returns if the "plan_id" field was cleared in this mutation.
func (m *CreditGrantMutation) PlanIDCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldPlanID]
	return ok
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *CreditGrantMutation) ResetPlanID() {
	m.plan = nil
	delete(m.clearedFields, creditgrant.FieldPlanID)
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *CreditGrantMutation) SetSubscriptionID(s string) {
	m.subscription = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *CreditGrantMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldSubscriptionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (m *CreditGrantMutation) ClearSubscriptionID() {
	m.subscription = nil
	m.clearedFields[creditgrant.FieldSubscriptionID] = struct{}{}
}

// SubscriptionIDCleared returns if the "subscription_id" field was cleared in this mutation.
func (m *CreditGrantMutation) SubscriptionIDCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldSubscriptionID]
	return ok
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *CreditGrantMutation) ResetSubscriptionID() {
	m.subscription = nil
	delete(m.clearedFields, creditgrant.FieldSubscriptionID)
}

// SetCredits sets the "credits" field.
func (m *CreditGrantMutation) SetCredits(d decimal.Decimal) {
	m.credits = &d
}

// Credits returns the value of the "credits" field in the mutation.
func (m *CreditGrantMutation) Credits() (r decimal.Decimal, exists bool) {
	v := m.credits
	if v == nil {
		return
	}
	return *v, true
}

// OldCredits returns the old "credits" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldCredits(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredits: %w", err)
	}
	return oldValue.Credits, nil
}

// ResetCredits resets all changes to the "credits" field.
func (m *CreditGrantMutation) ResetCredits() {
	m.credits = nil
}

// SetCadence sets the "cadence" field.
func (m *CreditGrantMutation) SetCadence(tgc types.CreditGrantCadence) {
	m.cadence = &tgc
}

// Cadence returns the value of the "cadence" field in the mutation.
func (m *CreditGrantMutation) Cadence() (r types.CreditGrantCadence, exists bool) {
	v := m.cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldCadence returns the old "cadence" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldCadence(ctx context.Context) (v types.CreditGrantCadence, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCadence: %w", err)
	}
	return oldValue.Cadence, nil
}

// ResetCadence resets all changes to the "cadence" field.
func (m *CreditGrantMutation) ResetCadence() {
	m.cadence = nil
}

// SetPeriod sets the "period" field.
func (m *CreditGrantMutation) SetPeriod(tgp types.CreditGrantPeriod) {
	m.period = &tgp
}

// Period returns the value of the "period" field in the mutation.
func (m *CreditGrantMutation) Period() (r types.CreditGrantPeriod, exists bool) {
	v := m.period
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriod returns the old "period" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldPeriod(ctx context.Context) (v *types.CreditGrantPeriod, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriod: %w", err)
	}
	return oldValue.Period, nil
}

// ClearPeriod clears the value of the "period" field.
func (m *CreditGrantMutation) ClearPeriod() {
	m.period = nil
	m.clearedFields[creditgrant.FieldPeriod] = struct{}{}
}

// PeriodCleared returns if the "period" field was cleared in this mutation.
func (m *CreditGrantMutation) PeriodCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldPeriod]
	return ok
}

// ResetPeriod resets all changes to the "period" field.
func (m *CreditGrantMutation) ResetPeriod() {
	m.period = nil
	delete(m.clearedFields, creditgrant.FieldPeriod)
}

// SetPeriodCount sets the "period_count" field.
func (m *CreditGrantMutation) SetPeriodCount(i int) {
	m.period_count = &i
	m.addperiod_count = nil
}

// PeriodCount returns the value of the "period_count" field in the mutation.
func (m *CreditGrantMutation) PeriodCount() (r int, exists bool) {
	v := m.period_count
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodCount returns the old "period_count" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldPeriodCount(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodCount: %w", err)
	}
	return oldValue.PeriodCount, nil
}

// AddPeriodCount adds i to the "period_count" field.
func (m *CreditGrantMutation) AddPeriodCount(i int) {
	if m.addperiod_count != nil {
		*m.addperiod_count += i
	} else {
		m.addperiod_count = &i
	}
}

// AddedPeriodCount returns the value that was added to the "period_count" field in this mutation.
func (m *CreditGrantMutation) AddedPeriodCount() (r int, exists bool) {
	v := m.addperiod_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearPeriodCount clears the value of the "period_count" field.
func (m *CreditGrantMutation) ClearPeriodCount() {
	m.period_count = nil
	m.addperiod_count = nil
	m.clearedFields[creditgrant.FieldPeriodCount] = struct{}{}
}

// PeriodCountCleared returns if the "period_count" field was cleared in this mutation.
func (m *CreditGrantMutation) PeriodCountCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldPeriodCount]
	return ok
}

// ResetPeriodCount resets all changes to the "period_count" field.
func (m *CreditGrantMutation) ResetPeriodCount() {
	m.period_count = nil
	m.addperiod_count = nil
	delete(m.clearedFields, creditgrant.FieldPeriodCount)
}

// SetExpirationType sets the "expiration_type" field.
func (m *CreditGrantMutation) SetExpirationType(tget types.CreditGrantExpiryType) {
	m.expiration_type = &tget
}

// ExpirationType returns the value of the "expiration_type" field in the mutation.
func (m *CreditGrantMutation) ExpirationType() (r types.CreditGrantExpiryType, exists bool) {
	v := m.expiration_type
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationType returns the old "expiration_type" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldExpirationType(ctx context.Context) (v types.CreditGrantExpiryType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationType: %w", err)
	}
	return oldValue.ExpirationType, nil
}

// ResetExpirationType resets all changes to the "expiration_type" field.
func (m *CreditGrantMutation) ResetExpirationType() {
	m.expiration_type = nil
}

// SetExpirationDuration sets the "expiration_duration" field.
func (m *CreditGrantMutation) SetExpirationDuration(i int) {
	m.expiration_duration = &i
	m.addexpiration_duration = nil
}

// ExpirationDuration returns the value of the "expiration_duration" field in the mutation.
func (m *CreditGrantMutation) ExpirationDuration() (r int, exists bool) {
	v := m.expiration_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationDuration returns the old "expiration_duration" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldExpirationDuration(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationDuration: %w", err)
	}
	return oldValue.ExpirationDuration, nil
}

// AddExpirationDuration adds i to the "expiration_duration" field.
func (m *CreditGrantMutation) AddExpirationDuration(i int) {
	if m.addexpiration_duration != nil {
		*m.addexpiration_duration += i
	} else {
		m.addexpiration_duration = &i
	}
}

// AddedExpirationDuration returns the value that was added to the "expiration_duration" field in this mutation.
func (m *CreditGrantMutation) AddedExpirationDuration() (r int, exists bool) {
	v := m.addexpiration_duration
	if v == nil {
		return
	}
	return *v, true
}

// ClearExpirationDuration clears the value of the "expiration_duration" field.
func (m *CreditGrantMutation) ClearExpirationDuration() {
	m.expiration_duration = nil
	m.addexpiration_duration = nil
	m.clearedFields[creditgrant.FieldExpirationDuration] = struct{}{}
}

// ExpirationDurationCleared returns if the "expiration_duration" field was cleared in this mutation.
func (m *CreditGrantMutation) ExpirationDurationCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldExpirationDuration]
	return ok
}

// ResetExpirationDuration resets all changes to the "expiration_duration" field.
func (m *CreditGrantMutation) ResetExpirationDuration() {
	m.expiration_duration = nil
	m.addexpiration_duration = nil
	delete(m.clearedFields, creditgrant.FieldExpirationDuration)
}

// SetExpirationDurationUnit sets the "expiration_duration_unit" field.
func (m *CreditGrantMutation) SetExpirationDurationUnit(tgedu types.CreditGrantExpiryDurationUnit) {
	m.expiration_duration_unit = &tgedu
}

// ExpirationDurationUnit returns the value of the "expiration_duration_unit" field in the mutation.
func (m *CreditGrantMutation) ExpirationDurationUnit() (r types.CreditGrantExpiryDurationUnit, exists bool) {
	v := m.expiration_duration_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationDurationUnit returns the old "expiration_duration_unit" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldExpirationDurationUnit(ctx context.Context) (v *types.CreditGrantExpiryDurationUnit, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationDurationUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationDurationUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationDurationUnit: %w", err)
	}
	return oldValue.ExpirationDurationUnit, nil
}

// ClearExpirationDurationUnit clears the value of the "expiration_duration_unit" field.
func (m *CreditGrantMutation) ClearExpirationDurationUnit() {
	m.expiration_duration_unit = nil
	m.clearedFields[creditgrant.FieldExpirationDurationUnit] = struct{}{}
}

// ExpirationDurationUnitCleared returns if the "expiration_duration_unit" field was cleared in this mutation.
func (m *CreditGrantMutation) ExpirationDurationUnitCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldExpirationDurationUnit]
	return ok
}

// ResetExpirationDurationUnit resets all changes to the "expiration_duration_unit" field.
func (m *CreditGrantMutation) ResetExpirationDurationUnit() {
	m.expiration_duration_unit = nil
	delete(m.clearedFields, creditgrant.FieldExpirationDurationUnit)
}

// SetPriority sets the "priority" field.
func (m *CreditGrantMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *CreditGrantMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldPriority(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *CreditGrantMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *CreditGrantMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ClearPriority clears the value of the "priority" field.
func (m *CreditGrantMutation) ClearPriority() {
	m.priority = nil
	m.addpriority = nil
	m.clearedFields[creditgrant.FieldPriority] = struct{}{}
}

// PriorityCleared returns if the "priority" field was cleared in this mutation.
func (m *CreditGrantMutation) PriorityCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldPriority]
	return ok
}

// ResetPriority resets all changes to the "priority" field.
func (m *CreditGrantMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
	delete(m.clearedFields, creditgrant.FieldPriority)
}

// SetMetadata sets the "metadata" field.
func (m *CreditGrantMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CreditGrantMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the CreditGrant entity.
// If the CreditGrant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CreditGrantMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[creditgrant.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CreditGrantMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[creditgrant.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CreditGrantMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, creditgrant.FieldMetadata)
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *CreditGrantMutation) ClearPlan() {
	m.clearedplan = true
	m.clearedFields[creditgrant.FieldPlanID] = struct{}{}
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *CreditGrantMutation) PlanCleared() bool {
	return m.PlanIDCleared() || m.clearedplan
}

// PlanIDs returns the "plan" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlanID instead. It exists only for internal usage by the builders.
func (m *CreditGrantMutation) PlanIDs() (ids []string) {
	if id := m.plan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *CreditGrantMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (m *CreditGrantMutation) ClearSubscription() {
	m.clearedsubscription = true
	m.clearedFields[creditgrant.FieldSubscriptionID] = struct{}{}
}

// SubscriptionCleared reports if the "subscription" edge to the Subscription entity was cleared.
func (m *CreditGrantMutation) SubscriptionCleared() bool {
	return m.SubscriptionIDCleared() || m.clearedsubscription
}

// SubscriptionIDs returns the "subscription" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriptionID instead. It exists only for internal usage by the builders.
func (m *CreditGrantMutation) SubscriptionIDs() (ids []string) {
	if id := m.subscription; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscription resets all changes to the "subscription" edge.
func (m *CreditGrantMutation) ResetSubscription() {
	m.subscription = nil
	m.clearedsubscription = false
}

// Where appends a list predicates to the CreditGrantMutation builder.
func (m *CreditGrantMutation) Where(ps ...predicate.CreditGrant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CreditGrantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CreditGrantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CreditGrant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CreditGrantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CreditGrantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CreditGrant).
func (m *CreditGrantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CreditGrantMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.tenant_id != nil {
		fields = append(fields, creditgrant.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, creditgrant.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, creditgrant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, creditgrant.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, creditgrant.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, creditgrant.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, creditgrant.FieldEnvironmentID)
	}
	if m.name != nil {
		fields = append(fields, creditgrant.FieldName)
	}
	if m.scope != nil {
		fields = append(fields, creditgrant.FieldScope)
	}
	if m.plan != nil {
		fields = append(fields, creditgrant.FieldPlanID)
	}
	if m.subscription != nil {
		fields = append(fields, creditgrant.FieldSubscriptionID)
	}
	if m.credits != nil {
		fields = append(fields, creditgrant.FieldCredits)
	}
	if m.cadence != nil {
		fields = append(fields, creditgrant.FieldCadence)
	}
	if m.period != nil {
		fields = append(fields, creditgrant.FieldPeriod)
	}
	if m.period_count != nil {
		fields = append(fields, creditgrant.FieldPeriodCount)
	}
	if m.expiration_type != nil {
		fields = append(fields, creditgrant.FieldExpirationType)
	}
	if m.expiration_duration != nil {
		fields = append(fields, creditgrant.FieldExpirationDuration)
	}
	if m.expiration_duration_unit != nil {
		fields = append(fields, creditgrant.FieldExpirationDurationUnit)
	}
	if m.priority != nil {
		fields = append(fields, creditgrant.FieldPriority)
	}
	if m.metadata != nil {
		fields = append(fields, creditgrant.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CreditGrantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case creditgrant.FieldTenantID:
		return m.TenantID()
	case creditgrant.FieldStatus:
		return m.Status()
	case creditgrant.FieldCreatedAt:
		return m.CreatedAt()
	case creditgrant.FieldUpdatedAt:
		return m.UpdatedAt()
	case creditgrant.FieldCreatedBy:
		return m.CreatedBy()
	case creditgrant.FieldUpdatedBy:
		return m.UpdatedBy()
	case creditgrant.FieldEnvironmentID:
		return m.EnvironmentID()
	case creditgrant.FieldName:
		return m.Name()
	case creditgrant.FieldScope:
		return m.Scope()
	case creditgrant.FieldPlanID:
		return m.PlanID()
	case creditgrant.FieldSubscriptionID:
		return m.SubscriptionID()
	case creditgrant.FieldCredits:
		return m.Credits()
	case creditgrant.FieldCadence:
		return m.Cadence()
	case creditgrant.FieldPeriod:
		return m.Period()
	case creditgrant.FieldPeriodCount:
		return m.PeriodCount()
	case creditgrant.FieldExpirationType:
		return m.ExpirationType()
	case creditgrant.FieldExpirationDuration:
		return m.ExpirationDuration()
	case creditgrant.FieldExpirationDurationUnit:
		return m.ExpirationDurationUnit()
	case creditgrant.FieldPriority:
		return m.Priority()
	case creditgrant.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CreditGrantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case creditgrant.FieldTenantID:
		return m.OldTenantID(ctx)
	case creditgrant.FieldStatus:
		return m.OldStatus(ctx)
	case creditgrant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case creditgrant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case creditgrant.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case creditgrant.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case creditgrant.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case creditgrant.FieldName:
		return m.OldName(ctx)
	case creditgrant.FieldScope:
		return m.OldScope(ctx)
	case creditgrant.FieldPlanID:
		return m.OldPlanID(ctx)
	case creditgrant.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case creditgrant.FieldCredits:
		return m.OldCredits(ctx)
	case creditgrant.FieldCadence:
		return m.OldCadence(ctx)
	case creditgrant.FieldPeriod:
		return m.OldPeriod(ctx)
	case creditgrant.FieldPeriodCount:
		return m.OldPeriodCount(ctx)
	case creditgrant.FieldExpirationType:
		return m.OldExpirationType(ctx)
	case creditgrant.FieldExpirationDuration:
		return m.OldExpirationDuration(ctx)
	case creditgrant.FieldExpirationDurationUnit:
		return m.OldExpirationDurationUnit(ctx)
	case creditgrant.FieldPriority:
		return m.OldPriority(ctx)
	case creditgrant.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown CreditGrant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditGrantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case creditgrant.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case creditgrant.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case creditgrant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case creditgrant.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case creditgrant.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case creditgrant.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case creditgrant.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case creditgrant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case creditgrant.FieldScope:
		v, ok := value.(types.CreditGrantScope)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	case creditgrant.FieldPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case creditgrant.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case creditgrant.FieldCredits:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredits(v)
		return nil
	case creditgrant.FieldCadence:
		v, ok := value.(types.CreditGrantCadence)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCadence(v)
		return nil
	case creditgrant.FieldPeriod:
		v, ok := value.(types.CreditGrantPeriod)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriod(v)
		return nil
	case creditgrant.FieldPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodCount(v)
		return nil
	case creditgrant.FieldExpirationType:
		v, ok := value.(types.CreditGrantExpiryType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationType(v)
		return nil
	case creditgrant.FieldExpirationDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationDuration(v)
		return nil
	case creditgrant.FieldExpirationDurationUnit:
		v, ok := value.(types.CreditGrantExpiryDurationUnit)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationDurationUnit(v)
		return nil
	case creditgrant.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case creditgrant.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown CreditGrant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CreditGrantMutation) AddedFields() []string {
	var fields []string
	if m.addperiod_count != nil {
		fields = append(fields, creditgrant.FieldPeriodCount)
	}
	if m.addexpiration_duration != nil {
		fields = append(fields, creditgrant.FieldExpirationDuration)
	}
	if m.addpriority != nil {
		fields = append(fields, creditgrant.FieldPriority)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CreditGrantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case creditgrant.FieldPeriodCount:
		return m.AddedPeriodCount()
	case creditgrant.FieldExpirationDuration:
		return m.AddedExpirationDuration()
	case creditgrant.FieldPriority:
		return m.AddedPriority()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditGrantMutation) AddField(name string, value ent.Value) error {
	switch name {
	case creditgrant.FieldPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPeriodCount(v)
		return nil
	case creditgrant.FieldExpirationDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpirationDuration(v)
		return nil
	case creditgrant.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	}
	return fmt.Errorf("unknown CreditGrant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CreditGrantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(creditgrant.FieldCreatedBy) {
		fields = append(fields, creditgrant.FieldCreatedBy)
	}
	if m.FieldCleared(creditgrant.FieldUpdatedBy) {
		fields = append(fields, creditgrant.FieldUpdatedBy)
	}
	if m.FieldCleared(creditgrant.FieldEnvironmentID) {
		fields = append(fields, creditgrant.FieldEnvironmentID)
	}
	if m.FieldCleared(creditgrant.FieldPlanID) {
		fields = append(fields, creditgrant.FieldPlanID)
	}
	if m.FieldCleared(creditgrant.FieldSubscriptionID) {
		fields = append(fields, creditgrant.FieldSubscriptionID)
	}
	if m.FieldCleared(creditgrant.FieldPeriod) {
		fields = append(fields, creditgrant.FieldPeriod)
	}
	if m.FieldCleared(creditgrant.FieldPeriodCount) {
		fields = append(fields, creditgrant.FieldPeriodCount)
	}
	if m.FieldCleared(creditgrant.FieldExpirationDuration) {
		fields = append(fields, creditgrant.FieldExpirationDuration)
	}
	if m.FieldCleared(creditgrant.FieldExpirationDurationUnit) {
		fields = append(fields, creditgrant.FieldExpirationDurationUnit)
	}
	if m.FieldCleared(creditgrant.FieldPriority) {
		fields = append(fields, creditgrant.FieldPriority)
	}
	if m.FieldCleared(creditgrant.FieldMetadata) {
		fields = append(fields, creditgrant.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CreditGrantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CreditGrantMutation) ClearField(name string) error {
	switch name {
	case creditgrant.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case creditgrant.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case creditgrant.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case creditgrant.FieldPlanID:
		m.ClearPlanID()
		return nil
	case creditgrant.FieldSubscriptionID:
		m.ClearSubscriptionID()
		return nil
	case creditgrant.FieldPeriod:
		m.ClearPeriod()
		return nil
	case creditgrant.FieldPeriodCount:
		m.ClearPeriodCount()
		return nil
	case creditgrant.FieldExpirationDuration:
		m.ClearExpirationDuration()
		return nil
	case creditgrant.FieldExpirationDurationUnit:
		m.ClearExpirationDurationUnit()
		return nil
	case creditgrant.FieldPriority:
		m.ClearPriority()
		return nil
	case creditgrant.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown CreditGrant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CreditGrantMutation) ResetField(name string) error {
	switch name {
	case creditgrant.FieldTenantID:
		m.ResetTenantID()
		return nil
	case creditgrant.FieldStatus:
		m.ResetStatus()
		return nil
	case creditgrant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case creditgrant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case creditgrant.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case creditgrant.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case creditgrant.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case creditgrant.FieldName:
		m.ResetName()
		return nil
	case creditgrant.FieldScope:
		m.ResetScope()
		return nil
	case creditgrant.FieldPlanID:
		m.ResetPlanID()
		return nil
	case creditgrant.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case creditgrant.FieldCredits:
		m.ResetCredits()
		return nil
	case creditgrant.FieldCadence:
		m.ResetCadence()
		return nil
	case creditgrant.FieldPeriod:
		m.ResetPeriod()
		return nil
	case creditgrant.FieldPeriodCount:
		m.ResetPeriodCount()
		return nil
	case creditgrant.FieldExpirationType:
		m.ResetExpirationType()
		return nil
	case creditgrant.FieldExpirationDuration:
		m.ResetExpirationDuration()
		return nil
	case creditgrant.FieldExpirationDurationUnit:
		m.ResetExpirationDurationUnit()
		return nil
	case creditgrant.FieldPriority:
		m.ResetPriority()
		return nil
	case creditgrant.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown CreditGrant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CreditGrantMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.plan != nil {
		edges = append(edges, creditgrant.EdgePlan)
	}
	if m.subscription != nil {
		edges = append(edges, creditgrant.EdgeSubscription)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CreditGrantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case creditgrant.EdgePlan:
		if id := m.plan; id != nil {
			return []ent.Value{*id}
		}
	case creditgrant.EdgeSubscription:
		if id := m.subscription; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CreditGrantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CreditGrantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CreditGrantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedplan {
		edges = append(edges, creditgrant.EdgePlan)
	}
	if m.clearedsubscription {
		edges = append(edges, creditgrant.EdgeSubscription)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CreditGrantMutation) EdgeCleared(name string) bool {
	switch name {
	case creditgrant.EdgePlan:
		return m.clearedplan
	case creditgrant.EdgeSubscription:
		return m.clearedsubscription
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CreditGrantMutation) ClearEdge(name string) error {
	switch name {
	case creditgrant.EdgePlan:
		m.ClearPlan()
		return nil
	case creditgrant.EdgeSubscription:
		m.ClearSubscription()
		return nil
	}
	return fmt.Errorf("unknown CreditGrant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CreditGrantMutation) ResetEdge(name string) error {
	switch name {
	case creditgrant.EdgePlan:
		m.ResetPlan()
		return nil
	case creditgrant.EdgeSubscription:
		m.ResetSubscription()
		return nil
	}
	return fmt.Errorf("unknown CreditGrant edge %s", name)
}

// CreditGrantApplicationMutation represents an operation that mutates the CreditGrantApplication nodes in the graph.
type CreditGrantApplicationMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *string
	tenant_id                          *string
	status                             *string
	created_at                         *time.Time
	updated_at                         *time.Time
	created_by                         *string
	updated_by                         *string
	environment_id                     *string
	credit_grant_id                    *string
	subscription_id                    *string
	scheduled_for                      *time.Time
	applied_at                         *time.Time
	period_start                       *time.Time
	period_end                         *time.Time
	application_status                 *types.ApplicationStatus
	credits                            *decimal.Decimal
	application_reason                 *types.CreditGrantApplicationReason
	subscription_status_at_application *types.SubscriptionStatus
	retry_count                        *int
	addretry_count                     *int
	failure_reason                     *string
	metadata                           *types.Metadata
	idempotency_key                    *string
	clearedFields                      map[string]struct{}
	done                               bool
	oldValue                           func(context.Context) (*CreditGrantApplication, error)
	predicates                         []predicate.CreditGrantApplication
}

var _ ent.Mutation = (*CreditGrantApplicationMutation)(nil)

// creditgrantapplicationOption allows management of the mutation configuration using functional options.
type creditgrantapplicationOption func(*CreditGrantApplicationMutation)

// newCreditGrantApplicationMutation creates new mutation for the CreditGrantApplication entity.
func newCreditGrantApplicationMutation(c config, op Op, opts ...creditgrantapplicationOption) *CreditGrantApplicationMutation {
	m := &CreditGrantApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeCreditGrantApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCreditGrantApplicationID sets the ID field of the mutation.
func withCreditGrantApplicationID(id string) creditgrantapplicationOption {
	return func(m *CreditGrantApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *CreditGrantApplication
		)
		m.oldValue = func(ctx context.Context) (*CreditGrantApplication, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CreditGrantApplication.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCreditGrantApplication sets the old CreditGrantApplication of the mutation.
func withCreditGrantApplication(node *CreditGrantApplication) creditgrantapplicationOption {
	return func(m *CreditGrantApplicationMutation) {
		m.oldValue = func(context.Context) (*CreditGrantApplication, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CreditGrantApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CreditGrantApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CreditGrantApplication entities.
func (m *CreditGrantApplicationMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CreditGrantApplicationMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CreditGrantApplicationMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CreditGrantApplication.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *CreditGrantApplicationMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *CreditGrantApplicationMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *CreditGrantApplicationMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *CreditGrantApplicationMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CreditGrantApplicationMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CreditGrantApplicationMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CreditGrantApplicationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CreditGrantApplicationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CreditGrantApplicationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CreditGrantApplicationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CreditGrantApplicationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CreditGrantApplicationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CreditGrantApplicationMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CreditGrantApplicationMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CreditGrantApplicationMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[creditgrantapplication.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CreditGrantApplicationMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, creditgrantapplication.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CreditGrantApplicationMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CreditGrantApplicationMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CreditGrantApplicationMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[creditgrantapplication.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CreditGrantApplicationMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, creditgrantapplication.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *CreditGrantApplicationMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *CreditGrantApplicationMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *CreditGrantApplicationMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[creditgrantapplication.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *CreditGrantApplicationMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, creditgrantapplication.FieldEnvironmentID)
}

// SetCreditGrantID sets the "credit_grant_id" field.
func (m *CreditGrantApplicationMutation) SetCreditGrantID(s string) {
	m.credit_grant_id = &s
}

// CreditGrantID returns the value of the "credit_grant_id" field in the mutation.
func (m *CreditGrantApplicationMutation) CreditGrantID() (r string, exists bool) {
	v := m.credit_grant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditGrantID returns the old "credit_grant_id" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldCreditGrantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditGrantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditGrantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditGrantID: %w", err)
	}
	return oldValue.CreditGrantID, nil
}

// ResetCreditGrantID resets all changes to the "credit_grant_id" field.
func (m *CreditGrantApplicationMutation) ResetCreditGrantID() {
	m.credit_grant_id = nil
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *CreditGrantApplicationMutation) SetSubscriptionID(s string) {
	m.subscription_id = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *CreditGrantApplicationMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldSubscriptionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *CreditGrantApplicationMutation) ResetSubscriptionID() {
	m.subscription_id = nil
}

// SetScheduledFor sets the "scheduled_for" field.
func (m *CreditGrantApplicationMutation) SetScheduledFor(t time.Time) {
	m.scheduled_for = &t
}

// ScheduledFor returns the value of the "scheduled_for" field in the mutation.
func (m *CreditGrantApplicationMutation) ScheduledFor() (r time.Time, exists bool) {
	v := m.scheduled_for
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduledFor returns the old "scheduled_for" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldScheduledFor(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduledFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduledFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduledFor: %w", err)
	}
	return oldValue.ScheduledFor, nil
}

// ResetScheduledFor resets all changes to the "scheduled_for" field.
func (m *CreditGrantApplicationMutation) ResetScheduledFor() {
	m.scheduled_for = nil
}

// SetAppliedAt sets the "applied_at" field.
func (m *CreditGrantApplicationMutation) SetAppliedAt(t time.Time) {
	m.applied_at = &t
}

// AppliedAt returns the value of the "applied_at" field in the mutation.
func (m *CreditGrantApplicationMutation) AppliedAt() (r time.Time, exists bool) {
	v := m.applied_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAppliedAt returns the old "applied_at" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldAppliedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppliedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppliedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppliedAt: %w", err)
	}
	return oldValue.AppliedAt, nil
}

// ClearAppliedAt clears the value of the "applied_at" field.
func (m *CreditGrantApplicationMutation) ClearAppliedAt() {
	m.applied_at = nil
	m.clearedFields[creditgrantapplication.FieldAppliedAt] = struct{}{}
}

// AppliedAtCleared returns if the "applied_at" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) AppliedAtCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldAppliedAt]
	return ok
}

// ResetAppliedAt resets all changes to the "applied_at" field.
func (m *CreditGrantApplicationMutation) ResetAppliedAt() {
	m.applied_at = nil
	delete(m.clearedFields, creditgrantapplication.FieldAppliedAt)
}

// SetPeriodStart sets the "period_start" field.
func (m *CreditGrantApplicationMutation) SetPeriodStart(t time.Time) {
	m.period_start = &t
}

// PeriodStart returns the value of the "period_start" field in the mutation.
func (m *CreditGrantApplicationMutation) PeriodStart() (r time.Time, exists bool) {
	v := m.period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodStart returns the old "period_start" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldPeriodStart(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodStart: %w", err)
	}
	return oldValue.PeriodStart, nil
}

// ClearPeriodStart clears the value of the "period_start" field.
func (m *CreditGrantApplicationMutation) ClearPeriodStart() {
	m.period_start = nil
	m.clearedFields[creditgrantapplication.FieldPeriodStart] = struct{}{}
}

// PeriodStartCleared returns if the "period_start" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) PeriodStartCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldPeriodStart]
	return ok
}

// ResetPeriodStart resets all changes to the "period_start" field.
func (m *CreditGrantApplicationMutation) ResetPeriodStart() {
	m.period_start = nil
	delete(m.clearedFields, creditgrantapplication.FieldPeriodStart)
}

// SetPeriodEnd sets the "period_end" field.
func (m *CreditGrantApplicationMutation) SetPeriodEnd(t time.Time) {
	m.period_end = &t
}

// PeriodEnd returns the value of the "period_end" field in the mutation.
func (m *CreditGrantApplicationMutation) PeriodEnd() (r time.Time, exists bool) {
	v := m.period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodEnd returns the old "period_end" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldPeriodEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodEnd: %w", err)
	}
	return oldValue.PeriodEnd, nil
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (m *CreditGrantApplicationMutation) ClearPeriodEnd() {
	m.period_end = nil
	m.clearedFields[creditgrantapplication.FieldPeriodEnd] = struct{}{}
}

// PeriodEndCleared returns if the "period_end" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) PeriodEndCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldPeriodEnd]
	return ok
}

// ResetPeriodEnd resets all changes to the "period_end" field.
func (m *CreditGrantApplicationMutation) ResetPeriodEnd() {
	m.period_end = nil
	delete(m.clearedFields, creditgrantapplication.FieldPeriodEnd)
}

// SetApplicationStatus sets the "application_status" field.
func (m *CreditGrantApplicationMutation) SetApplicationStatus(ts types.ApplicationStatus) {
	m.application_status = &ts
}

// ApplicationStatus returns the value of the "application_status" field in the mutation.
func (m *CreditGrantApplicationMutation) ApplicationStatus() (r types.ApplicationStatus, exists bool) {
	v := m.application_status
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationStatus returns the old "application_status" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldApplicationStatus(ctx context.Context) (v types.ApplicationStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationStatus: %w", err)
	}
	return oldValue.ApplicationStatus, nil
}

// ResetApplicationStatus resets all changes to the "application_status" field.
func (m *CreditGrantApplicationMutation) ResetApplicationStatus() {
	m.application_status = nil
}

// SetCredits sets the "credits" field.
func (m *CreditGrantApplicationMutation) SetCredits(d decimal.Decimal) {
	m.credits = &d
}

// Credits returns the value of the "credits" field in the mutation.
func (m *CreditGrantApplicationMutation) Credits() (r decimal.Decimal, exists bool) {
	v := m.credits
	if v == nil {
		return
	}
	return *v, true
}

// OldCredits returns the old "credits" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldCredits(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredits: %w", err)
	}
	return oldValue.Credits, nil
}

// ResetCredits resets all changes to the "credits" field.
func (m *CreditGrantApplicationMutation) ResetCredits() {
	m.credits = nil
}

// SetApplicationReason sets the "application_reason" field.
func (m *CreditGrantApplicationMutation) SetApplicationReason(tgar types.CreditGrantApplicationReason) {
	m.application_reason = &tgar
}

// ApplicationReason returns the value of the "application_reason" field in the mutation.
func (m *CreditGrantApplicationMutation) ApplicationReason() (r types.CreditGrantApplicationReason, exists bool) {
	v := m.application_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationReason returns the old "application_reason" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldApplicationReason(ctx context.Context) (v types.CreditGrantApplicationReason, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationReason: %w", err)
	}
	return oldValue.ApplicationReason, nil
}

// ResetApplicationReason resets all changes to the "application_reason" field.
func (m *CreditGrantApplicationMutation) ResetApplicationReason() {
	m.application_reason = nil
}

// SetSubscriptionStatusAtApplication sets the "subscription_status_at_application" field.
func (m *CreditGrantApplicationMutation) SetSubscriptionStatusAtApplication(ts types.SubscriptionStatus) {
	m.subscription_status_at_application = &ts
}

// SubscriptionStatusAtApplication returns the value of the "subscription_status_at_application" field in the mutation.
func (m *CreditGrantApplicationMutation) SubscriptionStatusAtApplication() (r types.SubscriptionStatus, exists bool) {
	v := m.subscription_status_at_application
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionStatusAtApplication returns the old "subscription_status_at_application" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldSubscriptionStatusAtApplication(ctx context.Context) (v types.SubscriptionStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionStatusAtApplication is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionStatusAtApplication requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionStatusAtApplication: %w", err)
	}
	return oldValue.SubscriptionStatusAtApplication, nil
}

// ResetSubscriptionStatusAtApplication resets all changes to the "subscription_status_at_application" field.
func (m *CreditGrantApplicationMutation) ResetSubscriptionStatusAtApplication() {
	m.subscription_status_at_application = nil
}

// SetRetryCount sets the "retry_count" field.
func (m *CreditGrantApplicationMutation) SetRetryCount(i int) {
	m.retry_count = &i
	m.addretry_count = nil
}

// RetryCount returns the value of the "retry_count" field in the mutation.
func (m *CreditGrantApplicationMutation) RetryCount() (r int, exists bool) {
	v := m.retry_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "retry_count" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldRetryCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "retry_count" field.
func (m *CreditGrantApplicationMutation) AddRetryCount(i int) {
	if m.addretry_count != nil {
		*m.addretry_count += i
	} else {
		m.addretry_count = &i
	}
}

// AddedRetryCount returns the value that was added to the "retry_count" field in this mutation.
func (m *CreditGrantApplicationMutation) AddedRetryCount() (r int, exists bool) {
	v := m.addretry_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetryCount resets all changes to the "retry_count" field.
func (m *CreditGrantApplicationMutation) ResetRetryCount() {
	m.retry_count = nil
	m.addretry_count = nil
}

// SetFailureReason sets the "failure_reason" field.
func (m *CreditGrantApplicationMutation) SetFailureReason(s string) {
	m.failure_reason = &s
}

// FailureReason returns the value of the "failure_reason" field in the mutation.
func (m *CreditGrantApplicationMutation) FailureReason() (r string, exists bool) {
	v := m.failure_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldFailureReason returns the old "failure_reason" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldFailureReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailureReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailureReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailureReason: %w", err)
	}
	return oldValue.FailureReason, nil
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (m *CreditGrantApplicationMutation) ClearFailureReason() {
	m.failure_reason = nil
	m.clearedFields[creditgrantapplication.FieldFailureReason] = struct{}{}
}

// FailureReasonCleared returns if the "failure_reason" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) FailureReasonCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldFailureReason]
	return ok
}

// ResetFailureReason resets all changes to the "failure_reason" field.
func (m *CreditGrantApplicationMutation) ResetFailureReason() {
	m.failure_reason = nil
	delete(m.clearedFields, creditgrantapplication.FieldFailureReason)
}

// SetMetadata sets the "metadata" field.
func (m *CreditGrantApplicationMutation) SetMetadata(t types.Metadata) {
	m.metadata = &t
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CreditGrantApplicationMutation) Metadata() (r types.Metadata, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldMetadata(ctx context.Context) (v types.Metadata, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CreditGrantApplicationMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[creditgrantapplication.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CreditGrantApplicationMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[creditgrantapplication.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CreditGrantApplicationMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, creditgrantapplication.FieldMetadata)
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *CreditGrantApplicationMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *CreditGrantApplicationMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the CreditGrantApplication entity.
// If the CreditGrantApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditGrantApplicationMutation) OldIdempotencyKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *CreditGrantApplicationMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
}

// Where appends a list predicates to the CreditGrantApplicationMutation builder.
func (m *CreditGrantApplicationMutation) Where(ps ...predicate.CreditGrantApplication) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CreditGrantApplicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CreditGrantApplicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CreditGrantApplication, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CreditGrantApplicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CreditGrantApplicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CreditGrantApplication).
func (m *CreditGrantApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CreditGrantApplicationMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.tenant_id != nil {
		fields = append(fields, creditgrantapplication.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, creditgrantapplication.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, creditgrantapplication.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, creditgrantapplication.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, creditgrantapplication.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, creditgrantapplication.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, creditgrantapplication.FieldEnvironmentID)
	}
	if m.credit_grant_id != nil {
		fields = append(fields, creditgrantapplication.FieldCreditGrantID)
	}
	if m.subscription_id != nil {
		fields = append(fields, creditgrantapplication.FieldSubscriptionID)
	}
	if m.scheduled_for != nil {
		fields = append(fields, creditgrantapplication.FieldScheduledFor)
	}
	if m.applied_at != nil {
		fields = append(fields, creditgrantapplication.FieldAppliedAt)
	}
	if m.period_start != nil {
		fields = append(fields, creditgrantapplication.FieldPeriodStart)
	}
	if m.period_end != nil {
		fields = append(fields, creditgrantapplication.FieldPeriodEnd)
	}
	if m.application_status != nil {
		fields = append(fields, creditgrantapplication.FieldApplicationStatus)
	}
	if m.credits != nil {
		fields = append(fields, creditgrantapplication.FieldCredits)
	}
	if m.application_reason != nil {
		fields = append(fields, creditgrantapplication.FieldApplicationReason)
	}
	if m.subscription_status_at_application != nil {
		fields = append(fields, creditgrantapplication.FieldSubscriptionStatusAtApplication)
	}
	if m.retry_count != nil {
		fields = append(fields, creditgrantapplication.FieldRetryCount)
	}
	if m.failure_reason != nil {
		fields = append(fields, creditgrantapplication.FieldFailureReason)
	}
	if m.metadata != nil {
		fields = append(fields, creditgrantapplication.FieldMetadata)
	}
	if m.idempotency_key != nil {
		fields = append(fields, creditgrantapplication.FieldIdempotencyKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CreditGrantApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case creditgrantapplication.FieldTenantID:
		return m.TenantID()
	case creditgrantapplication.FieldStatus:
		return m.Status()
	case creditgrantapplication.FieldCreatedAt:
		return m.CreatedAt()
	case creditgrantapplication.FieldUpdatedAt:
		return m.UpdatedAt()
	case creditgrantapplication.FieldCreatedBy:
		return m.CreatedBy()
	case creditgrantapplication.FieldUpdatedBy:
		return m.UpdatedBy()
	case creditgrantapplication.FieldEnvironmentID:
		return m.EnvironmentID()
	case creditgrantapplication.FieldCreditGrantID:
		return m.CreditGrantID()
	case creditgrantapplication.FieldSubscriptionID:
		return m.SubscriptionID()
	case creditgrantapplication.FieldScheduledFor:
		return m.ScheduledFor()
	case creditgrantapplication.FieldAppliedAt:
		return m.AppliedAt()
	case creditgrantapplication.FieldPeriodStart:
		return m.PeriodStart()
	case creditgrantapplication.FieldPeriodEnd:
		return m.PeriodEnd()
	case creditgrantapplication.FieldApplicationStatus:
		return m.ApplicationStatus()
	case creditgrantapplication.FieldCredits:
		return m.Credits()
	case creditgrantapplication.FieldApplicationReason:
		return m.ApplicationReason()
	case creditgrantapplication.FieldSubscriptionStatusAtApplication:
		return m.SubscriptionStatusAtApplication()
	case creditgrantapplication.FieldRetryCount:
		return m.RetryCount()
	case creditgrantapplication.FieldFailureReason:
		return m.FailureReason()
	case creditgrantapplication.FieldMetadata:
		return m.Metadata()
	case creditgrantapplication.FieldIdempotencyKey:
		return m.IdempotencyKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CreditGrantApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case creditgrantapplication.FieldTenantID:
		return m.OldTenantID(ctx)
	case creditgrantapplication.FieldStatus:
		return m.OldStatus(ctx)
	case creditgrantapplication.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case creditgrantapplication.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case creditgrantapplication.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case creditgrantapplication.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case creditgrantapplication.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case creditgrantapplication.FieldCreditGrantID:
		return m.OldCreditGrantID(ctx)
	case creditgrantapplication.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case creditgrantapplication.FieldScheduledFor:
		return m.OldScheduledFor(ctx)
	case creditgrantapplication.FieldAppliedAt:
		return m.OldAppliedAt(ctx)
	case creditgrantapplication.FieldPeriodStart:
		return m.OldPeriodStart(ctx)
	case creditgrantapplication.FieldPeriodEnd:
		return m.OldPeriodEnd(ctx)
	case creditgrantapplication.FieldApplicationStatus:
		return m.OldApplicationStatus(ctx)
	case creditgrantapplication.FieldCredits:
		return m.OldCredits(ctx)
	case creditgrantapplication.FieldApplicationReason:
		return m.OldApplicationReason(ctx)
	case creditgrantapplication.FieldSubscriptionStatusAtApplication:
		return m.OldSubscriptionStatusAtApplication(ctx)
	case creditgrantapplication.FieldRetryCount:
		return m.OldRetryCount(ctx)
	case creditgrantapplication.FieldFailureReason:
		return m.OldFailureReason(ctx)
	case creditgrantapplication.FieldMetadata:
		return m.OldMetadata(ctx)
	case creditgrantapplication.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	}
	return nil, fmt.Errorf("unknown CreditGrantApplication field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditGrantApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case creditgrantapplication.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case creditgrantapplication.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case creditgrantapplication.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case creditgrantapplication.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case creditgrantapplication.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case creditgrantapplication.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case creditgrantapplication.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case creditgrantapplication.FieldCreditGrantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditGrantID(v)
		return nil
	case creditgrantapplication.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case creditgrantapplication.FieldScheduledFor:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduledFor(v)
		return nil
	case creditgrantapplication.FieldAppliedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppliedAt(v)
		return nil
	case creditgrantapplication.FieldPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodStart(v)
		return nil
	case creditgrantapplication.FieldPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodEnd(v)
		return nil
	case creditgrantapplication.FieldApplicationStatus:
		v, ok := value.(types.ApplicationStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationStatus(v)
		return nil
	case creditgrantapplication.FieldCredits:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredits(v)
		return nil
	case creditgrantapplication.FieldApplicationReason:
		v, ok := value.(types.CreditGrantApplicationReason)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationReason(v)
		return nil
	case creditgrantapplication.FieldSubscriptionStatusAtApplication:
		v, ok := value.(types.SubscriptionStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionStatusAtApplication(v)
		return nil
	case creditgrantapplication.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	case creditgrantapplication.FieldFailureReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailureReason(v)
		return nil
	case creditgrantapplication.FieldMetadata:
		v, ok := value.(types.Metadata)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case creditgrantapplication.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	}
	return fmt.Errorf("unknown CreditGrantApplication field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CreditGrantApplicationMutation) AddedFields() []string {
	var fields []string
	if m.addretry_count != nil {
		fields = append(fields, creditgrantapplication.FieldRetryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CreditGrantApplicationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case creditgrantapplication.FieldRetryCount:
		return m.AddedRetryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditGrantApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case creditgrantapplication.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown CreditGrantApplication numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CreditGrantApplicationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(creditgrantapplication.FieldCreatedBy) {
		fields = append(fields, creditgrantapplication.FieldCreatedBy)
	}
	if m.FieldCleared(creditgrantapplication.FieldUpdatedBy) {
		fields = append(fields, creditgrantapplication.FieldUpdatedBy)
	}
	if m.FieldCleared(creditgrantapplication.FieldEnvironmentID) {
		fields = append(fields, creditgrantapplication.FieldEnvironmentID)
	}
	if m.FieldCleared(creditgrantapplication.FieldAppliedAt) {
		fields = append(fields, creditgrantapplication.FieldAppliedAt)
	}
	if m.FieldCleared(creditgrantapplication.FieldPeriodStart) {
		fields = append(fields, creditgrantapplication.FieldPeriodStart)
	}
	if m.FieldCleared(creditgrantapplication.FieldPeriodEnd) {
		fields = append(fields, creditgrantapplication.FieldPeriodEnd)
	}
	if m.FieldCleared(creditgrantapplication.FieldFailureReason) {
		fields = append(fields, creditgrantapplication.FieldFailureReason)
	}
	if m.FieldCleared(creditgrantapplication.FieldMetadata) {
		fields = append(fields, creditgrantapplication.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CreditGrantApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CreditGrantApplicationMutation) ClearField(name string) error {
	switch name {
	case creditgrantapplication.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case creditgrantapplication.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case creditgrantapplication.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case creditgrantapplication.FieldAppliedAt:
		m.ClearAppliedAt()
		return nil
	case creditgrantapplication.FieldPeriodStart:
		m.ClearPeriodStart()
		return nil
	case creditgrantapplication.FieldPeriodEnd:
		m.ClearPeriodEnd()
		return nil
	case creditgrantapplication.FieldFailureReason:
		m.ClearFailureReason()
		return nil
	case creditgrantapplication.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown CreditGrantApplication nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CreditGrantApplicationMutation) ResetField(name string) error {
	switch name {
	case creditgrantapplication.FieldTenantID:
		m.ResetTenantID()
		return nil
	case creditgrantapplication.FieldStatus:
		m.ResetStatus()
		return nil
	case creditgrantapplication.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case creditgrantapplication.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case creditgrantapplication.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case creditgrantapplication.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case creditgrantapplication.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case creditgrantapplication.FieldCreditGrantID:
		m.ResetCreditGrantID()
		return nil
	case creditgrantapplication.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case creditgrantapplication.FieldScheduledFor:
		m.ResetScheduledFor()
		return nil
	case creditgrantapplication.FieldAppliedAt:
		m.ResetAppliedAt()
		return nil
	case creditgrantapplication.FieldPeriodStart:
		m.ResetPeriodStart()
		return nil
	case creditgrantapplication.FieldPeriodEnd:
		m.ResetPeriodEnd()
		return nil
	case creditgrantapplication.FieldApplicationStatus:
		m.ResetApplicationStatus()
		return nil
	case creditgrantapplication.FieldCredits:
		m.ResetCredits()
		return nil
	case creditgrantapplication.FieldApplicationReason:
		m.ResetApplicationReason()
		return nil
	case creditgrantapplication.FieldSubscriptionStatusAtApplication:
		m.ResetSubscriptionStatusAtApplication()
		return nil
	case creditgrantapplication.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	case creditgrantapplication.FieldFailureReason:
		m.ResetFailureReason()
		return nil
	case creditgrantapplication.FieldMetadata:
		m.ResetMetadata()
		return nil
	case creditgrantapplication.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	}
	return fmt.Errorf("unknown CreditGrantApplication field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CreditGrantApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CreditGrantApplicationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CreditGrantApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CreditGrantApplicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CreditGrantApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CreditGrantApplicationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CreditGrantApplicationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CreditGrantApplication unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CreditGrantApplicationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CreditGrantApplication edge %s", name)
}

// CreditNoteMutation represents an operation that mutates the CreditNote nodes in the graph.
type CreditNoteMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	tenant_id          *string
	status             *string
	created_at         *time.Time
	updated_at         *time.Time
	created_by         *string
	updated_by         *string
	environment_id     *string
	invoice_id         *string
	customer_id        *string
	subscription_id    *string
	credit_note_number *string
	credit_note_status *types.CreditNoteStatus
	credit_note_type   *types.CreditNoteType
	refund_status      *types.PaymentStatus
	reason             *types.CreditNoteReason
	memo               *string
	currency           *string
	idempotency_key    *string
	voided_at          *time.Time
	finalized_at       *time.Time
	metadata           *map[string]string
	total_amount       *decimal.Decimal
	clearedFields      map[string]struct{}
	line_items         map[string]struct{}
	removedline_items  map[string]struct{}
	clearedline_items  bool
	done               bool
	oldValue           func(context.Context) (*CreditNote, error)
	predicates         []predicate.CreditNote
}

var _ ent.Mutation = (*CreditNoteMutation)(nil)

// creditnoteOption allows management of the mutation configuration using functional options.
type creditnoteOption func(*CreditNoteMutation)

// newCreditNoteMutation creates new mutation for the CreditNote entity.
func newCreditNoteMutation(c config, op Op, opts ...creditnoteOption) *CreditNoteMutation {
	m := &CreditNoteMutation{
		config:        c,
		op:            op,
		typ:           TypeCreditNote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCreditNoteID sets the ID field of the mutation.
func withCreditNoteID(id string) creditnoteOption {
	return func(m *CreditNoteMutation) {
		var (
			err   error
			once  sync.Once
			value *CreditNote
		)
		m.oldValue = func(ctx context.Context) (*CreditNote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CreditNote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCreditNote sets the old CreditNote of the mutation.
func withCreditNote(node *CreditNote) creditnoteOption {
	return func(m *CreditNoteMutation) {
		m.oldValue = func(context.Context) (*CreditNote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CreditNoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CreditNoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CreditNote entities.
func (m *CreditNoteMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CreditNoteMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CreditNoteMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CreditNote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *CreditNoteMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *CreditNoteMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *CreditNoteMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *CreditNoteMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CreditNoteMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CreditNoteMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CreditNoteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CreditNoteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CreditNoteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CreditNoteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CreditNoteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CreditNoteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CreditNoteMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CreditNoteMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CreditNoteMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[creditnote.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CreditNoteMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CreditNoteMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, creditnote.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CreditNoteMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CreditNoteMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CreditNoteMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[creditnote.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CreditNoteMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CreditNoteMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, creditnote.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *CreditNoteMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *CreditNoteMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *CreditNoteMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[creditnote.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *CreditNoteMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *CreditNoteMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, creditnote.FieldEnvironmentID)
}

// SetInvoiceID sets the "invoice_id" field.
func (m *CreditNoteMutation) SetInvoiceID(s string) {
	m.invoice_id = &s
}

// InvoiceID returns the value of the "invoice_id" field in the mutation.
func (m *CreditNoteMutation) InvoiceID() (r string, exists bool) {
	v := m.invoice_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceID returns the old "invoice_id" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldInvoiceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceID: %w", err)
	}
	return oldValue.InvoiceID, nil
}

// ResetInvoiceID resets all changes to the "invoice_id" field.
func (m *CreditNoteMutation) ResetInvoiceID() {
	m.invoice_id = nil
}

// SetCustomerID sets the "customer_id" field.
func (m *CreditNoteMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *CreditNoteMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *CreditNoteMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *CreditNoteMutation) SetSubscriptionID(s string) {
	m.subscription_id = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *CreditNoteMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldSubscriptionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (m *CreditNoteMutation) ClearSubscriptionID() {
	m.subscription_id = nil
	m.clearedFields[creditnote.FieldSubscriptionID] = struct{}{}
}

// SubscriptionIDCleared returns if the "subscription_id" field was cleared in this mutation.
func (m *CreditNoteMutation) SubscriptionIDCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldSubscriptionID]
	return ok
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *CreditNoteMutation) ResetSubscriptionID() {
	m.subscription_id = nil
	delete(m.clearedFields, creditnote.FieldSubscriptionID)
}

// SetCreditNoteNumber sets the "credit_note_number" field.
func (m *CreditNoteMutation) SetCreditNoteNumber(s string) {
	m.credit_note_number = &s
}

// CreditNoteNumber returns the value of the "credit_note_number" field in the mutation.
func (m *CreditNoteMutation) CreditNoteNumber() (r string, exists bool) {
	v := m.credit_note_number
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditNoteNumber returns the old "credit_note_number" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldCreditNoteNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditNoteNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditNoteNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditNoteNumber: %w", err)
	}
	return oldValue.CreditNoteNumber, nil
}

// ResetCreditNoteNumber resets all changes to the "credit_note_number" field.
func (m *CreditNoteMutation) ResetCreditNoteNumber() {
	m.credit_note_number = nil
}

// SetCreditNoteStatus sets the "credit_note_status" field.
func (m *CreditNoteMutation) SetCreditNoteStatus(tns types.CreditNoteStatus) {
	m.credit_note_status = &tns
}

// CreditNoteStatus returns the value of the "credit_note_status" field in the mutation.
func (m *CreditNoteMutation) CreditNoteStatus() (r types.CreditNoteStatus, exists bool) {
	v := m.credit_note_status
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditNoteStatus returns the old "credit_note_status" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldCreditNoteStatus(ctx context.Context) (v types.CreditNoteStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditNoteStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditNoteStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditNoteStatus: %w", err)
	}
	return oldValue.CreditNoteStatus, nil
}

// ResetCreditNoteStatus resets all changes to the "credit_note_status" field.
func (m *CreditNoteMutation) ResetCreditNoteStatus() {
	m.credit_note_status = nil
}

// SetCreditNoteType sets the "credit_note_type" field.
func (m *CreditNoteMutation) SetCreditNoteType(tnt types.CreditNoteType) {
	m.credit_note_type = &tnt
}

// CreditNoteType returns the value of the "credit_note_type" field in the mutation.
func (m *CreditNoteMutation) CreditNoteType() (r types.CreditNoteType, exists bool) {
	v := m.credit_note_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditNoteType returns the old "credit_note_type" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldCreditNoteType(ctx context.Context) (v types.CreditNoteType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditNoteType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditNoteType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditNoteType: %w", err)
	}
	return oldValue.CreditNoteType, nil
}

// ResetCreditNoteType resets all changes to the "credit_note_type" field.
func (m *CreditNoteMutation) ResetCreditNoteType() {
	m.credit_note_type = nil
}

// SetRefundStatus sets the "refund_status" field.
func (m *CreditNoteMutation) SetRefundStatus(ts types.PaymentStatus) {
	m.refund_status = &ts
}

// RefundStatus returns the value of the "refund_status" field in the mutation.
func (m *CreditNoteMutation) RefundStatus() (r types.PaymentStatus, exists bool) {
	v := m.refund_status
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundStatus returns the old "refund_status" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldRefundStatus(ctx context.Context) (v *types.PaymentStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundStatus: %w", err)
	}
	return oldValue.RefundStatus, nil
}

// ClearRefundStatus clears the value of the "refund_status" field.
func (m *CreditNoteMutation) ClearRefundStatus() {
	m.refund_status = nil
	m.clearedFields[creditnote.FieldRefundStatus] = struct{}{}
}

// RefundStatusCleared returns if the "refund_status" field was cleared in this mutation.
func (m *CreditNoteMutation) RefundStatusCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldRefundStatus]
	return ok
}

// ResetRefundStatus resets all changes to the "refund_status" field.
func (m *CreditNoteMutation) ResetRefundStatus() {
	m.refund_status = nil
	delete(m.clearedFields, creditnote.FieldRefundStatus)
}

// SetReason sets the "reason" field.
func (m *CreditNoteMutation) SetReason(tnr types.CreditNoteReason) {
	m.reason = &tnr
}

// Reason returns the value of the "reason" field in the mutation.
func (m *CreditNoteMutation) Reason() (r types.CreditNoteReason, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldReason(ctx context.Context) (v types.CreditNoteReason, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *CreditNoteMutation) ResetReason() {
	m.reason = nil
}

// SetMemo sets the "memo" field.
func (m *CreditNoteMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *CreditNoteMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *CreditNoteMutation) ResetMemo() {
	m.memo = nil
}

// SetCurrency sets the "currency" field.
func (m *CreditNoteMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *CreditNoteMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *CreditNoteMutation) ResetCurrency() {
	m.currency = nil
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *CreditNoteMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *CreditNoteMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldIdempotencyKey(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ClearIdempotencyKey clears the value of the "idempotency_key" field.
func (m *CreditNoteMutation) ClearIdempotencyKey() {
	m.idempotency_key = nil
	m.clearedFields[creditnote.FieldIdempotencyKey] = struct{}{}
}

// IdempotencyKeyCleared returns if the "idempotency_key" field was cleared in this mutation.
func (m *CreditNoteMutation) IdempotencyKeyCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldIdempotencyKey]
	return ok
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *CreditNoteMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
	delete(m.clearedFields, creditnote.FieldIdempotencyKey)
}

// SetVoidedAt sets the "voided_at" field.
func (m *CreditNoteMutation) SetVoidedAt(t time.Time) {
	m.voided_at = &t
}

// VoidedAt returns the value of the "voided_at" field in the mutation.
func (m *CreditNoteMutation) VoidedAt() (r time.Time, exists bool) {
	v := m.voided_at
	if v == nil {
		return
	}
	return *v, true
}

// OldVoidedAt returns the old "voided_at" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldVoidedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoidedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoidedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoidedAt: %w", err)
	}
	return oldValue.VoidedAt, nil
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (m *CreditNoteMutation) ClearVoidedAt() {
	m.voided_at = nil
	m.clearedFields[creditnote.FieldVoidedAt] = struct{}{}
}

// VoidedAtCleared returns if the "voided_at" field was cleared in this mutation.
func (m *CreditNoteMutation) VoidedAtCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldVoidedAt]
	return ok
}

// ResetVoidedAt resets all changes to the "voided_at" field.
func (m *CreditNoteMutation) ResetVoidedAt() {
	m.voided_at = nil
	delete(m.clearedFields, creditnote.FieldVoidedAt)
}

// SetFinalizedAt sets the "finalized_at" field.
func (m *CreditNoteMutation) SetFinalizedAt(t time.Time) {
	m.finalized_at = &t
}

// FinalizedAt returns the value of the "finalized_at" field in the mutation.
func (m *CreditNoteMutation) FinalizedAt() (r time.Time, exists bool) {
	v := m.finalized_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalizedAt returns the old "finalized_at" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldFinalizedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalizedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalizedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalizedAt: %w", err)
	}
	return oldValue.FinalizedAt, nil
}

// ClearFinalizedAt clears the value of the "finalized_at" field.
func (m *CreditNoteMutation) ClearFinalizedAt() {
	m.finalized_at = nil
	m.clearedFields[creditnote.FieldFinalizedAt] = struct{}{}
}

// FinalizedAtCleared returns if the "finalized_at" field was cleared in this mutation.
func (m *CreditNoteMutation) FinalizedAtCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldFinalizedAt]
	return ok
}

// ResetFinalizedAt resets all changes to the "finalized_at" field.
func (m *CreditNoteMutation) ResetFinalizedAt() {
	m.finalized_at = nil
	delete(m.clearedFields, creditnote.FieldFinalizedAt)
}

// SetMetadata sets the "metadata" field.
func (m *CreditNoteMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CreditNoteMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CreditNoteMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[creditnote.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CreditNoteMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[creditnote.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CreditNoteMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, creditnote.FieldMetadata)
}

// SetTotalAmount sets the "total_amount" field.
func (m *CreditNoteMutation) SetTotalAmount(d decimal.Decimal) {
	m.total_amount = &d
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *CreditNoteMutation) TotalAmount() (r decimal.Decimal, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the CreditNote entity.
// If the CreditNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteMutation) OldTotalAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *CreditNoteMutation) ResetTotalAmount() {
	m.total_amount = nil
}

// AddLineItemIDs adds the "line_items" edge to the CreditNoteLineItem entity by ids.
func (m *CreditNoteMutation) AddLineItemIDs(ids ...string) {
	if m.line_items == nil {
		m.line_items = make(map[string]struct{})
	}
	for i := range ids {
		m.line_items[ids[i]] = struct{}{}
	}
}

// ClearLineItems clears the "line_items" edge to the CreditNoteLineItem entity.
func (m *CreditNoteMutation) ClearLineItems() {
	m.clearedline_items = true
}

// LineItemsCleared reports if the "line_items" edge to the CreditNoteLineItem entity was cleared.
func (m *CreditNoteMutation) LineItemsCleared() bool {
	return m.clearedline_items
}

// RemoveLineItemIDs removes the "line_items" edge to the CreditNoteLineItem entity by IDs.
func (m *CreditNoteMutation) RemoveLineItemIDs(ids ...string) {
	if m.removedline_items == nil {
		m.removedline_items = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.line_items, ids[i])
		m.removedline_items[ids[i]] = struct{}{}
	}
}

// RemovedLineItems returns the removed IDs of the "line_items" edge to the CreditNoteLineItem entity.
func (m *CreditNoteMutation) RemovedLineItemsIDs() (ids []string) {
	for id := range m.removedline_items {
		ids = append(ids, id)
	}
	return
}

// LineItemsIDs returns the "line_items" edge IDs in the mutation.
func (m *CreditNoteMutation) LineItemsIDs() (ids []string) {
	for id := range m.line_items {
		ids = append(ids, id)
	}
	return
}

// ResetLineItems resets all changes to the "line_items" edge.
func (m *CreditNoteMutation) ResetLineItems() {
	m.line_items = nil
	m.clearedline_items = false
	m.removedline_items = nil
}

// Where appends a list predicates to the CreditNoteMutation builder.
func (m *CreditNoteMutation) Where(ps ...predicate.CreditNote) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CreditNoteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CreditNoteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CreditNote, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CreditNoteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CreditNoteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CreditNote).
func (m *CreditNoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CreditNoteMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.tenant_id != nil {
		fields = append(fields, creditnote.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, creditnote.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, creditnote.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, creditnote.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, creditnote.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, creditnote.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, creditnote.FieldEnvironmentID)
	}
	if m.invoice_id != nil {
		fields = append(fields, creditnote.FieldInvoiceID)
	}
	if m.customer_id != nil {
		fields = append(fields, creditnote.FieldCustomerID)
	}
	if m.subscription_id != nil {
		fields = append(fields, creditnote.FieldSubscriptionID)
	}
	if m.credit_note_number != nil {
		fields = append(fields, creditnote.FieldCreditNoteNumber)
	}
	if m.credit_note_status != nil {
		fields = append(fields, creditnote.FieldCreditNoteStatus)
	}
	if m.credit_note_type != nil {
		fields = append(fields, creditnote.FieldCreditNoteType)
	}
	if m.refund_status != nil {
		fields = append(fields, creditnote.FieldRefundStatus)
	}
	if m.reason != nil {
		fields = append(fields, creditnote.FieldReason)
	}
	if m.memo != nil {
		fields = append(fields, creditnote.FieldMemo)
	}
	if m.currency != nil {
		fields = append(fields, creditnote.FieldCurrency)
	}
	if m.idempotency_key != nil {
		fields = append(fields, creditnote.FieldIdempotencyKey)
	}
	if m.voided_at != nil {
		fields = append(fields, creditnote.FieldVoidedAt)
	}
	if m.finalized_at != nil {
		fields = append(fields, creditnote.FieldFinalizedAt)
	}
	if m.metadata != nil {
		fields = append(fields, creditnote.FieldMetadata)
	}
	if m.total_amount != nil {
		fields = append(fields, creditnote.FieldTotalAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CreditNoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case creditnote.FieldTenantID:
		return m.TenantID()
	case creditnote.FieldStatus:
		return m.Status()
	case creditnote.FieldCreatedAt:
		return m.CreatedAt()
	case creditnote.FieldUpdatedAt:
		return m.UpdatedAt()
	case creditnote.FieldCreatedBy:
		return m.CreatedBy()
	case creditnote.FieldUpdatedBy:
		return m.UpdatedBy()
	case creditnote.FieldEnvironmentID:
		return m.EnvironmentID()
	case creditnote.FieldInvoiceID:
		return m.InvoiceID()
	case creditnote.FieldCustomerID:
		return m.CustomerID()
	case creditnote.FieldSubscriptionID:
		return m.SubscriptionID()
	case creditnote.FieldCreditNoteNumber:
		return m.CreditNoteNumber()
	case creditnote.FieldCreditNoteStatus:
		return m.CreditNoteStatus()
	case creditnote.FieldCreditNoteType:
		return m.CreditNoteType()
	case creditnote.FieldRefundStatus:
		return m.RefundStatus()
	case creditnote.FieldReason:
		return m.Reason()
	case creditnote.FieldMemo:
		return m.Memo()
	case creditnote.FieldCurrency:
		return m.Currency()
	case creditnote.FieldIdempotencyKey:
		return m.IdempotencyKey()
	case creditnote.FieldVoidedAt:
		return m.VoidedAt()
	case creditnote.FieldFinalizedAt:
		return m.FinalizedAt()
	case creditnote.FieldMetadata:
		return m.Metadata()
	case creditnote.FieldTotalAmount:
		return m.TotalAmount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CreditNoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case creditnote.FieldTenantID:
		return m.OldTenantID(ctx)
	case creditnote.FieldStatus:
		return m.OldStatus(ctx)
	case creditnote.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case creditnote.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case creditnote.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case creditnote.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case creditnote.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case creditnote.FieldInvoiceID:
		return m.OldInvoiceID(ctx)
	case creditnote.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case creditnote.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case creditnote.FieldCreditNoteNumber:
		return m.OldCreditNoteNumber(ctx)
	case creditnote.FieldCreditNoteStatus:
		return m.OldCreditNoteStatus(ctx)
	case creditnote.FieldCreditNoteType:
		return m.OldCreditNoteType(ctx)
	case creditnote.FieldRefundStatus:
		return m.OldRefundStatus(ctx)
	case creditnote.FieldReason:
		return m.OldReason(ctx)
	case creditnote.FieldMemo:
		return m.OldMemo(ctx)
	case creditnote.FieldCurrency:
		return m.OldCurrency(ctx)
	case creditnote.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	case creditnote.FieldVoidedAt:
		return m.OldVoidedAt(ctx)
	case creditnote.FieldFinalizedAt:
		return m.OldFinalizedAt(ctx)
	case creditnote.FieldMetadata:
		return m.OldMetadata(ctx)
	case creditnote.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	}
	return nil, fmt.Errorf("unknown CreditNote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditNoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case creditnote.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case creditnote.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case creditnote.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case creditnote.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case creditnote.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case creditnote.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case creditnote.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case creditnote.FieldInvoiceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceID(v)
		return nil
	case creditnote.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case creditnote.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case creditnote.FieldCreditNoteNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditNoteNumber(v)
		return nil
	case creditnote.FieldCreditNoteStatus:
		v, ok := value.(types.CreditNoteStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditNoteStatus(v)
		return nil
	case creditnote.FieldCreditNoteType:
		v, ok := value.(types.CreditNoteType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditNoteType(v)
		return nil
	case creditnote.FieldRefundStatus:
		v, ok := value.(types.PaymentStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundStatus(v)
		return nil
	case creditnote.FieldReason:
		v, ok := value.(types.CreditNoteReason)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case creditnote.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case creditnote.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case creditnote.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	case creditnote.FieldVoidedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoidedAt(v)
		return nil
	case creditnote.FieldFinalizedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalizedAt(v)
		return nil
	case creditnote.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case creditnote.FieldTotalAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	}
	return fmt.Errorf("unknown CreditNote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CreditNoteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CreditNoteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditNoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CreditNote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CreditNoteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(creditnote.FieldCreatedBy) {
		fields = append(fields, creditnote.FieldCreatedBy)
	}
	if m.FieldCleared(creditnote.FieldUpdatedBy) {
		fields = append(fields, creditnote.FieldUpdatedBy)
	}
	if m.FieldCleared(creditnote.FieldEnvironmentID) {
		fields = append(fields, creditnote.FieldEnvironmentID)
	}
	if m.FieldCleared(creditnote.FieldSubscriptionID) {
		fields = append(fields, creditnote.FieldSubscriptionID)
	}
	if m.FieldCleared(creditnote.FieldRefundStatus) {
		fields = append(fields, creditnote.FieldRefundStatus)
	}
	if m.FieldCleared(creditnote.FieldIdempotencyKey) {
		fields = append(fields, creditnote.FieldIdempotencyKey)
	}
	if m.FieldCleared(creditnote.FieldVoidedAt) {
		fields = append(fields, creditnote.FieldVoidedAt)
	}
	if m.FieldCleared(creditnote.FieldFinalizedAt) {
		fields = append(fields, creditnote.FieldFinalizedAt)
	}
	if m.FieldCleared(creditnote.FieldMetadata) {
		fields = append(fields, creditnote.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CreditNoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CreditNoteMutation) ClearField(name string) error {
	switch name {
	case creditnote.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case creditnote.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case creditnote.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case creditnote.FieldSubscriptionID:
		m.ClearSubscriptionID()
		return nil
	case creditnote.FieldRefundStatus:
		m.ClearRefundStatus()
		return nil
	case creditnote.FieldIdempotencyKey:
		m.ClearIdempotencyKey()
		return nil
	case creditnote.FieldVoidedAt:
		m.ClearVoidedAt()
		return nil
	case creditnote.FieldFinalizedAt:
		m.ClearFinalizedAt()
		return nil
	case creditnote.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown CreditNote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CreditNoteMutation) ResetField(name string) error {
	switch name {
	case creditnote.FieldTenantID:
		m.ResetTenantID()
		return nil
	case creditnote.FieldStatus:
		m.ResetStatus()
		return nil
	case creditnote.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case creditnote.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case creditnote.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case creditnote.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case creditnote.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case creditnote.FieldInvoiceID:
		m.ResetInvoiceID()
		return nil
	case creditnote.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case creditnote.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case creditnote.FieldCreditNoteNumber:
		m.ResetCreditNoteNumber()
		return nil
	case creditnote.FieldCreditNoteStatus:
		m.ResetCreditNoteStatus()
		return nil
	case creditnote.FieldCreditNoteType:
		m.ResetCreditNoteType()
		return nil
	case creditnote.FieldRefundStatus:
		m.ResetRefundStatus()
		return nil
	case creditnote.FieldReason:
		m.ResetReason()
		return nil
	case creditnote.FieldMemo:
		m.ResetMemo()
		return nil
	case creditnote.FieldCurrency:
		m.ResetCurrency()
		return nil
	case creditnote.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	case creditnote.FieldVoidedAt:
		m.ResetVoidedAt()
		return nil
	case creditnote.FieldFinalizedAt:
		m.ResetFinalizedAt()
		return nil
	case creditnote.FieldMetadata:
		m.ResetMetadata()
		return nil
	case creditnote.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	}
	return fmt.Errorf("unknown CreditNote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CreditNoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.line_items != nil {
		edges = append(edges, creditnote.EdgeLineItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CreditNoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case creditnote.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.line_items))
		for id := range m.line_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CreditNoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedline_items != nil {
		edges = append(edges, creditnote.EdgeLineItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CreditNoteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case creditnote.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.removedline_items))
		for id := range m.removedline_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CreditNoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedline_items {
		edges = append(edges, creditnote.EdgeLineItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CreditNoteMutation) EdgeCleared(name string) bool {
	switch name {
	case creditnote.EdgeLineItems:
		return m.clearedline_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CreditNoteMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CreditNote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CreditNoteMutation) ResetEdge(name string) error {
	switch name {
	case creditnote.EdgeLineItems:
		m.ResetLineItems()
		return nil
	}
	return fmt.Errorf("unknown CreditNote edge %s", name)
}

// CreditNoteLineItemMutation represents an operation that mutates the CreditNoteLineItem nodes in the graph.
type CreditNoteLineItemMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	tenant_id            *string
	status               *string
	created_at           *time.Time
	updated_at           *time.Time
	created_by           *string
	updated_by           *string
	environment_id       *string
	invoice_line_item_id *string
	display_name         *string
	amount               *decimal.Decimal
	currency             *string
	metadata             *map[string]string
	clearedFields        map[string]struct{}
	credit_note          *string
	clearedcredit_note   bool
	done                 bool
	oldValue             func(context.Context) (*CreditNoteLineItem, error)
	predicates           []predicate.CreditNoteLineItem
}

var _ ent.Mutation = (*CreditNoteLineItemMutation)(nil)

// creditnotelineitemOption allows management of the mutation configuration using functional options.
type creditnotelineitemOption func(*CreditNoteLineItemMutation)

// newCreditNoteLineItemMutation creates new mutation for the CreditNoteLineItem entity.
func newCreditNoteLineItemMutation(c config, op Op, opts ...creditnotelineitemOption) *CreditNoteLineItemMutation {
	m := &CreditNoteLineItemMutation{
		config:        c,
		op:            op,
		typ:           TypeCreditNoteLineItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCreditNoteLineItemID sets the ID field of the mutation.
func withCreditNoteLineItemID(id string) creditnotelineitemOption {
	return func(m *CreditNoteLineItemMutation) {
		var (
			err   error
			once  sync.Once
			value *CreditNoteLineItem
		)
		m.oldValue = func(ctx context.Context) (*CreditNoteLineItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CreditNoteLineItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCreditNoteLineItem sets the old CreditNoteLineItem of the mutation.
func withCreditNoteLineItem(node *CreditNoteLineItem) creditnotelineitemOption {
	return func(m *CreditNoteLineItemMutation) {
		m.oldValue = func(context.Context) (*CreditNoteLineItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CreditNoteLineItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CreditNoteLineItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CreditNoteLineItem entities.
func (m *CreditNoteLineItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CreditNoteLineItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CreditNoteLineItemMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CreditNoteLineItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *CreditNoteLineItemMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *CreditNoteLineItemMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *CreditNoteLineItemMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *CreditNoteLineItemMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CreditNoteLineItemMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CreditNoteLineItemMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CreditNoteLineItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CreditNoteLineItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CreditNoteLineItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CreditNoteLineItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CreditNoteLineItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CreditNoteLineItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CreditNoteLineItemMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CreditNoteLineItemMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CreditNoteLineItemMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[creditnotelineitem.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CreditNoteLineItemMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[creditnotelineitem.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CreditNoteLineItemMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, creditnotelineitem.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CreditNoteLineItemMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CreditNoteLineItemMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CreditNoteLineItemMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[creditnotelineitem.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CreditNoteLineItemMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[creditnotelineitem.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CreditNoteLineItemMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, creditnotelineitem.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *CreditNoteLineItemMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *CreditNoteLineItemMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *CreditNoteLineItemMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[creditnotelineitem.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *CreditNoteLineItemMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[creditnotelineitem.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *CreditNoteLineItemMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, creditnotelineitem.FieldEnvironmentID)
}

// SetCreditNoteID sets the "credit_note_id" field.
func (m *CreditNoteLineItemMutation) SetCreditNoteID(s string) {
	m.credit_note = &s
}

// CreditNoteID returns the value of the "credit_note_id" field in the mutation.
func (m *CreditNoteLineItemMutation) CreditNoteID() (r string, exists bool) {
	v := m.credit_note
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditNoteID returns the old "credit_note_id" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldCreditNoteID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditNoteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditNoteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditNoteID: %w", err)
	}
	return oldValue.CreditNoteID, nil
}

// ResetCreditNoteID resets all changes to the "credit_note_id" field.
func (m *CreditNoteLineItemMutation) ResetCreditNoteID() {
	m.credit_note = nil
}

// SetInvoiceLineItemID sets the "invoice_line_item_id" field.
func (m *CreditNoteLineItemMutation) SetInvoiceLineItemID(s string) {
	m.invoice_line_item_id = &s
}

// InvoiceLineItemID returns the value of the "invoice_line_item_id" field in the mutation.
func (m *CreditNoteLineItemMutation) InvoiceLineItemID() (r string, exists bool) {
	v := m.invoice_line_item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceLineItemID returns the old "invoice_line_item_id" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldInvoiceLineItemID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceLineItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceLineItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceLineItemID: %w", err)
	}
	return oldValue.InvoiceLineItemID, nil
}

// ResetInvoiceLineItemID resets all changes to the "invoice_line_item_id" field.
func (m *CreditNoteLineItemMutation) ResetInvoiceLineItemID() {
	m.invoice_line_item_id = nil
}

// SetDisplayName sets the "display_name" field.
func (m *CreditNoteLineItemMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *CreditNoteLineItemMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *CreditNoteLineItemMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetAmount sets the "amount" field.
func (m *CreditNoteLineItemMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CreditNoteLineItemMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *CreditNoteLineItemMutation) ResetAmount() {
	m.amount = nil
}

// SetCurrency sets the "currency" field.
func (m *CreditNoteLineItemMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *CreditNoteLineItemMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *CreditNoteLineItemMutation) ResetCurrency() {
	m.currency = nil
}

// SetMetadata sets the "metadata" field.
func (m *CreditNoteLineItemMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CreditNoteLineItemMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the CreditNoteLineItem entity.
// If the CreditNoteLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditNoteLineItemMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CreditNoteLineItemMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[creditnotelineitem.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CreditNoteLineItemMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[creditnotelineitem.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CreditNoteLineItemMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, creditnotelineitem.FieldMetadata)
}

// ClearCreditNote clears the "credit_note" edge to the CreditNote entity.
func (m *CreditNoteLineItemMutation) ClearCreditNote() {
	m.clearedcredit_note = true
	m.clearedFields[creditnotelineitem.FieldCreditNoteID] = struct{}{}
}

// CreditNoteCleared reports if the "credit_note" edge to the CreditNote entity was cleared.
func (m *CreditNoteLineItemMutation) CreditNoteCleared() bool {
	return m.clearedcredit_note
}

// CreditNoteIDs returns the "credit_note" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreditNoteID instead. It exists only for internal usage by the builders.
func (m *CreditNoteLineItemMutation) CreditNoteIDs() (ids []string) {
	if id := m.credit_note; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreditNote resets all changes to the "credit_note" edge.
func (m *CreditNoteLineItemMutation) ResetCreditNote() {
	m.credit_note = nil
	m.clearedcredit_note = false
}

// Where appends a list predicates to the CreditNoteLineItemMutation builder.
func (m *CreditNoteLineItemMutation) Where(ps ...predicate.CreditNoteLineItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CreditNoteLineItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CreditNoteLineItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CreditNoteLineItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CreditNoteLineItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CreditNoteLineItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CreditNoteLineItem).
func (m *CreditNoteLineItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CreditNoteLineItemMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.tenant_id != nil {
		fields = append(fields, creditnotelineitem.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, creditnotelineitem.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, creditnotelineitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, creditnotelineitem.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, creditnotelineitem.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, creditnotelineitem.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, creditnotelineitem.FieldEnvironmentID)
	}
	if m.credit_note != nil {
		fields = append(fields, creditnotelineitem.FieldCreditNoteID)
	}
	if m.invoice_line_item_id != nil {
		fields = append(fields, creditnotelineitem.FieldInvoiceLineItemID)
	}
	if m.display_name != nil {
		fields = append(fields, creditnotelineitem.FieldDisplayName)
	}
	if m.amount != nil {
		fields = append(fields, creditnotelineitem.FieldAmount)
	}
	if m.currency != nil {
		fields = append(fields, creditnotelineitem.FieldCurrency)
	}
	if m.metadata != nil {
		fields = append(fields, creditnotelineitem.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CreditNoteLineItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case creditnotelineitem.FieldTenantID:
		return m.TenantID()
	case creditnotelineitem.FieldStatus:
		return m.Status()
	case creditnotelineitem.FieldCreatedAt:
		return m.CreatedAt()
	case creditnotelineitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case creditnotelineitem.FieldCreatedBy:
		return m.CreatedBy()
	case creditnotelineitem.FieldUpdatedBy:
		return m.UpdatedBy()
	case creditnotelineitem.FieldEnvironmentID:
		return m.EnvironmentID()
	case creditnotelineitem.FieldCreditNoteID:
		return m.CreditNoteID()
	case creditnotelineitem.FieldInvoiceLineItemID:
		return m.InvoiceLineItemID()
	case creditnotelineitem.FieldDisplayName:
		return m.DisplayName()
	case creditnotelineitem.FieldAmount:
		return m.Amount()
	case creditnotelineitem.FieldCurrency:
		return m.Currency()
	case creditnotelineitem.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CreditNoteLineItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case creditnotelineitem.FieldTenantID:
		return m.OldTenantID(ctx)
	case creditnotelineitem.FieldStatus:
		return m.OldStatus(ctx)
	case creditnotelineitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case creditnotelineitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case creditnotelineitem.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case creditnotelineitem.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case creditnotelineitem.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case creditnotelineitem.FieldCreditNoteID:
		return m.OldCreditNoteID(ctx)
	case creditnotelineitem.FieldInvoiceLineItemID:
		return m.OldInvoiceLineItemID(ctx)
	case creditnotelineitem.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case creditnotelineitem.FieldAmount:
		return m.OldAmount(ctx)
	case creditnotelineitem.FieldCurrency:
		return m.OldCurrency(ctx)
	case creditnotelineitem.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown CreditNoteLineItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditNoteLineItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case creditnotelineitem.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case creditnotelineitem.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case creditnotelineitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case creditnotelineitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case creditnotelineitem.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case creditnotelineitem.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case creditnotelineitem.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case creditnotelineitem.FieldCreditNoteID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditNoteID(v)
		return nil
	case creditnotelineitem.FieldInvoiceLineItemID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceLineItemID(v)
		return nil
	case creditnotelineitem.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case creditnotelineitem.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case creditnotelineitem.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case creditnotelineitem.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown CreditNoteLineItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CreditNoteLineItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CreditNoteLineItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditNoteLineItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CreditNoteLineItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CreditNoteLineItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(creditnotelineitem.FieldCreatedBy) {
		fields = append(fields, creditnotelineitem.FieldCreatedBy)
	}
	if m.FieldCleared(creditnotelineitem.FieldUpdatedBy) {
		fields = append(fields, creditnotelineitem.FieldUpdatedBy)
	}
	if m.FieldCleared(creditnotelineitem.FieldEnvironmentID) {
		fields = append(fields, creditnotelineitem.FieldEnvironmentID)
	}
	if m.FieldCleared(creditnotelineitem.FieldMetadata) {
		fields = append(fields, creditnotelineitem.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CreditNoteLineItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CreditNoteLineItemMutation) ClearField(name string) error {
	switch name {
	case creditnotelineitem.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case creditnotelineitem.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case creditnotelineitem.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case creditnotelineitem.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown CreditNoteLineItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CreditNoteLineItemMutation) ResetField(name string) error {
	switch name {
	case creditnotelineitem.FieldTenantID:
		m.ResetTenantID()
		return nil
	case creditnotelineitem.FieldStatus:
		m.ResetStatus()
		return nil
	case creditnotelineitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case creditnotelineitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case creditnotelineitem.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case creditnotelineitem.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case creditnotelineitem.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case creditnotelineitem.FieldCreditNoteID:
		m.ResetCreditNoteID()
		return nil
	case creditnotelineitem.FieldInvoiceLineItemID:
		m.ResetInvoiceLineItemID()
		return nil
	case creditnotelineitem.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case creditnotelineitem.FieldAmount:
		m.ResetAmount()
		return nil
	case creditnotelineitem.FieldCurrency:
		m.ResetCurrency()
		return nil
	case creditnotelineitem.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown CreditNoteLineItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CreditNoteLineItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.credit_note != nil {
		edges = append(edges, creditnotelineitem.EdgeCreditNote)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CreditNoteLineItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case creditnotelineitem.EdgeCreditNote:
		if id := m.credit_note; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CreditNoteLineItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CreditNoteLineItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CreditNoteLineItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcredit_note {
		edges = append(edges, creditnotelineitem.EdgeCreditNote)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CreditNoteLineItemMutation) EdgeCleared(name string) bool {
	switch name {
	case creditnotelineitem.EdgeCreditNote:
		return m.clearedcredit_note
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CreditNoteLineItemMutation) ClearEdge(name string) error {
	switch name {
	case creditnotelineitem.EdgeCreditNote:
		m.ClearCreditNote()
		return nil
	}
	return fmt.Errorf("unknown CreditNoteLineItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CreditNoteLineItemMutation) ResetEdge(name string) error {
	switch name {
	case creditnotelineitem.EdgeCreditNote:
		m.ResetCreditNote()
		return nil
	}
	return fmt.Errorf("unknown CreditNoteLineItem edge %s", name)
}

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	tenant_id           *string
	status              *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	environment_id      *string
	external_id         *string
	name                *string
	email               *string
	address_line1       *string
	address_line2       *string
	address_city        *string
	address_state       *string
	address_postal_code *string
	address_country     *string
	metadata            *map[string]string
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Customer, error)
	predicates          []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id string) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *CustomerMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *CustomerMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *CustomerMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *CustomerMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CustomerMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CustomerMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CustomerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CustomerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CustomerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CustomerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CustomerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CustomerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CustomerMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CustomerMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CustomerMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[customer.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CustomerMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[customer.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CustomerMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, customer.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CustomerMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CustomerMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CustomerMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[customer.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CustomerMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[customer.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CustomerMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, customer.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *CustomerMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *CustomerMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *CustomerMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[customer.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *CustomerMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[customer.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *CustomerMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, customer.FieldEnvironmentID)
}

// SetExternalID sets the "external_id" field.
func (m *CustomerMutation) SetExternalID(s string) {
	m.external_id = &s
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *CustomerMutation) ExternalID() (r string, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *CustomerMutation) ResetExternalID() {
	m.external_id = nil
}

// SetName sets the "name" field.
func (m *CustomerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CustomerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CustomerMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *CustomerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *CustomerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *CustomerMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[customer.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *CustomerMutation) EmailCleared() bool {
	_, ok := m.clearedFields[customer.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *CustomerMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, customer.FieldEmail)
}

// SetAddressLine1 sets the "address_line1" field.
func (m *CustomerMutation) SetAddressLine1(s string) {
	m.address_line1 = &s
}

// AddressLine1 returns the value of the "address_line1" field in the mutation.
func (m *CustomerMutation) AddressLine1() (r string, exists bool) {
	v := m.address_line1
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine1 returns the old "address_line1" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddressLine1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine1: %w", err)
	}
	return oldValue.AddressLine1, nil
}

// ClearAddressLine1 clears the value of the "address_line1" field.
func (m *CustomerMutation) ClearAddressLine1() {
	m.address_line1 = nil
	m.clearedFields[customer.FieldAddressLine1] = struct{}{}
}

// AddressLine1Cleared returns if the "address_line1" field was cleared in this mutation.
func (m *CustomerMutation) AddressLine1Cleared() bool {
	_, ok := m.clearedFields[customer.FieldAddressLine1]
	return ok
}

// ResetAddressLine1 resets all changes to the "address_line1" field.
func (m *CustomerMutation) ResetAddressLine1() {
	m.address_line1 = nil
	delete(m.clearedFields, customer.FieldAddressLine1)
}

// SetAddressLine2 sets the "address_line2" field.
func (m *CustomerMutation) SetAddressLine2(s string) {
	m.address_line2 = &s
}

// AddressLine2 returns the value of the "address_line2" field in the mutation.
func (m *CustomerMutation) AddressLine2() (r string, exists bool) {
	v := m.address_line2
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine2 returns the old "address_line2" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddressLine2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine2: %w", err)
	}
	return oldValue.AddressLine2, nil
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (m *CustomerMutation) ClearAddressLine2() {
	m.address_line2 = nil
	m.clearedFields[customer.FieldAddressLine2] = struct{}{}
}

// AddressLine2Cleared returns if the "address_line2" field was cleared in this mutation.
func (m *CustomerMutation) AddressLine2Cleared() bool {
	_, ok := m.clearedFields[customer.FieldAddressLine2]
	return ok
}

// ResetAddressLine2 resets all changes to the "address_line2" field.
func (m *CustomerMutation) ResetAddressLine2() {
	m.address_line2 = nil
	delete(m.clearedFields, customer.FieldAddressLine2)
}

// SetAddressCity sets the "address_city" field.
func (m *CustomerMutation) SetAddressCity(s string) {
	m.address_city = &s
}

// AddressCity returns the value of the "address_city" field in the mutation.
func (m *CustomerMutation) AddressCity() (r string, exists bool) {
	v := m.address_city
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressCity returns the old "address_city" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddressCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressCity: %w", err)
	}
	return oldValue.AddressCity, nil
}

// ClearAddressCity clears the value of the "address_city" field.
func (m *CustomerMutation) ClearAddressCity() {
	m.address_city = nil
	m.clearedFields[customer.FieldAddressCity] = struct{}{}
}

// AddressCityCleared returns if the "address_city" field was cleared in this mutation.
func (m *CustomerMutation) AddressCityCleared() bool {
	_, ok := m.clearedFields[customer.FieldAddressCity]
	return ok
}

// ResetAddressCity resets all changes to the "address_city" field.
func (m *CustomerMutation) ResetAddressCity() {
	m.address_city = nil
	delete(m.clearedFields, customer.FieldAddressCity)
}

// SetAddressState sets the "address_state" field.
func (m *CustomerMutation) SetAddressState(s string) {
	m.address_state = &s
}

// AddressState returns the value of the "address_state" field in the mutation.
func (m *CustomerMutation) AddressState() (r string, exists bool) {
	v := m.address_state
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressState returns the old "address_state" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddressState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressState: %w", err)
	}
	return oldValue.AddressState, nil
}

// ClearAddressState clears the value of the "address_state" field.
func (m *CustomerMutation) ClearAddressState() {
	m.address_state = nil
	m.clearedFields[customer.FieldAddressState] = struct{}{}
}

// AddressStateCleared returns if the "address_state" field was cleared in this mutation.
func (m *CustomerMutation) AddressStateCleared() bool {
	_, ok := m.clearedFields[customer.FieldAddressState]
	return ok
}

// ResetAddressState resets all changes to the "address_state" field.
func (m *CustomerMutation) ResetAddressState() {
	m.address_state = nil
	delete(m.clearedFields, customer.FieldAddressState)
}

// SetAddressPostalCode sets the "address_postal_code" field.
func (m *CustomerMutation) SetAddressPostalCode(s string) {
	m.address_postal_code = &s
}

// AddressPostalCode returns the value of the "address_postal_code" field in the mutation.
func (m *CustomerMutation) AddressPostalCode() (r string, exists bool) {
	v := m.address_postal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressPostalCode returns the old "address_postal_code" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddressPostalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressPostalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressPostalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressPostalCode: %w", err)
	}
	return oldValue.AddressPostalCode, nil
}

// ClearAddressPostalCode clears the value of the "address_postal_code" field.
func (m *CustomerMutation) ClearAddressPostalCode() {
	m.address_postal_code = nil
	m.clearedFields[customer.FieldAddressPostalCode] = struct{}{}
}

// AddressPostalCodeCleared returns if the "address_postal_code" field was cleared in this mutation.
func (m *CustomerMutation) AddressPostalCodeCleared() bool {
	_, ok := m.clearedFields[customer.FieldAddressPostalCode]
	return ok
}

// ResetAddressPostalCode resets all changes to the "address_postal_code" field.
func (m *CustomerMutation) ResetAddressPostalCode() {
	m.address_postal_code = nil
	delete(m.clearedFields, customer.FieldAddressPostalCode)
}

// SetAddressCountry sets the "address_country" field.
func (m *CustomerMutation) SetAddressCountry(s string) {
	m.address_country = &s
}

// AddressCountry returns the value of the "address_country" field in the mutation.
func (m *CustomerMutation) AddressCountry() (r string, exists bool) {
	v := m.address_country
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressCountry returns the old "address_country" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddressCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressCountry: %w", err)
	}
	return oldValue.AddressCountry, nil
}

// ClearAddressCountry clears the value of the "address_country" field.
func (m *CustomerMutation) ClearAddressCountry() {
	m.address_country = nil
	m.clearedFields[customer.FieldAddressCountry] = struct{}{}
}

// AddressCountryCleared returns if the "address_country" field was cleared in this mutation.
func (m *CustomerMutation) AddressCountryCleared() bool {
	_, ok := m.clearedFields[customer.FieldAddressCountry]
	return ok
}

// ResetAddressCountry resets all changes to the "address_country" field.
func (m *CustomerMutation) ResetAddressCountry() {
	m.address_country = nil
	delete(m.clearedFields, customer.FieldAddressCountry)
}

// SetMetadata sets the "metadata" field.
func (m *CustomerMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CustomerMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CustomerMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[customer.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CustomerMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[customer.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CustomerMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, customer.FieldMetadata)
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Customer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.tenant_id != nil {
		fields = append(fields, customer.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, customer.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, customer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, customer.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, customer.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, customer.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, customer.FieldEnvironmentID)
	}
	if m.external_id != nil {
		fields = append(fields, customer.FieldExternalID)
	}
	if m.name != nil {
		fields = append(fields, customer.FieldName)
	}
	if m.email != nil {
		fields = append(fields, customer.FieldEmail)
	}
	if m.address_line1 != nil {
		fields = append(fields, customer.FieldAddressLine1)
	}
	if m.address_line2 != nil {
		fields = append(fields, customer.FieldAddressLine2)
	}
	if m.address_city != nil {
		fields = append(fields, customer.FieldAddressCity)
	}
	if m.address_state != nil {
		fields = append(fields, customer.FieldAddressState)
	}
	if m.address_postal_code != nil {
		fields = append(fields, customer.FieldAddressPostalCode)
	}
	if m.address_country != nil {
		fields = append(fields, customer.FieldAddressCountry)
	}
	if m.metadata != nil {
		fields = append(fields, customer.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldTenantID:
		return m.TenantID()
	case customer.FieldStatus:
		return m.Status()
	case customer.FieldCreatedAt:
		return m.CreatedAt()
	case customer.FieldUpdatedAt:
		return m.UpdatedAt()
	case customer.FieldCreatedBy:
		return m.CreatedBy()
	case customer.FieldUpdatedBy:
		return m.UpdatedBy()
	case customer.FieldEnvironmentID:
		return m.EnvironmentID()
	case customer.FieldExternalID:
		return m.ExternalID()
	case customer.FieldName:
		return m.Name()
	case customer.FieldEmail:
		return m.Email()
	case customer.FieldAddressLine1:
		return m.AddressLine1()
	case customer.FieldAddressLine2:
		return m.AddressLine2()
	case customer.FieldAddressCity:
		return m.AddressCity()
	case customer.FieldAddressState:
		return m.AddressState()
	case customer.FieldAddressPostalCode:
		return m.AddressPostalCode()
	case customer.FieldAddressCountry:
		return m.AddressCountry()
	case customer.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldTenantID:
		return m.OldTenantID(ctx)
	case customer.FieldStatus:
		return m.OldStatus(ctx)
	case customer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case customer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case customer.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case customer.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case customer.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case customer.FieldExternalID:
		return m.OldExternalID(ctx)
	case customer.FieldName:
		return m.OldName(ctx)
	case customer.FieldEmail:
		return m.OldEmail(ctx)
	case customer.FieldAddressLine1:
		return m.OldAddressLine1(ctx)
	case customer.FieldAddressLine2:
		return m.OldAddressLine2(ctx)
	case customer.FieldAddressCity:
		return m.OldAddressCity(ctx)
	case customer.FieldAddressState:
		return m.OldAddressState(ctx)
	case customer.FieldAddressPostalCode:
		return m.OldAddressPostalCode(ctx)
	case customer.FieldAddressCountry:
		return m.OldAddressCountry(ctx)
	case customer.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case customer.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case customer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case customer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case customer.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case customer.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case customer.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case customer.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case customer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case customer.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case customer.FieldAddressLine1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine1(v)
		return nil
	case customer.FieldAddressLine2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine2(v)
		return nil
	case customer.FieldAddressCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressCity(v)
		return nil
	case customer.FieldAddressState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressState(v)
		return nil
	case customer.FieldAddressPostalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressPostalCode(v)
		return nil
	case customer.FieldAddressCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressCountry(v)
		return nil
	case customer.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customer.FieldCreatedBy) {
		fields = append(fields, customer.FieldCreatedBy)
	}
	if m.FieldCleared(customer.FieldUpdatedBy) {
		fields = append(fields, customer.FieldUpdatedBy)
	}
	if m.FieldCleared(customer.FieldEnvironmentID) {
		fields = append(fields, customer.FieldEnvironmentID)
	}
	if m.FieldCleared(customer.FieldEmail) {
		fields = append(fields, customer.FieldEmail)
	}
	if m.FieldCleared(customer.FieldAddressLine1) {
		fields = append(fields, customer.FieldAddressLine1)
	}
	if m.FieldCleared(customer.FieldAddressLine2) {
		fields = append(fields, customer.FieldAddressLine2)
	}
	if m.FieldCleared(customer.FieldAddressCity) {
		fields = append(fields, customer.FieldAddressCity)
	}
	if m.FieldCleared(customer.FieldAddressState) {
		fields = append(fields, customer.FieldAddressState)
	}
	if m.FieldCleared(customer.FieldAddressPostalCode) {
		fields = append(fields, customer.FieldAddressPostalCode)
	}
	if m.FieldCleared(customer.FieldAddressCountry) {
		fields = append(fields, customer.FieldAddressCountry)
	}
	if m.FieldCleared(customer.FieldMetadata) {
		fields = append(fields, customer.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	switch name {
	case customer.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case customer.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case customer.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case customer.FieldEmail:
		m.ClearEmail()
		return nil
	case customer.FieldAddressLine1:
		m.ClearAddressLine1()
		return nil
	case customer.FieldAddressLine2:
		m.ClearAddressLine2()
		return nil
	case customer.FieldAddressCity:
		m.ClearAddressCity()
		return nil
	case customer.FieldAddressState:
		m.ClearAddressState()
		return nil
	case customer.FieldAddressPostalCode:
		m.ClearAddressPostalCode()
		return nil
	case customer.FieldAddressCountry:
		m.ClearAddressCountry()
		return nil
	case customer.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldTenantID:
		m.ResetTenantID()
		return nil
	case customer.FieldStatus:
		m.ResetStatus()
		return nil
	case customer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case customer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case customer.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case customer.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case customer.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case customer.FieldExternalID:
		m.ResetExternalID()
		return nil
	case customer.FieldName:
		m.ResetName()
		return nil
	case customer.FieldEmail:
		m.ResetEmail()
		return nil
	case customer.FieldAddressLine1:
		m.ResetAddressLine1()
		return nil
	case customer.FieldAddressLine2:
		m.ResetAddressLine2()
		return nil
	case customer.FieldAddressCity:
		m.ResetAddressCity()
		return nil
	case customer.FieldAddressState:
		m.ResetAddressState()
		return nil
	case customer.FieldAddressPostalCode:
		m.ResetAddressPostalCode()
		return nil
	case customer.FieldAddressCountry:
		m.ResetAddressCountry()
		return nil
	case customer.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Customer edge %s", name)
}

// EntitlementMutation represents an operation that mutates the Entitlement nodes in the graph.
type EntitlementMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	tenant_id          *string
	status             *string
	created_at         *time.Time
	updated_at         *time.Time
	created_by         *string
	updated_by         *string
	environment_id     *string
	feature_id         *string
	feature_type       *string
	is_enabled         *bool
	usage_limit        *int64
	addusage_limit     *int64
	usage_reset_period *string
	is_soft_limit      *bool
	static_value       *string
	clearedFields      map[string]struct{}
	plan               *string
	clearedplan        bool
	done               bool
	oldValue           func(context.Context) (*Entitlement, error)
	predicates         []predicate.Entitlement
}

var _ ent.Mutation = (*EntitlementMutation)(nil)

// entitlementOption allows management of the mutation configuration using functional options.
type entitlementOption func(*EntitlementMutation)

// newEntitlementMutation creates new mutation for the Entitlement entity.
func newEntitlementMutation(c config, op Op, opts ...entitlementOption) *EntitlementMutation {
	m := &EntitlementMutation{
		config:        c,
		op:            op,
		typ:           TypeEntitlement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntitlementID sets the ID field of the mutation.
func withEntitlementID(id string) entitlementOption {
	return func(m *EntitlementMutation) {
		var (
			err   error
			once  sync.Once
			value *Entitlement
		)
		m.oldValue = func(ctx context.Context) (*Entitlement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Entitlement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntitlement sets the old Entitlement of the mutation.
func withEntitlement(node *Entitlement) entitlementOption {
	return func(m *EntitlementMutation) {
		m.oldValue = func(context.Context) (*Entitlement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntitlementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntitlementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Entitlement entities.
func (m *EntitlementMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntitlementMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntitlementMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Entitlement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *EntitlementMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *EntitlementMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *EntitlementMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *EntitlementMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *EntitlementMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *EntitlementMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EntitlementMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EntitlementMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EntitlementMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EntitlementMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EntitlementMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EntitlementMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *EntitlementMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *EntitlementMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *EntitlementMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[entitlement.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *EntitlementMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *EntitlementMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, entitlement.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *EntitlementMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *EntitlementMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *EntitlementMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[entitlement.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *EntitlementMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *EntitlementMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, entitlement.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *EntitlementMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *EntitlementMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *EntitlementMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[entitlement.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *EntitlementMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *EntitlementMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, entitlement.FieldEnvironmentID)
}

// SetPlanID sets the "plan_id" field.
func (m *EntitlementMutation) SetPlanID(s string) {
	m.plan = &s
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *EntitlementMutation) PlanID() (r string, exists bool) {
	v := m.plan
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldPlanID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *EntitlementMutation) ResetPlanID() {
	m.plan = nil
}

// SetFeatureID sets the "feature_id" field.
func (m *EntitlementMutation) SetFeatureID(s string) {
	m.feature_id = &s
}

// FeatureID returns the value of the "feature_id" field in the mutation.
func (m *EntitlementMutation) FeatureID() (r string, exists bool) {
	v := m.feature_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatureID returns the old "feature_id" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldFeatureID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatureID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatureID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatureID: %w", err)
	}
	return oldValue.FeatureID, nil
}

// ResetFeatureID resets all changes to the "feature_id" field.
func (m *EntitlementMutation) ResetFeatureID() {
	m.feature_id = nil
}

// SetFeatureType sets the "feature_type" field.
func (m *EntitlementMutation) SetFeatureType(s string) {
	m.feature_type = &s
}

// FeatureType returns the value of the "feature_type" field in the mutation.
func (m *EntitlementMutation) FeatureType() (r string, exists bool) {
	v := m.feature_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatureType returns the old "feature_type" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldFeatureType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatureType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatureType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatureType: %w", err)
	}
	return oldValue.FeatureType, nil
}

// ResetFeatureType resets all changes to the "feature_type" field.
func (m *EntitlementMutation) ResetFeatureType() {
	m.feature_type = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *EntitlementMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *EntitlementMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *EntitlementMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// SetUsageLimit sets the "usage_limit" field.
func (m *EntitlementMutation) SetUsageLimit(i int64) {
	m.usage_limit = &i
	m.addusage_limit = nil
}

// UsageLimit returns the value of the "usage_limit" field in the mutation.
func (m *EntitlementMutation) UsageLimit() (r int64, exists bool) {
	v := m.usage_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldUsageLimit returns the old "usage_limit" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldUsageLimit(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsageLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsageLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsageLimit: %w", err)
	}
	return oldValue.UsageLimit, nil
}

// AddUsageLimit adds i to the "usage_limit" field.
func (m *EntitlementMutation) AddUsageLimit(i int64) {
	if m.addusage_limit != nil {
		*m.addusage_limit += i
	} else {
		m.addusage_limit = &i
	}
}

// AddedUsageLimit returns the value that was added to the "usage_limit" field in this mutation.
func (m *EntitlementMutation) AddedUsageLimit() (r int64, exists bool) {
	v := m.addusage_limit
	if v == nil {
		return
	}
	return *v, true
}

// ClearUsageLimit clears the value of the "usage_limit" field.
func (m *EntitlementMutation) ClearUsageLimit() {
	m.usage_limit = nil
	m.addusage_limit = nil
	m.clearedFields[entitlement.FieldUsageLimit] = struct{}{}
}

// UsageLimitCleared returns if the "usage_limit" field was cleared in this mutation.
func (m *EntitlementMutation) UsageLimitCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldUsageLimit]
	return ok
}

// ResetUsageLimit resets all changes to the "usage_limit" field.
func (m *EntitlementMutation) ResetUsageLimit() {
	m.usage_limit = nil
	m.addusage_limit = nil
	delete(m.clearedFields, entitlement.FieldUsageLimit)
}

// SetUsageResetPeriod sets the "usage_reset_period" field.
func (m *EntitlementMutation) SetUsageResetPeriod(s string) {
	m.usage_reset_period = &s
}

// UsageResetPeriod returns the value of the "usage_reset_period" field in the mutation.
func (m *EntitlementMutation) UsageResetPeriod() (r string, exists bool) {
	v := m.usage_reset_period
	if v == nil {
		return
	}
	return *v, true
}

// OldUsageResetPeriod returns the old "usage_reset_period" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldUsageResetPeriod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsageResetPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsageResetPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsageResetPeriod: %w", err)
	}
	return oldValue.UsageResetPeriod, nil
}

// ClearUsageResetPeriod clears the value of the "usage_reset_period" field.
func (m *EntitlementMutation) ClearUsageResetPeriod() {
	m.usage_reset_period = nil
	m.clearedFields[entitlement.FieldUsageResetPeriod] = struct{}{}
}

// UsageResetPeriodCleared returns if the "usage_reset_period" field was cleared in this mutation.
func (m *EntitlementMutation) UsageResetPeriodCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldUsageResetPeriod]
	return ok
}

// ResetUsageResetPeriod resets all changes to the "usage_reset_period" field.
func (m *EntitlementMutation) ResetUsageResetPeriod() {
	m.usage_reset_period = nil
	delete(m.clearedFields, entitlement.FieldUsageResetPeriod)
}

// SetIsSoftLimit sets the "is_soft_limit" field.
func (m *EntitlementMutation) SetIsSoftLimit(b bool) {
	m.is_soft_limit = &b
}

// IsSoftLimit returns the value of the "is_soft_limit" field in the mutation.
func (m *EntitlementMutation) IsSoftLimit() (r bool, exists bool) {
	v := m.is_soft_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSoftLimit returns the old "is_soft_limit" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldIsSoftLimit(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSoftLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSoftLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSoftLimit: %w", err)
	}
	return oldValue.IsSoftLimit, nil
}

// ResetIsSoftLimit resets all changes to the "is_soft_limit" field.
func (m *EntitlementMutation) ResetIsSoftLimit() {
	m.is_soft_limit = nil
}

// SetStaticValue sets the "static_value" field.
func (m *EntitlementMutation) SetStaticValue(s string) {
	m.static_value = &s
}

// StaticValue returns the value of the "static_value" field in the mutation.
func (m *EntitlementMutation) StaticValue() (r string, exists bool) {
	v := m.static_value
	if v == nil {
		return
	}
	return *v, true
}

// OldStaticValue returns the old "static_value" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldStaticValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStaticValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStaticValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStaticValue: %w", err)
	}
	return oldValue.StaticValue, nil
}

// ClearStaticValue clears the value of the "static_value" field.
func (m *EntitlementMutation) ClearStaticValue() {
	m.static_value = nil
	m.clearedFields[entitlement.FieldStaticValue] = struct{}{}
}

// StaticValueCleared returns if the "static_value" field was cleared in this mutation.
func (m *EntitlementMutation) StaticValueCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldStaticValue]
	return ok
}

// ResetStaticValue resets all changes to the "static_value" field.
func (m *EntitlementMutation) ResetStaticValue() {
	m.static_value = nil
	delete(m.clearedFields, entitlement.FieldStaticValue)
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *EntitlementMutation) ClearPlan() {
	m.clearedplan = true
	m.clearedFields[entitlement.FieldPlanID] = struct{}{}
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *EntitlementMutation) PlanCleared() bool {
	return m.clearedplan
}

// PlanIDs returns the "plan" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlanID instead. It exists only for internal usage by the builders.
func (m *EntitlementMutation) PlanIDs() (ids []string) {
	if id := m.plan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *EntitlementMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
}

// Where appends a list predicates to the EntitlementMutation builder.
func (m *EntitlementMutation) Where(ps ...predicate.Entitlement) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntitlementMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntitlementMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Entitlement, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntitlementMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntitlementMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Entitlement).
func (m *EntitlementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntitlementMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.tenant_id != nil {
		fields = append(fields, entitlement.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, entitlement.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, entitlement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entitlement.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, entitlement.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, entitlement.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, entitlement.FieldEnvironmentID)
	}
	if m.plan != nil {
		fields = append(fields, entitlement.FieldPlanID)
	}
	if m.feature_id != nil {
		fields = append(fields, entitlement.FieldFeatureID)
	}
	if m.feature_type != nil {
		fields = append(fields, entitlement.FieldFeatureType)
	}
	if m.is_enabled != nil {
		fields = append(fields, entitlement.FieldIsEnabled)
	}
	if m.usage_limit != nil {
		fields = append(fields, entitlement.FieldUsageLimit)
	}
	if m.usage_reset_period != nil {
		fields = append(fields, entitlement.FieldUsageResetPeriod)
	}
	if m.is_soft_limit != nil {
		fields = append(fields, entitlement.FieldIsSoftLimit)
	}
	if m.static_value != nil {
		fields = append(fields, entitlement.FieldStaticValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntitlementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entitlement.FieldTenantID:
		return m.TenantID()
	case entitlement.FieldStatus:
		return m.Status()
	case entitlement.FieldCreatedAt:
		return m.CreatedAt()
	case entitlement.FieldUpdatedAt:
		return m.UpdatedAt()
	case entitlement.FieldCreatedBy:
		return m.CreatedBy()
	case entitlement.FieldUpdatedBy:
		return m.UpdatedBy()
	case entitlement.FieldEnvironmentID:
		return m.EnvironmentID()
	case entitlement.FieldPlanID:
		return m.PlanID()
	case entitlement.FieldFeatureID:
		return m.FeatureID()
	case entitlement.FieldFeatureType:
		return m.FeatureType()
	case entitlement.FieldIsEnabled:
		return m.IsEnabled()
	case entitlement.FieldUsageLimit:
		return m.UsageLimit()
	case entitlement.FieldUsageResetPeriod:
		return m.UsageResetPeriod()
	case entitlement.FieldIsSoftLimit:
		return m.IsSoftLimit()
	case entitlement.FieldStaticValue:
		return m.StaticValue()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntitlementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entitlement.FieldTenantID:
		return m.OldTenantID(ctx)
	case entitlement.FieldStatus:
		return m.OldStatus(ctx)
	case entitlement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entitlement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entitlement.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case entitlement.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case entitlement.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case entitlement.FieldPlanID:
		return m.OldPlanID(ctx)
	case entitlement.FieldFeatureID:
		return m.OldFeatureID(ctx)
	case entitlement.FieldFeatureType:
		return m.OldFeatureType(ctx)
	case entitlement.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	case entitlement.FieldUsageLimit:
		return m.OldUsageLimit(ctx)
	case entitlement.FieldUsageResetPeriod:
		return m.OldUsageResetPeriod(ctx)
	case entitlement.FieldIsSoftLimit:
		return m.OldIsSoftLimit(ctx)
	case entitlement.FieldStaticValue:
		return m.OldStaticValue(ctx)
	}
	return nil, fmt.Errorf("unknown Entitlement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntitlementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entitlement.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case entitlement.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case entitlement.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entitlement.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entitlement.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case entitlement.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case entitlement.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case entitlement.FieldPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case entitlement.FieldFeatureID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatureID(v)
		return nil
	case entitlement.FieldFeatureType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatureType(v)
		return nil
	case entitlement.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	case entitlement.FieldUsageLimit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsageLimit(v)
		return nil
	case entitlement.FieldUsageResetPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsageResetPeriod(v)
		return nil
	case entitlement.FieldIsSoftLimit:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSoftLimit(v)
		return nil
	case entitlement.FieldStaticValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStaticValue(v)
		return nil
	}
	return fmt.Errorf("unknown Entitlement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntitlementMutation) AddedFields() []string {
	var fields []string
	if m.addusage_limit != nil {
		fields = append(fields, entitlement.FieldUsageLimit)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntitlementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entitlement.FieldUsageLimit:
		return m.AddedUsageLimit()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntitlementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entitlement.FieldUsageLimit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUsageLimit(v)
		return nil
	}
	return fmt.Errorf("unknown Entitlement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntitlementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entitlement.FieldCreatedBy) {
		fields = append(fields, entitlement.FieldCreatedBy)
	}
	if m.FieldCleared(entitlement.FieldUpdatedBy) {
		fields = append(fields, entitlement.FieldUpdatedBy)
	}
	if m.FieldCleared(entitlement.FieldEnvironmentID) {
		fields = append(fields, entitlement.FieldEnvironmentID)
	}
	if m.FieldCleared(entitlement.FieldUsageLimit) {
		fields = append(fields, entitlement.FieldUsageLimit)
	}
	if m.FieldCleared(entitlement.FieldUsageResetPeriod) {
		fields = append(fields, entitlement.FieldUsageResetPeriod)
	}
	if m.FieldCleared(entitlement.FieldStaticValue) {
		fields = append(fields, entitlement.FieldStaticValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntitlementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntitlementMutation) ClearField(name string) error {
	switch name {
	case entitlement.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case entitlement.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case entitlement.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case entitlement.FieldUsageLimit:
		m.ClearUsageLimit()
		return nil
	case entitlement.FieldUsageResetPeriod:
		m.ClearUsageResetPeriod()
		return nil
	case entitlement.FieldStaticValue:
		m.ClearStaticValue()
		return nil
	}
	return fmt.Errorf("unknown Entitlement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntitlementMutation) ResetField(name string) error {
	switch name {
	case entitlement.FieldTenantID:
		m.ResetTenantID()
		return nil
	case entitlement.FieldStatus:
		m.ResetStatus()
		return nil
	case entitlement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entitlement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entitlement.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case entitlement.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case entitlement.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case entitlement.FieldPlanID:
		m.ResetPlanID()
		return nil
	case entitlement.FieldFeatureID:
		m.ResetFeatureID()
		return nil
	case entitlement.FieldFeatureType:
		m.ResetFeatureType()
		return nil
	case entitlement.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	case entitlement.FieldUsageLimit:
		m.ResetUsageLimit()
		return nil
	case entitlement.FieldUsageResetPeriod:
		m.ResetUsageResetPeriod()
		return nil
	case entitlement.FieldIsSoftLimit:
		m.ResetIsSoftLimit()
		return nil
	case entitlement.FieldStaticValue:
		m.ResetStaticValue()
		return nil
	}
	return fmt.Errorf("unknown Entitlement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntitlementMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.plan != nil {
		edges = append(edges, entitlement.EdgePlan)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntitlementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entitlement.EdgePlan:
		if id := m.plan; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntitlementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntitlementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntitlementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplan {
		edges = append(edges, entitlement.EdgePlan)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntitlementMutation) EdgeCleared(name string) bool {
	switch name {
	case entitlement.EdgePlan:
		return m.clearedplan
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntitlementMutation) ClearEdge(name string) error {
	switch name {
	case entitlement.EdgePlan:
		m.ClearPlan()
		return nil
	}
	return fmt.Errorf("unknown Entitlement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntitlementMutation) ResetEdge(name string) error {
	switch name {
	case entitlement.EdgePlan:
		m.ResetPlan()
		return nil
	}
	return fmt.Errorf("unknown Entitlement edge %s", name)
}

// EnvironmentMutation represents an operation that mutates the Environment nodes in the graph.
type EnvironmentMutation struct {
	config
	op            Op
	typ           string
	id            *string
	tenant_id     *string
	status        *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	name          *string
	_type         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Environment, error)
	predicates    []predicate.Environment
}

var _ ent.Mutation = (*EnvironmentMutation)(nil)

// environmentOption allows management of the mutation configuration using functional options.
type environmentOption func(*EnvironmentMutation)

// newEnvironmentMutation creates new mutation for the Environment entity.
func newEnvironmentMutation(c config, op Op, opts ...environmentOption) *EnvironmentMutation {
	m := &EnvironmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEnvironment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnvironmentID sets the ID field of the mutation.
func withEnvironmentID(id string) environmentOption {
	return func(m *EnvironmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Environment
		)
		m.oldValue = func(ctx context.Context) (*Environment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Environment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnvironment sets the old Environment of the mutation.
func withEnvironment(node *Environment) environmentOption {
	return func(m *EnvironmentMutation) {
		m.oldValue = func(context.Context) (*Environment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnvironmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnvironmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Environment entities.
func (m *EnvironmentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnvironmentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnvironmentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Environment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *EnvironmentMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *EnvironmentMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *EnvironmentMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *EnvironmentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *EnvironmentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *EnvironmentMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EnvironmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EnvironmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EnvironmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EnvironmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EnvironmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EnvironmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *EnvironmentMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *EnvironmentMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *EnvironmentMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[environment.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *EnvironmentMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[environment.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *EnvironmentMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, environment.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *EnvironmentMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *EnvironmentMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *EnvironmentMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[environment.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *EnvironmentMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[environment.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *EnvironmentMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, environment.FieldUpdatedBy)
}

// SetName sets the "name" field.
func (m *EnvironmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EnvironmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EnvironmentMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *EnvironmentMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *EnvironmentMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EnvironmentMutation) ResetType() {
	m._type = nil
}

// Where appends a list predicates to the EnvironmentMutation builder.
func (m *EnvironmentMutation) Where(ps ...predicate.Environment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EnvironmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EnvironmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Environment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EnvironmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EnvironmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Environment).
func (m *EnvironmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnvironmentMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.tenant_id != nil {
		fields = append(fields, environment.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, environment.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, environment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, environment.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, environment.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, environment.FieldUpdatedBy)
	}
	if m.name != nil {
		fields = append(fields, environment.FieldName)
	}
	if m._type != nil {
		fields = append(fields, environment.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnvironmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case environment.FieldTenantID:
		return m.TenantID()
	case environment.FieldStatus:
		return m.Status()
	case environment.FieldCreatedAt:
		return m.CreatedAt()
	case environment.FieldUpdatedAt:
		return m.UpdatedAt()
	case environment.FieldCreatedBy:
		return m.CreatedBy()
	case environment.FieldUpdatedBy:
		return m.UpdatedBy()
	case environment.FieldName:
		return m.Name()
	case environment.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnvironmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case environment.FieldTenantID:
		return m.OldTenantID(ctx)
	case environment.FieldStatus:
		return m.OldStatus(ctx)
	case environment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case environment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case environment.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case environment.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case environment.FieldName:
		return m.OldName(ctx)
	case environment.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Environment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnvironmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case environment.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case environment.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case environment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case environment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case environment.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case environment.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case environment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case environment.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Environment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnvironmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnvironmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnvironmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Environment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnvironmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(environment.FieldCreatedBy) {
		fields = append(fields, environment.FieldCreatedBy)
	}
	if m.FieldCleared(environment.FieldUpdatedBy) {
		fields = append(fields, environment.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnvironmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnvironmentMutation) ClearField(name string) error {
	switch name {
	case environment.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case environment.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Environment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnvironmentMutation) ResetField(name string) error {
	switch name {
	case environment.FieldTenantID:
		m.ResetTenantID()
		return nil
	case environment.FieldStatus:
		m.ResetStatus()
		return nil
	case environment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case environment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case environment.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case environment.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case environment.FieldName:
		m.ResetName()
		return nil
	case environment.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Environment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnvironmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnvironmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnvironmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnvironmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnvironmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnvironmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnvironmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Environment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnvironmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Environment edge %s", name)
}

// FeatureMutation represents an operation that mutates the Feature nodes in the graph.
type FeatureMutation struct {
	config
	op             Op
	typ            string
	id             *string
	tenant_id      *string
	status         *string
	created_at     *time.Time
	updated_at     *time.Time
	created_by     *string
	updated_by     *string
	environment_id *string
	lookup_key     *string
	name           *string
	description    *string
	_type          *string
	meter_id       *string
	metadata       *map[string]string
	unit_singular  *string
	unit_plural    *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Feature, error)
	predicates     []predicate.Feature
}

var _ ent.Mutation = (*FeatureMutation)(nil)

// featureOption allows management of the mutation configuration using functional options.
type featureOption func(*FeatureMutation)

// newFeatureMutation creates new mutation for the Feature entity.
func newFeatureMutation(c config, op Op, opts ...featureOption) *FeatureMutation {
	m := &FeatureMutation{
		config:        c,
		op:            op,
		typ:           TypeFeature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeatureID sets the ID field of the mutation.
func withFeatureID(id string) featureOption {
	return func(m *FeatureMutation) {
		var (
			err   error
			once  sync.Once
			value *Feature
		)
		m.oldValue = func(ctx context.Context) (*Feature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Feature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeature sets the old Feature of the mutation.
func withFeature(node *Feature) featureOption {
	return func(m *FeatureMutation) {
		m.oldValue = func(context.Context) (*Feature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Feature entities.
func (m *FeatureMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeatureMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeatureMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Feature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *FeatureMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *FeatureMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *FeatureMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *FeatureMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *FeatureMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FeatureMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FeatureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeatureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeatureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeatureMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeatureMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeatureMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *FeatureMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *FeatureMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *FeatureMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[feature.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *FeatureMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[feature.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *FeatureMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, feature.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *FeatureMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *FeatureMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *FeatureMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[feature.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *FeatureMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[feature.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *FeatureMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, feature.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *FeatureMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *FeatureMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *FeatureMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[feature.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *FeatureMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[feature.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *FeatureMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, feature.FieldEnvironmentID)
}

// SetLookupKey sets the "lookup_key" field.
func (m *FeatureMutation) SetLookupKey(s string) {
	m.lookup_key = &s
}

// LookupKey returns the value of the "lookup_key" field in the mutation.
func (m *FeatureMutation) LookupKey() (r string, exists bool) {
	v := m.lookup_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLookupKey returns the old "lookup_key" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldLookupKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookupKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookupKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookupKey: %w", err)
	}
	return oldValue.LookupKey, nil
}

// ResetLookupKey resets all changes to the "lookup_key" field.
func (m *FeatureMutation) ResetLookupKey() {
	m.lookup_key = nil
}

// SetName sets the "name" field.
func (m *FeatureMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FeatureMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FeatureMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *FeatureMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FeatureMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *FeatureMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[feature.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *FeatureMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[feature.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *FeatureMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, feature.FieldDescription)
}

// SetType sets the "type" field.
func (m *FeatureMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *FeatureMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *FeatureMutation) ResetType() {
	m._type = nil
}

// SetMeterID sets the "meter_id" field.
func (m *FeatureMutation) SetMeterID(s string) {
	m.meter_id = &s
}

// MeterID returns the value of the "meter_id" field in the mutation.
func (m *FeatureMutation) MeterID() (r string, exists bool) {
	v := m.meter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterID returns the old "meter_id" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldMeterID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterID: %w", err)
	}
	return oldValue.MeterID, nil
}

// ClearMeterID clears the value of the "meter_id" field.
func (m *FeatureMutation) ClearMeterID() {
	m.meter_id = nil
	m.clearedFields[feature.FieldMeterID] = struct{}{}
}

// MeterIDCleared returns if the "meter_id" field was cleared in this mutation.
func (m *FeatureMutation) MeterIDCleared() bool {
	_, ok := m.clearedFields[feature.FieldMeterID]
	return ok
}

// ResetMeterID resets all changes to the "meter_id" field.
func (m *FeatureMutation) ResetMeterID() {
	m.meter_id = nil
	delete(m.clearedFields, feature.FieldMeterID)
}

// SetMetadata sets the "metadata" field.
func (m *FeatureMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *FeatureMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *FeatureMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[feature.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *FeatureMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[feature.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *FeatureMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, feature.FieldMetadata)
}

// SetUnitSingular sets the "unit_singular" field.
func (m *FeatureMutation) SetUnitSingular(s string) {
	m.unit_singular = &s
}

// UnitSingular returns the value of the "unit_singular" field in the mutation.
func (m *FeatureMutation) UnitSingular() (r string, exists bool) {
	v := m.unit_singular
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitSingular returns the old "unit_singular" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldUnitSingular(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnitSingular is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnitSingular requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitSingular: %w", err)
	}
	return oldValue.UnitSingular, nil
}

// ClearUnitSingular clears the value of the "unit_singular" field.
func (m *FeatureMutation) ClearUnitSingular() {
	m.unit_singular = nil
	m.clearedFields[feature.FieldUnitSingular] = struct{}{}
}

// UnitSingularCleared returns if the "unit_singular" field was cleared in this mutation.
func (m *FeatureMutation) UnitSingularCleared() bool {
	_, ok := m.clearedFields[feature.FieldUnitSingular]
	return ok
}

// ResetUnitSingular resets all changes to the "unit_singular" field.
func (m *FeatureMutation) ResetUnitSingular() {
	m.unit_singular = nil
	delete(m.clearedFields, feature.FieldUnitSingular)
}

// SetUnitPlural sets the "unit_plural" field.
func (m *FeatureMutation) SetUnitPlural(s string) {
	m.unit_plural = &s
}

// UnitPlural returns the value of the "unit_plural" field in the mutation.
func (m *FeatureMutation) UnitPlural() (r string, exists bool) {
	v := m.unit_plural
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitPlural returns the old "unit_plural" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldUnitPlural(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnitPlural is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnitPlural requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitPlural: %w", err)
	}
	return oldValue.UnitPlural, nil
}

// ClearUnitPlural clears the value of the "unit_plural" field.
func (m *FeatureMutation) ClearUnitPlural() {
	m.unit_plural = nil
	m.clearedFields[feature.FieldUnitPlural] = struct{}{}
}

// UnitPluralCleared returns if the "unit_plural" field was cleared in this mutation.
func (m *FeatureMutation) UnitPluralCleared() bool {
	_, ok := m.clearedFields[feature.FieldUnitPlural]
	return ok
}

// ResetUnitPlural resets all changes to the "unit_plural" field.
func (m *FeatureMutation) ResetUnitPlural() {
	m.unit_plural = nil
	delete(m.clearedFields, feature.FieldUnitPlural)
}

// Where appends a list predicates to the FeatureMutation builder.
func (m *FeatureMutation) Where(ps ...predicate.Feature) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeatureMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeatureMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Feature, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeatureMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeatureMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Feature).
func (m *FeatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeatureMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.tenant_id != nil {
		fields = append(fields, feature.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, feature.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, feature.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, feature.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, feature.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, feature.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, feature.FieldEnvironmentID)
	}
	if m.lookup_key != nil {
		fields = append(fields, feature.FieldLookupKey)
	}
	if m.name != nil {
		fields = append(fields, feature.FieldName)
	}
	if m.description != nil {
		fields = append(fields, feature.FieldDescription)
	}
	if m._type != nil {
		fields = append(fields, feature.FieldType)
	}
	if m.meter_id != nil {
		fields = append(fields, feature.FieldMeterID)
	}
	if m.metadata != nil {
		fields = append(fields, feature.FieldMetadata)
	}
	if m.unit_singular != nil {
		fields = append(fields, feature.FieldUnitSingular)
	}
	if m.unit_plural != nil {
		fields = append(fields, feature.FieldUnitPlural)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feature.FieldTenantID:
		return m.TenantID()
	case feature.FieldStatus:
		return m.Status()
	case feature.FieldCreatedAt:
		return m.CreatedAt()
	case feature.FieldUpdatedAt:
		return m.UpdatedAt()
	case feature.FieldCreatedBy:
		return m.CreatedBy()
	case feature.FieldUpdatedBy:
		return m.UpdatedBy()
	case feature.FieldEnvironmentID:
		return m.EnvironmentID()
	case feature.FieldLookupKey:
		return m.LookupKey()
	case feature.FieldName:
		return m.Name()
	case feature.FieldDescription:
		return m.Description()
	case feature.FieldType:
		return m.GetType()
	case feature.FieldMeterID:
		return m.MeterID()
	case feature.FieldMetadata:
		return m.Metadata()
	case feature.FieldUnitSingular:
		return m.UnitSingular()
	case feature.FieldUnitPlural:
		return m.UnitPlural()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feature.FieldTenantID:
		return m.OldTenantID(ctx)
	case feature.FieldStatus:
		return m.OldStatus(ctx)
	case feature.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case feature.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case feature.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case feature.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case feature.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case feature.FieldLookupKey:
		return m.OldLookupKey(ctx)
	case feature.FieldName:
		return m.OldName(ctx)
	case feature.FieldDescription:
		return m.OldDescription(ctx)
	case feature.FieldType:
		return m.OldType(ctx)
	case feature.FieldMeterID:
		return m.OldMeterID(ctx)
	case feature.FieldMetadata:
		return m.OldMetadata(ctx)
	case feature.FieldUnitSingular:
		return m.OldUnitSingular(ctx)
	case feature.FieldUnitPlural:
		return m.OldUnitPlural(ctx)
	}
	return nil, fmt.Errorf("unknown Feature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feature.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case feature.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case feature.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case feature.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case feature.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case feature.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case feature.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case feature.FieldLookupKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookupKey(v)
		return nil
	case feature.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case feature.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case feature.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case feature.FieldMeterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterID(v)
		return nil
	case feature.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case feature.FieldUnitSingular:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitSingular(v)
		return nil
	case feature.FieldUnitPlural:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitPlural(v)
		return nil
	}
	return fmt.Errorf("unknown Feature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeatureMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeatureMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Feature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeatureMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(feature.FieldCreatedBy) {
		fields = append(fields, feature.FieldCreatedBy)
	}
	if m.FieldCleared(feature.FieldUpdatedBy) {
		fields = append(fields, feature.FieldUpdatedBy)
	}
	if m.FieldCleared(feature.FieldEnvironmentID) {
		fields = append(fields, feature.FieldEnvironmentID)
	}
	if m.FieldCleared(feature.FieldDescription) {
		fields = append(fields, feature.FieldDescription)
	}
	if m.FieldCleared(feature.FieldMeterID) {
		fields = append(fields, feature.FieldMeterID)
	}
	if m.FieldCleared(feature.FieldMetadata) {
		fields = append(fields, feature.FieldMetadata)
	}
	if m.FieldCleared(feature.FieldUnitSingular) {
		fields = append(fields, feature.FieldUnitSingular)
	}
	if m.FieldCleared(feature.FieldUnitPlural) {
		fields = append(fields, feature.FieldUnitPlural)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeatureMutation) ClearField(name string) error {
	switch name {
	case feature.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case feature.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case feature.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case feature.FieldDescription:
		m.ClearDescription()
		return nil
	case feature.FieldMeterID:
		m.ClearMeterID()
		return nil
	case feature.FieldMetadata:
		m.ClearMetadata()
		return nil
	case feature.FieldUnitSingular:
		m.ClearUnitSingular()
		return nil
	case feature.FieldUnitPlural:
		m.ClearUnitPlural()
		return nil
	}
	return fmt.Errorf("unknown Feature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeatureMutation) ResetField(name string) error {
	switch name {
	case feature.FieldTenantID:
		m.ResetTenantID()
		return nil
	case feature.FieldStatus:
		m.ResetStatus()
		return nil
	case feature.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case feature.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case feature.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case feature.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case feature.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case feature.FieldLookupKey:
		m.ResetLookupKey()
		return nil
	case feature.FieldName:
		m.ResetName()
		return nil
	case feature.FieldDescription:
		m.ResetDescription()
		return nil
	case feature.FieldType:
		m.ResetType()
		return nil
	case feature.FieldMeterID:
		m.ResetMeterID()
		return nil
	case feature.FieldMetadata:
		m.ResetMetadata()
		return nil
	case feature.FieldUnitSingular:
		m.ResetUnitSingular()
		return nil
	case feature.FieldUnitPlural:
		m.ResetUnitPlural()
		return nil
	}
	return fmt.Errorf("unknown Feature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeatureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeatureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeatureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeatureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Feature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeatureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Feature edge %s", name)
}

// InvoiceMutation represents an operation that mutates the Invoice nodes in the graph.
type InvoiceMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	tenant_id           *string
	status              *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	environment_id      *string
	customer_id         *string
	subscription_id     *string
	invoice_type        *string
	invoice_status      *string
	payment_status      *string
	currency            *string
	amount_due          *decimal.Decimal
	amount_paid         *decimal.Decimal
	amount_remaining    *decimal.Decimal
	subtotal            *decimal.Decimal
	adjustment_amount   *decimal.Decimal
	refunded_amount     *decimal.Decimal
	total               *decimal.Decimal
	description         *string
	due_date            *time.Time
	paid_at             *time.Time
	voided_at           *time.Time
	finalized_at        *time.Time
	billing_period      *string
	period_start        *time.Time
	period_end          *time.Time
	invoice_pdf_url     *string
	billing_reason      *string
	metadata            *map[string]string
	version             *int
	addversion          *int
	invoice_number      *string
	billing_sequence    *int
	addbilling_sequence *int
	idempotency_key     *string
	clearedFields       map[string]struct{}
	line_items          map[string]struct{}
	removedline_items   map[string]struct{}
	clearedline_items   bool
	done                bool
	oldValue            func(context.Context) (*Invoice, error)
	predicates          []predicate.Invoice
}

var _ ent.Mutation = (*InvoiceMutation)(nil)

// invoiceOption allows management of the mutation configuration using functional options.
type invoiceOption func(*InvoiceMutation)

// newInvoiceMutation creates new mutation for the Invoice entity.
func newInvoiceMutation(c config, op Op, opts ...invoiceOption) *InvoiceMutation {
	m := &InvoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceID sets the ID field of the mutation.
func withInvoiceID(id string) invoiceOption {
	return func(m *InvoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Invoice
		)
		m.oldValue = func(ctx context.Context) (*Invoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoice sets the old Invoice of the mutation.
func withInvoice(node *Invoice) invoiceOption {
	return func(m *InvoiceMutation) {
		m.oldValue = func(context.Context) (*Invoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Invoice entities.
func (m *InvoiceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Invoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *InvoiceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *InvoiceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *InvoiceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *InvoiceMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *InvoiceMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InvoiceMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InvoiceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InvoiceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InvoiceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InvoiceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InvoiceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InvoiceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InvoiceMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InvoiceMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InvoiceMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[invoice.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InvoiceMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[invoice.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InvoiceMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, invoice.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InvoiceMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InvoiceMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InvoiceMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[invoice.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InvoiceMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[invoice.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InvoiceMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, invoice.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *InvoiceMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *InvoiceMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *InvoiceMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[invoice.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *InvoiceMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[invoice.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *InvoiceMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, invoice.FieldEnvironmentID)
}

// SetCustomerID sets the "customer_id" field.
func (m *InvoiceMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *InvoiceMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *InvoiceMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *InvoiceMutation) SetSubscriptionID(s string) {
	m.subscription_id = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *InvoiceMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldSubscriptionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (m *InvoiceMutation) ClearSubscriptionID() {
	m.subscription_id = nil
	m.clearedFields[invoice.FieldSubscriptionID] = struct{}{}
}

// SubscriptionIDCleared returns if the "subscription_id" field was cleared in this mutation.
func (m *InvoiceMutation) SubscriptionIDCleared() bool {
	_, ok := m.clearedFields[invoice.FieldSubscriptionID]
	return ok
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *InvoiceMutation) ResetSubscriptionID() {
	m.subscription_id = nil
	delete(m.clearedFields, invoice.FieldSubscriptionID)
}

// SetInvoiceType sets the "invoice_type" field.
func (m *InvoiceMutation) SetInvoiceType(s string) {
	m.invoice_type = &s
}

// InvoiceType returns the value of the "invoice_type" field in the mutation.
func (m *InvoiceMutation) InvoiceType() (r string, exists bool) {
	v := m.invoice_type
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceType returns the old "invoice_type" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldInvoiceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceType: %w", err)
	}
	return oldValue.InvoiceType, nil
}

// ResetInvoiceType resets all changes to the "invoice_type" field.
func (m *InvoiceMutation) ResetInvoiceType() {
	m.invoice_type = nil
}

// SetInvoiceStatus sets the "invoice_status" field.
func (m *InvoiceMutation) SetInvoiceStatus(s string) {
	m.invoice_status = &s
}

// InvoiceStatus returns the value of the "invoice_status" field in the mutation.
func (m *InvoiceMutation) InvoiceStatus() (r string, exists bool) {
	v := m.invoice_status
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceStatus returns the old "invoice_status" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldInvoiceStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceStatus: %w", err)
	}
	return oldValue.InvoiceStatus, nil
}

// ResetInvoiceStatus resets all changes to the "invoice_status" field.
func (m *InvoiceMutation) ResetInvoiceStatus() {
	m.invoice_status = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *InvoiceMutation) SetPaymentStatus(s string) {
	m.payment_status = &s
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *InvoiceMutation) PaymentStatus() (r string, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPaymentStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *InvoiceMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetCurrency sets the "currency" field.
func (m *InvoiceMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *InvoiceMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *InvoiceMutation) ResetCurrency() {
	m.currency = nil
}

// SetAmountDue sets the "amount_due" field.
func (m *InvoiceMutation) SetAmountDue(d decimal.Decimal) {
	m.amount_due = &d
}

// AmountDue returns the value of the "amount_due" field in the mutation.
func (m *InvoiceMutation) AmountDue() (r decimal.Decimal, exists bool) {
	v := m.amount_due
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountDue returns the old "amount_due" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAmountDue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountDue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountDue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountDue: %w", err)
	}
	return oldValue.AmountDue, nil
}

// ResetAmountDue resets all changes to the "amount_due" field.
func (m *InvoiceMutation) ResetAmountDue() {
	m.amount_due = nil
}

// SetAmountPaid sets the "amount_paid" field.
func (m *InvoiceMutation) SetAmountPaid(d decimal.Decimal) {
	m.amount_paid = &d
}

// AmountPaid returns the value of the "amount_paid" field in the mutation.
func (m *InvoiceMutation) AmountPaid() (r decimal.Decimal, exists bool) {
	v := m.amount_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountPaid returns the old "amount_paid" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAmountPaid(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountPaid: %w", err)
	}
	return oldValue.AmountPaid, nil
}

// ResetAmountPaid resets all changes to the "amount_paid" field.
func (m *InvoiceMutation) ResetAmountPaid() {
	m.amount_paid = nil
}

// SetAmountRemaining sets the "amount_remaining" field.
func (m *InvoiceMutation) SetAmountRemaining(d decimal.Decimal) {
	m.amount_remaining = &d
}

// AmountRemaining returns the value of the "amount_remaining" field in the mutation.
func (m *InvoiceMutation) AmountRemaining() (r decimal.Decimal, exists bool) {
	v := m.amount_remaining
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountRemaining returns the old "amount_remaining" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAmountRemaining(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountRemaining is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountRemaining requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountRemaining: %w", err)
	}
	return oldValue.AmountRemaining, nil
}

// ResetAmountRemaining resets all changes to the "amount_remaining" field.
func (m *InvoiceMutation) ResetAmountRemaining() {
	m.amount_remaining = nil
}

// SetSubtotal sets the "subtotal" field.
func (m *InvoiceMutation) SetSubtotal(d decimal.Decimal) {
	m.subtotal = &d
}

// Subtotal returns the value of the "subtotal" field in the mutation.
func (m *InvoiceMutation) Subtotal() (r decimal.Decimal, exists bool) {
	v := m.subtotal
	if v == nil {
		return
	}
	return *v, true
}

// OldSubtotal returns the old "subtotal" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldSubtotal(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubtotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubtotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubtotal: %w", err)
	}
	return oldValue.Subtotal, nil
}

// ClearSubtotal clears the value of the "subtotal" field.
func (m *InvoiceMutation) ClearSubtotal() {
	m.subtotal = nil
	m.clearedFields[invoice.FieldSubtotal] = struct{}{}
}

// SubtotalCleared returns if the "subtotal" field was cleared in this mutation.
func (m *InvoiceMutation) SubtotalCleared() bool {
	_, ok := m.clearedFields[invoice.FieldSubtotal]
	return ok
}

// ResetSubtotal resets all changes to the "subtotal" field.
func (m *InvoiceMutation) ResetSubtotal() {
	m.subtotal = nil
	delete(m.clearedFields, invoice.FieldSubtotal)
}

// SetAdjustmentAmount sets the "adjustment_amount" field.
func (m *InvoiceMutation) SetAdjustmentAmount(d decimal.Decimal) {
	m.adjustment_amount = &d
}

// AdjustmentAmount returns the value of the "adjustment_amount" field in the mutation.
func (m *InvoiceMutation) AdjustmentAmount() (r decimal.Decimal, exists bool) {
	v := m.adjustment_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAdjustmentAmount returns the old "adjustment_amount" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAdjustmentAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdjustmentAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdjustmentAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdjustmentAmount: %w", err)
	}
	return oldValue.AdjustmentAmount, nil
}

// ClearAdjustmentAmount clears the value of the "adjustment_amount" field.
func (m *InvoiceMutation) ClearAdjustmentAmount() {
	m.adjustment_amount = nil
	m.clearedFields[invoice.FieldAdjustmentAmount] = struct{}{}
}

// AdjustmentAmountCleared returns if the "adjustment_amount" field was cleared in this mutation.
func (m *InvoiceMutation) AdjustmentAmountCleared() bool {
	_, ok := m.clearedFields[invoice.FieldAdjustmentAmount]
	return ok
}

// ResetAdjustmentAmount resets all changes to the "adjustment_amount" field.
func (m *InvoiceMutation) ResetAdjustmentAmount() {
	m.adjustment_amount = nil
	delete(m.clearedFields, invoice.FieldAdjustmentAmount)
}

// SetRefundedAmount sets the "refunded_amount" field.
func (m *InvoiceMutation) SetRefundedAmount(d decimal.Decimal) {
	m.refunded_amount = &d
}

// RefundedAmount returns the value of the "refunded_amount" field in the mutation.
func (m *InvoiceMutation) RefundedAmount() (r decimal.Decimal, exists bool) {
	v := m.refunded_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundedAmount returns the old "refunded_amount" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldRefundedAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundedAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundedAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundedAmount: %w", err)
	}
	return oldValue.RefundedAmount, nil
}

// ClearRefundedAmount clears the value of the "refunded_amount" field.
func (m *InvoiceMutation) ClearRefundedAmount() {
	m.refunded_amount = nil
	m.clearedFields[invoice.FieldRefundedAmount] = struct{}{}
}

// RefundedAmountCleared returns if the "refunded_amount" field was cleared in this mutation.
func (m *InvoiceMutation) RefundedAmountCleared() bool {
	_, ok := m.clearedFields[invoice.FieldRefundedAmount]
	return ok
}

// ResetRefundedAmount resets all changes to the "refunded_amount" field.
func (m *InvoiceMutation) ResetRefundedAmount() {
	m.refunded_amount = nil
	delete(m.clearedFields, invoice.FieldRefundedAmount)
}

// SetTotal sets the "total" field.
func (m *InvoiceMutation) SetTotal(d decimal.Decimal) {
	m.total = &d
}

// Total returns the value of the "total" field in the mutation.
func (m *InvoiceMutation) Total() (r decimal.Decimal, exists bool) {
	v := m.total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "total" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldTotal(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// ClearTotal clears the value of the "total" field.
func (m *InvoiceMutation) ClearTotal() {
	m.total = nil
	m.clearedFields[invoice.FieldTotal] = struct{}{}
}

// TotalCleared returns if the "total" field was cleared in this mutation.
func (m *InvoiceMutation) TotalCleared() bool {
	_, ok := m.clearedFields[invoice.FieldTotal]
	return ok
}

// ResetTotal resets all changes to the "total" field.
func (m *InvoiceMutation) ResetTotal() {
	m.total = nil
	delete(m.clearedFields, invoice.FieldTotal)
}

// SetDescription sets the "description" field.
func (m *InvoiceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *InvoiceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *InvoiceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[invoice.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *InvoiceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[invoice.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *InvoiceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, invoice.FieldDescription)
}

// SetDueDate sets the "due_date" field.
func (m *InvoiceMutation) SetDueDate(t time.Time) {
	m.due_date = &t
}

// DueDate returns the value of the "due_date" field in the mutation.
func (m *InvoiceMutation) DueDate() (r time.Time, exists bool) {
	v := m.due_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "due_date" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldDueDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ClearDueDate clears the value of the "due_date" field.
func (m *InvoiceMutation) ClearDueDate() {
	m.due_date = nil
	m.clearedFields[invoice.FieldDueDate] = struct{}{}
}

// DueDateCleared returns if the "due_date" field was cleared in this mutation.
func (m *InvoiceMutation) DueDateCleared() bool {
	_, ok := m.clearedFields[invoice.FieldDueDate]
	return ok
}

// ResetDueDate resets all changes to the "due_date" field.
func (m *InvoiceMutation) ResetDueDate() {
	m.due_date = nil
	delete(m.clearedFields, invoice.FieldDueDate)
}

// SetPaidAt sets the "paid_at" field.
func (m *InvoiceMutation) SetPaidAt(t time.Time) {
	m.paid_at = &t
}

// PaidAt returns the value of the "paid_at" field in the mutation.
func (m *InvoiceMutation) PaidAt() (r time.Time, exists bool) {
	v := m.paid_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPaidAt returns the old "paid_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPaidAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaidAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaidAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaidAt: %w", err)
	}
	return oldValue.PaidAt, nil
}

// ClearPaidAt clears the value of the "paid_at" field.
func (m *InvoiceMutation) ClearPaidAt() {
	m.paid_at = nil
	m.clearedFields[invoice.FieldPaidAt] = struct{}{}
}

// PaidAtCleared returns if the "paid_at" field was cleared in this mutation.
func (m *InvoiceMutation) PaidAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldPaidAt]
	return ok
}

// ResetPaidAt resets all changes to the "paid_at" field.
func (m *InvoiceMutation) ResetPaidAt() {
	m.paid_at = nil
	delete(m.clearedFields, invoice.FieldPaidAt)
}

// SetVoidedAt sets the "voided_at" field.
func (m *InvoiceMutation) SetVoidedAt(t time.Time) {
	m.voided_at = &t
}

// VoidedAt returns the value of the "voided_at" field in the mutation.
func (m *InvoiceMutation) VoidedAt() (r time.Time, exists bool) {
	v := m.voided_at
	if v == nil {
		return
	}
	return *v, true
}

// OldVoidedAt returns the old "voided_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldVoidedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoidedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoidedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoidedAt: %w", err)
	}
	return oldValue.VoidedAt, nil
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (m *InvoiceMutation) ClearVoidedAt() {
	m.voided_at = nil
	m.clearedFields[invoice.FieldVoidedAt] = struct{}{}
}

// VoidedAtCleared returns if the "voided_at" field was cleared in this mutation.
func (m *InvoiceMutation) VoidedAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldVoidedAt]
	return ok
}

// ResetVoidedAt resets all changes to the "voided_at" field.
func (m *InvoiceMutation) ResetVoidedAt() {
	m.voided_at = nil
	delete(m.clearedFields, invoice.FieldVoidedAt)
}

// SetFinalizedAt sets the "finalized_at" field.
func (m *InvoiceMutation) SetFinalizedAt(t time.Time) {
	m.finalized_at = &t
}

// FinalizedAt returns the value of the "finalized_at" field in the mutation.
func (m *InvoiceMutation) FinalizedAt() (r time.Time, exists bool) {
	v := m.finalized_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalizedAt returns the old "finalized_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldFinalizedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalizedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalizedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalizedAt: %w", err)
	}
	return oldValue.FinalizedAt, nil
}

// ClearFinalizedAt clears the value of the "finalized_at" field.
func (m *InvoiceMutation) ClearFinalizedAt() {
	m.finalized_at = nil
	m.clearedFields[invoice.FieldFinalizedAt] = struct{}{}
}

// FinalizedAtCleared returns if the "finalized_at" field was cleared in this mutation.
func (m *InvoiceMutation) FinalizedAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldFinalizedAt]
	return ok
}

// ResetFinalizedAt resets all changes to the "finalized_at" field.
func (m *InvoiceMutation) ResetFinalizedAt() {
	m.finalized_at = nil
	delete(m.clearedFields, invoice.FieldFinalizedAt)
}

// SetBillingPeriod sets the "billing_period" field.
func (m *InvoiceMutation) SetBillingPeriod(s string) {
	m.billing_period = &s
}

// BillingPeriod returns the value of the "billing_period" field in the mutation.
func (m *InvoiceMutation) BillingPeriod() (r string, exists bool) {
	v := m.billing_period
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriod returns the old "billing_period" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldBillingPeriod(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriod: %w", err)
	}
	return oldValue.BillingPeriod, nil
}

// ClearBillingPeriod clears the value of the "billing_period" field.
func (m *InvoiceMutation) ClearBillingPeriod() {
	m.billing_period = nil
	m.clearedFields[invoice.FieldBillingPeriod] = struct{}{}
}

// BillingPeriodCleared returns if the "billing_period" field was cleared in this mutation.
func (m *InvoiceMutation) BillingPeriodCleared() bool {
	_, ok := m.clearedFields[invoice.FieldBillingPeriod]
	return ok
}

// ResetBillingPeriod resets all changes to the "billing_period" field.
func (m *InvoiceMutation) ResetBillingPeriod() {
	m.billing_period = nil
	delete(m.clearedFields, invoice.FieldBillingPeriod)
}

// SetPeriodStart sets the "period_start" field.
func (m *InvoiceMutation) SetPeriodStart(t time.Time) {
	m.period_start = &t
}

// PeriodStart returns the value of the "period_start" field in the mutation.
func (m *InvoiceMutation) PeriodStart() (r time.Time, exists bool) {
	v := m.period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodStart returns the old "period_start" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPeriodStart(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodStart: %w", err)
	}
	return oldValue.PeriodStart, nil
}

// ClearPeriodStart clears the value of the "period_start" field.
func (m *InvoiceMutation) ClearPeriodStart() {
	m.period_start = nil
	m.clearedFields[invoice.FieldPeriodStart] = struct{}{}
}

// PeriodStartCleared returns if the "period_start" field was cleared in this mutation.
func (m *InvoiceMutation) PeriodStartCleared() bool {
	_, ok := m.clearedFields[invoice.FieldPeriodStart]
	return ok
}

// ResetPeriodStart resets all changes to the "period_start" field.
func (m *InvoiceMutation) ResetPeriodStart() {
	m.period_start = nil
	delete(m.clearedFields, invoice.FieldPeriodStart)
}

// SetPeriodEnd sets the "period_end" field.
func (m *InvoiceMutation) SetPeriodEnd(t time.Time) {
	m.period_end = &t
}

// PeriodEnd returns the value of the "period_end" field in the mutation.
func (m *InvoiceMutation) PeriodEnd() (r time.Time, exists bool) {
	v := m.period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodEnd returns the old "period_end" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPeriodEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodEnd: %w", err)
	}
	return oldValue.PeriodEnd, nil
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (m *InvoiceMutation) ClearPeriodEnd() {
	m.period_end = nil
	m.clearedFields[invoice.FieldPeriodEnd] = struct{}{}
}

// PeriodEndCleared returns if the "period_end" field was cleared in this mutation.
func (m *InvoiceMutation) PeriodEndCleared() bool {
	_, ok := m.clearedFields[invoice.FieldPeriodEnd]
	return ok
}

// ResetPeriodEnd resets all changes to the "period_end" field.
func (m *InvoiceMutation) ResetPeriodEnd() {
	m.period_end = nil
	delete(m.clearedFields, invoice.FieldPeriodEnd)
}

// SetInvoicePdfURL sets the "invoice_pdf_url" field.
func (m *InvoiceMutation) SetInvoicePdfURL(s string) {
	m.invoice_pdf_url = &s
}

// InvoicePdfURL returns the value of the "invoice_pdf_url" field in the mutation.
func (m *InvoiceMutation) InvoicePdfURL() (r string, exists bool) {
	v := m.invoice_pdf_url
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoicePdfURL returns the old "invoice_pdf_url" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldInvoicePdfURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoicePdfURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoicePdfURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoicePdfURL: %w", err)
	}
	return oldValue.InvoicePdfURL, nil
}

// ClearInvoicePdfURL clears the value of the "invoice_pdf_url" field.
func (m *InvoiceMutation) ClearInvoicePdfURL() {
	m.invoice_pdf_url = nil
	m.clearedFields[invoice.FieldInvoicePdfURL] = struct{}{}
}

// InvoicePdfURLCleared returns if the "invoice_pdf_url" field was cleared in this mutation.
func (m *InvoiceMutation) InvoicePdfURLCleared() bool {
	_, ok := m.clearedFields[invoice.FieldInvoicePdfURL]
	return ok
}

// ResetInvoicePdfURL resets all changes to the "invoice_pdf_url" field.
func (m *InvoiceMutation) ResetInvoicePdfURL() {
	m.invoice_pdf_url = nil
	delete(m.clearedFields, invoice.FieldInvoicePdfURL)
}

// SetBillingReason sets the "billing_reason" field.
func (m *InvoiceMutation) SetBillingReason(s string) {
	m.billing_reason = &s
}

// BillingReason returns the value of the "billing_reason" field in the mutation.
func (m *InvoiceMutation) BillingReason() (r string, exists bool) {
	v := m.billing_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingReason returns the old "billing_reason" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldBillingReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingReason: %w", err)
	}
	return oldValue.BillingReason, nil
}

// ClearBillingReason clears the value of the "billing_reason" field.
func (m *InvoiceMutation) ClearBillingReason() {
	m.billing_reason = nil
	m.clearedFields[invoice.FieldBillingReason] = struct{}{}
}

// BillingReasonCleared returns if the "billing_reason" field was cleared in this mutation.
func (m *InvoiceMutation) BillingReasonCleared() bool {
	_, ok := m.clearedFields[invoice.FieldBillingReason]
	return ok
}

// ResetBillingReason resets all changes to the "billing_reason" field.
func (m *InvoiceMutation) ResetBillingReason() {
	m.billing_reason = nil
	delete(m.clearedFields, invoice.FieldBillingReason)
}

// SetMetadata sets the "metadata" field.
func (m *InvoiceMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *InvoiceMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *InvoiceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[invoice.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *InvoiceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[invoice.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *InvoiceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, invoice.FieldMetadata)
}

// SetVersion sets the "version" field.
func (m *InvoiceMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *InvoiceMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *InvoiceMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *InvoiceMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *InvoiceMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetInvoiceNumber sets the "invoice_number" field.
func (m *InvoiceMutation) SetInvoiceNumber(s string) {
	m.invoice_number = &s
}

// InvoiceNumber returns the value of the "invoice_number" field in the mutation.
func (m *InvoiceMutation) InvoiceNumber() (r string, exists bool) {
	v := m.invoice_number
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceNumber returns the old "invoice_number" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldInvoiceNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceNumber: %w", err)
	}
	return oldValue.InvoiceNumber, nil
}

// ClearInvoiceNumber clears the value of the "invoice_number" field.
func (m *InvoiceMutation) ClearInvoiceNumber() {
	m.invoice_number = nil
	m.clearedFields[invoice.FieldInvoiceNumber] = struct{}{}
}

// InvoiceNumberCleared returns if the "invoice_number" field was cleared in this mutation.
func (m *InvoiceMutation) InvoiceNumberCleared() bool {
	_, ok := m.clearedFields[invoice.FieldInvoiceNumber]
	return ok
}

// ResetInvoiceNumber resets all changes to the "invoice_number" field.
func (m *InvoiceMutation) ResetInvoiceNumber() {
	m.invoice_number = nil
	delete(m.clearedFields, invoice.FieldInvoiceNumber)
}

// SetBillingSequence sets the "billing_sequence" field.
func (m *InvoiceMutation) SetBillingSequence(i int) {
	m.billing_sequence = &i
	m.addbilling_sequence = nil
}

// BillingSequence returns the value of the "billing_sequence" field in the mutation.
func (m *InvoiceMutation) BillingSequence() (r int, exists bool) {
	v := m.billing_sequence
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingSequence returns the old "billing_sequence" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldBillingSequence(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingSequence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingSequence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingSequence: %w", err)
	}
	return oldValue.BillingSequence, nil
}

// AddBillingSequence adds i to the "billing_sequence" field.
func (m *InvoiceMutation) AddBillingSequence(i int) {
	if m.addbilling_sequence != nil {
		*m.addbilling_sequence += i
	} else {
		m.addbilling_sequence = &i
	}
}

// AddedBillingSequence returns the value that was added to the "billing_sequence" field in this mutation.
func (m *InvoiceMutation) AddedBillingSequence() (r int, exists bool) {
	v := m.addbilling_sequence
	if v == nil {
		return
	}
	return *v, true
}

// ClearBillingSequence clears the value of the "billing_sequence" field.
func (m *InvoiceMutation) ClearBillingSequence() {
	m.billing_sequence = nil
	m.addbilling_sequence = nil
	m.clearedFields[invoice.FieldBillingSequence] = struct{}{}
}

// BillingSequenceCleared returns if the "billing_sequence" field was cleared in this mutation.
func (m *InvoiceMutation) BillingSequenceCleared() bool {
	_, ok := m.clearedFields[invoice.FieldBillingSequence]
	return ok
}

// ResetBillingSequence resets all changes to the "billing_sequence" field.
func (m *InvoiceMutation) ResetBillingSequence() {
	m.billing_sequence = nil
	m.addbilling_sequence = nil
	delete(m.clearedFields, invoice.FieldBillingSequence)
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *InvoiceMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *InvoiceMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldIdempotencyKey(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ClearIdempotencyKey clears the value of the "idempotency_key" field.
func (m *InvoiceMutation) ClearIdempotencyKey() {
	m.idempotency_key = nil
	m.clearedFields[invoice.FieldIdempotencyKey] = struct{}{}
}

// IdempotencyKeyCleared returns if the "idempotency_key" field was cleared in this mutation.
func (m *InvoiceMutation) IdempotencyKeyCleared() bool {
	_, ok := m.clearedFields[invoice.FieldIdempotencyKey]
	return ok
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *InvoiceMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
	delete(m.clearedFields, invoice.FieldIdempotencyKey)
}

// AddLineItemIDs adds the "line_items" edge to the InvoiceLineItem entity by ids.
func (m *InvoiceMutation) AddLineItemIDs(ids ...string) {
	if m.line_items == nil {
		m.line_items = make(map[string]struct{})
	}
	for i := range ids {
		m.line_items[ids[i]] = struct{}{}
	}
}

// ClearLineItems clears the "line_items" edge to the InvoiceLineItem entity.
func (m *InvoiceMutation) ClearLineItems() {
	m.clearedline_items = true
}

// LineItemsCleared reports if the "line_items" edge to the InvoiceLineItem entity was cleared.
func (m *InvoiceMutation) LineItemsCleared() bool {
	return m.clearedline_items
}

// RemoveLineItemIDs removes the "line_items" edge to the InvoiceLineItem entity by IDs.
func (m *InvoiceMutation) RemoveLineItemIDs(ids ...string) {
	if m.removedline_items == nil {
		m.removedline_items = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.line_items, ids[i])
		m.removedline_items[ids[i]] = struct{}{}
	}
}

// RemovedLineItems returns the removed IDs of the "line_items" edge to the InvoiceLineItem entity.
func (m *InvoiceMutation) RemovedLineItemsIDs() (ids []string) {
	for id := range m.removedline_items {
		ids = append(ids, id)
	}
	return
}

// LineItemsIDs returns the "line_items" edge IDs in the mutation.
func (m *InvoiceMutation) LineItemsIDs() (ids []string) {
	for id := range m.line_items {
		ids = append(ids, id)
	}
	return
}

// ResetLineItems resets all changes to the "line_items" edge.
func (m *InvoiceMutation) ResetLineItems() {
	m.line_items = nil
	m.clearedline_items = false
	m.removedline_items = nil
}

// Where appends a list predicates to the InvoiceMutation builder.
func (m *InvoiceMutation) Where(ps ...predicate.Invoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Invoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Invoice).
func (m *InvoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceMutation) Fields() []string {
	fields := make([]string, 0, 35)
	if m.tenant_id != nil {
		fields = append(fields, invoice.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, invoice.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, invoice.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, invoice.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, invoice.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, invoice.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, invoice.FieldEnvironmentID)
	}
	if m.customer_id != nil {
		fields = append(fields, invoice.FieldCustomerID)
	}
	if m.subscription_id != nil {
		fields = append(fields, invoice.FieldSubscriptionID)
	}
	if m.invoice_type != nil {
		fields = append(fields, invoice.FieldInvoiceType)
	}
	if m.invoice_status != nil {
		fields = append(fields, invoice.FieldInvoiceStatus)
	}
	if m.payment_status != nil {
		fields = append(fields, invoice.FieldPaymentStatus)
	}
	if m.currency != nil {
		fields = append(fields, invoice.FieldCurrency)
	}
	if m.amount_due != nil {
		fields = append(fields, invoice.FieldAmountDue)
	}
	if m.amount_paid != nil {
		fields = append(fields, invoice.FieldAmountPaid)
	}
	if m.amount_remaining != nil {
		fields = append(fields, invoice.FieldAmountRemaining)
	}
	if m.subtotal != nil {
		fields = append(fields, invoice.FieldSubtotal)
	}
	if m.adjustment_amount != nil {
		fields = append(fields, invoice.FieldAdjustmentAmount)
	}
	if m.refunded_amount != nil {
		fields = append(fields, invoice.FieldRefundedAmount)
	}
	if m.total != nil {
		fields = append(fields, invoice.FieldTotal)
	}
	if m.description != nil {
		fields = append(fields, invoice.FieldDescription)
	}
	if m.due_date != nil {
		fields = append(fields, invoice.FieldDueDate)
	}
	if m.paid_at != nil {
		fields = append(fields, invoice.FieldPaidAt)
	}
	if m.voided_at != nil {
		fields = append(fields, invoice.FieldVoidedAt)
	}
	if m.finalized_at != nil {
		fields = append(fields, invoice.FieldFinalizedAt)
	}
	if m.billing_period != nil {
		fields = append(fields, invoice.FieldBillingPeriod)
	}
	if m.period_start != nil {
		fields = append(fields, invoice.FieldPeriodStart)
	}
	if m.period_end != nil {
		fields = append(fields, invoice.FieldPeriodEnd)
	}
	if m.invoice_pdf_url != nil {
		fields = append(fields, invoice.FieldInvoicePdfURL)
	}
	if m.billing_reason != nil {
		fields = append(fields, invoice.FieldBillingReason)
	}
	if m.metadata != nil {
		fields = append(fields, invoice.FieldMetadata)
	}
	if m.version != nil {
		fields = append(fields, invoice.FieldVersion)
	}
	if m.invoice_number != nil {
		fields = append(fields, invoice.FieldInvoiceNumber)
	}
	if m.billing_sequence != nil {
		fields = append(fields, invoice.FieldBillingSequence)
	}
	if m.idempotency_key != nil {
		fields = append(fields, invoice.FieldIdempotencyKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoice.FieldTenantID:
		return m.TenantID()
	case invoice.FieldStatus:
		return m.Status()
	case invoice.FieldCreatedAt:
		return m.CreatedAt()
	case invoice.FieldUpdatedAt:
		return m.UpdatedAt()
	case invoice.FieldCreatedBy:
		return m.CreatedBy()
	case invoice.FieldUpdatedBy:
		return m.UpdatedBy()
	case invoice.FieldEnvironmentID:
		return m.EnvironmentID()
	case invoice.FieldCustomerID:
		return m.CustomerID()
	case invoice.FieldSubscriptionID:
		return m.SubscriptionID()
	case invoice.FieldInvoiceType:
		return m.InvoiceType()
	case invoice.FieldInvoiceStatus:
		return m.InvoiceStatus()
	case invoice.FieldPaymentStatus:
		return m.PaymentStatus()
	case invoice.FieldCurrency:
		return m.Currency()
	case invoice.FieldAmountDue:
		return m.AmountDue()
	case invoice.FieldAmountPaid:
		return m.AmountPaid()
	case invoice.FieldAmountRemaining:
		return m.AmountRemaining()
	case invoice.FieldSubtotal:
		return m.Subtotal()
	case invoice.FieldAdjustmentAmount:
		return m.AdjustmentAmount()
	case invoice.FieldRefundedAmount:
		return m.RefundedAmount()
	case invoice.FieldTotal:
		return m.Total()
	case invoice.FieldDescription:
		return m.Description()
	case invoice.FieldDueDate:
		return m.DueDate()
	case invoice.FieldPaidAt:
		return m.PaidAt()
	case invoice.FieldVoidedAt:
		return m.VoidedAt()
	case invoice.FieldFinalizedAt:
		return m.FinalizedAt()
	case invoice.FieldBillingPeriod:
		return m.BillingPeriod()
	case invoice.FieldPeriodStart:
		return m.PeriodStart()
	case invoice.FieldPeriodEnd:
		return m.PeriodEnd()
	case invoice.FieldInvoicePdfURL:
		return m.InvoicePdfURL()
	case invoice.FieldBillingReason:
		return m.BillingReason()
	case invoice.FieldMetadata:
		return m.Metadata()
	case invoice.FieldVersion:
		return m.Version()
	case invoice.FieldInvoiceNumber:
		return m.InvoiceNumber()
	case invoice.FieldBillingSequence:
		return m.BillingSequence()
	case invoice.FieldIdempotencyKey:
		return m.IdempotencyKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoice.FieldTenantID:
		return m.OldTenantID(ctx)
	case invoice.FieldStatus:
		return m.OldStatus(ctx)
	case invoice.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case invoice.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case invoice.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case invoice.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case invoice.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case invoice.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case invoice.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case invoice.FieldInvoiceType:
		return m.OldInvoiceType(ctx)
	case invoice.FieldInvoiceStatus:
		return m.OldInvoiceStatus(ctx)
	case invoice.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case invoice.FieldCurrency:
		return m.OldCurrency(ctx)
	case invoice.FieldAmountDue:
		return m.OldAmountDue(ctx)
	case invoice.FieldAmountPaid:
		return m.OldAmountPaid(ctx)
	case invoice.FieldAmountRemaining:
		return m.OldAmountRemaining(ctx)
	case invoice.FieldSubtotal:
		return m.OldSubtotal(ctx)
	case invoice.FieldAdjustmentAmount:
		return m.OldAdjustmentAmount(ctx)
	case invoice.FieldRefundedAmount:
		return m.OldRefundedAmount(ctx)
	case invoice.FieldTotal:
		return m.OldTotal(ctx)
	case invoice.FieldDescription:
		return m.OldDescription(ctx)
	case invoice.FieldDueDate:
		return m.OldDueDate(ctx)
	case invoice.FieldPaidAt:
		return m.OldPaidAt(ctx)
	case invoice.FieldVoidedAt:
		return m.OldVoidedAt(ctx)
	case invoice.FieldFinalizedAt:
		return m.OldFinalizedAt(ctx)
	case invoice.FieldBillingPeriod:
		return m.OldBillingPeriod(ctx)
	case invoice.FieldPeriodStart:
		return m.OldPeriodStart(ctx)
	case invoice.FieldPeriodEnd:
		return m.OldPeriodEnd(ctx)
	case invoice.FieldInvoicePdfURL:
		return m.OldInvoicePdfURL(ctx)
	case invoice.FieldBillingReason:
		return m.OldBillingReason(ctx)
	case invoice.FieldMetadata:
		return m.OldMetadata(ctx)
	case invoice.FieldVersion:
		return m.OldVersion(ctx)
	case invoice.FieldInvoiceNumber:
		return m.OldInvoiceNumber(ctx)
	case invoice.FieldBillingSequence:
		return m.OldBillingSequence(ctx)
	case invoice.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	}
	return nil, fmt.Errorf("unknown Invoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoice.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case invoice.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case invoice.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case invoice.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case invoice.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case invoice.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case invoice.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case invoice.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case invoice.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case invoice.FieldInvoiceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceType(v)
		return nil
	case invoice.FieldInvoiceStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceStatus(v)
		return nil
	case invoice.FieldPaymentStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case invoice.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case invoice.FieldAmountDue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountDue(v)
		return nil
	case invoice.FieldAmountPaid:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountPaid(v)
		return nil
	case invoice.FieldAmountRemaining:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountRemaining(v)
		return nil
	case invoice.FieldSubtotal:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubtotal(v)
		return nil
	case invoice.FieldAdjustmentAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdjustmentAmount(v)
		return nil
	case invoice.FieldRefundedAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundedAmount(v)
		return nil
	case invoice.FieldTotal:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	case invoice.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case invoice.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case invoice.FieldPaidAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaidAt(v)
		return nil
	case invoice.FieldVoidedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoidedAt(v)
		return nil
	case invoice.FieldFinalizedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalizedAt(v)
		return nil
	case invoice.FieldBillingPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriod(v)
		return nil
	case invoice.FieldPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodStart(v)
		return nil
	case invoice.FieldPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodEnd(v)
		return nil
	case invoice.FieldInvoicePdfURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoicePdfURL(v)
		return nil
	case invoice.FieldBillingReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingReason(v)
		return nil
	case invoice.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case invoice.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case invoice.FieldInvoiceNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceNumber(v)
		return nil
	case invoice.FieldBillingSequence:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingSequence(v)
		return nil
	case invoice.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, invoice.FieldVersion)
	}
	if m.addbilling_sequence != nil {
		fields = append(fields, invoice.FieldBillingSequence)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invoice.FieldVersion:
		return m.AddedVersion()
	case invoice.FieldBillingSequence:
		return m.AddedBillingSequence()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invoice.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	case invoice.FieldBillingSequence:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBillingSequence(v)
		return nil
	}
	return fmt.Errorf("unknown Invoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(invoice.FieldCreatedBy) {
		fields = append(fields, invoice.FieldCreatedBy)
	}
	if m.FieldCleared(invoice.FieldUpdatedBy) {
		fields = append(fields, invoice.FieldUpdatedBy)
	}
	if m.FieldCleared(invoice.FieldEnvironmentID) {
		fields = append(fields, invoice.FieldEnvironmentID)
	}
	if m.FieldCleared(invoice.FieldSubscriptionID) {
		fields = append(fields, invoice.FieldSubscriptionID)
	}
	if m.FieldCleared(invoice.FieldSubtotal) {
		fields = append(fields, invoice.FieldSubtotal)
	}
	if m.FieldCleared(invoice.FieldAdjustmentAmount) {
		fields = append(fields, invoice.FieldAdjustmentAmount)
	}
	if m.FieldCleared(invoice.FieldRefundedAmount) {
		fields = append(fields, invoice.FieldRefundedAmount)
	}
	if m.FieldCleared(invoice.FieldTotal) {
		fields = append(fields, invoice.FieldTotal)
	}
	if m.FieldCleared(invoice.FieldDescription) {
		fields = append(fields, invoice.FieldDescription)
	}
	if m.FieldCleared(invoice.FieldDueDate) {
		fields = append(fields, invoice.FieldDueDate)
	}
	if m.FieldCleared(invoice.FieldPaidAt) {
		fields = append(fields, invoice.FieldPaidAt)
	}
	if m.FieldCleared(invoice.FieldVoidedAt) {
		fields = append(fields, invoice.FieldVoidedAt)
	}
	if m.FieldCleared(invoice.FieldFinalizedAt) {
		fields = append(fields, invoice.FieldFinalizedAt)
	}
	if m.FieldCleared(invoice.FieldBillingPeriod) {
		fields = append(fields, invoice.FieldBillingPeriod)
	}
	if m.FieldCleared(invoice.FieldPeriodStart) {
		fields = append(fields, invoice.FieldPeriodStart)
	}
	if m.FieldCleared(invoice.FieldPeriodEnd) {
		fields = append(fields, invoice.FieldPeriodEnd)
	}
	if m.FieldCleared(invoice.FieldInvoicePdfURL) {
		fields = append(fields, invoice.FieldInvoicePdfURL)
	}
	if m.FieldCleared(invoice.FieldBillingReason) {
		fields = append(fields, invoice.FieldBillingReason)
	}
	if m.FieldCleared(invoice.FieldMetadata) {
		fields = append(fields, invoice.FieldMetadata)
	}
	if m.FieldCleared(invoice.FieldInvoiceNumber) {
		fields = append(fields, invoice.FieldInvoiceNumber)
	}
	if m.FieldCleared(invoice.FieldBillingSequence) {
		fields = append(fields, invoice.FieldBillingSequence)
	}
	if m.FieldCleared(invoice.FieldIdempotencyKey) {
		fields = append(fields, invoice.FieldIdempotencyKey)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceMutation) ClearField(name string) error {
	switch name {
	case invoice.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case invoice.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case invoice.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case invoice.FieldSubscriptionID:
		m.ClearSubscriptionID()
		return nil
	case invoice.FieldSubtotal:
		m.ClearSubtotal()
		return nil
	case invoice.FieldAdjustmentAmount:
		m.ClearAdjustmentAmount()
		return nil
	case invoice.FieldRefundedAmount:
		m.ClearRefundedAmount()
		return nil
	case invoice.FieldTotal:
		m.ClearTotal()
		return nil
	case invoice.FieldDescription:
		m.ClearDescription()
		return nil
	case invoice.FieldDueDate:
		m.ClearDueDate()
		return nil
	case invoice.FieldPaidAt:
		m.ClearPaidAt()
		return nil
	case invoice.FieldVoidedAt:
		m.ClearVoidedAt()
		return nil
	case invoice.FieldFinalizedAt:
		m.ClearFinalizedAt()
		return nil
	case invoice.FieldBillingPeriod:
		m.ClearBillingPeriod()
		return nil
	case invoice.FieldPeriodStart:
		m.ClearPeriodStart()
		return nil
	case invoice.FieldPeriodEnd:
		m.ClearPeriodEnd()
		return nil
	case invoice.FieldInvoicePdfURL:
		m.ClearInvoicePdfURL()
		return nil
	case invoice.FieldBillingReason:
		m.ClearBillingReason()
		return nil
	case invoice.FieldMetadata:
		m.ClearMetadata()
		return nil
	case invoice.FieldInvoiceNumber:
		m.ClearInvoiceNumber()
		return nil
	case invoice.FieldBillingSequence:
		m.ClearBillingSequence()
		return nil
	case invoice.FieldIdempotencyKey:
		m.ClearIdempotencyKey()
		return nil
	}
	return fmt.Errorf("unknown Invoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceMutation) ResetField(name string) error {
	switch name {
	case invoice.FieldTenantID:
		m.ResetTenantID()
		return nil
	case invoice.FieldStatus:
		m.ResetStatus()
		return nil
	case invoice.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case invoice.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case invoice.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case invoice.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case invoice.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case invoice.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case invoice.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case invoice.FieldInvoiceType:
		m.ResetInvoiceType()
		return nil
	case invoice.FieldInvoiceStatus:
		m.ResetInvoiceStatus()
		return nil
	case invoice.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case invoice.FieldCurrency:
		m.ResetCurrency()
		return nil
	case invoice.FieldAmountDue:
		m.ResetAmountDue()
		return nil
	case invoice.FieldAmountPaid:
		m.ResetAmountPaid()
		return nil
	case invoice.FieldAmountRemaining:
		m.ResetAmountRemaining()
		return nil
	case invoice.FieldSubtotal:
		m.ResetSubtotal()
		return nil
	case invoice.FieldAdjustmentAmount:
		m.ResetAdjustmentAmount()
		return nil
	case invoice.FieldRefundedAmount:
		m.ResetRefundedAmount()
		return nil
	case invoice.FieldTotal:
		m.ResetTotal()
		return nil
	case invoice.FieldDescription:
		m.ResetDescription()
		return nil
	case invoice.FieldDueDate:
		m.ResetDueDate()
		return nil
	case invoice.FieldPaidAt:
		m.ResetPaidAt()
		return nil
	case invoice.FieldVoidedAt:
		m.ResetVoidedAt()
		return nil
	case invoice.FieldFinalizedAt:
		m.ResetFinalizedAt()
		return nil
	case invoice.FieldBillingPeriod:
		m.ResetBillingPeriod()
		return nil
	case invoice.FieldPeriodStart:
		m.ResetPeriodStart()
		return nil
	case invoice.FieldPeriodEnd:
		m.ResetPeriodEnd()
		return nil
	case invoice.FieldInvoicePdfURL:
		m.ResetInvoicePdfURL()
		return nil
	case invoice.FieldBillingReason:
		m.ResetBillingReason()
		return nil
	case invoice.FieldMetadata:
		m.ResetMetadata()
		return nil
	case invoice.FieldVersion:
		m.ResetVersion()
		return nil
	case invoice.FieldInvoiceNumber:
		m.ResetInvoiceNumber()
		return nil
	case invoice.FieldBillingSequence:
		m.ResetBillingSequence()
		return nil
	case invoice.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.line_items != nil {
		edges = append(edges, invoice.EdgeLineItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invoice.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.line_items))
		for id := range m.line_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedline_items != nil {
		edges = append(edges, invoice.EdgeLineItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case invoice.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.removedline_items))
		for id := range m.removedline_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedline_items {
		edges = append(edges, invoice.EdgeLineItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case invoice.EdgeLineItems:
		return m.clearedline_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Invoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceMutation) ResetEdge(name string) error {
	switch name {
	case invoice.EdgeLineItems:
		m.ResetLineItems()
		return nil
	}
	return fmt.Errorf("unknown Invoice edge %s", name)
}

// InvoiceLineItemMutation represents an operation that mutates the InvoiceLineItem nodes in the graph.
type InvoiceLineItemMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	tenant_id          *string
	status             *string
	created_at         *time.Time
	updated_at         *time.Time
	created_by         *string
	updated_by         *string
	environment_id     *string
	customer_id        *string
	subscription_id    *string
	plan_id            *string
	plan_display_name  *string
	price_id           *string
	price_type         *string
	meter_id           *string
	meter_display_name *string
	price_unit_id      *string
	price_unit         *string
	price_unit_amount  *decimal.Decimal
	display_name       *string
	amount             *decimal.Decimal
	quantity           *decimal.Decimal
	currency           *string
	period_start       *time.Time
	period_end         *time.Time
	metadata           *map[string]string
	clearedFields      map[string]struct{}
	invoice            *string
	clearedinvoice     bool
	done               bool
	oldValue           func(context.Context) (*InvoiceLineItem, error)
	predicates         []predicate.InvoiceLineItem
}

var _ ent.Mutation = (*InvoiceLineItemMutation)(nil)

// invoicelineitemOption allows management of the mutation configuration using functional options.
type invoicelineitemOption func(*InvoiceLineItemMutation)

// newInvoiceLineItemMutation creates new mutation for the InvoiceLineItem entity.
func newInvoiceLineItemMutation(c config, op Op, opts ...invoicelineitemOption) *InvoiceLineItemMutation {
	m := &InvoiceLineItemMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoiceLineItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceLineItemID sets the ID field of the mutation.
func withInvoiceLineItemID(id string) invoicelineitemOption {
	return func(m *InvoiceLineItemMutation) {
		var (
			err   error
			once  sync.Once
			value *InvoiceLineItem
		)
		m.oldValue = func(ctx context.Context) (*InvoiceLineItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InvoiceLineItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoiceLineItem sets the old InvoiceLineItem of the mutation.
func withInvoiceLineItem(node *InvoiceLineItem) invoicelineitemOption {
	return func(m *InvoiceLineItemMutation) {
		m.oldValue = func(context.Context) (*InvoiceLineItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceLineItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceLineItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of InvoiceLineItem entities.
func (m *InvoiceLineItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceLineItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceLineItemMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InvoiceLineItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *InvoiceLineItemMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *InvoiceLineItemMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *InvoiceLineItemMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *InvoiceLineItemMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *InvoiceLineItemMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InvoiceLineItemMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InvoiceLineItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InvoiceLineItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InvoiceLineItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InvoiceLineItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InvoiceLineItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InvoiceLineItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InvoiceLineItemMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InvoiceLineItemMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InvoiceLineItemMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[invoicelineitem.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InvoiceLineItemMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, invoicelineitem.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InvoiceLineItemMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InvoiceLineItemMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InvoiceLineItemMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[invoicelineitem.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InvoiceLineItemMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, invoicelineitem.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *InvoiceLineItemMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *InvoiceLineItemMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *InvoiceLineItemMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[invoicelineitem.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *InvoiceLineItemMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, invoicelineitem.FieldEnvironmentID)
}

// SetInvoiceID sets the "invoice_id" field.
func (m *InvoiceLineItemMutation) SetInvoiceID(s string) {
	m.invoice = &s
}

// InvoiceID returns the value of the "invoice_id" field in the mutation.
func (m *InvoiceLineItemMutation) InvoiceID() (r string, exists bool) {
	v := m.invoice
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceID returns the old "invoice_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldInvoiceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceID: %w", err)
	}
	return oldValue.InvoiceID, nil
}

// ResetInvoiceID resets all changes to the "invoice_id" field.
func (m *InvoiceLineItemMutation) ResetInvoiceID() {
	m.invoice = nil
}

// SetCustomerID sets the "customer_id" field.
func (m *InvoiceLineItemMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *InvoiceLineItemMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *InvoiceLineItemMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *InvoiceLineItemMutation) SetSubscriptionID(s string) {
	m.subscription_id = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *InvoiceLineItemMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldSubscriptionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (m *InvoiceLineItemMutation) ClearSubscriptionID() {
	m.subscription_id = nil
	m.clearedFields[invoicelineitem.FieldSubscriptionID] = struct{}{}
}

// SubscriptionIDCleared returns if the "subscription_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) SubscriptionIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldSubscriptionID]
	return ok
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *InvoiceLineItemMutation) ResetSubscriptionID() {
	m.subscription_id = nil
	delete(m.clearedFields, invoicelineitem.FieldSubscriptionID)
}

// SetPlanID sets the "plan_id" field.
func (m *InvoiceLineItemMutation) SetPlanID(s string) {
	m.plan_id = &s
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *InvoiceLineItemMutation) PlanID() (r string, exists bool) {
	v := m.plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPlanID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ClearPlanID clears the value of the "plan_id" field.
func (m *InvoiceLineItemMutation) ClearPlanID() {
	m.plan_id = nil
	m.clearedFields[invoicelineitem.FieldPlanID] = struct{}{}
}

// PlanIDCleared returns if the "plan_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PlanIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPlanID]
	return ok
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *InvoiceLineItemMutation) ResetPlanID() {
	m.plan_id = nil
	delete(m.clearedFields, invoicelineitem.FieldPlanID)
}

// SetPlanDisplayName sets the "plan_display_name" field.
func (m *InvoiceLineItemMutation) SetPlanDisplayName(s string) {
	m.plan_display_name = &s
}

// PlanDisplayName returns the value of the "plan_display_name" field in the mutation.
func (m *InvoiceLineItemMutation) PlanDisplayName() (r string, exists bool) {
	v := m.plan_display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanDisplayName returns the old "plan_display_name" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPlanDisplayName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanDisplayName: %w", err)
	}
	return oldValue.PlanDisplayName, nil
}

// ClearPlanDisplayName clears the value of the "plan_display_name" field.
func (m *InvoiceLineItemMutation) ClearPlanDisplayName() {
	m.plan_display_name = nil
	m.clearedFields[invoicelineitem.FieldPlanDisplayName] = struct{}{}
}

// PlanDisplayNameCleared returns if the "plan_display_name" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PlanDisplayNameCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPlanDisplayName]
	return ok
}

// ResetPlanDisplayName resets all changes to the "plan_display_name" field.
func (m *InvoiceLineItemMutation) ResetPlanDisplayName() {
	m.plan_display_name = nil
	delete(m.clearedFields, invoicelineitem.FieldPlanDisplayName)
}

// SetPriceID sets the "price_id" field.
func (m *InvoiceLineItemMutation) SetPriceID(s string) {
	m.price_id = &s
}

// PriceID returns the value of the "price_id" field in the mutation.
func (m *InvoiceLineItemMutation) PriceID() (r string, exists bool) {
	v := m.price_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceID returns the old "price_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPriceID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceID: %w", err)
	}
	return oldValue.PriceID, nil
}

// ClearPriceID clears the value of the "price_id" field.
func (m *InvoiceLineItemMutation) ClearPriceID() {
	m.price_id = nil
	m.clearedFields[invoicelineitem.FieldPriceID] = struct{}{}
}

// PriceIDCleared returns if the "price_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PriceIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPriceID]
	return ok
}

// ResetPriceID resets all changes to the "price_id" field.
func (m *InvoiceLineItemMutation) ResetPriceID() {
	m.price_id = nil
	delete(m.clearedFields, invoicelineitem.FieldPriceID)
}

// SetPriceType sets the "price_type" field.
func (m *InvoiceLineItemMutation) SetPriceType(s string) {
	m.price_type = &s
}

// PriceType returns the value of the "price_type" field in the mutation.
func (m *InvoiceLineItemMutation) PriceType() (r string, exists bool) {
	v := m.price_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceType returns the old "price_type" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPriceType(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceType: %w", err)
	}
	return oldValue.PriceType, nil
}

// ClearPriceType clears the value of the "price_type" field.
func (m *InvoiceLineItemMutation) ClearPriceType() {
	m.price_type = nil
	m.clearedFields[invoicelineitem.FieldPriceType] = struct{}{}
}

// PriceTypeCleared returns if the "price_type" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PriceTypeCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPriceType]
	return ok
}

// ResetPriceType resets all changes to the "price_type" field.
func (m *InvoiceLineItemMutation) ResetPriceType() {
	m.price_type = nil
	delete(m.clearedFields, invoicelineitem.FieldPriceType)
}

// SetMeterID sets the "meter_id" field.
func (m *InvoiceLineItemMutation) SetMeterID(s string) {
	m.meter_id = &s
}

// MeterID returns the value of the "meter_id" field in the mutation.
func (m *InvoiceLineItemMutation) MeterID() (r string, exists bool) {
	v := m.meter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterID returns the old "meter_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldMeterID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterID: %w", err)
	}
	return oldValue.MeterID, nil
}

// ClearMeterID clears the value of the "meter_id" field.
func (m *InvoiceLineItemMutation) ClearMeterID() {
	m.meter_id = nil
	m.clearedFields[invoicelineitem.FieldMeterID] = struct{}{}
}

// MeterIDCleared returns if the "meter_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) MeterIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldMeterID]
	return ok
}

// ResetMeterID resets all changes to the "meter_id" field.
func (m *InvoiceLineItemMutation) ResetMeterID() {
	m.meter_id = nil
	delete(m.clearedFields, invoicelineitem.FieldMeterID)
}

// SetMeterDisplayName sets the "meter_display_name" field.
func (m *InvoiceLineItemMutation) SetMeterDisplayName(s string) {
	m.meter_display_name = &s
}

// MeterDisplayName returns the value of the "meter_display_name" field in the mutation.
func (m *InvoiceLineItemMutation) MeterDisplayName() (r string, exists bool) {
	v := m.meter_display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterDisplayName returns the old "meter_display_name" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldMeterDisplayName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterDisplayName: %w", err)
	}
	return oldValue.MeterDisplayName, nil
}

// ClearMeterDisplayName clears the value of the "meter_display_name" field.
func (m *InvoiceLineItemMutation) ClearMeterDisplayName() {
	m.meter_display_name = nil
	m.clearedFields[invoicelineitem.FieldMeterDisplayName] = struct{}{}
}

// MeterDisplayNameCleared returns if the "meter_display_name" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) MeterDisplayNameCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldMeterDisplayName]
	return ok
}

// ResetMeterDisplayName resets all changes to the "meter_display_name" field.
func (m *InvoiceLineItemMutation) ResetMeterDisplayName() {
	m.meter_display_name = nil
	delete(m.clearedFields, invoicelineitem.FieldMeterDisplayName)
}

// SetPriceUnitID sets the "price_unit_id" field.
func (m *InvoiceLineItemMutation) SetPriceUnitID(s string) {
	m.price_unit_id = &s
}

// PriceUnitID returns the value of the "price_unit_id" field in the mutation.
func (m *InvoiceLineItemMutation) PriceUnitID() (r string, exists bool) {
	v := m.price_unit_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnitID returns the old "price_unit_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPriceUnitID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnitID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnitID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnitID: %w", err)
	}
	return oldValue.PriceUnitID, nil
}

// ClearPriceUnitID clears the value of the "price_unit_id" field.
func (m *InvoiceLineItemMutation) ClearPriceUnitID() {
	m.price_unit_id = nil
	m.clearedFields[invoicelineitem.FieldPriceUnitID] = struct{}{}
}

// PriceUnitIDCleared returns if the "price_unit_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PriceUnitIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPriceUnitID]
	return ok
}

// ResetPriceUnitID resets all changes to the "price_unit_id" field.
func (m *InvoiceLineItemMutation) ResetPriceUnitID() {
	m.price_unit_id = nil
	delete(m.clearedFields, invoicelineitem.FieldPriceUnitID)
}

// SetPriceUnit sets the "price_unit" field.
func (m *InvoiceLineItemMutation) SetPriceUnit(s string) {
	m.price_unit = &s
}

// PriceUnit returns the value of the "price_unit" field in the mutation.
func (m *InvoiceLineItemMutation) PriceUnit() (r string, exists bool) {
	v := m.price_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnit returns the old "price_unit" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPriceUnit(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnit: %w", err)
	}
	return oldValue.PriceUnit, nil
}

// ClearPriceUnit clears the value of the "price_unit" field.
func (m *InvoiceLineItemMutation) ClearPriceUnit() {
	m.price_unit = nil
	m.clearedFields[invoicelineitem.FieldPriceUnit] = struct{}{}
}

// PriceUnitCleared returns if the "price_unit" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PriceUnitCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPriceUnit]
	return ok
}

// ResetPriceUnit resets all changes to the "price_unit" field.
func (m *InvoiceLineItemMutation) ResetPriceUnit() {
	m.price_unit = nil
	delete(m.clearedFields, invoicelineitem.FieldPriceUnit)
}

// SetPriceUnitAmount sets the "price_unit_amount" field.
func (m *InvoiceLineItemMutation) SetPriceUnitAmount(d decimal.Decimal) {
	m.price_unit_amount = &d
}

// PriceUnitAmount returns the value of the "price_unit_amount" field in the mutation.
func (m *InvoiceLineItemMutation) PriceUnitAmount() (r decimal.Decimal, exists bool) {
	v := m.price_unit_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnitAmount returns the old "price_unit_amount" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPriceUnitAmount(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnitAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnitAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnitAmount: %w", err)
	}
	return oldValue.PriceUnitAmount, nil
}

// ClearPriceUnitAmount clears the value of the "price_unit_amount" field.
func (m *InvoiceLineItemMutation) ClearPriceUnitAmount() {
	m.price_unit_amount = nil
	m.clearedFields[invoicelineitem.FieldPriceUnitAmount] = struct{}{}
}

// PriceUnitAmountCleared returns if the "price_unit_amount" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PriceUnitAmountCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPriceUnitAmount]
	return ok
}

// ResetPriceUnitAmount resets all changes to the "price_unit_amount" field.
func (m *InvoiceLineItemMutation) ResetPriceUnitAmount() {
	m.price_unit_amount = nil
	delete(m.clearedFields, invoicelineitem.FieldPriceUnitAmount)
}

// SetDisplayName sets the "display_name" field.
func (m *InvoiceLineItemMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *InvoiceLineItemMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldDisplayName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ClearDisplayName clears the value of the "display_name" field.
func (m *InvoiceLineItemMutation) ClearDisplayName() {
	m.display_name = nil
	m.clearedFields[invoicelineitem.FieldDisplayName] = struct{}{}
}

// DisplayNameCleared returns if the "display_name" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) DisplayNameCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldDisplayName]
	return ok
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *InvoiceLineItemMutation) ResetDisplayName() {
	m.display_name = nil
	delete(m.clearedFields, invoicelineitem.FieldDisplayName)
}

// SetAmount sets the "amount" field.
func (m *InvoiceLineItemMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *InvoiceLineItemMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *InvoiceLineItemMutation) ResetAmount() {
	m.amount = nil
}

// SetQuantity sets the "quantity" field.
func (m *InvoiceLineItemMutation) SetQuantity(d decimal.Decimal) {
	m.quantity = &d
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *InvoiceLineItemMutation) Quantity() (r decimal.Decimal, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldQuantity(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *InvoiceLineItemMutation) ResetQuantity() {
	m.quantity = nil
}

// SetCurrency sets the "currency" field.
func (m *InvoiceLineItemMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *InvoiceLineItemMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *InvoiceLineItemMutation) ResetCurrency() {
	m.currency = nil
}

// SetPeriodStart sets the "period_start" field.
func (m *InvoiceLineItemMutation) SetPeriodStart(t time.Time) {
	m.period_start = &t
}

// PeriodStart returns the value of the "period_start" field in the mutation.
func (m *InvoiceLineItemMutation) PeriodStart() (r time.Time, exists bool) {
	v := m.period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodStart returns the old "period_start" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPeriodStart(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodStart: %w", err)
	}
	return oldValue.PeriodStart, nil
}

// ClearPeriodStart clears the value of the "period_start" field.
func (m *InvoiceLineItemMutation) ClearPeriodStart() {
	m.period_start = nil
	m.clearedFields[invoicelineitem.FieldPeriodStart] = struct{}{}
}

// PeriodStartCleared returns if the "period_start" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PeriodStartCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPeriodStart]
	return ok
}

// ResetPeriodStart resets all changes to the "period_start" field.
func (m *InvoiceLineItemMutation) ResetPeriodStart() {
	m.period_start = nil
	delete(m.clearedFields, invoicelineitem.FieldPeriodStart)
}

// SetPeriodEnd sets the "period_end" field.
func (m *InvoiceLineItemMutation) SetPeriodEnd(t time.Time) {
	m.period_end = &t
}

// PeriodEnd returns the value of the "period_end" field in the mutation.
func (m *InvoiceLineItemMutation) PeriodEnd() (r time.Time, exists bool) {
	v := m.period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodEnd returns the old "period_end" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPeriodEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodEnd: %w", err)
	}
	return oldValue.PeriodEnd, nil
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (m *InvoiceLineItemMutation) ClearPeriodEnd() {
	m.period_end = nil
	m.clearedFields[invoicelineitem.FieldPeriodEnd] = struct{}{}
}

// PeriodEndCleared returns if the "period_end" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PeriodEndCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPeriodEnd]
	return ok
}

// ResetPeriodEnd resets all changes to the "period_end" field.
func (m *InvoiceLineItemMutation) ResetPeriodEnd() {
	m.period_end = nil
	delete(m.clearedFields, invoicelineitem.FieldPeriodEnd)
}

// SetMetadata sets the "metadata" field.
func (m *InvoiceLineItemMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *InvoiceLineItemMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *InvoiceLineItemMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[invoicelineitem.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *InvoiceLineItemMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, invoicelineitem.FieldMetadata)
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (m *InvoiceLineItemMutation) ClearInvoice() {
	m.clearedinvoice = true
	m.clearedFields[invoicelineitem.FieldInvoiceID] = struct{}{}
}

// InvoiceCleared reports if the "invoice" edge to the Invoice entity was cleared.
func (m *InvoiceLineItemMutation) InvoiceCleared() bool {
	return m.clearedinvoice
}

// InvoiceIDs returns the "invoice" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InvoiceID instead. It exists only for internal usage by the builders.
func (m *InvoiceLineItemMutation) InvoiceIDs() (ids []string) {
	if id := m.invoice; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInvoice resets all changes to the "invoice" edge.
func (m *InvoiceLineItemMutation) ResetInvoice() {
	m.invoice = nil
	m.clearedinvoice = false
}

// Where appends a list predicates to the InvoiceLineItemMutation builder.
func (m *InvoiceLineItemMutation) Where(ps ...predicate.InvoiceLineItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceLineItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceLineItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InvoiceLineItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceLineItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceLineItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InvoiceLineItem).
func (m *InvoiceLineItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceLineItemMutation) Fields() []string {
	fields := make([]string, 0, 26)
	if m.tenant_id != nil {
		fields = append(fields, invoicelineitem.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, invoicelineitem.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, invoicelineitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, invoicelineitem.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, invoicelineitem.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, invoicelineitem.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, invoicelineitem.FieldEnvironmentID)
	}
	if m.invoice != nil {
		fields = append(fields, invoicelineitem.FieldInvoiceID)
	}
	if m.customer_id != nil {
		fields = append(fields, invoicelineitem.FieldCustomerID)
	}
	if m.subscription_id != nil {
		fields = append(fields, invoicelineitem.FieldSubscriptionID)
	}
	if m.plan_id != nil {
		fields = append(fields, invoicelineitem.FieldPlanID)
	}
	if m.plan_display_name != nil {
		fields = append(fields, invoicelineitem.FieldPlanDisplayName)
	}
	if m.price_id != nil {
		fields = append(fields, invoicelineitem.FieldPriceID)
	}
	if m.price_type != nil {
		fields = append(fields, invoicelineitem.FieldPriceType)
	}
	if m.meter_id != nil {
		fields = append(fields, invoicelineitem.FieldMeterID)
	}
	if m.meter_display_name != nil {
		fields = append(fields, invoicelineitem.FieldMeterDisplayName)
	}
	if m.price_unit_id != nil {
		fields = append(fields, invoicelineitem.FieldPriceUnitID)
	}
	if m.price_unit != nil {
		fields = append(fields, invoicelineitem.FieldPriceUnit)
	}
	if m.price_unit_amount != nil {
		fields = append(fields, invoicelineitem.FieldPriceUnitAmount)
	}
	if m.display_name != nil {
		fields = append(fields, invoicelineitem.FieldDisplayName)
	}
	if m.amount != nil {
		fields = append(fields, invoicelineitem.FieldAmount)
	}
	if m.quantity != nil {
		fields = append(fields, invoicelineitem.FieldQuantity)
	}
	if m.currency != nil {
		fields = append(fields, invoicelineitem.FieldCurrency)
	}
	if m.period_start != nil {
		fields = append(fields, invoicelineitem.FieldPeriodStart)
	}
	if m.period_end != nil {
		fields = append(fields, invoicelineitem.FieldPeriodEnd)
	}
	if m.metadata != nil {
		fields = append(fields, invoicelineitem.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceLineItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoicelineitem.FieldTenantID:
		return m.TenantID()
	case invoicelineitem.FieldStatus:
		return m.Status()
	case invoicelineitem.FieldCreatedAt:
		return m.CreatedAt()
	case invoicelineitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case invoicelineitem.FieldCreatedBy:
		return m.CreatedBy()
	case invoicelineitem.FieldUpdatedBy:
		return m.UpdatedBy()
	case invoicelineitem.FieldEnvironmentID:
		return m.EnvironmentID()
	case invoicelineitem.FieldInvoiceID:
		return m.InvoiceID()
	case invoicelineitem.FieldCustomerID:
		return m.CustomerID()
	case invoicelineitem.FieldSubscriptionID:
		return m.SubscriptionID()
	case invoicelineitem.FieldPlanID:
		return m.PlanID()
	case invoicelineitem.FieldPlanDisplayName:
		return m.PlanDisplayName()
	case invoicelineitem.FieldPriceID:
		return m.PriceID()
	case invoicelineitem.FieldPriceType:
		return m.PriceType()
	case invoicelineitem.FieldMeterID:
		return m.MeterID()
	case invoicelineitem.FieldMeterDisplayName:
		return m.MeterDisplayName()
	case invoicelineitem.FieldPriceUnitID:
		return m.PriceUnitID()
	case invoicelineitem.FieldPriceUnit:
		return m.PriceUnit()
	case invoicelineitem.FieldPriceUnitAmount:
		return m.PriceUnitAmount()
	case invoicelineitem.FieldDisplayName:
		return m.DisplayName()
	case invoicelineitem.FieldAmount:
		return m.Amount()
	case invoicelineitem.FieldQuantity:
		return m.Quantity()
	case invoicelineitem.FieldCurrency:
		return m.Currency()
	case invoicelineitem.FieldPeriodStart:
		return m.PeriodStart()
	case invoicelineitem.FieldPeriodEnd:
		return m.PeriodEnd()
	case invoicelineitem.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceLineItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoicelineitem.FieldTenantID:
		return m.OldTenantID(ctx)
	case invoicelineitem.FieldStatus:
		return m.OldStatus(ctx)
	case invoicelineitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case invoicelineitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case invoicelineitem.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case invoicelineitem.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case invoicelineitem.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case invoicelineitem.FieldInvoiceID:
		return m.OldInvoiceID(ctx)
	case invoicelineitem.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case invoicelineitem.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case invoicelineitem.FieldPlanID:
		return m.OldPlanID(ctx)
	case invoicelineitem.FieldPlanDisplayName:
		return m.OldPlanDisplayName(ctx)
	case invoicelineitem.FieldPriceID:
		return m.OldPriceID(ctx)
	case invoicelineitem.FieldPriceType:
		return m.OldPriceType(ctx)
	case invoicelineitem.FieldMeterID:
		return m.OldMeterID(ctx)
	case invoicelineitem.FieldMeterDisplayName:
		return m.OldMeterDisplayName(ctx)
	case invoicelineitem.FieldPriceUnitID:
		return m.OldPriceUnitID(ctx)
	case invoicelineitem.FieldPriceUnit:
		return m.OldPriceUnit(ctx)
	case invoicelineitem.FieldPriceUnitAmount:
		return m.OldPriceUnitAmount(ctx)
	case invoicelineitem.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case invoicelineitem.FieldAmount:
		return m.OldAmount(ctx)
	case invoicelineitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case invoicelineitem.FieldCurrency:
		return m.OldCurrency(ctx)
	case invoicelineitem.FieldPeriodStart:
		return m.OldPeriodStart(ctx)
	case invoicelineitem.FieldPeriodEnd:
		return m.OldPeriodEnd(ctx)
	case invoicelineitem.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown InvoiceLineItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceLineItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoicelineitem.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case invoicelineitem.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case invoicelineitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case invoicelineitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case invoicelineitem.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case invoicelineitem.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case invoicelineitem.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case invoicelineitem.FieldInvoiceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceID(v)
		return nil
	case invoicelineitem.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case invoicelineitem.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case invoicelineitem.FieldPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case invoicelineitem.FieldPlanDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanDisplayName(v)
		return nil
	case invoicelineitem.FieldPriceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceID(v)
		return nil
	case invoicelineitem.FieldPriceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceType(v)
		return nil
	case invoicelineitem.FieldMeterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterID(v)
		return nil
	case invoicelineitem.FieldMeterDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterDisplayName(v)
		return nil
	case invoicelineitem.FieldPriceUnitID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnitID(v)
		return nil
	case invoicelineitem.FieldPriceUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnit(v)
		return nil
	case invoicelineitem.FieldPriceUnitAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnitAmount(v)
		return nil
	case invoicelineitem.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case invoicelineitem.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case invoicelineitem.FieldQuantity:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case invoicelineitem.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case invoicelineitem.FieldPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodStart(v)
		return nil
	case invoicelineitem.FieldPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodEnd(v)
		return nil
	case invoicelineitem.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceLineItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceLineItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceLineItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InvoiceLineItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceLineItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(invoicelineitem.FieldCreatedBy) {
		fields = append(fields, invoicelineitem.FieldCreatedBy)
	}
	if m.FieldCleared(invoicelineitem.FieldUpdatedBy) {
		fields = append(fields, invoicelineitem.FieldUpdatedBy)
	}
	if m.FieldCleared(invoicelineitem.FieldEnvironmentID) {
		fields = append(fields, invoicelineitem.FieldEnvironmentID)
	}
	if m.FieldCleared(invoicelineitem.FieldSubscriptionID) {
		fields = append(fields, invoicelineitem.FieldSubscriptionID)
	}
	if m.FieldCleared(invoicelineitem.FieldPlanID) {
		fields = append(fields, invoicelineitem.FieldPlanID)
	}
	if m.FieldCleared(invoicelineitem.FieldPlanDisplayName) {
		fields = append(fields, invoicelineitem.FieldPlanDisplayName)
	}
	if m.FieldCleared(invoicelineitem.FieldPriceID) {
		fields = append(fields, invoicelineitem.FieldPriceID)
	}
	if m.FieldCleared(invoicelineitem.FieldPriceType) {
		fields = append(fields, invoicelineitem.FieldPriceType)
	}
	if m.FieldCleared(invoicelineitem.FieldMeterID) {
		fields = append(fields, invoicelineitem.FieldMeterID)
	}
	if m.FieldCleared(invoicelineitem.FieldMeterDisplayName) {
		fields = append(fields, invoicelineitem.FieldMeterDisplayName)
	}
	if m.FieldCleared(invoicelineitem.FieldPriceUnitID) {
		fields = append(fields, invoicelineitem.FieldPriceUnitID)
	}
	if m.FieldCleared(invoicelineitem.FieldPriceUnit) {
		fields = append(fields, invoicelineitem.FieldPriceUnit)
	}
	if m.FieldCleared(invoicelineitem.FieldPriceUnitAmount) {
		fields = append(fields, invoicelineitem.FieldPriceUnitAmount)
	}
	if m.FieldCleared(invoicelineitem.FieldDisplayName) {
		fields = append(fields, invoicelineitem.FieldDisplayName)
	}
	if m.FieldCleared(invoicelineitem.FieldPeriodStart) {
		fields = append(fields, invoicelineitem.FieldPeriodStart)
	}
	if m.FieldCleared(invoicelineitem.FieldPeriodEnd) {
		fields = append(fields, invoicelineitem.FieldPeriodEnd)
	}
	if m.FieldCleared(invoicelineitem.FieldMetadata) {
		fields = append(fields, invoicelineitem.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceLineItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceLineItemMutation) ClearField(name string) error {
	switch name {
	case invoicelineitem.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case invoicelineitem.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case invoicelineitem.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case invoicelineitem.FieldSubscriptionID:
		m.ClearSubscriptionID()
		return nil
	case invoicelineitem.FieldPlanID:
		m.ClearPlanID()
		return nil
	case invoicelineitem.FieldPlanDisplayName:
		m.ClearPlanDisplayName()
		return nil
	case invoicelineitem.FieldPriceID:
		m.ClearPriceID()
		return nil
	case invoicelineitem.FieldPriceType:
		m.ClearPriceType()
		return nil
	case invoicelineitem.FieldMeterID:
		m.ClearMeterID()
		return nil
	case invoicelineitem.FieldMeterDisplayName:
		m.ClearMeterDisplayName()
		return nil
	case invoicelineitem.FieldPriceUnitID:
		m.ClearPriceUnitID()
		return nil
	case invoicelineitem.FieldPriceUnit:
		m.ClearPriceUnit()
		return nil
	case invoicelineitem.FieldPriceUnitAmount:
		m.ClearPriceUnitAmount()
		return nil
	case invoicelineitem.FieldDisplayName:
		m.ClearDisplayName()
		return nil
	case invoicelineitem.FieldPeriodStart:
		m.ClearPeriodStart()
		return nil
	case invoicelineitem.FieldPeriodEnd:
		m.ClearPeriodEnd()
		return nil
	case invoicelineitem.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceLineItemMutation) ResetField(name string) error {
	switch name {
	case invoicelineitem.FieldTenantID:
		m.ResetTenantID()
		return nil
	case invoicelineitem.FieldStatus:
		m.ResetStatus()
		return nil
	case invoicelineitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case invoicelineitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case invoicelineitem.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case invoicelineitem.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case invoicelineitem.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case invoicelineitem.FieldInvoiceID:
		m.ResetInvoiceID()
		return nil
	case invoicelineitem.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case invoicelineitem.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case invoicelineitem.FieldPlanID:
		m.ResetPlanID()
		return nil
	case invoicelineitem.FieldPlanDisplayName:
		m.ResetPlanDisplayName()
		return nil
	case invoicelineitem.FieldPriceID:
		m.ResetPriceID()
		return nil
	case invoicelineitem.FieldPriceType:
		m.ResetPriceType()
		return nil
	case invoicelineitem.FieldMeterID:
		m.ResetMeterID()
		return nil
	case invoicelineitem.FieldMeterDisplayName:
		m.ResetMeterDisplayName()
		return nil
	case invoicelineitem.FieldPriceUnitID:
		m.ResetPriceUnitID()
		return nil
	case invoicelineitem.FieldPriceUnit:
		m.ResetPriceUnit()
		return nil
	case invoicelineitem.FieldPriceUnitAmount:
		m.ResetPriceUnitAmount()
		return nil
	case invoicelineitem.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case invoicelineitem.FieldAmount:
		m.ResetAmount()
		return nil
	case invoicelineitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case invoicelineitem.FieldCurrency:
		m.ResetCurrency()
		return nil
	case invoicelineitem.FieldPeriodStart:
		m.ResetPeriodStart()
		return nil
	case invoicelineitem.FieldPeriodEnd:
		m.ResetPeriodEnd()
		return nil
	case invoicelineitem.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceLineItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.invoice != nil {
		edges = append(edges, invoicelineitem.EdgeInvoice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceLineItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invoicelineitem.EdgeInvoice:
		if id := m.invoice; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceLineItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceLineItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceLineItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedinvoice {
		edges = append(edges, invoicelineitem.EdgeInvoice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceLineItemMutation) EdgeCleared(name string) bool {
	switch name {
	case invoicelineitem.EdgeInvoice:
		return m.clearedinvoice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceLineItemMutation) ClearEdge(name string) error {
	switch name {
	case invoicelineitem.EdgeInvoice:
		m.ClearInvoice()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceLineItemMutation) ResetEdge(name string) error {
	switch name {
	case invoicelineitem.EdgeInvoice:
		m.ResetInvoice()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem edge %s", name)
}

// InvoiceSequenceMutation represents an operation that mutates the InvoiceSequence nodes in the graph.
type InvoiceSequenceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	tenant_id     *string
	year_month    *string
	last_value    *int64
	addlast_value *int64
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*InvoiceSequence, error)
	predicates    []predicate.InvoiceSequence
}

var _ ent.Mutation = (*InvoiceSequenceMutation)(nil)

// invoicesequenceOption allows management of the mutation configuration using functional options.
type invoicesequenceOption func(*InvoiceSequenceMutation)

// newInvoiceSequenceMutation creates new mutation for the InvoiceSequence entity.
func newInvoiceSequenceMutation(c config, op Op, opts ...invoicesequenceOption) *InvoiceSequenceMutation {
	m := &InvoiceSequenceMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoiceSequence,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceSequenceID sets the ID field of the mutation.
func withInvoiceSequenceID(id int) invoicesequenceOption {
	return func(m *InvoiceSequenceMutation) {
		var (
			err   error
			once  sync.Once
			value *InvoiceSequence
		)
		m.oldValue = func(ctx context.Context) (*InvoiceSequence, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InvoiceSequence.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoiceSequence sets the old InvoiceSequence of the mutation.
func withInvoiceSequence(node *InvoiceSequence) invoicesequenceOption {
	return func(m *InvoiceSequenceMutation) {
		m.oldValue = func(context.Context) (*InvoiceSequence, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceSequenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceSequenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceSequenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceSequenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InvoiceSequence.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *InvoiceSequenceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *InvoiceSequenceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the InvoiceSequence entity.
// If the InvoiceSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceSequenceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *InvoiceSequenceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetYearMonth sets the "year_month" field.
func (m *InvoiceSequenceMutation) SetYearMonth(s string) {
	m.year_month = &s
}

// YearMonth returns the value of the "year_month" field in the mutation.
func (m *InvoiceSequenceMutation) YearMonth() (r string, exists bool) {
	v := m.year_month
	if v == nil {
		return
	}
	return *v, true
}

// OldYearMonth returns the old "year_month" field's value of the InvoiceSequence entity.
// If the InvoiceSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceSequenceMutation) OldYearMonth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYearMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYearMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYearMonth: %w", err)
	}
	return oldValue.YearMonth, nil
}

// ResetYearMonth resets all changes to the "year_month" field.
func (m *InvoiceSequenceMutation) ResetYearMonth() {
	m.year_month = nil
}

// SetLastValue sets the "last_value" field.
func (m *InvoiceSequenceMutation) SetLastValue(i int64) {
	m.last_value = &i
	m.addlast_value = nil
}

// LastValue returns the value of the "last_value" field in the mutation.
func (m *InvoiceSequenceMutation) LastValue() (r int64, exists bool) {
	v := m.last_value
	if v == nil {
		return
	}
	return *v, true
}

// OldLastValue returns the old "last_value" field's value of the InvoiceSequence entity.
// If the InvoiceSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceSequenceMutation) OldLastValue(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastValue: %w", err)
	}
	return oldValue.LastValue, nil
}

// AddLastValue adds i to the "last_value" field.
func (m *InvoiceSequenceMutation) AddLastValue(i int64) {
	if m.addlast_value != nil {
		*m.addlast_value += i
	} else {
		m.addlast_value = &i
	}
}

// AddedLastValue returns the value that was added to the "last_value" field in this mutation.
func (m *InvoiceSequenceMutation) AddedLastValue() (r int64, exists bool) {
	v := m.addlast_value
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastValue resets all changes to the "last_value" field.
func (m *InvoiceSequenceMutation) ResetLastValue() {
	m.last_value = nil
	m.addlast_value = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InvoiceSequenceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InvoiceSequenceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the InvoiceSequence entity.
// If the InvoiceSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceSequenceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InvoiceSequenceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InvoiceSequenceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InvoiceSequenceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the InvoiceSequence entity.
// If the InvoiceSequence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceSequenceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InvoiceSequenceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the InvoiceSequenceMutation builder.
func (m *InvoiceSequenceMutation) Where(ps ...predicate.InvoiceSequence) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceSequenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceSequenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InvoiceSequence, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceSequenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceSequenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InvoiceSequence).
func (m *InvoiceSequenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceSequenceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.tenant_id != nil {
		fields = append(fields, invoicesequence.FieldTenantID)
	}
	if m.year_month != nil {
		fields = append(fields, invoicesequence.FieldYearMonth)
	}
	if m.last_value != nil {
		fields = append(fields, invoicesequence.FieldLastValue)
	}
	if m.created_at != nil {
		fields = append(fields, invoicesequence.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, invoicesequence.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceSequenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoicesequence.FieldTenantID:
		return m.TenantID()
	case invoicesequence.FieldYearMonth:
		return m.YearMonth()
	case invoicesequence.FieldLastValue:
		return m.LastValue()
	case invoicesequence.FieldCreatedAt:
		return m.CreatedAt()
	case invoicesequence.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceSequenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoicesequence.FieldTenantID:
		return m.OldTenantID(ctx)
	case invoicesequence.FieldYearMonth:
		return m.OldYearMonth(ctx)
	case invoicesequence.FieldLastValue:
		return m.OldLastValue(ctx)
	case invoicesequence.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case invoicesequence.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown InvoiceSequence field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceSequenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoicesequence.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case invoicesequence.FieldYearMonth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYearMonth(v)
		return nil
	case invoicesequence.FieldLastValue:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastValue(v)
		return nil
	case invoicesequence.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case invoicesequence.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown InvoiceSequence field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceSequenceMutation) AddedFields() []string {
	var fields []string
	if m.addlast_value != nil {
		fields = append(fields, invoicesequence.FieldLastValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceSequenceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invoicesequence.FieldLastValue:
		return m.AddedLastValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceSequenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invoicesequence.FieldLastValue:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastValue(v)
		return nil
	}
	return fmt.Errorf("unknown InvoiceSequence numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceSequenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceSequenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceSequenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InvoiceSequence nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceSequenceMutation) ResetField(name string) error {
	switch name {
	case invoicesequence.FieldTenantID:
		m.ResetTenantID()
		return nil
	case invoicesequence.FieldYearMonth:
		m.ResetYearMonth()
		return nil
	case invoicesequence.FieldLastValue:
		m.ResetLastValue()
		return nil
	case invoicesequence.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case invoicesequence.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown InvoiceSequence field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceSequenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceSequenceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceSequenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceSequenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceSequenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceSequenceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceSequenceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown InvoiceSequence unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceSequenceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown InvoiceSequence edge %s", name)
}

// MeterMutation represents an operation that mutates the Meter nodes in the graph.
type MeterMutation struct {
	config
	op               Op
	typ              string
	id               *string
	tenant_id        *string
	status           *string
	created_at       *time.Time
	updated_at       *time.Time
	created_by       *string
	updated_by       *string
	environment_id   *string
	event_name       *string
	name             *string
	aggregation      *schema.MeterAggregation
	filters          *[]schema.MeterFilter
	appendfilters    []schema.MeterFilter
	reset_usage      *string
	clearedFields    map[string]struct{}
	costsheet        map[string]struct{}
	removedcostsheet map[string]struct{}
	clearedcostsheet bool
	done             bool
	oldValue         func(context.Context) (*Meter, error)
	predicates       []predicate.Meter
}

var _ ent.Mutation = (*MeterMutation)(nil)

// meterOption allows management of the mutation configuration using functional options.
type meterOption func(*MeterMutation)

// newMeterMutation creates new mutation for the Meter entity.
func newMeterMutation(c config, op Op, opts ...meterOption) *MeterMutation {
	m := &MeterMutation{
		config:        c,
		op:            op,
		typ:           TypeMeter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMeterID sets the ID field of the mutation.
func withMeterID(id string) meterOption {
	return func(m *MeterMutation) {
		var (
			err   error
			once  sync.Once
			value *Meter
		)
		m.oldValue = func(ctx context.Context) (*Meter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Meter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeter sets the old Meter of the mutation.
func withMeter(node *Meter) meterOption {
	return func(m *MeterMutation) {
		m.oldValue = func(context.Context) (*Meter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MeterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MeterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Meter entities.
func (m *MeterMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MeterMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MeterMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Meter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *MeterMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *MeterMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *MeterMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *MeterMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *MeterMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MeterMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MeterMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MeterMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MeterMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MeterMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MeterMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MeterMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *MeterMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *MeterMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *MeterMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[meter.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *MeterMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[meter.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *MeterMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, meter.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *MeterMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *MeterMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *MeterMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[meter.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *MeterMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[meter.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *MeterMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, meter.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *MeterMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *MeterMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *MeterMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[meter.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *MeterMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[meter.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *MeterMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, meter.FieldEnvironmentID)
}

// SetEventName sets the "event_name" field.
func (m *MeterMutation) SetEventName(s string) {
	m.event_name = &s
}

// EventName returns the value of the "event_name" field in the mutation.
func (m *MeterMutation) EventName() (r string, exists bool) {
	v := m.event_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEventName returns the old "event_name" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldEventName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventName: %w", err)
	}
	return oldValue.EventName, nil
}

// ResetEventName resets all changes to the "event_name" field.
func (m *MeterMutation) ResetEventName() {
	m.event_name = nil
}

// SetName sets the "name" field.
func (m *MeterMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MeterMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MeterMutation) ResetName() {
	m.name = nil
}

// SetAggregation sets the "aggregation" field.
func (m *MeterMutation) SetAggregation(sa schema.MeterAggregation) {
	m.aggregation = &sa
}

// Aggregation returns the value of the "aggregation" field in the mutation.
func (m *MeterMutation) Aggregation() (r schema.MeterAggregation, exists bool) {
	v := m.aggregation
	if v == nil {
		return
	}
	return *v, true
}

// OldAggregation returns the old "aggregation" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldAggregation(ctx context.Context) (v schema.MeterAggregation, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAggregation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAggregation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAggregation: %w", err)
	}
	return oldValue.Aggregation, nil
}

// ResetAggregation resets all changes to the "aggregation" field.
func (m *MeterMutation) ResetAggregation() {
	m.aggregation = nil
}

// SetFilters sets the "filters" field.
func (m *MeterMutation) SetFilters(sf []schema.MeterFilter) {
	m.filters = &sf
	m.appendfilters = nil
}

// Filters returns the value of the "filters" field in the mutation.
func (m *MeterMutation) Filters() (r []schema.MeterFilter, exists bool) {
	v := m.filters
	if v == nil {
		return
	}
	return *v, true
}

// OldFilters returns the old "filters" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldFilters(ctx context.Context) (v []schema.MeterFilter, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilters is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilters requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilters: %w", err)
	}
	return oldValue.Filters, nil
}

// AppendFilters adds sf to the "filters" field.
func (m *MeterMutation) AppendFilters(sf []schema.MeterFilter) {
	m.appendfilters = append(m.appendfilters, sf...)
}

// AppendedFilters returns the list of values that were appended to the "filters" field in this mutation.
func (m *MeterMutation) AppendedFilters() ([]schema.MeterFilter, bool) {
	if len(m.appendfilters) == 0 {
		return nil, false
	}
	return m.appendfilters, true
}

// ResetFilters resets all changes to the "filters" field.
func (m *MeterMutation) ResetFilters() {
	m.filters = nil
	m.appendfilters = nil
}

// SetResetUsage sets the "reset_usage" field.
func (m *MeterMutation) SetResetUsage(s string) {
	m.reset_usage = &s
}

// ResetUsage returns the value of the "reset_usage" field in the mutation.
func (m *MeterMutation) ResetUsage() (r string, exists bool) {
	v := m.reset_usage
	if v == nil {
		return
	}
	return *v, true
}

// OldResetUsage returns the old "reset_usage" field's value of the Meter entity.
// If the Meter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeterMutation) OldResetUsage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResetUsage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResetUsage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetUsage: %w", err)
	}
	return oldValue.ResetUsage, nil
}

// ResetResetUsage resets all changes to the "reset_usage" field.
func (m *MeterMutation) ResetResetUsage() {
	m.reset_usage = nil
}

// AddCostsheetIDs adds the "costsheet" edge to the Costsheet entity by ids.
func (m *MeterMutation) AddCostsheetIDs(ids ...string) {
	if m.costsheet == nil {
		m.costsheet = make(map[string]struct{})
	}
	for i := range ids {
		m.costsheet[ids[i]] = struct{}{}
	}
}

// ClearCostsheet clears the "costsheet" edge to the Costsheet entity.
func (m *MeterMutation) ClearCostsheet() {
	m.clearedcostsheet = true
}

// CostsheetCleared reports if the "costsheet" edge to the Costsheet entity was cleared.
func (m *MeterMutation) CostsheetCleared() bool {
	return m.clearedcostsheet
}

// RemoveCostsheetIDs removes the "costsheet" edge to the Costsheet entity by IDs.
func (m *MeterMutation) RemoveCostsheetIDs(ids ...string) {
	if m.removedcostsheet == nil {
		m.removedcostsheet = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.costsheet, ids[i])
		m.removedcostsheet[ids[i]] = struct{}{}
	}
}

// RemovedCostsheet returns the removed IDs of the "costsheet" edge to the Costsheet entity.
func (m *MeterMutation) RemovedCostsheetIDs() (ids []string) {
	for id := range m.removedcostsheet {
		ids = append(ids, id)
	}
	return
}

// CostsheetIDs returns the "costsheet" edge IDs in the mutation.
func (m *MeterMutation) CostsheetIDs() (ids []string) {
	for id := range m.costsheet {
		ids = append(ids, id)
	}
	return
}

// ResetCostsheet resets all changes to the "costsheet" edge.
func (m *MeterMutation) ResetCostsheet() {
	m.costsheet = nil
	m.clearedcostsheet = false
	m.removedcostsheet = nil
}

// Where appends a list predicates to the MeterMutation builder.
func (m *MeterMutation) Where(ps ...predicate.Meter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MeterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MeterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Meter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MeterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MeterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Meter).
func (m *MeterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MeterMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.tenant_id != nil {
		fields = append(fields, meter.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, meter.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, meter.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, meter.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, meter.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, meter.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, meter.FieldEnvironmentID)
	}
	if m.event_name != nil {
		fields = append(fields, meter.FieldEventName)
	}
	if m.name != nil {
		fields = append(fields, meter.FieldName)
	}
	if m.aggregation != nil {
		fields = append(fields, meter.FieldAggregation)
	}
	if m.filters != nil {
		fields = append(fields, meter.FieldFilters)
	}
	if m.reset_usage != nil {
		fields = append(fields, meter.FieldResetUsage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MeterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case meter.FieldTenantID:
		return m.TenantID()
	case meter.FieldStatus:
		return m.Status()
	case meter.FieldCreatedAt:
		return m.CreatedAt()
	case meter.FieldUpdatedAt:
		return m.UpdatedAt()
	case meter.FieldCreatedBy:
		return m.CreatedBy()
	case meter.FieldUpdatedBy:
		return m.UpdatedBy()
	case meter.FieldEnvironmentID:
		return m.EnvironmentID()
	case meter.FieldEventName:
		return m.EventName()
	case meter.FieldName:
		return m.Name()
	case meter.FieldAggregation:
		return m.Aggregation()
	case meter.FieldFilters:
		return m.Filters()
	case meter.FieldResetUsage:
		return m.ResetUsage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MeterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case meter.FieldTenantID:
		return m.OldTenantID(ctx)
	case meter.FieldStatus:
		return m.OldStatus(ctx)
	case meter.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case meter.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case meter.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case meter.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case meter.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case meter.FieldEventName:
		return m.OldEventName(ctx)
	case meter.FieldName:
		return m.OldName(ctx)
	case meter.FieldAggregation:
		return m.OldAggregation(ctx)
	case meter.FieldFilters:
		return m.OldFilters(ctx)
	case meter.FieldResetUsage:
		return m.OldResetUsage(ctx)
	}
	return nil, fmt.Errorf("unknown Meter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case meter.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case meter.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case meter.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case meter.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case meter.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case meter.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case meter.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case meter.FieldEventName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventName(v)
		return nil
	case meter.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case meter.FieldAggregation:
		v, ok := value.(schema.MeterAggregation)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAggregation(v)
		return nil
	case meter.FieldFilters:
		v, ok := value.([]schema.MeterFilter)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilters(v)
		return nil
	case meter.FieldResetUsage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetUsage(v)
		return nil
	}
	return fmt.Errorf("unknown Meter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MeterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MeterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Meter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MeterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(meter.FieldCreatedBy) {
		fields = append(fields, meter.FieldCreatedBy)
	}
	if m.FieldCleared(meter.FieldUpdatedBy) {
		fields = append(fields, meter.FieldUpdatedBy)
	}
	if m.FieldCleared(meter.FieldEnvironmentID) {
		fields = append(fields, meter.FieldEnvironmentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MeterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MeterMutation) ClearField(name string) error {
	switch name {
	case meter.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case meter.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case meter.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	}
	return fmt.Errorf("unknown Meter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MeterMutation) ResetField(name string) error {
	switch name {
	case meter.FieldTenantID:
		m.ResetTenantID()
		return nil
	case meter.FieldStatus:
		m.ResetStatus()
		return nil
	case meter.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case meter.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case meter.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case meter.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case meter.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case meter.FieldEventName:
		m.ResetEventName()
		return nil
	case meter.FieldName:
		m.ResetName()
		return nil
	case meter.FieldAggregation:
		m.ResetAggregation()
		return nil
	case meter.FieldFilters:
		m.ResetFilters()
		return nil
	case meter.FieldResetUsage:
		m.ResetResetUsage()
		return nil
	}
	return fmt.Errorf("unknown Meter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MeterMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.costsheet != nil {
		edges = append(edges, meter.EdgeCostsheet)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MeterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case meter.EdgeCostsheet:
		ids := make([]ent.Value, 0, len(m.costsheet))
		for id := range m.costsheet {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MeterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcostsheet != nil {
		edges = append(edges, meter.EdgeCostsheet)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MeterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case meter.EdgeCostsheet:
		ids := make([]ent.Value, 0, len(m.removedcostsheet))
		for id := range m.removedcostsheet {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MeterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcostsheet {
		edges = append(edges, meter.EdgeCostsheet)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MeterMutation) EdgeCleared(name string) bool {
	switch name {
	case meter.EdgeCostsheet:
		return m.clearedcostsheet
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MeterMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Meter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MeterMutation) ResetEdge(name string) error {
	switch name {
	case meter.EdgeCostsheet:
		m.ResetCostsheet()
		return nil
	}
	return fmt.Errorf("unknown Meter edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	tenant_id           *string
	status              *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	environment_id      *string
	idempotency_key     *string
	destination_type    *string
	destination_id      *string
	payment_method_type *string
	payment_method_id   *string
	payment_gateway     *string
	gateway_payment_id  *string
	amount              *decimal.Decimal
	currency            *string
	payment_status      *string
	track_attempts      *bool
	metadata            *map[string]string
	succeeded_at        *time.Time
	failed_at           *time.Time
	refunded_at         *time.Time
	recorded_at         *time.Time
	error_message       *string
	clearedFields       map[string]struct{}
	attempts            map[string]struct{}
	removedattempts     map[string]struct{}
	clearedattempts     bool
	done                bool
	oldValue            func(context.Context) (*Payment, error)
	predicates          []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id string) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Payment entities.
func (m *PaymentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *PaymentMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *PaymentMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *PaymentMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *PaymentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PaymentMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PaymentMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PaymentMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[payment.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PaymentMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[payment.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PaymentMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, payment.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PaymentMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PaymentMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PaymentMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[payment.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PaymentMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[payment.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PaymentMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, payment.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *PaymentMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *PaymentMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *PaymentMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[payment.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *PaymentMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *PaymentMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, payment.FieldEnvironmentID)
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *PaymentMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *PaymentMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldIdempotencyKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *PaymentMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
}

// SetDestinationType sets the "destination_type" field.
func (m *PaymentMutation) SetDestinationType(s string) {
	m.destination_type = &s
}

// DestinationType returns the value of the "destination_type" field in the mutation.
func (m *PaymentMutation) DestinationType() (r string, exists bool) {
	v := m.destination_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationType returns the old "destination_type" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDestinationType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationType: %w", err)
	}
	return oldValue.DestinationType, nil
}

// ResetDestinationType resets all changes to the "destination_type" field.
func (m *PaymentMutation) ResetDestinationType() {
	m.destination_type = nil
}

// SetDestinationID sets the "destination_id" field.
func (m *PaymentMutation) SetDestinationID(s string) {
	m.destination_id = &s
}

// DestinationID returns the value of the "destination_id" field in the mutation.
func (m *PaymentMutation) DestinationID() (r string, exists bool) {
	v := m.destination_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationID returns the old "destination_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDestinationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationID: %w", err)
	}
	return oldValue.DestinationID, nil
}

// ResetDestinationID resets all changes to the "destination_id" field.
func (m *PaymentMutation) ResetDestinationID() {
	m.destination_id = nil
}

// SetPaymentMethodType sets the "payment_method_type" field.
func (m *PaymentMutation) SetPaymentMethodType(s string) {
	m.payment_method_type = &s
}

// PaymentMethodType returns the value of the "payment_method_type" field in the mutation.
func (m *PaymentMutation) PaymentMethodType() (r string, exists bool) {
	v := m.payment_method_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethodType returns the old "payment_method_type" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentMethodType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentMethodType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentMethodType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethodType: %w", err)
	}
	return oldValue.PaymentMethodType, nil
}

// ResetPaymentMethodType resets all changes to the "payment_method_type" field.
func (m *PaymentMutation) ResetPaymentMethodType() {
	m.payment_method_type = nil
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (m *PaymentMutation) SetPaymentMethodID(s string) {
	m.payment_method_id = &s
}

// PaymentMethodID returns the value of the "payment_method_id" field in the mutation.
func (m *PaymentMutation) PaymentMethodID() (r string, exists bool) {
	v := m.payment_method_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethodID returns the old "payment_method_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentMethodID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentMethodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentMethodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethodID: %w", err)
	}
	return oldValue.PaymentMethodID, nil
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (m *PaymentMutation) ClearPaymentMethodID() {
	m.payment_method_id = nil
	m.clearedFields[payment.FieldPaymentMethodID] = struct{}{}
}

// PaymentMethodIDCleared returns if the "payment_method_id" field was cleared in this mutation.
func (m *PaymentMutation) PaymentMethodIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentMethodID]
	return ok
}

// ResetPaymentMethodID resets all changes to the "payment_method_id" field.
func (m *PaymentMutation) ResetPaymentMethodID() {
	m.payment_method_id = nil
	delete(m.clearedFields, payment.FieldPaymentMethodID)
}

// SetPaymentGateway sets the "payment_gateway" field.
func (m *PaymentMutation) SetPaymentGateway(s string) {
	m.payment_gateway = &s
}

// PaymentGateway returns the value of the "payment_gateway" field in the mutation.
func (m *PaymentMutation) PaymentGateway() (r string, exists bool) {
	v := m.payment_gateway
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentGateway returns the old "payment_gateway" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentGateway(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentGateway is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentGateway requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentGateway: %w", err)
	}
	return oldValue.PaymentGateway, nil
}

// ClearPaymentGateway clears the value of the "payment_gateway" field.
func (m *PaymentMutation) ClearPaymentGateway() {
	m.payment_gateway = nil
	m.clearedFields[payment.FieldPaymentGateway] = struct{}{}
}

// PaymentGatewayCleared returns if the "payment_gateway" field was cleared in this mutation.
func (m *PaymentMutation) PaymentGatewayCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentGateway]
	return ok
}

// ResetPaymentGateway resets all changes to the "payment_gateway" field.
func (m *PaymentMutation) ResetPaymentGateway() {
	m.payment_gateway = nil
	delete(m.clearedFields, payment.FieldPaymentGateway)
}

// SetGatewayPaymentID sets the "gateway_payment_id" field.
func (m *PaymentMutation) SetGatewayPaymentID(s string) {
	m.gateway_payment_id = &s
}

// GatewayPaymentID returns the value of the "gateway_payment_id" field in the mutation.
func (m *PaymentMutation) GatewayPaymentID() (r string, exists bool) {
	v := m.gateway_payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayPaymentID returns the old "gateway_payment_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldGatewayPaymentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayPaymentID: %w", err)
	}
	return oldValue.GatewayPaymentID, nil
}

// ClearGatewayPaymentID clears the value of the "gateway_payment_id" field.
func (m *PaymentMutation) ClearGatewayPaymentID() {
	m.gateway_payment_id = nil
	m.clearedFields[payment.FieldGatewayPaymentID] = struct{}{}
}

// GatewayPaymentIDCleared returns if the "gateway_payment_id" field was cleared in this mutation.
func (m *PaymentMutation) GatewayPaymentIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldGatewayPaymentID]
	return ok
}

// ResetGatewayPaymentID resets all changes to the "gateway_payment_id" field.
func (m *PaymentMutation) ResetGatewayPaymentID() {
	m.gateway_payment_id = nil
	delete(m.clearedFields, payment.FieldGatewayPaymentID)
}

// SetAmount sets the "amount" field.
func (m *PaymentMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentMutation) ResetAmount() {
	m.amount = nil
}

// SetCurrency sets the "currency" field.
func (m *PaymentMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *PaymentMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *PaymentMutation) ResetCurrency() {
	m.currency = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *PaymentMutation) SetPaymentStatus(s string) {
	m.payment_status = &s
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *PaymentMutation) PaymentStatus() (r string, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *PaymentMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetTrackAttempts sets the "track_attempts" field.
func (m *PaymentMutation) SetTrackAttempts(b bool) {
	m.track_attempts = &b
}

// TrackAttempts returns the value of the "track_attempts" field in the mutation.
func (m *PaymentMutation) TrackAttempts() (r bool, exists bool) {
	v := m.track_attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackAttempts returns the old "track_attempts" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldTrackAttempts(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrackAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrackAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackAttempts: %w", err)
	}
	return oldValue.TrackAttempts, nil
}

// ResetTrackAttempts resets all changes to the "track_attempts" field.
func (m *PaymentMutation) ResetTrackAttempts() {
	m.track_attempts = nil
}

// SetMetadata sets the "metadata" field.
func (m *PaymentMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *PaymentMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *PaymentMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[payment.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *PaymentMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[payment.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *PaymentMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, payment.FieldMetadata)
}

// SetSucceededAt sets the "succeeded_at" field.
func (m *PaymentMutation) SetSucceededAt(t time.Time) {
	m.succeeded_at = &t
}

// SucceededAt returns the value of the "succeeded_at" field in the mutation.
func (m *PaymentMutation) SucceededAt() (r time.Time, exists bool) {
	v := m.succeeded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSucceededAt returns the old "succeeded_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldSucceededAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSucceededAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSucceededAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSucceededAt: %w", err)
	}
	return oldValue.SucceededAt, nil
}

// ClearSucceededAt clears the value of the "succeeded_at" field.
func (m *PaymentMutation) ClearSucceededAt() {
	m.succeeded_at = nil
	m.clearedFields[payment.FieldSucceededAt] = struct{}{}
}

// SucceededAtCleared returns if the "succeeded_at" field was cleared in this mutation.
func (m *PaymentMutation) SucceededAtCleared() bool {
	_, ok := m.clearedFields[payment.FieldSucceededAt]
	return ok
}

// ResetSucceededAt resets all changes to the "succeeded_at" field.
func (m *PaymentMutation) ResetSucceededAt() {
	m.succeeded_at = nil
	delete(m.clearedFields, payment.FieldSucceededAt)
}

// SetFailedAt sets the "failed_at" field.
func (m *PaymentMutation) SetFailedAt(t time.Time) {
	m.failed_at = &t
}

// FailedAt returns the value of the "failed_at" field in the mutation.
func (m *PaymentMutation) FailedAt() (r time.Time, exists bool) {
	v := m.failed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFailedAt returns the old "failed_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldFailedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailedAt: %w", err)
	}
	return oldValue.FailedAt, nil
}

// ClearFailedAt clears the value of the "failed_at" field.
func (m *PaymentMutation) ClearFailedAt() {
	m.failed_at = nil
	m.clearedFields[payment.FieldFailedAt] = struct{}{}
}

// FailedAtCleared returns if the "failed_at" field was cleared in this mutation.
func (m *PaymentMutation) FailedAtCleared() bool {
	_, ok := m.clearedFields[payment.FieldFailedAt]
	return ok
}

// ResetFailedAt resets all changes to the "failed_at" field.
func (m *PaymentMutation) ResetFailedAt() {
	m.failed_at = nil
	delete(m.clearedFields, payment.FieldFailedAt)
}

// SetRefundedAt sets the "refunded_at" field.
func (m *PaymentMutation) SetRefundedAt(t time.Time) {
	m.refunded_at = &t
}

// RefundedAt returns the value of the "refunded_at" field in the mutation.
func (m *PaymentMutation) RefundedAt() (r time.Time, exists bool) {
	v := m.refunded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundedAt returns the old "refunded_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldRefundedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundedAt: %w", err)
	}
	return oldValue.RefundedAt, nil
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (m *PaymentMutation) ClearRefundedAt() {
	m.refunded_at = nil
	m.clearedFields[payment.FieldRefundedAt] = struct{}{}
}

// RefundedAtCleared returns if the "refunded_at" field was cleared in this mutation.
func (m *PaymentMutation) RefundedAtCleared() bool {
	_, ok := m.clearedFields[payment.FieldRefundedAt]
	return ok
}

// ResetRefundedAt resets all changes to the "refunded_at" field.
func (m *PaymentMutation) ResetRefundedAt() {
	m.refunded_at = nil
	delete(m.clearedFields, payment.FieldRefundedAt)
}

// SetRecordedAt sets the "recorded_at" field.
func (m *PaymentMutation) SetRecordedAt(t time.Time) {
	m.recorded_at = &t
}

// RecordedAt returns the value of the "recorded_at" field in the mutation.
func (m *PaymentMutation) RecordedAt() (r time.Time, exists bool) {
	v := m.recorded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordedAt returns the old "recorded_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldRecordedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecordedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecordedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordedAt: %w", err)
	}
	return oldValue.RecordedAt, nil
}

// ClearRecordedAt clears the value of the "recorded_at" field.
func (m *PaymentMutation) ClearRecordedAt() {
	m.recorded_at = nil
	m.clearedFields[payment.FieldRecordedAt] = struct{}{}
}

// RecordedAtCleared returns if the "recorded_at" field was cleared in this mutation.
func (m *PaymentMutation) RecordedAtCleared() bool {
	_, ok := m.clearedFields[payment.FieldRecordedAt]
	return ok
}

// ResetRecordedAt resets all changes to the "recorded_at" field.
func (m *PaymentMutation) ResetRecordedAt() {
	m.recorded_at = nil
	delete(m.clearedFields, payment.FieldRecordedAt)
}

// SetErrorMessage sets the "error_message" field.
func (m *PaymentMutation) SetErrorMessage(s string) {
	m.error_message = &s
}

// ErrorMessage returns the value of the "error_message" field in the mutation.
func (m *PaymentMutation) ErrorMessage() (r string, exists bool) {
	v := m.error_message
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorMessage returns the old "error_message" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldErrorMessage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorMessage: %w", err)
	}
	return oldValue.ErrorMessage, nil
}

// ClearErrorMessage clears the value of the "error_message" field.
func (m *PaymentMutation) ClearErrorMessage() {
	m.error_message = nil
	m.clearedFields[payment.FieldErrorMessage] = struct{}{}
}

// ErrorMessageCleared returns if the "error_message" field was cleared in this mutation.
func (m *PaymentMutation) ErrorMessageCleared() bool {
	_, ok := m.clearedFields[payment.FieldErrorMessage]
	return ok
}

// ResetErrorMessage resets all changes to the "error_message" field.
func (m *PaymentMutation) ResetErrorMessage() {
	m.error_message = nil
	delete(m.clearedFields, payment.FieldErrorMessage)
}

// AddAttemptIDs adds the "attempts" edge to the PaymentAttempt entity by ids.
func (m *PaymentMutation) AddAttemptIDs(ids ...string) {
	if m.attempts == nil {
		m.attempts = make(map[string]struct{})
	}
	for i := range ids {
		m.attempts[ids[i]] = struct{}{}
	}
}

// ClearAttempts clears the "attempts" edge to the PaymentAttempt entity.
func (m *PaymentMutation) ClearAttempts() {
	m.clearedattempts = true
}

// AttemptsCleared reports if the "attempts" edge to the PaymentAttempt entity was cleared.
func (m *PaymentMutation) AttemptsCleared() bool {
	return m.clearedattempts
}

// RemoveAttemptIDs removes the "attempts" edge to the PaymentAttempt entity by IDs.
func (m *PaymentMutation) RemoveAttemptIDs(ids ...string) {
	if m.removedattempts == nil {
		m.removedattempts = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.attempts, ids[i])
		m.removedattempts[ids[i]] = struct{}{}
	}
}

// RemovedAttempts returns the removed IDs of the "attempts" edge to the PaymentAttempt entity.
func (m *PaymentMutation) RemovedAttemptsIDs() (ids []string) {
	for id := range m.removedattempts {
		ids = append(ids, id)
	}
	return
}

// AttemptsIDs returns the "attempts" edge IDs in the mutation.
func (m *PaymentMutation) AttemptsIDs() (ids []string) {
	for id := range m.attempts {
		ids = append(ids, id)
	}
	return
}

// ResetAttempts resets all changes to the "attempts" edge.
func (m *PaymentMutation) ResetAttempts() {
	m.attempts = nil
	m.clearedattempts = false
	m.removedattempts = nil
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Payment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.tenant_id != nil {
		fields = append(fields, payment.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, payment.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, payment.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, payment.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, payment.FieldEnvironmentID)
	}
	if m.idempotency_key != nil {
		fields = append(fields, payment.FieldIdempotencyKey)
	}
	if m.destination_type != nil {
		fields = append(fields, payment.FieldDestinationType)
	}
	if m.destination_id != nil {
		fields = append(fields, payment.FieldDestinationID)
	}
	if m.payment_method_type != nil {
		fields = append(fields, payment.FieldPaymentMethodType)
	}
	if m.payment_method_id != nil {
		fields = append(fields, payment.FieldPaymentMethodID)
	}
	if m.payment_gateway != nil {
		fields = append(fields, payment.FieldPaymentGateway)
	}
	if m.gateway_payment_id != nil {
		fields = append(fields, payment.FieldGatewayPaymentID)
	}
	if m.amount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.currency != nil {
		fields = append(fields, payment.FieldCurrency)
	}
	if m.payment_status != nil {
		fields = append(fields, payment.FieldPaymentStatus)
	}
	if m.track_attempts != nil {
		fields = append(fields, payment.FieldTrackAttempts)
	}
	if m.metadata != nil {
		fields = append(fields, payment.FieldMetadata)
	}
	if m.succeeded_at != nil {
		fields = append(fields, payment.FieldSucceededAt)
	}
	if m.failed_at != nil {
		fields = append(fields, payment.FieldFailedAt)
	}
	if m.refunded_at != nil {
		fields = append(fields, payment.FieldRefundedAt)
	}
	if m.recorded_at != nil {
		fields = append(fields, payment.FieldRecordedAt)
	}
	if m.error_message != nil {
		fields = append(fields, payment.FieldErrorMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldTenantID:
		return m.TenantID()
	case payment.FieldStatus:
		return m.Status()
	case payment.FieldCreatedAt:
		return m.CreatedAt()
	case payment.FieldUpdatedAt:
		return m.UpdatedAt()
	case payment.FieldCreatedBy:
		return m.CreatedBy()
	case payment.FieldUpdatedBy:
		return m.UpdatedBy()
	case payment.FieldEnvironmentID:
		return m.EnvironmentID()
	case payment.FieldIdempotencyKey:
		return m.IdempotencyKey()
	case payment.FieldDestinationType:
		return m.DestinationType()
	case payment.FieldDestinationID:
		return m.DestinationID()
	case payment.FieldPaymentMethodType:
		return m.PaymentMethodType()
	case payment.FieldPaymentMethodID:
		return m.PaymentMethodID()
	case payment.FieldPaymentGateway:
		return m.PaymentGateway()
	case payment.FieldGatewayPaymentID:
		return m.GatewayPaymentID()
	case payment.FieldAmount:
		return m.Amount()
	case payment.FieldCurrency:
		return m.Currency()
	case payment.FieldPaymentStatus:
		return m.PaymentStatus()
	case payment.FieldTrackAttempts:
		return m.TrackAttempts()
	case payment.FieldMetadata:
		return m.Metadata()
	case payment.FieldSucceededAt:
		return m.SucceededAt()
	case payment.FieldFailedAt:
		return m.FailedAt()
	case payment.FieldRefundedAt:
		return m.RefundedAt()
	case payment.FieldRecordedAt:
		return m.RecordedAt()
	case payment.FieldErrorMessage:
		return m.ErrorMessage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldTenantID:
		return m.OldTenantID(ctx)
	case payment.FieldStatus:
		return m.OldStatus(ctx)
	case payment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case payment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case payment.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case payment.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case payment.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case payment.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	case payment.FieldDestinationType:
		return m.OldDestinationType(ctx)
	case payment.FieldDestinationID:
		return m.OldDestinationID(ctx)
	case payment.FieldPaymentMethodType:
		return m.OldPaymentMethodType(ctx)
	case payment.FieldPaymentMethodID:
		return m.OldPaymentMethodID(ctx)
	case payment.FieldPaymentGateway:
		return m.OldPaymentGateway(ctx)
	case payment.FieldGatewayPaymentID:
		return m.OldGatewayPaymentID(ctx)
	case payment.FieldAmount:
		return m.OldAmount(ctx)
	case payment.FieldCurrency:
		return m.OldCurrency(ctx)
	case payment.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case payment.FieldTrackAttempts:
		return m.OldTrackAttempts(ctx)
	case payment.FieldMetadata:
		return m.OldMetadata(ctx)
	case payment.FieldSucceededAt:
		return m.OldSucceededAt(ctx)
	case payment.FieldFailedAt:
		return m.OldFailedAt(ctx)
	case payment.FieldRefundedAt:
		return m.OldRefundedAt(ctx)
	case payment.FieldRecordedAt:
		return m.OldRecordedAt(ctx)
	case payment.FieldErrorMessage:
		return m.OldErrorMessage(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case payment.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case payment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case payment.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case payment.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case payment.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case payment.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	case payment.FieldDestinationType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationType(v)
		return nil
	case payment.FieldDestinationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationID(v)
		return nil
	case payment.FieldPaymentMethodType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethodType(v)
		return nil
	case payment.FieldPaymentMethodID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethodID(v)
		return nil
	case payment.FieldPaymentGateway:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentGateway(v)
		return nil
	case payment.FieldGatewayPaymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayPaymentID(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case payment.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case payment.FieldPaymentStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case payment.FieldTrackAttempts:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackAttempts(v)
		return nil
	case payment.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case payment.FieldSucceededAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSucceededAt(v)
		return nil
	case payment.FieldFailedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailedAt(v)
		return nil
	case payment.FieldRefundedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundedAt(v)
		return nil
	case payment.FieldRecordedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordedAt(v)
		return nil
	case payment.FieldErrorMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(payment.FieldCreatedBy) {
		fields = append(fields, payment.FieldCreatedBy)
	}
	if m.FieldCleared(payment.FieldUpdatedBy) {
		fields = append(fields, payment.FieldUpdatedBy)
	}
	if m.FieldCleared(payment.FieldEnvironmentID) {
		fields = append(fields, payment.FieldEnvironmentID)
	}
	if m.FieldCleared(payment.FieldPaymentMethodID) {
		fields = append(fields, payment.FieldPaymentMethodID)
	}
	if m.FieldCleared(payment.FieldPaymentGateway) {
		fields = append(fields, payment.FieldPaymentGateway)
	}
	if m.FieldCleared(payment.FieldGatewayPaymentID) {
		fields = append(fields, payment.FieldGatewayPaymentID)
	}
	if m.FieldCleared(payment.FieldMetadata) {
		fields = append(fields, payment.FieldMetadata)
	}
	if m.FieldCleared(payment.FieldSucceededAt) {
		fields = append(fields, payment.FieldSucceededAt)
	}
	if m.FieldCleared(payment.FieldFailedAt) {
		fields = append(fields, payment.FieldFailedAt)
	}
	if m.FieldCleared(payment.FieldRefundedAt) {
		fields = append(fields, payment.FieldRefundedAt)
	}
	if m.FieldCleared(payment.FieldRecordedAt) {
		fields = append(fields, payment.FieldRecordedAt)
	}
	if m.FieldCleared(payment.FieldErrorMessage) {
		fields = append(fields, payment.FieldErrorMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	switch name {
	case payment.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case payment.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case payment.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case payment.FieldPaymentMethodID:
		m.ClearPaymentMethodID()
		return nil
	case payment.FieldPaymentGateway:
		m.ClearPaymentGateway()
		return nil
	case payment.FieldGatewayPaymentID:
		m.ClearGatewayPaymentID()
		return nil
	case payment.FieldMetadata:
		m.ClearMetadata()
		return nil
	case payment.FieldSucceededAt:
		m.ClearSucceededAt()
		return nil
	case payment.FieldFailedAt:
		m.ClearFailedAt()
		return nil
	case payment.FieldRefundedAt:
		m.ClearRefundedAt()
		return nil
	case payment.FieldRecordedAt:
		m.ClearRecordedAt()
		return nil
	case payment.FieldErrorMessage:
		m.ClearErrorMessage()
		return nil
	}
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldTenantID:
		m.ResetTenantID()
		return nil
	case payment.FieldStatus:
		m.ResetStatus()
		return nil
	case payment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case payment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case payment.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case payment.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case payment.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case payment.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	case payment.FieldDestinationType:
		m.ResetDestinationType()
		return nil
	case payment.FieldDestinationID:
		m.ResetDestinationID()
		return nil
	case payment.FieldPaymentMethodType:
		m.ResetPaymentMethodType()
		return nil
	case payment.FieldPaymentMethodID:
		m.ResetPaymentMethodID()
		return nil
	case payment.FieldPaymentGateway:
		m.ResetPaymentGateway()
		return nil
	case payment.FieldGatewayPaymentID:
		m.ResetGatewayPaymentID()
		return nil
	case payment.FieldAmount:
		m.ResetAmount()
		return nil
	case payment.FieldCurrency:
		m.ResetCurrency()
		return nil
	case payment.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case payment.FieldTrackAttempts:
		m.ResetTrackAttempts()
		return nil
	case payment.FieldMetadata:
		m.ResetMetadata()
		return nil
	case payment.FieldSucceededAt:
		m.ResetSucceededAt()
		return nil
	case payment.FieldFailedAt:
		m.ResetFailedAt()
		return nil
	case payment.FieldRefundedAt:
		m.ResetRefundedAt()
		return nil
	case payment.FieldRecordedAt:
		m.ResetRecordedAt()
		return nil
	case payment.FieldErrorMessage:
		m.ResetErrorMessage()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attempts != nil {
		edges = append(edges, payment.EdgeAttempts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case payment.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.attempts))
		for id := range m.attempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedattempts != nil {
		edges = append(edges, payment.EdgeAttempts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case payment.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.removedattempts))
		for id := range m.removedattempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattempts {
		edges = append(edges, payment.EdgeAttempts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	switch name {
	case payment.EdgeAttempts:
		return m.clearedattempts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	switch name {
	case payment.EdgeAttempts:
		m.ResetAttempts()
		return nil
	}
	return fmt.Errorf("unknown Payment edge %s", name)
}

// PaymentAttemptMutation represents an operation that mutates the PaymentAttempt nodes in the graph.
type PaymentAttemptMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	tenant_id          *string
	status             *string
	created_at         *time.Time
	updated_at         *time.Time
	created_by         *string
	updated_by         *string
	environment_id     *string
	payment_status     *string
	attempt_number     *int
	addattempt_number  *int
	gateway_attempt_id *string
	error_message      *string
	metadata           *map[string]string
	clearedFields      map[string]struct{}
	payment            *string
	clearedpayment     bool
	done               bool
	oldValue           func(context.Context) (*PaymentAttempt, error)
	predicates         []predicate.PaymentAttempt
}

var _ ent.Mutation = (*PaymentAttemptMutation)(nil)

// paymentattemptOption allows management of the mutation configuration using functional options.
type paymentattemptOption func(*PaymentAttemptMutation)

// newPaymentAttemptMutation creates new mutation for the PaymentAttempt entity.
func newPaymentAttemptMutation(c config, op Op, opts ...paymentattemptOption) *PaymentAttemptMutation {
	m := &PaymentAttemptMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentAttemptID sets the ID field of the mutation.
func withPaymentAttemptID(id string) paymentattemptOption {
	return func(m *PaymentAttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentAttempt
		)
		m.oldValue = func(ctx context.Context) (*PaymentAttempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentAttempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentAttempt sets the old PaymentAttempt of the mutation.
func withPaymentAttempt(node *PaymentAttempt) paymentattemptOption {
	return func(m *PaymentAttemptMutation) {
		m.oldValue = func(context.Context) (*PaymentAttempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentAttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentAttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PaymentAttempt entities.
func (m *PaymentAttemptMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentAttemptMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentAttemptMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentAttempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *PaymentAttemptMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *PaymentAttemptMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *PaymentAttemptMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *PaymentAttemptMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentAttemptMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentAttemptMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentAttemptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentAttemptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentAttemptMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentAttemptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentAttemptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentAttemptMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PaymentAttemptMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PaymentAttemptMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PaymentAttemptMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[paymentattempt.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PaymentAttemptMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PaymentAttemptMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, paymentattempt.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PaymentAttemptMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PaymentAttemptMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PaymentAttemptMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[paymentattempt.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PaymentAttemptMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PaymentAttemptMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, paymentattempt.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *PaymentAttemptMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *PaymentAttemptMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *PaymentAttemptMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[paymentattempt.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *PaymentAttemptMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *PaymentAttemptMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, paymentattempt.FieldEnvironmentID)
}

// SetPaymentID sets the "payment_id" field.
func (m *PaymentAttemptMutation) SetPaymentID(s string) {
	m.payment = &s
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *PaymentAttemptMutation) PaymentID() (r string, exists bool) {
	v := m.payment
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldPaymentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *PaymentAttemptMutation) ResetPaymentID() {
	m.payment = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *PaymentAttemptMutation) SetPaymentStatus(s string) {
	m.payment_status = &s
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *PaymentAttemptMutation) PaymentStatus() (r string, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldPaymentStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *PaymentAttemptMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetAttemptNumber sets the "attempt_number" field.
func (m *PaymentAttemptMutation) SetAttemptNumber(i int) {
	m.attempt_number = &i
	m.addattempt_number = nil
}

// AttemptNumber returns the value of the "attempt_number" field in the mutation.
func (m *PaymentAttemptMutation) AttemptNumber() (r int, exists bool) {
	v := m.attempt_number
	if v == nil {
		return
	}
	return *v, true
}

// OldAttemptNumber returns the old "attempt_number" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldAttemptNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttemptNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttemptNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttemptNumber: %w", err)
	}
	return oldValue.AttemptNumber, nil
}

// AddAttemptNumber adds i to the "attempt_number" field.
func (m *PaymentAttemptMutation) AddAttemptNumber(i int) {
	if m.addattempt_number != nil {
		*m.addattempt_number += i
	} else {
		m.addattempt_number = &i
	}
}

// AddedAttemptNumber returns the value that was added to the "attempt_number" field in this mutation.
func (m *PaymentAttemptMutation) AddedAttemptNumber() (r int, exists bool) {
	v := m.addattempt_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttemptNumber resets all changes to the "attempt_number" field.
func (m *PaymentAttemptMutation) ResetAttemptNumber() {
	m.attempt_number = nil
	m.addattempt_number = nil
}

// SetGatewayAttemptID sets the "gateway_attempt_id" field.
func (m *PaymentAttemptMutation) SetGatewayAttemptID(s string) {
	m.gateway_attempt_id = &s
}

// GatewayAttemptID returns the value of the "gateway_attempt_id" field in the mutation.
func (m *PaymentAttemptMutation) GatewayAttemptID() (r string, exists bool) {
	v := m.gateway_attempt_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayAttemptID returns the old "gateway_attempt_id" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldGatewayAttemptID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayAttemptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayAttemptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayAttemptID: %w", err)
	}
	return oldValue.GatewayAttemptID, nil
}

// ClearGatewayAttemptID clears the value of the "gateway_attempt_id" field.
func (m *PaymentAttemptMutation) ClearGatewayAttemptID() {
	m.gateway_attempt_id = nil
	m.clearedFields[paymentattempt.FieldGatewayAttemptID] = struct{}{}
}

// GatewayAttemptIDCleared returns if the "gateway_attempt_id" field was cleared in this mutation.
func (m *PaymentAttemptMutation) GatewayAttemptIDCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldGatewayAttemptID]
	return ok
}

// ResetGatewayAttemptID resets all changes to the "gateway_attempt_id" field.
func (m *PaymentAttemptMutation) ResetGatewayAttemptID() {
	m.gateway_attempt_id = nil
	delete(m.clearedFields, paymentattempt.FieldGatewayAttemptID)
}

// SetErrorMessage sets the "error_message" field.
func (m *PaymentAttemptMutation) SetErrorMessage(s string) {
	m.error_message = &s
}

// ErrorMessage returns the value of the "error_message" field in the mutation.
func (m *PaymentAttemptMutation) ErrorMessage() (r string, exists bool) {
	v := m.error_message
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorMessage returns the old "error_message" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldErrorMessage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorMessage: %w", err)
	}
	return oldValue.ErrorMessage, nil
}

// ClearErrorMessage clears the value of the "error_message" field.
func (m *PaymentAttemptMutation) ClearErrorMessage() {
	m.error_message = nil
	m.clearedFields[paymentattempt.FieldErrorMessage] = struct{}{}
}

// ErrorMessageCleared returns if the "error_message" field was cleared in this mutation.
func (m *PaymentAttemptMutation) ErrorMessageCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldErrorMessage]
	return ok
}

// ResetErrorMessage resets all changes to the "error_message" field.
func (m *PaymentAttemptMutation) ResetErrorMessage() {
	m.error_message = nil
	delete(m.clearedFields, paymentattempt.FieldErrorMessage)
}

// SetMetadata sets the "metadata" field.
func (m *PaymentAttemptMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *PaymentAttemptMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *PaymentAttemptMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[paymentattempt.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *PaymentAttemptMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *PaymentAttemptMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, paymentattempt.FieldMetadata)
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (m *PaymentAttemptMutation) ClearPayment() {
	m.clearedpayment = true
	m.clearedFields[paymentattempt.FieldPaymentID] = struct{}{}
}

// PaymentCleared reports if the "payment" edge to the Payment entity was cleared.
func (m *PaymentAttemptMutation) PaymentCleared() bool {
	return m.clearedpayment
}

// PaymentIDs returns the "payment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentID instead. It exists only for internal usage by the builders.
func (m *PaymentAttemptMutation) PaymentIDs() (ids []string) {
	if id := m.payment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPayment resets all changes to the "payment" edge.
func (m *PaymentAttemptMutation) ResetPayment() {
	m.payment = nil
	m.clearedpayment = false
}

// Where appends a list predicates to the PaymentAttemptMutation builder.
func (m *PaymentAttemptMutation) Where(ps ...predicate.PaymentAttempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentAttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentAttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentAttempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentAttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentAttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentAttempt).
func (m *PaymentAttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentAttemptMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.tenant_id != nil {
		fields = append(fields, paymentattempt.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, paymentattempt.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, paymentattempt.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, paymentattempt.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, paymentattempt.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, paymentattempt.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, paymentattempt.FieldEnvironmentID)
	}
	if m.payment != nil {
		fields = append(fields, paymentattempt.FieldPaymentID)
	}
	if m.payment_status != nil {
		fields = append(fields, paymentattempt.FieldPaymentStatus)
	}
	if m.attempt_number != nil {
		fields = append(fields, paymentattempt.FieldAttemptNumber)
	}
	if m.gateway_attempt_id != nil {
		fields = append(fields, paymentattempt.FieldGatewayAttemptID)
	}
	if m.error_message != nil {
		fields = append(fields, paymentattempt.FieldErrorMessage)
	}
	if m.metadata != nil {
		fields = append(fields, paymentattempt.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentAttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentattempt.FieldTenantID:
		return m.TenantID()
	case paymentattempt.FieldStatus:
		return m.Status()
	case paymentattempt.FieldCreatedAt:
		return m.CreatedAt()
	case paymentattempt.FieldUpdatedAt:
		return m.UpdatedAt()
	case paymentattempt.FieldCreatedBy:
		return m.CreatedBy()
	case paymentattempt.FieldUpdatedBy:
		return m.UpdatedBy()
	case paymentattempt.FieldEnvironmentID:
		return m.EnvironmentID()
	case paymentattempt.FieldPaymentID:
		return m.PaymentID()
	case paymentattempt.FieldPaymentStatus:
		return m.PaymentStatus()
	case paymentattempt.FieldAttemptNumber:
		return m.AttemptNumber()
	case paymentattempt.FieldGatewayAttemptID:
		return m.GatewayAttemptID()
	case paymentattempt.FieldErrorMessage:
		return m.ErrorMessage()
	case paymentattempt.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentAttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentattempt.FieldTenantID:
		return m.OldTenantID(ctx)
	case paymentattempt.FieldStatus:
		return m.OldStatus(ctx)
	case paymentattempt.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case paymentattempt.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case paymentattempt.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case paymentattempt.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case paymentattempt.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case paymentattempt.FieldPaymentID:
		return m.OldPaymentID(ctx)
	case paymentattempt.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case paymentattempt.FieldAttemptNumber:
		return m.OldAttemptNumber(ctx)
	case paymentattempt.FieldGatewayAttemptID:
		return m.OldGatewayAttemptID(ctx)
	case paymentattempt.FieldErrorMessage:
		return m.OldErrorMessage(ctx)
	case paymentattempt.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentAttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentattempt.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case paymentattempt.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case paymentattempt.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case paymentattempt.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case paymentattempt.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case paymentattempt.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case paymentattempt.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case paymentattempt.FieldPaymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	case paymentattempt.FieldPaymentStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case paymentattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttemptNumber(v)
		return nil
	case paymentattempt.FieldGatewayAttemptID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayAttemptID(v)
		return nil
	case paymentattempt.FieldErrorMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorMessage(v)
		return nil
	case paymentattempt.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentAttemptMutation) AddedFields() []string {
	var fields []string
	if m.addattempt_number != nil {
		fields = append(fields, paymentattempt.FieldAttemptNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentAttemptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case paymentattempt.FieldAttemptNumber:
		return m.AddedAttemptNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentAttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case paymentattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttemptNumber(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentAttemptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentattempt.FieldCreatedBy) {
		fields = append(fields, paymentattempt.FieldCreatedBy)
	}
	if m.FieldCleared(paymentattempt.FieldUpdatedBy) {
		fields = append(fields, paymentattempt.FieldUpdatedBy)
	}
	if m.FieldCleared(paymentattempt.FieldEnvironmentID) {
		fields = append(fields, paymentattempt.FieldEnvironmentID)
	}
	if m.FieldCleared(paymentattempt.FieldGatewayAttemptID) {
		fields = append(fields, paymentattempt.FieldGatewayAttemptID)
	}
	if m.FieldCleared(paymentattempt.FieldErrorMessage) {
		fields = append(fields, paymentattempt.FieldErrorMessage)
	}
	if m.FieldCleared(paymentattempt.FieldMetadata) {
		fields = append(fields, paymentattempt.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentAttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentAttemptMutation) ClearField(name string) error {
	switch name {
	case paymentattempt.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case paymentattempt.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case paymentattempt.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case paymentattempt.FieldGatewayAttemptID:
		m.ClearGatewayAttemptID()
		return nil
	case paymentattempt.FieldErrorMessage:
		m.ClearErrorMessage()
		return nil
	case paymentattempt.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentAttemptMutation) ResetField(name string) error {
	switch name {
	case paymentattempt.FieldTenantID:
		m.ResetTenantID()
		return nil
	case paymentattempt.FieldStatus:
		m.ResetStatus()
		return nil
	case paymentattempt.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case paymentattempt.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case paymentattempt.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case paymentattempt.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case paymentattempt.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case paymentattempt.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	case paymentattempt.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case paymentattempt.FieldAttemptNumber:
		m.ResetAttemptNumber()
		return nil
	case paymentattempt.FieldGatewayAttemptID:
		m.ResetGatewayAttemptID()
		return nil
	case paymentattempt.FieldErrorMessage:
		m.ResetErrorMessage()
		return nil
	case paymentattempt.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentAttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment != nil {
		edges = append(edges, paymentattempt.EdgePayment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentAttemptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentattempt.EdgePayment:
		if id := m.payment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentAttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentAttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentAttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment {
		edges = append(edges, paymentattempt.EdgePayment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentAttemptMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentattempt.EdgePayment:
		return m.clearedpayment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentAttemptMutation) ClearEdge(name string) error {
	switch name {
	case paymentattempt.EdgePayment:
		m.ClearPayment()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentAttemptMutation) ResetEdge(name string) error {
	switch name {
	case paymentattempt.EdgePayment:
		m.ResetPayment()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt edge %s", name)
}

// PlanMutation represents an operation that mutates the Plan nodes in the graph.
type PlanMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	tenant_id            *string
	status               *string
	created_at           *time.Time
	updated_at           *time.Time
	created_by           *string
	updated_by           *string
	environment_id       *string
	lookup_key           *string
	name                 *string
	description          *string
	clearedFields        map[string]struct{}
	entitlements         map[string]struct{}
	removedentitlements  map[string]struct{}
	clearedentitlements  bool
	credit_grants        map[string]struct{}
	removedcredit_grants map[string]struct{}
	clearedcredit_grants bool
	done                 bool
	oldValue             func(context.Context) (*Plan, error)
	predicates           []predicate.Plan
}

var _ ent.Mutation = (*PlanMutation)(nil)

// planOption allows management of the mutation configuration using functional options.
type planOption func(*PlanMutation)

// newPlanMutation creates new mutation for the Plan entity.
func newPlanMutation(c config, op Op, opts ...planOption) *PlanMutation {
	m := &PlanMutation{
		config:        c,
		op:            op,
		typ:           TypePlan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlanID sets the ID field of the mutation.
func withPlanID(id string) planOption {
	return func(m *PlanMutation) {
		var (
			err   error
			once  sync.Once
			value *Plan
		)
		m.oldValue = func(ctx context.Context) (*Plan, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Plan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlan sets the old Plan of the mutation.
func withPlan(node *Plan) planOption {
	return func(m *PlanMutation) {
		m.oldValue = func(context.Context) (*Plan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Plan entities.
func (m *PlanMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlanMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlanMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Plan.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *PlanMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *PlanMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *PlanMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *PlanMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PlanMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PlanMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PlanMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PlanMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PlanMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PlanMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PlanMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PlanMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PlanMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PlanMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PlanMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[plan.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PlanMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[plan.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PlanMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, plan.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PlanMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PlanMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PlanMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[plan.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PlanMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[plan.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PlanMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, plan.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *PlanMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *PlanMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *PlanMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[plan.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *PlanMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[plan.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *PlanMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, plan.FieldEnvironmentID)
}

// SetLookupKey sets the "lookup_key" field.
func (m *PlanMutation) SetLookupKey(s string) {
	m.lookup_key = &s
}

// LookupKey returns the value of the "lookup_key" field in the mutation.
func (m *PlanMutation) LookupKey() (r string, exists bool) {
	v := m.lookup_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLookupKey returns the old "lookup_key" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldLookupKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookupKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookupKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookupKey: %w", err)
	}
	return oldValue.LookupKey, nil
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (m *PlanMutation) ClearLookupKey() {
	m.lookup_key = nil
	m.clearedFields[plan.FieldLookupKey] = struct{}{}
}

// LookupKeyCleared returns if the "lookup_key" field was cleared in this mutation.
func (m *PlanMutation) LookupKeyCleared() bool {
	_, ok := m.clearedFields[plan.FieldLookupKey]
	return ok
}

// ResetLookupKey resets all changes to the "lookup_key" field.
func (m *PlanMutation) ResetLookupKey() {
	m.lookup_key = nil
	delete(m.clearedFields, plan.FieldLookupKey)
}

// SetName sets the "name" field.
func (m *PlanMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlanMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlanMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PlanMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PlanMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PlanMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[plan.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PlanMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[plan.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PlanMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, plan.FieldDescription)
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by ids.
func (m *PlanMutation) AddEntitlementIDs(ids ...string) {
	if m.entitlements == nil {
		m.entitlements = make(map[string]struct{})
	}
	for i := range ids {
		m.entitlements[ids[i]] = struct{}{}
	}
}

// ClearEntitlements clears the "entitlements" edge to the Entitlement entity.
func (m *PlanMutation) ClearEntitlements() {
	m.clearedentitlements = true
}

// EntitlementsCleared reports if the "entitlements" edge to the Entitlement entity was cleared.
func (m *PlanMutation) EntitlementsCleared() bool {
	return m.clearedentitlements
}

// RemoveEntitlementIDs removes the "entitlements" edge to the Entitlement entity by IDs.
func (m *PlanMutation) RemoveEntitlementIDs(ids ...string) {
	if m.removedentitlements == nil {
		m.removedentitlements = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.entitlements, ids[i])
		m.removedentitlements[ids[i]] = struct{}{}
	}
}

// RemovedEntitlements returns the removed IDs of the "entitlements" edge to the Entitlement entity.
func (m *PlanMutation) RemovedEntitlementsIDs() (ids []string) {
	for id := range m.removedentitlements {
		ids = append(ids, id)
	}
	return
}

// EntitlementsIDs returns the "entitlements" edge IDs in the mutation.
func (m *PlanMutation) EntitlementsIDs() (ids []string) {
	for id := range m.entitlements {
		ids = append(ids, id)
	}
	return
}

// ResetEntitlements resets all changes to the "entitlements" edge.
func (m *PlanMutation) ResetEntitlements() {
	m.entitlements = nil
	m.clearedentitlements = false
	m.removedentitlements = nil
}

// AddCreditGrantIDs adds the "credit_grants" edge to the CreditGrant entity by ids.
func (m *PlanMutation) AddCreditGrantIDs(ids ...string) {
	if m.credit_grants == nil {
		m.credit_grants = make(map[string]struct{})
	}
	for i := range ids {
		m.credit_grants[ids[i]] = struct{}{}
	}
}

// ClearCreditGrants clears the "credit_grants" edge to the CreditGrant entity.
func (m *PlanMutation) ClearCreditGrants() {
	m.clearedcredit_grants = true
}

// CreditGrantsCleared reports if the "credit_grants" edge to the CreditGrant entity was cleared.
func (m *PlanMutation) CreditGrantsCleared() bool {
	return m.clearedcredit_grants
}

// RemoveCreditGrantIDs removes the "credit_grants" edge to the CreditGrant entity by IDs.
func (m *PlanMutation) RemoveCreditGrantIDs(ids ...string) {
	if m.removedcredit_grants == nil {
		m.removedcredit_grants = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.credit_grants, ids[i])
		m.removedcredit_grants[ids[i]] = struct{}{}
	}
}

// RemovedCreditGrants returns the removed IDs of the "credit_grants" edge to the CreditGrant entity.
func (m *PlanMutation) RemovedCreditGrantsIDs() (ids []string) {
	for id := range m.removedcredit_grants {
		ids = append(ids, id)
	}
	return
}

// CreditGrantsIDs returns the "credit_grants" edge IDs in the mutation.
func (m *PlanMutation) CreditGrantsIDs() (ids []string) {
	for id := range m.credit_grants {
		ids = append(ids, id)
	}
	return
}

// ResetCreditGrants resets all changes to the "credit_grants" edge.
func (m *PlanMutation) ResetCreditGrants() {
	m.credit_grants = nil
	m.clearedcredit_grants = false
	m.removedcredit_grants = nil
}

// Where appends a list predicates to the PlanMutation builder.
func (m *PlanMutation) Where(ps ...predicate.Plan) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlanMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlanMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Plan, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlanMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlanMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Plan).
func (m *PlanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlanMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.tenant_id != nil {
		fields = append(fields, plan.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, plan.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, plan.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, plan.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, plan.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, plan.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, plan.FieldEnvironmentID)
	}
	if m.lookup_key != nil {
		fields = append(fields, plan.FieldLookupKey)
	}
	if m.name != nil {
		fields = append(fields, plan.FieldName)
	}
	if m.description != nil {
		fields = append(fields, plan.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case plan.FieldTenantID:
		return m.TenantID()
	case plan.FieldStatus:
		return m.Status()
	case plan.FieldCreatedAt:
		return m.CreatedAt()
	case plan.FieldUpdatedAt:
		return m.UpdatedAt()
	case plan.FieldCreatedBy:
		return m.CreatedBy()
	case plan.FieldUpdatedBy:
		return m.UpdatedBy()
	case plan.FieldEnvironmentID:
		return m.EnvironmentID()
	case plan.FieldLookupKey:
		return m.LookupKey()
	case plan.FieldName:
		return m.Name()
	case plan.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case plan.FieldTenantID:
		return m.OldTenantID(ctx)
	case plan.FieldStatus:
		return m.OldStatus(ctx)
	case plan.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case plan.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case plan.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case plan.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case plan.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case plan.FieldLookupKey:
		return m.OldLookupKey(ctx)
	case plan.FieldName:
		return m.OldName(ctx)
	case plan.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Plan field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case plan.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case plan.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case plan.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case plan.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case plan.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case plan.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case plan.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case plan.FieldLookupKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookupKey(v)
		return nil
	case plan.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case plan.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Plan field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlanMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlanMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlanMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Plan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlanMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(plan.FieldCreatedBy) {
		fields = append(fields, plan.FieldCreatedBy)
	}
	if m.FieldCleared(plan.FieldUpdatedBy) {
		fields = append(fields, plan.FieldUpdatedBy)
	}
	if m.FieldCleared(plan.FieldEnvironmentID) {
		fields = append(fields, plan.FieldEnvironmentID)
	}
	if m.FieldCleared(plan.FieldLookupKey) {
		fields = append(fields, plan.FieldLookupKey)
	}
	if m.FieldCleared(plan.FieldDescription) {
		fields = append(fields, plan.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlanMutation) ClearField(name string) error {
	switch name {
	case plan.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case plan.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case plan.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case plan.FieldLookupKey:
		m.ClearLookupKey()
		return nil
	case plan.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Plan nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlanMutation) ResetField(name string) error {
	switch name {
	case plan.FieldTenantID:
		m.ResetTenantID()
		return nil
	case plan.FieldStatus:
		m.ResetStatus()
		return nil
	case plan.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case plan.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case plan.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case plan.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case plan.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case plan.FieldLookupKey:
		m.ResetLookupKey()
		return nil
	case plan.FieldName:
		m.ResetName()
		return nil
	case plan.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Plan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlanMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.entitlements != nil {
		edges = append(edges, plan.EdgeEntitlements)
	}
	if m.credit_grants != nil {
		edges = append(edges, plan.EdgeCreditGrants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case plan.EdgeEntitlements:
		ids := make([]ent.Value, 0, len(m.entitlements))
		for id := range m.entitlements {
			ids = append(ids, id)
		}
		return ids
	case plan.EdgeCreditGrants:
		ids := make([]ent.Value, 0, len(m.credit_grants))
		for id := range m.credit_grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedentitlements != nil {
		edges = append(edges, plan.EdgeEntitlements)
	}
	if m.removedcredit_grants != nil {
		edges = append(edges, plan.EdgeCreditGrants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case plan.EdgeEntitlements:
		ids := make([]ent.Value, 0, len(m.removedentitlements))
		for id := range m.removedentitlements {
			ids = append(ids, id)
		}
		return ids
	case plan.EdgeCreditGrants:
		ids := make([]ent.Value, 0, len(m.removedcredit_grants))
		for id := range m.removedcredit_grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedentitlements {
		edges = append(edges, plan.EdgeEntitlements)
	}
	if m.clearedcredit_grants {
		edges = append(edges, plan.EdgeCreditGrants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlanMutation) EdgeCleared(name string) bool {
	switch name {
	case plan.EdgeEntitlements:
		return m.clearedentitlements
	case plan.EdgeCreditGrants:
		return m.clearedcredit_grants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlanMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Plan unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlanMutation) ResetEdge(name string) error {
	switch name {
	case plan.EdgeEntitlements:
		m.ResetEntitlements()
		return nil
	case plan.EdgeCreditGrants:
		m.ResetCreditGrants()
		return nil
	}
	return fmt.Errorf("unknown Plan edge %s", name)
}

// PriceMutation represents an operation that mutates the Price nodes in the graph.
type PriceMutation struct {
	config
	op                        Op
	typ                       string
	id                        *string
	tenant_id                 *string
	status                    *string
	created_at                *time.Time
	updated_at                *time.Time
	created_by                *string
	updated_by                *string
	environment_id            *string
	amount                    *float64
	addamount                 *float64
	currency                  *string
	display_amount            *string
	price_unit_type           *string
	price_unit                *string
	price_unit_amount         *float64
	addprice_unit_amount      *float64
	display_price_unit_amount *string
	conversion_rate           *float64
	addconversion_rate        *float64
	plan_id                   *string
	_type                     *string
	billing_period            *string
	billing_period_count      *int
	addbilling_period_count   *int
	billing_model             *string
	billing_cadence           *string
	invoice_cadence           *string
	trial_period              *int
	addtrial_period           *int
	meter_id                  *string
	filter_values             *map[string][]string
	tier_mode                 *string
	tiers                     *[]schema.PriceTier
	appendtiers               []schema.PriceTier
	price_unit_tiers          *[]schema.PriceTier
	appendprice_unit_tiers    []schema.PriceTier
	transform_quantity        *schema.TransformQuantity
	lookup_key                *string
	description               *string
	metadata                  *map[string]string
	clearedFields             map[string]struct{}
	costsheet                 map[string]struct{}
	removedcostsheet          map[string]struct{}
	clearedcostsheet          bool
	price_unit_edge           *string
	clearedprice_unit_edge    bool
	done                      bool
	oldValue                  func(context.Context) (*Price, error)
	predicates                []predicate.Price
}

var _ ent.Mutation = (*PriceMutation)(nil)

// priceOption allows management of the mutation configuration using functional options.
type priceOption func(*PriceMutation)

// newPriceMutation creates new mutation for the Price entity.
func newPriceMutation(c config, op Op, opts ...priceOption) *PriceMutation {
	m := &PriceMutation{
		config:        c,
		op:            op,
		typ:           TypePrice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPriceID sets the ID field of the mutation.
func withPriceID(id string) priceOption {
	return func(m *PriceMutation) {
		var (
			err   error
			once  sync.Once
			value *Price
		)
		m.oldValue = func(ctx context.Context) (*Price, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Price.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrice sets the old Price of the mutation.
func withPrice(node *Price) priceOption {
	return func(m *PriceMutation) {
		m.oldValue = func(context.Context) (*Price, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PriceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PriceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Price entities.
func (m *PriceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PriceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PriceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Price.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *PriceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *PriceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *PriceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *PriceMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PriceMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PriceMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PriceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PriceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PriceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PriceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PriceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PriceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PriceMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PriceMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PriceMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[price.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PriceMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[price.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PriceMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, price.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PriceMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PriceMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PriceMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[price.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PriceMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[price.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PriceMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, price.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *PriceMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *PriceMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *PriceMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[price.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *PriceMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[price.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *PriceMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, price.FieldEnvironmentID)
}

// SetAmount sets the "amount" field.
func (m *PriceMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PriceMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *PriceMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PriceMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PriceMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCurrency sets the "currency" field.
func (m *PriceMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *PriceMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *PriceMutation) ResetCurrency() {
	m.currency = nil
}

// SetDisplayAmount sets the "display_amount" field.
func (m *PriceMutation) SetDisplayAmount(s string) {
	m.display_amount = &s
}

// DisplayAmount returns the value of the "display_amount" field in the mutation.
func (m *PriceMutation) DisplayAmount() (r string, exists bool) {
	v := m.display_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayAmount returns the old "display_amount" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldDisplayAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayAmount: %w", err)
	}
	return oldValue.DisplayAmount, nil
}

// ResetDisplayAmount resets all changes to the "display_amount" field.
func (m *PriceMutation) ResetDisplayAmount() {
	m.display_amount = nil
}

// SetPriceUnitType sets the "price_unit_type" field.
func (m *PriceMutation) SetPriceUnitType(s string) {
	m.price_unit_type = &s
}

// PriceUnitType returns the value of the "price_unit_type" field in the mutation.
func (m *PriceMutation) PriceUnitType() (r string, exists bool) {
	v := m.price_unit_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnitType returns the old "price_unit_type" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldPriceUnitType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnitType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnitType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnitType: %w", err)
	}
	return oldValue.PriceUnitType, nil
}

// ResetPriceUnitType resets all changes to the "price_unit_type" field.
func (m *PriceMutation) ResetPriceUnitType() {
	m.price_unit_type = nil
}

// SetPriceUnitID sets the "price_unit_id" field.
func (m *PriceMutation) SetPriceUnitID(s string) {
	m.price_unit_edge = &s
}

// PriceUnitID returns the value of the "price_unit_id" field in the mutation.
func (m *PriceMutation) PriceUnitID() (r string, exists bool) {
	v := m.price_unit_edge
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnitID returns the old "price_unit_id" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldPriceUnitID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnitID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnitID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnitID: %w", err)
	}
	return oldValue.PriceUnitID, nil
}

// ClearPriceUnitID clears the value of the "price_unit_id" field.
func (m *PriceMutation) ClearPriceUnitID() {
	m.price_unit_edge = nil
	m.clearedFields[price.FieldPriceUnitID] = struct{}{}
}

// PriceUnitIDCleared returns if the "price_unit_id" field was cleared in this mutation.
func (m *PriceMutation) PriceUnitIDCleared() bool {
	_, ok := m.clearedFields[price.FieldPriceUnitID]
	return ok
}

// ResetPriceUnitID resets all changes to the "price_unit_id" field.
func (m *PriceMutation) ResetPriceUnitID() {
	m.price_unit_edge = nil
	delete(m.clearedFields, price.FieldPriceUnitID)
}

// SetPriceUnit sets the "price_unit" field.
func (m *PriceMutation) SetPriceUnit(s string) {
	m.price_unit = &s
}

// PriceUnit returns the value of the "price_unit" field in the mutation.
func (m *PriceMutation) PriceUnit() (r string, exists bool) {
	v := m.price_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnit returns the old "price_unit" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldPriceUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnit: %w", err)
	}
	return oldValue.PriceUnit, nil
}

// ClearPriceUnit clears the value of the "price_unit" field.
func (m *PriceMutation) ClearPriceUnit() {
	m.price_unit = nil
	m.clearedFields[price.FieldPriceUnit] = struct{}{}
}

// PriceUnitCleared returns if the "price_unit" field was cleared in this mutation.
func (m *PriceMutation) PriceUnitCleared() bool {
	_, ok := m.clearedFields[price.FieldPriceUnit]
	return ok
}

// ResetPriceUnit resets all changes to the "price_unit" field.
func (m *PriceMutation) ResetPriceUnit() {
	m.price_unit = nil
	delete(m.clearedFields, price.FieldPriceUnit)
}

// SetPriceUnitAmount sets the "price_unit_amount" field.
func (m *PriceMutation) SetPriceUnitAmount(f float64) {
	m.price_unit_amount = &f
	m.addprice_unit_amount = nil
}

// PriceUnitAmount returns the value of the "price_unit_amount" field in the mutation.
func (m *PriceMutation) PriceUnitAmount() (r float64, exists bool) {
	v := m.price_unit_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnitAmount returns the old "price_unit_amount" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldPriceUnitAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnitAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnitAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnitAmount: %w", err)
	}
	return oldValue.PriceUnitAmount, nil
}

// AddPriceUnitAmount adds f to the "price_unit_amount" field.
func (m *PriceMutation) AddPriceUnitAmount(f float64) {
	if m.addprice_unit_amount != nil {
		*m.addprice_unit_amount += f
	} else {
		m.addprice_unit_amount = &f
	}
}

// AddedPriceUnitAmount returns the value that was added to the "price_unit_amount" field in this mutation.
func (m *PriceMutation) AddedPriceUnitAmount() (r float64, exists bool) {
	v := m.addprice_unit_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearPriceUnitAmount clears the value of the "price_unit_amount" field.
func (m *PriceMutation) ClearPriceUnitAmount() {
	m.price_unit_amount = nil
	m.addprice_unit_amount = nil
	m.clearedFields[price.FieldPriceUnitAmount] = struct{}{}
}

// PriceUnitAmountCleared returns if the "price_unit_amount" field was cleared in this mutation.
func (m *PriceMutation) PriceUnitAmountCleared() bool {
	_, ok := m.clearedFields[price.FieldPriceUnitAmount]
	return ok
}

// ResetPriceUnitAmount resets all changes to the "price_unit_amount" field.
func (m *PriceMutation) ResetPriceUnitAmount() {
	m.price_unit_amount = nil
	m.addprice_unit_amount = nil
	delete(m.clearedFields, price.FieldPriceUnitAmount)
}

// SetDisplayPriceUnitAmount sets the "display_price_unit_amount" field.
func (m *PriceMutation) SetDisplayPriceUnitAmount(s string) {
	m.display_price_unit_amount = &s
}

// DisplayPriceUnitAmount returns the value of the "display_price_unit_amount" field in the mutation.
func (m *PriceMutation) DisplayPriceUnitAmount() (r string, exists bool) {
	v := m.display_price_unit_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayPriceUnitAmount returns the old "display_price_unit_amount" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldDisplayPriceUnitAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayPriceUnitAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayPriceUnitAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayPriceUnitAmount: %w", err)
	}
	return oldValue.DisplayPriceUnitAmount, nil
}

// ClearDisplayPriceUnitAmount clears the value of the "display_price_unit_amount" field.
func (m *PriceMutation) ClearDisplayPriceUnitAmount() {
	m.display_price_unit_amount = nil
	m.clearedFields[price.FieldDisplayPriceUnitAmount] = struct{}{}
}

// DisplayPriceUnitAmountCleared returns if the "display_price_unit_amount" field was cleared in this mutation.
func (m *PriceMutation) DisplayPriceUnitAmountCleared() bool {
	_, ok := m.clearedFields[price.FieldDisplayPriceUnitAmount]
	return ok
}

// ResetDisplayPriceUnitAmount resets all changes to the "display_price_unit_amount" field.
func (m *PriceMutation) ResetDisplayPriceUnitAmount() {
	m.display_price_unit_amount = nil
	delete(m.clearedFields, price.FieldDisplayPriceUnitAmount)
}

// SetConversionRate sets the "conversion_rate" field.
func (m *PriceMutation) SetConversionRate(f float64) {
	m.conversion_rate = &f
	m.addconversion_rate = nil
}

// ConversionRate returns the value of the "conversion_rate" field in the mutation.
func (m *PriceMutation) ConversionRate() (r float64, exists bool) {
	v := m.conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldConversionRate returns the old "conversion_rate" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldConversionRate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversionRate: %w", err)
	}
	return oldValue.ConversionRate, nil
}

// AddConversionRate adds f to the "conversion_rate" field.
func (m *PriceMutation) AddConversionRate(f float64) {
	if m.addconversion_rate != nil {
		*m.addconversion_rate += f
	} else {
		m.addconversion_rate = &f
	}
}

// AddedConversionRate returns the value that was added to the "conversion_rate" field in this mutation.
func (m *PriceMutation) AddedConversionRate() (r float64, exists bool) {
	v := m.addconversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ClearConversionRate clears the value of the "conversion_rate" field.
func (m *PriceMutation) ClearConversionRate() {
	m.conversion_rate = nil
	m.addconversion_rate = nil
	m.clearedFields[price.FieldConversionRate] = struct{}{}
}

// ConversionRateCleared returns if the "conversion_rate" field was cleared in this mutation.
func (m *PriceMutation) ConversionRateCleared() bool {
	_, ok := m.clearedFields[price.FieldConversionRate]
	return ok
}

// ResetConversionRate resets all changes to the "conversion_rate" field.
func (m *PriceMutation) ResetConversionRate() {
	m.conversion_rate = nil
	m.addconversion_rate = nil
	delete(m.clearedFields, price.FieldConversionRate)
}

// SetPlanID sets the "plan_id" field.
func (m *PriceMutation) SetPlanID(s string) {
	m.plan_id = &s
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *PriceMutation) PlanID() (r string, exists bool) {
	v := m.plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldPlanID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *PriceMutation) ResetPlanID() {
	m.plan_id = nil
}

// SetType sets the "type" field.
func (m *PriceMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *PriceMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PriceMutation) ResetType() {
	m._type = nil
}

// SetBillingPeriod sets the "billing_period" field.
func (m *PriceMutation) SetBillingPeriod(s string) {
	m.billing_period = &s
}

// BillingPeriod returns the value of the "billing_period" field in the mutation.
func (m *PriceMutation) BillingPeriod() (r string, exists bool) {
	v := m.billing_period
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriod returns the old "billing_period" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldBillingPeriod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriod: %w", err)
	}
	return oldValue.BillingPeriod, nil
}

// ResetBillingPeriod resets all changes to the "billing_period" field.
func (m *PriceMutation) ResetBillingPeriod() {
	m.billing_period = nil
}

// SetBillingPeriodCount sets the "billing_period_count" field.
func (m *PriceMutation) SetBillingPeriodCount(i int) {
	m.billing_period_count = &i
	m.addbilling_period_count = nil
}

// BillingPeriodCount returns the value of the "billing_period_count" field in the mutation.
func (m *PriceMutation) BillingPeriodCount() (r int, exists bool) {
	v := m.billing_period_count
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriodCount returns the old "billing_period_count" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldBillingPeriodCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriodCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriodCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriodCount: %w", err)
	}
	return oldValue.BillingPeriodCount, nil
}

// AddBillingPeriodCount adds i to the "billing_period_count" field.
func (m *PriceMutation) AddBillingPeriodCount(i int) {
	if m.addbilling_period_count != nil {
		*m.addbilling_period_count += i
	} else {
		m.addbilling_period_count = &i
	}
}

// AddedBillingPeriodCount returns the value that was added to the "billing_period_count" field in this mutation.
func (m *PriceMutation) AddedBillingPeriodCount() (r int, exists bool) {
	v := m.addbilling_period_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetBillingPeriodCount resets all changes to the "billing_period_count" field.
func (m *PriceMutation) ResetBillingPeriodCount() {
	m.billing_period_count = nil
	m.addbilling_period_count = nil
}

// SetBillingModel sets the "billing_model" field.
func (m *PriceMutation) SetBillingModel(s string) {
	m.billing_model = &s
}

// BillingModel returns the value of the "billing_model" field in the mutation.
func (m *PriceMutation) BillingModel() (r string, exists bool) {
	v := m.billing_model
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingModel returns the old "billing_model" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldBillingModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingModel: %w", err)
	}
	return oldValue.BillingModel, nil
}

// ResetBillingModel resets all changes to the "billing_model" field.
func (m *PriceMutation) ResetBillingModel() {
	m.billing_model = nil
}

// SetBillingCadence sets the "billing_cadence" field.
func (m *PriceMutation) SetBillingCadence(s string) {
	m.billing_cadence = &s
}

// BillingCadence returns the value of the "billing_cadence" field in the mutation.
func (m *PriceMutation) BillingCadence() (r string, exists bool) {
	v := m.billing_cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingCadence returns the old "billing_cadence" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldBillingCadence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingCadence: %w", err)
	}
	return oldValue.BillingCadence, nil
}

// ResetBillingCadence resets all changes to the "billing_cadence" field.
func (m *PriceMutation) ResetBillingCadence() {
	m.billing_cadence = nil
}

// SetInvoiceCadence sets the "invoice_cadence" field.
func (m *PriceMutation) SetInvoiceCadence(s string) {
	m.invoice_cadence = &s
}

// InvoiceCadence returns the value of the "invoice_cadence" field in the mutation.
func (m *PriceMutation) InvoiceCadence() (r string, exists bool) {
	v := m.invoice_cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceCadence returns the old "invoice_cadence" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldInvoiceCadence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceCadence: %w", err)
	}
	return oldValue.InvoiceCadence, nil
}

// ClearInvoiceCadence clears the value of the "invoice_cadence" field.
func (m *PriceMutation) ClearInvoiceCadence() {
	m.invoice_cadence = nil
	m.clearedFields[price.FieldInvoiceCadence] = struct{}{}
}

// InvoiceCadenceCleared returns if the "invoice_cadence" field was cleared in this mutation.
func (m *PriceMutation) InvoiceCadenceCleared() bool {
	_, ok := m.clearedFields[price.FieldInvoiceCadence]
	return ok
}

// ResetInvoiceCadence resets all changes to the "invoice_cadence" field.
func (m *PriceMutation) ResetInvoiceCadence() {
	m.invoice_cadence = nil
	delete(m.clearedFields, price.FieldInvoiceCadence)
}

// SetTrialPeriod sets the "trial_period" field.
func (m *PriceMutation) SetTrialPeriod(i int) {
	m.trial_period = &i
	m.addtrial_period = nil
}

// TrialPeriod returns the value of the "trial_period" field in the mutation.
func (m *PriceMutation) TrialPeriod() (r int, exists bool) {
	v := m.trial_period
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialPeriod returns the old "trial_period" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldTrialPeriod(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialPeriod: %w", err)
	}
	return oldValue.TrialPeriod, nil
}

// AddTrialPeriod adds i to the "trial_period" field.
func (m *PriceMutation) AddTrialPeriod(i int) {
	if m.addtrial_period != nil {
		*m.addtrial_period += i
	} else {
		m.addtrial_period = &i
	}
}

// AddedTrialPeriod returns the value that was added to the "trial_period" field in this mutation.
func (m *PriceMutation) AddedTrialPeriod() (r int, exists bool) {
	v := m.addtrial_period
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrialPeriod resets all changes to the "trial_period" field.
func (m *PriceMutation) ResetTrialPeriod() {
	m.trial_period = nil
	m.addtrial_period = nil
}

// SetMeterID sets the "meter_id" field.
func (m *PriceMutation) SetMeterID(s string) {
	m.meter_id = &s
}

// MeterID returns the value of the "meter_id" field in the mutation.
func (m *PriceMutation) MeterID() (r string, exists bool) {
	v := m.meter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterID returns the old "meter_id" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldMeterID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterID: %w", err)
	}
	return oldValue.MeterID, nil
}

// ClearMeterID clears the value of the "meter_id" field.
func (m *PriceMutation) ClearMeterID() {
	m.meter_id = nil
	m.clearedFields[price.FieldMeterID] = struct{}{}
}

// MeterIDCleared returns if the "meter_id" field was cleared in this mutation.
func (m *PriceMutation) MeterIDCleared() bool {
	_, ok := m.clearedFields[price.FieldMeterID]
	return ok
}

// ResetMeterID resets all changes to the "meter_id" field.
func (m *PriceMutation) ResetMeterID() {
	m.meter_id = nil
	delete(m.clearedFields, price.FieldMeterID)
}

// SetFilterValues sets the "filter_values" field.
func (m *PriceMutation) SetFilterValues(value map[string][]string) {
	m.filter_values = &value
}

// FilterValues returns the value of the "filter_values" field in the mutation.
func (m *PriceMutation) FilterValues() (r map[string][]string, exists bool) {
	v := m.filter_values
	if v == nil {
		return
	}
	return *v, true
}

// OldFilterValues returns the old "filter_values" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldFilterValues(ctx context.Context) (v map[string][]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilterValues is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilterValues requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilterValues: %w", err)
	}
	return oldValue.FilterValues, nil
}

// ClearFilterValues clears the value of the "filter_values" field.
func (m *PriceMutation) ClearFilterValues() {
	m.filter_values = nil
	m.clearedFields[price.FieldFilterValues] = struct{}{}
}

// FilterValuesCleared returns if the "filter_values" field was cleared in this mutation.
func (m *PriceMutation) FilterValuesCleared() bool {
	_, ok := m.clearedFields[price.FieldFilterValues]
	return ok
}

// ResetFilterValues resets all changes to the "filter_values" field.
func (m *PriceMutation) ResetFilterValues() {
	m.filter_values = nil
	delete(m.clearedFields, price.FieldFilterValues)
}

// SetTierMode sets the "tier_mode" field.
func (m *PriceMutation) SetTierMode(s string) {
	m.tier_mode = &s
}

// TierMode returns the value of the "tier_mode" field in the mutation.
func (m *PriceMutation) TierMode() (r string, exists bool) {
	v := m.tier_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldTierMode returns the old "tier_mode" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldTierMode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTierMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTierMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTierMode: %w", err)
	}
	return oldValue.TierMode, nil
}

// ClearTierMode clears the value of the "tier_mode" field.
func (m *PriceMutation) ClearTierMode() {
	m.tier_mode = nil
	m.clearedFields[price.FieldTierMode] = struct{}{}
}

// TierModeCleared returns if the "tier_mode" field was cleared in this mutation.
func (m *PriceMutation) TierModeCleared() bool {
	_, ok := m.clearedFields[price.FieldTierMode]
	return ok
}

// ResetTierMode resets all changes to the "tier_mode" field.
func (m *PriceMutation) ResetTierMode() {
	m.tier_mode = nil
	delete(m.clearedFields, price.FieldTierMode)
}

// SetTiers sets the "tiers" field.
func (m *PriceMutation) SetTiers(st []schema.PriceTier) {
	m.tiers = &st
	m.appendtiers = nil
}

// Tiers returns the value of the "tiers" field in the mutation.
func (m *PriceMutation) Tiers() (r []schema.PriceTier, exists bool) {
	v := m.tiers
	if v == nil {
		return
	}
	return *v, true
}

// OldTiers returns the old "tiers" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldTiers(ctx context.Context) (v []schema.PriceTier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTiers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTiers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTiers: %w", err)
	}
	return oldValue.Tiers, nil
}

// AppendTiers adds st to the "tiers" field.
func (m *PriceMutation) AppendTiers(st []schema.PriceTier) {
	m.appendtiers = append(m.appendtiers, st...)
}

// AppendedTiers returns the list of values that were appended to the "tiers" field in this mutation.
func (m *PriceMutation) AppendedTiers() ([]schema.PriceTier, bool) {
	if len(m.appendtiers) == 0 {
		return nil, false
	}
	return m.appendtiers, true
}

// ClearTiers clears the value of the "tiers" field.
func (m *PriceMutation) ClearTiers() {
	m.tiers = nil
	m.appendtiers = nil
	m.clearedFields[price.FieldTiers] = struct{}{}
}

// TiersCleared returns if the "tiers" field was cleared in this mutation.
func (m *PriceMutation) TiersCleared() bool {
	_, ok := m.clearedFields[price.FieldTiers]
	return ok
}

// ResetTiers resets all changes to the "tiers" field.
func (m *PriceMutation) ResetTiers() {
	m.tiers = nil
	m.appendtiers = nil
	delete(m.clearedFields, price.FieldTiers)
}

// SetPriceUnitTiers sets the "price_unit_tiers" field.
func (m *PriceMutation) SetPriceUnitTiers(st []schema.PriceTier) {
	m.price_unit_tiers = &st
	m.appendprice_unit_tiers = nil
}

// PriceUnitTiers returns the value of the "price_unit_tiers" field in the mutation.
func (m *PriceMutation) PriceUnitTiers() (r []schema.PriceTier, exists bool) {
	v := m.price_unit_tiers
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnitTiers returns the old "price_unit_tiers" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldPriceUnitTiers(ctx context.Context) (v []schema.PriceTier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnitTiers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnitTiers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnitTiers: %w", err)
	}
	return oldValue.PriceUnitTiers, nil
}

// AppendPriceUnitTiers adds st to the "price_unit_tiers" field.
func (m *PriceMutation) AppendPriceUnitTiers(st []schema.PriceTier) {
	m.appendprice_unit_tiers = append(m.appendprice_unit_tiers, st...)
}

// AppendedPriceUnitTiers returns the list of values that were appended to the "price_unit_tiers" field in this mutation.
func (m *PriceMutation) AppendedPriceUnitTiers() ([]schema.PriceTier, bool) {
	if len(m.appendprice_unit_tiers) == 0 {
		return nil, false
	}
	return m.appendprice_unit_tiers, true
}

// ClearPriceUnitTiers clears the value of the "price_unit_tiers" field.
func (m *PriceMutation) ClearPriceUnitTiers() {
	m.price_unit_tiers = nil
	m.appendprice_unit_tiers = nil
	m.clearedFields[price.FieldPriceUnitTiers] = struct{}{}
}

// PriceUnitTiersCleared returns if the "price_unit_tiers" field was cleared in this mutation.
func (m *PriceMutation) PriceUnitTiersCleared() bool {
	_, ok := m.clearedFields[price.FieldPriceUnitTiers]
	return ok
}

// ResetPriceUnitTiers resets all changes to the "price_unit_tiers" field.
func (m *PriceMutation) ResetPriceUnitTiers() {
	m.price_unit_tiers = nil
	m.appendprice_unit_tiers = nil
	delete(m.clearedFields, price.FieldPriceUnitTiers)
}

// SetTransformQuantity sets the "transform_quantity" field.
func (m *PriceMutation) SetTransformQuantity(sq schema.TransformQuantity) {
	m.transform_quantity = &sq
}

// TransformQuantity returns the value of the "transform_quantity" field in the mutation.
func (m *PriceMutation) TransformQuantity() (r schema.TransformQuantity, exists bool) {
	v := m.transform_quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldTransformQuantity returns the old "transform_quantity" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldTransformQuantity(ctx context.Context) (v schema.TransformQuantity, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransformQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransformQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransformQuantity: %w", err)
	}
	return oldValue.TransformQuantity, nil
}

// ClearTransformQuantity clears the value of the "transform_quantity" field.
func (m *PriceMutation) ClearTransformQuantity() {
	m.transform_quantity = nil
	m.clearedFields[price.FieldTransformQuantity] = struct{}{}
}

// TransformQuantityCleared returns if the "transform_quantity" field was cleared in this mutation.
func (m *PriceMutation) TransformQuantityCleared() bool {
	_, ok := m.clearedFields[price.FieldTransformQuantity]
	return ok
}

// ResetTransformQuantity resets all changes to the "transform_quantity" field.
func (m *PriceMutation) ResetTransformQuantity() {
	m.transform_quantity = nil
	delete(m.clearedFields, price.FieldTransformQuantity)
}

// SetLookupKey sets the "lookup_key" field.
func (m *PriceMutation) SetLookupKey(s string) {
	m.lookup_key = &s
}

// LookupKey returns the value of the "lookup_key" field in the mutation.
func (m *PriceMutation) LookupKey() (r string, exists bool) {
	v := m.lookup_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLookupKey returns the old "lookup_key" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldLookupKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookupKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookupKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookupKey: %w", err)
	}
	return oldValue.LookupKey, nil
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (m *PriceMutation) ClearLookupKey() {
	m.lookup_key = nil
	m.clearedFields[price.FieldLookupKey] = struct{}{}
}

// LookupKeyCleared returns if the "lookup_key" field was cleared in this mutation.
func (m *PriceMutation) LookupKeyCleared() bool {
	_, ok := m.clearedFields[price.FieldLookupKey]
	return ok
}

// ResetLookupKey resets all changes to the "lookup_key" field.
func (m *PriceMutation) ResetLookupKey() {
	m.lookup_key = nil
	delete(m.clearedFields, price.FieldLookupKey)
}

// SetDescription sets the "description" field.
func (m *PriceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PriceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PriceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[price.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PriceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[price.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PriceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, price.FieldDescription)
}

// SetMetadata sets the "metadata" field.
func (m *PriceMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *PriceMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *PriceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[price.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *PriceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[price.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *PriceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, price.FieldMetadata)
}

// AddCostsheetIDs adds the "costsheet" edge to the Costsheet entity by ids.
func (m *PriceMutation) AddCostsheetIDs(ids ...string) {
	if m.costsheet == nil {
		m.costsheet = make(map[string]struct{})
	}
	for i := range ids {
		m.costsheet[ids[i]] = struct{}{}
	}
}

// ClearCostsheet clears the "costsheet" edge to the Costsheet entity.
func (m *PriceMutation) ClearCostsheet() {
	m.clearedcostsheet = true
}

// CostsheetCleared reports if the "costsheet" edge to the Costsheet entity was cleared.
func (m *PriceMutation) CostsheetCleared() bool {
	return m.clearedcostsheet
}

// RemoveCostsheetIDs removes the "costsheet" edge to the Costsheet entity by IDs.
func (m *PriceMutation) RemoveCostsheetIDs(ids ...string) {
	if m.removedcostsheet == nil {
		m.removedcostsheet = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.costsheet, ids[i])
		m.removedcostsheet[ids[i]] = struct{}{}
	}
}

// RemovedCostsheet returns the removed IDs of the "costsheet" edge to the Costsheet entity.
func (m *PriceMutation) RemovedCostsheetIDs() (ids []string) {
	for id := range m.removedcostsheet {
		ids = append(ids, id)
	}
	return
}

// CostsheetIDs returns the "costsheet" edge IDs in the mutation.
func (m *PriceMutation) CostsheetIDs() (ids []string) {
	for id := range m.costsheet {
		ids = append(ids, id)
	}
	return
}

// ResetCostsheet resets all changes to the "costsheet" edge.
func (m *PriceMutation) ResetCostsheet() {
	m.costsheet = nil
	m.clearedcostsheet = false
	m.removedcostsheet = nil
}

// SetPriceUnitEdgeID sets the "price_unit_edge" edge to the PriceUnit entity by id.
func (m *PriceMutation) SetPriceUnitEdgeID(id string) {
	m.price_unit_edge = &id
}

// ClearPriceUnitEdge clears the "price_unit_edge" edge to the PriceUnit entity.
func (m *PriceMutation) ClearPriceUnitEdge() {
	m.clearedprice_unit_edge = true
	m.clearedFields[price.FieldPriceUnitID] = struct{}{}
}

// PriceUnitEdgeCleared reports if the "price_unit_edge" edge to the PriceUnit entity was cleared.
func (m *PriceMutation) PriceUnitEdgeCleared() bool {
	return m.PriceUnitIDCleared() || m.clearedprice_unit_edge
}

// PriceUnitEdgeID returns the "price_unit_edge" edge ID in the mutation.
func (m *PriceMutation) PriceUnitEdgeID() (id string, exists bool) {
	if m.price_unit_edge != nil {
		return *m.price_unit_edge, true
	}
	return
}

// PriceUnitEdgeIDs returns the "price_unit_edge" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PriceUnitEdgeID instead. It exists only for internal usage by the builders.
func (m *PriceMutation) PriceUnitEdgeIDs() (ids []string) {
	if id := m.price_unit_edge; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPriceUnitEdge resets all changes to the "price_unit_edge" edge.
func (m *PriceMutation) ResetPriceUnitEdge() {
	m.price_unit_edge = nil
	m.clearedprice_unit_edge = false
}

// Where appends a list predicates to the PriceMutation builder.
func (m *PriceMutation) Where(ps ...predicate.Price) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PriceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PriceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Price, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PriceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PriceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Price).
func (m *PriceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PriceMutation) Fields() []string {
	fields := make([]string, 0, 33)
	if m.tenant_id != nil {
		fields = append(fields, price.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, price.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, price.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, price.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, price.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, price.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, price.FieldEnvironmentID)
	}
	if m.amount != nil {
		fields = append(fields, price.FieldAmount)
	}
	if m.currency != nil {
		fields = append(fields, price.FieldCurrency)
	}
	if m.display_amount != nil {
		fields = append(fields, price.FieldDisplayAmount)
	}
	if m.price_unit_type != nil {
		fields = append(fields, price.FieldPriceUnitType)
	}
	if m.price_unit_edge != nil {
		fields = append(fields, price.FieldPriceUnitID)
	}
	if m.price_unit != nil {
		fields = append(fields, price.FieldPriceUnit)
	}
	if m.price_unit_amount != nil {
		fields = append(fields, price.FieldPriceUnitAmount)
	}
	if m.display_price_unit_amount != nil {
		fields = append(fields, price.FieldDisplayPriceUnitAmount)
	}
	if m.conversion_rate != nil {
		fields = append(fields, price.FieldConversionRate)
	}
	if m.plan_id != nil {
		fields = append(fields, price.FieldPlanID)
	}
	if m._type != nil {
		fields = append(fields, price.FieldType)
	}
	if m.billing_period != nil {
		fields = append(fields, price.FieldBillingPeriod)
	}
	if m.billing_period_count != nil {
		fields = append(fields, price.FieldBillingPeriodCount)
	}
	if m.billing_model != nil {
		fields = append(fields, price.FieldBillingModel)
	}
	if m.billing_cadence != nil {
		fields = append(fields, price.FieldBillingCadence)
	}
	if m.invoice_cadence != nil {
		fields = append(fields, price.FieldInvoiceCadence)
	}
	if m.trial_period != nil {
		fields = append(fields, price.FieldTrialPeriod)
	}
	if m.meter_id != nil {
		fields = append(fields, price.FieldMeterID)
	}
	if m.filter_values != nil {
		fields = append(fields, price.FieldFilterValues)
	}
	if m.tier_mode != nil {
		fields = append(fields, price.FieldTierMode)
	}
	if m.tiers != nil {
		fields = append(fields, price.FieldTiers)
	}
	if m.price_unit_tiers != nil {
		fields = append(fields, price.FieldPriceUnitTiers)
	}
	if m.transform_quantity != nil {
		fields = append(fields, price.FieldTransformQuantity)
	}
	if m.lookup_key != nil {
		fields = append(fields, price.FieldLookupKey)
	}
	if m.description != nil {
		fields = append(fields, price.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, price.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PriceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case price.FieldTenantID:
		return m.TenantID()
	case price.FieldStatus:
		return m.Status()
	case price.FieldCreatedAt:
		return m.CreatedAt()
	case price.FieldUpdatedAt:
		return m.UpdatedAt()
	case price.FieldCreatedBy:
		return m.CreatedBy()
	case price.FieldUpdatedBy:
		return m.UpdatedBy()
	case price.FieldEnvironmentID:
		return m.EnvironmentID()
	case price.FieldAmount:
		return m.Amount()
	case price.FieldCurrency:
		return m.Currency()
	case price.FieldDisplayAmount:
		return m.DisplayAmount()
	case price.FieldPriceUnitType:
		return m.PriceUnitType()
	case price.FieldPriceUnitID:
		return m.PriceUnitID()
	case price.FieldPriceUnit:
		return m.PriceUnit()
	case price.FieldPriceUnitAmount:
		return m.PriceUnitAmount()
	case price.FieldDisplayPriceUnitAmount:
		return m.DisplayPriceUnitAmount()
	case price.FieldConversionRate:
		return m.ConversionRate()
	case price.FieldPlanID:
		return m.PlanID()
	case price.FieldType:
		return m.GetType()
	case price.FieldBillingPeriod:
		return m.BillingPeriod()
	case price.FieldBillingPeriodCount:
		return m.BillingPeriodCount()
	case price.FieldBillingModel:
		return m.BillingModel()
	case price.FieldBillingCadence:
		return m.BillingCadence()
	case price.FieldInvoiceCadence:
		return m.InvoiceCadence()
	case price.FieldTrialPeriod:
		return m.TrialPeriod()
	case price.FieldMeterID:
		return m.MeterID()
	case price.FieldFilterValues:
		return m.FilterValues()
	case price.FieldTierMode:
		return m.TierMode()
	case price.FieldTiers:
		return m.Tiers()
	case price.FieldPriceUnitTiers:
		return m.PriceUnitTiers()
	case price.FieldTransformQuantity:
		return m.TransformQuantity()
	case price.FieldLookupKey:
		return m.LookupKey()
	case price.FieldDescription:
		return m.Description()
	case price.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PriceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case price.FieldTenantID:
		return m.OldTenantID(ctx)
	case price.FieldStatus:
		return m.OldStatus(ctx)
	case price.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case price.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case price.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case price.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case price.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case price.FieldAmount:
		return m.OldAmount(ctx)
	case price.FieldCurrency:
		return m.OldCurrency(ctx)
	case price.FieldDisplayAmount:
		return m.OldDisplayAmount(ctx)
	case price.FieldPriceUnitType:
		return m.OldPriceUnitType(ctx)
	case price.FieldPriceUnitID:
		return m.OldPriceUnitID(ctx)
	case price.FieldPriceUnit:
		return m.OldPriceUnit(ctx)
	case price.FieldPriceUnitAmount:
		return m.OldPriceUnitAmount(ctx)
	case price.FieldDisplayPriceUnitAmount:
		return m.OldDisplayPriceUnitAmount(ctx)
	case price.FieldConversionRate:
		return m.OldConversionRate(ctx)
	case price.FieldPlanID:
		return m.OldPlanID(ctx)
	case price.FieldType:
		return m.OldType(ctx)
	case price.FieldBillingPeriod:
		return m.OldBillingPeriod(ctx)
	case price.FieldBillingPeriodCount:
		return m.OldBillingPeriodCount(ctx)
	case price.FieldBillingModel:
		return m.OldBillingModel(ctx)
	case price.FieldBillingCadence:
		return m.OldBillingCadence(ctx)
	case price.FieldInvoiceCadence:
		return m.OldInvoiceCadence(ctx)
	case price.FieldTrialPeriod:
		return m.OldTrialPeriod(ctx)
	case price.FieldMeterID:
		return m.OldMeterID(ctx)
	case price.FieldFilterValues:
		return m.OldFilterValues(ctx)
	case price.FieldTierMode:
		return m.OldTierMode(ctx)
	case price.FieldTiers:
		return m.OldTiers(ctx)
	case price.FieldPriceUnitTiers:
		return m.OldPriceUnitTiers(ctx)
	case price.FieldTransformQuantity:
		return m.OldTransformQuantity(ctx)
	case price.FieldLookupKey:
		return m.OldLookupKey(ctx)
	case price.FieldDescription:
		return m.OldDescription(ctx)
	case price.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Price field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case price.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case price.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case price.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case price.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case price.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case price.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case price.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case price.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case price.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case price.FieldDisplayAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayAmount(v)
		return nil
	case price.FieldPriceUnitType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnitType(v)
		return nil
	case price.FieldPriceUnitID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnitID(v)
		return nil
	case price.FieldPriceUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnit(v)
		return nil
	case price.FieldPriceUnitAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnitAmount(v)
		return nil
	case price.FieldDisplayPriceUnitAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayPriceUnitAmount(v)
		return nil
	case price.FieldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversionRate(v)
		return nil
	case price.FieldPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case price.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case price.FieldBillingPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriod(v)
		return nil
	case price.FieldBillingPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriodCount(v)
		return nil
	case price.FieldBillingModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingModel(v)
		return nil
	case price.FieldBillingCadence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingCadence(v)
		return nil
	case price.FieldInvoiceCadence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceCadence(v)
		return nil
	case price.FieldTrialPeriod:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialPeriod(v)
		return nil
	case price.FieldMeterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterID(v)
		return nil
	case price.FieldFilterValues:
		v, ok := value.(map[string][]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilterValues(v)
		return nil
	case price.FieldTierMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTierMode(v)
		return nil
	case price.FieldTiers:
		v, ok := value.([]schema.PriceTier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTiers(v)
		return nil
	case price.FieldPriceUnitTiers:
		v, ok := value.([]schema.PriceTier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnitTiers(v)
		return nil
	case price.FieldTransformQuantity:
		v, ok := value.(schema.TransformQuantity)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransformQuantity(v)
		return nil
	case price.FieldLookupKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookupKey(v)
		return nil
	case price.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case price.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Price field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PriceMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, price.FieldAmount)
	}
	if m.addprice_unit_amount != nil {
		fields = append(fields, price.FieldPriceUnitAmount)
	}
	if m.addconversion_rate != nil {
		fields = append(fields, price.FieldConversionRate)
	}
	if m.addbilling_period_count != nil {
		fields = append(fields, price.FieldBillingPeriodCount)
	}
	if m.addtrial_period != nil {
		fields = append(fields, price.FieldTrialPeriod)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PriceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case price.FieldAmount:
		return m.AddedAmount()
	case price.FieldPriceUnitAmount:
		return m.AddedPriceUnitAmount()
	case price.FieldConversionRate:
		return m.AddedConversionRate()
	case price.FieldBillingPeriodCount:
		return m.AddedBillingPeriodCount()
	case price.FieldTrialPeriod:
		return m.AddedTrialPeriod()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case price.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case price.FieldPriceUnitAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriceUnitAmount(v)
		return nil
	case price.FieldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConversionRate(v)
		return nil
	case price.FieldBillingPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBillingPeriodCount(v)
		return nil
	case price.FieldTrialPeriod:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrialPeriod(v)
		return nil
	}
	return fmt.Errorf("unknown Price numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PriceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(price.FieldCreatedBy) {
		fields = append(fields, price.FieldCreatedBy)
	}
	if m.FieldCleared(price.FieldUpdatedBy) {
		fields = append(fields, price.FieldUpdatedBy)
	}
	if m.FieldCleared(price.FieldEnvironmentID) {
		fields = append(fields, price.FieldEnvironmentID)
	}
	if m.FieldCleared(price.FieldPriceUnitID) {
		fields = append(fields, price.FieldPriceUnitID)
	}
	if m.FieldCleared(price.FieldPriceUnit) {
		fields = append(fields, price.FieldPriceUnit)
	}
	if m.FieldCleared(price.FieldPriceUnitAmount) {
		fields = append(fields, price.FieldPriceUnitAmount)
	}
	if m.FieldCleared(price.FieldDisplayPriceUnitAmount) {
		fields = append(fields, price.FieldDisplayPriceUnitAmount)
	}
	if m.FieldCleared(price.FieldConversionRate) {
		fields = append(fields, price.FieldConversionRate)
	}
	if m.FieldCleared(price.FieldInvoiceCadence) {
		fields = append(fields, price.FieldInvoiceCadence)
	}
	if m.FieldCleared(price.FieldMeterID) {
		fields = append(fields, price.FieldMeterID)
	}
	if m.FieldCleared(price.FieldFilterValues) {
		fields = append(fields, price.FieldFilterValues)
	}
	if m.FieldCleared(price.FieldTierMode) {
		fields = append(fields, price.FieldTierMode)
	}
	if m.FieldCleared(price.FieldTiers) {
		fields = append(fields, price.FieldTiers)
	}
	if m.FieldCleared(price.FieldPriceUnitTiers) {
		fields = append(fields, price.FieldPriceUnitTiers)
	}
	if m.FieldCleared(price.FieldTransformQuantity) {
		fields = append(fields, price.FieldTransformQuantity)
	}
	if m.FieldCleared(price.FieldLookupKey) {
		fields = append(fields, price.FieldLookupKey)
	}
	if m.FieldCleared(price.FieldDescription) {
		fields = append(fields, price.FieldDescription)
	}
	if m.FieldCleared(price.FieldMetadata) {
		fields = append(fields, price.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PriceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PriceMutation) ClearField(name string) error {
	switch name {
	case price.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case price.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case price.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case price.FieldPriceUnitID:
		m.ClearPriceUnitID()
		return nil
	case price.FieldPriceUnit:
		m.ClearPriceUnit()
		return nil
	case price.FieldPriceUnitAmount:
		m.ClearPriceUnitAmount()
		return nil
	case price.FieldDisplayPriceUnitAmount:
		m.ClearDisplayPriceUnitAmount()
		return nil
	case price.FieldConversionRate:
		m.ClearConversionRate()
		return nil
	case price.FieldInvoiceCadence:
		m.ClearInvoiceCadence()
		return nil
	case price.FieldMeterID:
		m.ClearMeterID()
		return nil
	case price.FieldFilterValues:
		m.ClearFilterValues()
		return nil
	case price.FieldTierMode:
		m.ClearTierMode()
		return nil
	case price.FieldTiers:
		m.ClearTiers()
		return nil
	case price.FieldPriceUnitTiers:
		m.ClearPriceUnitTiers()
		return nil
	case price.FieldTransformQuantity:
		m.ClearTransformQuantity()
		return nil
	case price.FieldLookupKey:
		m.ClearLookupKey()
		return nil
	case price.FieldDescription:
		m.ClearDescription()
		return nil
	case price.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Price nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PriceMutation) ResetField(name string) error {
	switch name {
	case price.FieldTenantID:
		m.ResetTenantID()
		return nil
	case price.FieldStatus:
		m.ResetStatus()
		return nil
	case price.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case price.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case price.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case price.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case price.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case price.FieldAmount:
		m.ResetAmount()
		return nil
	case price.FieldCurrency:
		m.ResetCurrency()
		return nil
	case price.FieldDisplayAmount:
		m.ResetDisplayAmount()
		return nil
	case price.FieldPriceUnitType:
		m.ResetPriceUnitType()
		return nil
	case price.FieldPriceUnitID:
		m.ResetPriceUnitID()
		return nil
	case price.FieldPriceUnit:
		m.ResetPriceUnit()
		return nil
	case price.FieldPriceUnitAmount:
		m.ResetPriceUnitAmount()
		return nil
	case price.FieldDisplayPriceUnitAmount:
		m.ResetDisplayPriceUnitAmount()
		return nil
	case price.FieldConversionRate:
		m.ResetConversionRate()
		return nil
	case price.FieldPlanID:
		m.ResetPlanID()
		return nil
	case price.FieldType:
		m.ResetType()
		return nil
	case price.FieldBillingPeriod:
		m.ResetBillingPeriod()
		return nil
	case price.FieldBillingPeriodCount:
		m.ResetBillingPeriodCount()
		return nil
	case price.FieldBillingModel:
		m.ResetBillingModel()
		return nil
	case price.FieldBillingCadence:
		m.ResetBillingCadence()
		return nil
	case price.FieldInvoiceCadence:
		m.ResetInvoiceCadence()
		return nil
	case price.FieldTrialPeriod:
		m.ResetTrialPeriod()
		return nil
	case price.FieldMeterID:
		m.ResetMeterID()
		return nil
	case price.FieldFilterValues:
		m.ResetFilterValues()
		return nil
	case price.FieldTierMode:
		m.ResetTierMode()
		return nil
	case price.FieldTiers:
		m.ResetTiers()
		return nil
	case price.FieldPriceUnitTiers:
		m.ResetPriceUnitTiers()
		return nil
	case price.FieldTransformQuantity:
		m.ResetTransformQuantity()
		return nil
	case price.FieldLookupKey:
		m.ResetLookupKey()
		return nil
	case price.FieldDescription:
		m.ResetDescription()
		return nil
	case price.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Price field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PriceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.costsheet != nil {
		edges = append(edges, price.EdgeCostsheet)
	}
	if m.price_unit_edge != nil {
		edges = append(edges, price.EdgePriceUnitEdge)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PriceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case price.EdgeCostsheet:
		ids := make([]ent.Value, 0, len(m.costsheet))
		for id := range m.costsheet {
			ids = append(ids, id)
		}
		return ids
	case price.EdgePriceUnitEdge:
		if id := m.price_unit_edge; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PriceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcostsheet != nil {
		edges = append(edges, price.EdgeCostsheet)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PriceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case price.EdgeCostsheet:
		ids := make([]ent.Value, 0, len(m.removedcostsheet))
		for id := range m.removedcostsheet {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PriceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcostsheet {
		edges = append(edges, price.EdgeCostsheet)
	}
	if m.clearedprice_unit_edge {
		edges = append(edges, price.EdgePriceUnitEdge)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PriceMutation) EdgeCleared(name string) bool {
	switch name {
	case price.EdgeCostsheet:
		return m.clearedcostsheet
	case price.EdgePriceUnitEdge:
		return m.clearedprice_unit_edge
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PriceMutation) ClearEdge(name string) error {
	switch name {
	case price.EdgePriceUnitEdge:
		m.ClearPriceUnitEdge()
		return nil
	}
	return fmt.Errorf("unknown Price unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PriceMutation) ResetEdge(name string) error {
	switch name {
	case price.EdgeCostsheet:
		m.ResetCostsheet()
		return nil
	case price.EdgePriceUnitEdge:
		m.ResetPriceUnitEdge()
		return nil
	}
	return fmt.Errorf("unknown Price edge %s", name)
}

// PriceUnitMutation represents an operation that mutates the PriceUnit nodes in the graph.
type PriceUnitMutation struct {
	config
	op              Op
	typ             string
	id              *string
	tenant_id       *string
	status          *string
	created_at      *time.Time
	updated_at      *time.Time
	created_by      *string
	updated_by      *string
	environment_id  *string
	name            *string
	code            *string
	symbol          *string
	base_currency   *string
	conversion_rate *decimal.Decimal
	precision       *int
	addprecision    *int
	clearedFields   map[string]struct{}
	prices          map[string]struct{}
	removedprices   map[string]struct{}
	clearedprices   bool
	done            bool
	oldValue        func(context.Context) (*PriceUnit, error)
	predicates      []predicate.PriceUnit
}

var _ ent.Mutation = (*PriceUnitMutation)(nil)

// priceunitOption allows management of the mutation configuration using functional options.
type priceunitOption func(*PriceUnitMutation)

// newPriceUnitMutation creates new mutation for the PriceUnit entity.
func newPriceUnitMutation(c config, op Op, opts ...priceunitOption) *PriceUnitMutation {
	m := &PriceUnitMutation{
		config:        c,
		op:            op,
		typ:           TypePriceUnit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPriceUnitID sets the ID field of the mutation.
func withPriceUnitID(id string) priceunitOption {
	return func(m *PriceUnitMutation) {
		var (
			err   error
			once  sync.Once
			value *PriceUnit
		)
		m.oldValue = func(ctx context.Context) (*PriceUnit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PriceUnit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPriceUnit sets the old PriceUnit of the mutation.
func withPriceUnit(node *PriceUnit) priceunitOption {
	return func(m *PriceUnitMutation) {
		m.oldValue = func(context.Context) (*PriceUnit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PriceUnitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PriceUnitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PriceUnit entities.
func (m *PriceUnitMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PriceUnitMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PriceUnitMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PriceUnit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *PriceUnitMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *PriceUnitMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *PriceUnitMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *PriceUnitMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PriceUnitMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PriceUnitMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PriceUnitMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PriceUnitMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PriceUnitMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PriceUnitMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PriceUnitMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PriceUnitMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PriceUnitMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PriceUnitMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PriceUnitMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[priceunit.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PriceUnitMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[priceunit.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PriceUnitMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, priceunit.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PriceUnitMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PriceUnitMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PriceUnitMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[priceunit.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PriceUnitMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[priceunit.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PriceUnitMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, priceunit.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *PriceUnitMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *PriceUnitMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *PriceUnitMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[priceunit.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *PriceUnitMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[priceunit.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *PriceUnitMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, priceunit.FieldEnvironmentID)
}

// SetName sets the "name" field.
func (m *PriceUnitMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PriceUnitMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PriceUnitMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *PriceUnitMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PriceUnitMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PriceUnitMutation) ResetCode() {
	m.code = nil
}

// SetSymbol sets the "symbol" field.
func (m *PriceUnitMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *PriceUnitMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *PriceUnitMutation) ResetSymbol() {
	m.symbol = nil
}

// SetBaseCurrency sets the "base_currency" field.
func (m *PriceUnitMutation) SetBaseCurrency(s string) {
	m.base_currency = &s
}

// BaseCurrency returns the value of the "base_currency" field in the mutation.
func (m *PriceUnitMutation) BaseCurrency() (r string, exists bool) {
	v := m.base_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseCurrency returns the old "base_currency" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldBaseCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseCurrency: %w", err)
	}
	return oldValue.BaseCurrency, nil
}

// ResetBaseCurrency resets all changes to the "base_currency" field.
func (m *PriceUnitMutation) ResetBaseCurrency() {
	m.base_currency = nil
}

// SetConversionRate sets the "conversion_rate" field.
func (m *PriceUnitMutation) SetConversionRate(d decimal.Decimal) {
	m.conversion_rate = &d
}

// ConversionRate returns the value of the "conversion_rate" field in the mutation.
func (m *PriceUnitMutation) ConversionRate() (r decimal.Decimal, exists bool) {
	v := m.conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldConversionRate returns the old "conversion_rate" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldConversionRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversionRate: %w", err)
	}
	return oldValue.ConversionRate, nil
}

// ResetConversionRate resets all changes to the "conversion_rate" field.
func (m *PriceUnitMutation) ResetConversionRate() {
	m.conversion_rate = nil
}

// SetPrecision sets the "precision" field.
func (m *PriceUnitMutation) SetPrecision(i int) {
	m.precision = &i
	m.addprecision = nil
}

// Precision returns the value of the "precision" field in the mutation.
func (m *PriceUnitMutation) Precision() (r int, exists bool) {
	v := m.precision
	if v == nil {
		return
	}
	return *v, true
}

// OldPrecision returns the old "precision" field's value of the PriceUnit entity.
// If the PriceUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceUnitMutation) OldPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrecision: %w", err)
	}
	return oldValue.Precision, nil
}

// AddPrecision adds i to the "precision" field.
func (m *PriceUnitMutation) AddPrecision(i int) {
	if m.addprecision != nil {
		*m.addprecision += i
	} else {
		m.addprecision = &i
	}
}

// AddedPrecision returns the value that was added to the "precision" field in this mutation.
func (m *PriceUnitMutation) AddedPrecision() (r int, exists bool) {
	v := m.addprecision
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrecision resets all changes to the "precision" field.
func (m *PriceUnitMutation) ResetPrecision() {
	m.precision = nil
	m.addprecision = nil
}

// AddPriceIDs adds the "prices" edge to the Price entity by ids.
func (m *PriceUnitMutation) AddPriceIDs(ids ...string) {
	if m.prices == nil {
		m.prices = make(map[string]struct{})
	}
	for i := range ids {
		m.prices[ids[i]] = struct{}{}
	}
}

// ClearPrices clears the "prices" edge to the Price entity.
func (m *PriceUnitMutation) ClearPrices() {
	m.clearedprices = true
}

// PricesCleared reports if the "prices" edge to the Price entity was cleared.
func (m *PriceUnitMutation) PricesCleared() bool {
	return m.clearedprices
}

// RemovePriceIDs removes the "prices" edge to the Price entity by IDs.
func (m *PriceUnitMutation) RemovePriceIDs(ids ...string) {
	if m.removedprices == nil {
		m.removedprices = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.prices, ids[i])
		m.removedprices[ids[i]] = struct{}{}
	}
}

// RemovedPrices returns the removed IDs of the "prices" edge to the Price entity.
func (m *PriceUnitMutation) RemovedPricesIDs() (ids []string) {
	for id := range m.removedprices {
		ids = append(ids, id)
	}
	return
}

// PricesIDs returns the "prices" edge IDs in the mutation.
func (m *PriceUnitMutation) PricesIDs() (ids []string) {
	for id := range m.prices {
		ids = append(ids, id)
	}
	return
}

// ResetPrices resets all changes to the "prices" edge.
func (m *PriceUnitMutation) ResetPrices() {
	m.prices = nil
	m.clearedprices = false
	m.removedprices = nil
}

// Where appends a list predicates to the PriceUnitMutation builder.
func (m *PriceUnitMutation) Where(ps ...predicate.PriceUnit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PriceUnitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PriceUnitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PriceUnit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PriceUnitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PriceUnitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PriceUnit).
func (m *PriceUnitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PriceUnitMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.tenant_id != nil {
		fields = append(fields, priceunit.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, priceunit.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, priceunit.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, priceunit.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, priceunit.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, priceunit.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, priceunit.FieldEnvironmentID)
	}
	if m.name != nil {
		fields = append(fields, priceunit.FieldName)
	}
	if m.code != nil {
		fields = append(fields, priceunit.FieldCode)
	}
	if m.symbol != nil {
		fields = append(fields, priceunit.FieldSymbol)
	}
	if m.base_currency != nil {
		fields = append(fields, priceunit.FieldBaseCurrency)
	}
	if m.conversion_rate != nil {
		fields = append(fields, priceunit.FieldConversionRate)
	}
	if m.precision != nil {
		fields = append(fields, priceunit.FieldPrecision)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PriceUnitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case priceunit.FieldTenantID:
		return m.TenantID()
	case priceunit.FieldStatus:
		return m.Status()
	case priceunit.FieldCreatedAt:
		return m.CreatedAt()
	case priceunit.FieldUpdatedAt:
		return m.UpdatedAt()
	case priceunit.FieldCreatedBy:
		return m.CreatedBy()
	case priceunit.FieldUpdatedBy:
		return m.UpdatedBy()
	case priceunit.FieldEnvironmentID:
		return m.EnvironmentID()
	case priceunit.FieldName:
		return m.Name()
	case priceunit.FieldCode:
		return m.Code()
	case priceunit.FieldSymbol:
		return m.Symbol()
	case priceunit.FieldBaseCurrency:
		return m.BaseCurrency()
	case priceunit.FieldConversionRate:
		return m.ConversionRate()
	case priceunit.FieldPrecision:
		return m.Precision()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PriceUnitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case priceunit.FieldTenantID:
		return m.OldTenantID(ctx)
	case priceunit.FieldStatus:
		return m.OldStatus(ctx)
	case priceunit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case priceunit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case priceunit.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case priceunit.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case priceunit.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case priceunit.FieldName:
		return m.OldName(ctx)
	case priceunit.FieldCode:
		return m.OldCode(ctx)
	case priceunit.FieldSymbol:
		return m.OldSymbol(ctx)
	case priceunit.FieldBaseCurrency:
		return m.OldBaseCurrency(ctx)
	case priceunit.FieldConversionRate:
		return m.OldConversionRate(ctx)
	case priceunit.FieldPrecision:
		return m.OldPrecision(ctx)
	}
	return nil, fmt.Errorf("unknown PriceUnit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceUnitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case priceunit.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case priceunit.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case priceunit.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case priceunit.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case priceunit.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case priceunit.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case priceunit.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case priceunit.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case priceunit.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case priceunit.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case priceunit.FieldBaseCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseCurrency(v)
		return nil
	case priceunit.FieldConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversionRate(v)
		return nil
	case priceunit.FieldPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrecision(v)
		return nil
	}
	return fmt.Errorf("unknown PriceUnit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PriceUnitMutation) AddedFields() []string {
	var fields []string
	if m.addprecision != nil {
		fields = append(fields, priceunit.FieldPrecision)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PriceUnitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case priceunit.FieldPrecision:
		return m.AddedPrecision()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceUnitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case priceunit.FieldPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrecision(v)
		return nil
	}
	return fmt.Errorf("unknown PriceUnit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PriceUnitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(priceunit.FieldCreatedBy) {
		fields = append(fields, priceunit.FieldCreatedBy)
	}
	if m.FieldCleared(priceunit.FieldUpdatedBy) {
		fields = append(fields, priceunit.FieldUpdatedBy)
	}
	if m.FieldCleared(priceunit.FieldEnvironmentID) {
		fields = append(fields, priceunit.FieldEnvironmentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PriceUnitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PriceUnitMutation) ClearField(name string) error {
	switch name {
	case priceunit.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case priceunit.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case priceunit.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	}
	return fmt.Errorf("unknown PriceUnit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PriceUnitMutation) ResetField(name string) error {
	switch name {
	case priceunit.FieldTenantID:
		m.ResetTenantID()
		return nil
	case priceunit.FieldStatus:
		m.ResetStatus()
		return nil
	case priceunit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case priceunit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case priceunit.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case priceunit.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case priceunit.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case priceunit.FieldName:
		m.ResetName()
		return nil
	case priceunit.FieldCode:
		m.ResetCode()
		return nil
	case priceunit.FieldSymbol:
		m.ResetSymbol()
		return nil
	case priceunit.FieldBaseCurrency:
		m.ResetBaseCurrency()
		return nil
	case priceunit.FieldConversionRate:
		m.ResetConversionRate()
		return nil
	case priceunit.FieldPrecision:
		m.ResetPrecision()
		return nil
	}
	return fmt.Errorf("unknown PriceUnit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PriceUnitMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prices != nil {
		edges = append(edges, priceunit.EdgePrices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PriceUnitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case priceunit.EdgePrices:
		ids := make([]ent.Value, 0, len(m.prices))
		for id := range m.prices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PriceUnitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprices != nil {
		edges = append(edges, priceunit.EdgePrices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PriceUnitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case priceunit.EdgePrices:
		ids := make([]ent.Value, 0, len(m.removedprices))
		for id := range m.removedprices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PriceUnitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprices {
		edges = append(edges, priceunit.EdgePrices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PriceUnitMutation) EdgeCleared(name string) bool {
	switch name {
	case priceunit.EdgePrices:
		return m.clearedprices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PriceUnitMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PriceUnit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PriceUnitMutation) ResetEdge(name string) error {
	switch name {
	case priceunit.EdgePrices:
		m.ResetPrices()
		return nil
	}
	return fmt.Errorf("unknown PriceUnit edge %s", name)
}

// SecretMutation represents an operation that mutates the Secret nodes in the graph.
type SecretMutation struct {
	config
	op                Op
	typ               string
	id                *string
	tenant_id         *string
	status            *string
	created_at        *time.Time
	updated_at        *time.Time
	created_by        *string
	updated_by        *string
	environment_id    *string
	name              *string
	_type             *string
	provider          *string
	value             *string
	display_id        *string
	permissions       *[]string
	appendpermissions []string
	expires_at        *time.Time
	last_used_at      *time.Time
	provider_data     *map[string]string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Secret, error)
	predicates        []predicate.Secret
}

var _ ent.Mutation = (*SecretMutation)(nil)

// secretOption allows management of the mutation configuration using functional options.
type secretOption func(*SecretMutation)

// newSecretMutation creates new mutation for the Secret entity.
func newSecretMutation(c config, op Op, opts ...secretOption) *SecretMutation {
	m := &SecretMutation{
		config:        c,
		op:            op,
		typ:           TypeSecret,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSecretID sets the ID field of the mutation.
func withSecretID(id string) secretOption {
	return func(m *SecretMutation) {
		var (
			err   error
			once  sync.Once
			value *Secret
		)
		m.oldValue = func(ctx context.Context) (*Secret, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Secret.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSecret sets the old Secret of the mutation.
func withSecret(node *Secret) secretOption {
	return func(m *SecretMutation) {
		m.oldValue = func(context.Context) (*Secret, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SecretMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SecretMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Secret entities.
func (m *SecretMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SecretMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SecretMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Secret.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *SecretMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SecretMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SecretMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *SecretMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SecretMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SecretMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SecretMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SecretMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SecretMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SecretMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SecretMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SecretMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *SecretMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SecretMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SecretMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[secret.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SecretMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[secret.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SecretMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, secret.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SecretMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SecretMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SecretMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[secret.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SecretMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[secret.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SecretMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, secret.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *SecretMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *SecretMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *SecretMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[secret.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *SecretMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[secret.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *SecretMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, secret.FieldEnvironmentID)
}

// SetName sets the "name" field.
func (m *SecretMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SecretMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SecretMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *SecretMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *SecretMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *SecretMutation) ResetType() {
	m._type = nil
}

// SetProvider sets the "provider" field.
func (m *SecretMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *SecretMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *SecretMutation) ResetProvider() {
	m.provider = nil
}

// SetValue sets the "value" field.
func (m *SecretMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *SecretMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ClearValue clears the value of the "value" field.
func (m *SecretMutation) ClearValue() {
	m.value = nil
	m.clearedFields[secret.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *SecretMutation) ValueCleared() bool {
	_, ok := m.clearedFields[secret.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *SecretMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, secret.FieldValue)
}

// SetDisplayID sets the "display_id" field.
func (m *SecretMutation) SetDisplayID(s string) {
	m.display_id = &s
}

// DisplayID returns the value of the "display_id" field in the mutation.
func (m *SecretMutation) DisplayID() (r string, exists bool) {
	v := m.display_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayID returns the old "display_id" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldDisplayID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayID: %w", err)
	}
	return oldValue.DisplayID, nil
}

// ClearDisplayID clears the value of the "display_id" field.
func (m *SecretMutation) ClearDisplayID() {
	m.display_id = nil
	m.clearedFields[secret.FieldDisplayID] = struct{}{}
}

// DisplayIDCleared returns if the "display_id" field was cleared in this mutation.
func (m *SecretMutation) DisplayIDCleared() bool {
	_, ok := m.clearedFields[secret.FieldDisplayID]
	return ok
}

// ResetDisplayID resets all changes to the "display_id" field.
func (m *SecretMutation) ResetDisplayID() {
	m.display_id = nil
	delete(m.clearedFields, secret.FieldDisplayID)
}

// SetPermissions sets the "permissions" field.
func (m *SecretMutation) SetPermissions(s []string) {
	m.permissions = &s
	m.appendpermissions = nil
}

// Permissions returns the value of the "permissions" field in the mutation.
func (m *SecretMutation) Permissions() (r []string, exists bool) {
	v := m.permissions
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissions returns the old "permissions" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldPermissions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissions: %w", err)
	}
	return oldValue.Permissions, nil
}

// AppendPermissions adds s to the "permissions" field.
func (m *SecretMutation) AppendPermissions(s []string) {
	m.appendpermissions = append(m.appendpermissions, s...)
}

// AppendedPermissions returns the list of values that were appended to the "permissions" field in this mutation.
func (m *SecretMutation) AppendedPermissions() ([]string, bool) {
	if len(m.appendpermissions) == 0 {
		return nil, false
	}
	return m.appendpermissions, true
}

// ClearPermissions clears the value of the "permissions" field.
func (m *SecretMutation) ClearPermissions() {
	m.permissions = nil
	m.appendpermissions = nil
	m.clearedFields[secret.FieldPermissions] = struct{}{}
}

// PermissionsCleared returns if the "permissions" field was cleared in this mutation.
func (m *SecretMutation) PermissionsCleared() bool {
	_, ok := m.clearedFields[secret.FieldPermissions]
	return ok
}

// ResetPermissions resets all changes to the "permissions" field.
func (m *SecretMutation) ResetPermissions() {
	m.permissions = nil
	m.appendpermissions = nil
	delete(m.clearedFields, secret.FieldPermissions)
}

// SetExpiresAt sets the "expires_at" field.
func (m *SecretMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *SecretMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (m *SecretMutation) ClearExpiresAt() {
	m.expires_at = nil
	m.clearedFields[secret.FieldExpiresAt] = struct{}{}
}

// ExpiresAtCleared returns if the "expires_at" field was cleared in this mutation.
func (m *SecretMutation) ExpiresAtCleared() bool {
	_, ok := m.clearedFields[secret.FieldExpiresAt]
	return ok
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *SecretMutation) ResetExpiresAt() {
	m.expires_at = nil
	delete(m.clearedFields, secret.FieldExpiresAt)
}

// SetLastUsedAt sets the "last_used_at" field.
func (m *SecretMutation) SetLastUsedAt(t time.Time) {
	m.last_used_at = &t
}

// LastUsedAt returns the value of the "last_used_at" field in the mutation.
func (m *SecretMutation) LastUsedAt() (r time.Time, exists bool) {
	v := m.last_used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsedAt returns the old "last_used_at" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldLastUsedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsedAt: %w", err)
	}
	return oldValue.LastUsedAt, nil
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (m *SecretMutation) ClearLastUsedAt() {
	m.last_used_at = nil
	m.clearedFields[secret.FieldLastUsedAt] = struct{}{}
}

// LastUsedAtCleared returns if the "last_used_at" field was cleared in this mutation.
func (m *SecretMutation) LastUsedAtCleared() bool {
	_, ok := m.clearedFields[secret.FieldLastUsedAt]
	return ok
}

// ResetLastUsedAt resets all changes to the "last_used_at" field.
func (m *SecretMutation) ResetLastUsedAt() {
	m.last_used_at = nil
	delete(m.clearedFields, secret.FieldLastUsedAt)
}

// SetProviderData sets the "provider_data" field.
func (m *SecretMutation) SetProviderData(value map[string]string) {
	m.provider_data = &value
}

// ProviderData returns the value of the "provider_data" field in the mutation.
func (m *SecretMutation) ProviderData() (r map[string]string, exists bool) {
	v := m.provider_data
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderData returns the old "provider_data" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldProviderData(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderData: %w", err)
	}
	return oldValue.ProviderData, nil
}

// ClearProviderData clears the value of the "provider_data" field.
func (m *SecretMutation) ClearProviderData() {
	m.provider_data = nil
	m.clearedFields[secret.FieldProviderData] = struct{}{}
}

// ProviderDataCleared returns if the "provider_data" field was cleared in this mutation.
func (m *SecretMutation) ProviderDataCleared() bool {
	_, ok := m.clearedFields[secret.FieldProviderData]
	return ok
}

// ResetProviderData resets all changes to the "provider_data" field.
func (m *SecretMutation) ResetProviderData() {
	m.provider_data = nil
	delete(m.clearedFields, secret.FieldProviderData)
}

// Where appends a list predicates to the SecretMutation builder.
func (m *SecretMutation) Where(ps ...predicate.Secret) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SecretMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SecretMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Secret, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SecretMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SecretMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Secret).
func (m *SecretMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SecretMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.tenant_id != nil {
		fields = append(fields, secret.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, secret.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, secret.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, secret.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, secret.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, secret.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, secret.FieldEnvironmentID)
	}
	if m.name != nil {
		fields = append(fields, secret.FieldName)
	}
	if m._type != nil {
		fields = append(fields, secret.FieldType)
	}
	if m.provider != nil {
		fields = append(fields, secret.FieldProvider)
	}
	if m.value != nil {
		fields = append(fields, secret.FieldValue)
	}
	if m.display_id != nil {
		fields = append(fields, secret.FieldDisplayID)
	}
	if m.permissions != nil {
		fields = append(fields, secret.FieldPermissions)
	}
	if m.expires_at != nil {
		fields = append(fields, secret.FieldExpiresAt)
	}
	if m.last_used_at != nil {
		fields = append(fields, secret.FieldLastUsedAt)
	}
	if m.provider_data != nil {
		fields = append(fields, secret.FieldProviderData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SecretMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case secret.FieldTenantID:
		return m.TenantID()
	case secret.FieldStatus:
		return m.Status()
	case secret.FieldCreatedAt:
		return m.CreatedAt()
	case secret.FieldUpdatedAt:
		return m.UpdatedAt()
	case secret.FieldCreatedBy:
		return m.CreatedBy()
	case secret.FieldUpdatedBy:
		return m.UpdatedBy()
	case secret.FieldEnvironmentID:
		return m.EnvironmentID()
	case secret.FieldName:
		return m.Name()
	case secret.FieldType:
		return m.GetType()
	case secret.FieldProvider:
		return m.Provider()
	case secret.FieldValue:
		return m.Value()
	case secret.FieldDisplayID:
		return m.DisplayID()
	case secret.FieldPermissions:
		return m.Permissions()
	case secret.FieldExpiresAt:
		return m.ExpiresAt()
	case secret.FieldLastUsedAt:
		return m.LastUsedAt()
	case secret.FieldProviderData:
		return m.ProviderData()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SecretMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case secret.FieldTenantID:
		return m.OldTenantID(ctx)
	case secret.FieldStatus:
		return m.OldStatus(ctx)
	case secret.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case secret.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case secret.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case secret.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case secret.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case secret.FieldName:
		return m.OldName(ctx)
	case secret.FieldType:
		return m.OldType(ctx)
	case secret.FieldProvider:
		return m.OldProvider(ctx)
	case secret.FieldValue:
		return m.OldValue(ctx)
	case secret.FieldDisplayID:
		return m.OldDisplayID(ctx)
	case secret.FieldPermissions:
		return m.OldPermissions(ctx)
	case secret.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case secret.FieldLastUsedAt:
		return m.OldLastUsedAt(ctx)
	case secret.FieldProviderData:
		return m.OldProviderData(ctx)
	}
	return nil, fmt.Errorf("unknown Secret field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SecretMutation) SetField(name string, value ent.Value) error {
	switch name {
	case secret.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case secret.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case secret.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case secret.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case secret.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case secret.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case secret.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case secret.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case secret.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case secret.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case secret.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case secret.FieldDisplayID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayID(v)
		return nil
	case secret.FieldPermissions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissions(v)
		return nil
	case secret.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case secret.FieldLastUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsedAt(v)
		return nil
	case secret.FieldProviderData:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderData(v)
		return nil
	}
	return fmt.Errorf("unknown Secret field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SecretMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SecretMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SecretMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Secret numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SecretMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(secret.FieldCreatedBy) {
		fields = append(fields, secret.FieldCreatedBy)
	}
	if m.FieldCleared(secret.FieldUpdatedBy) {
		fields = append(fields, secret.FieldUpdatedBy)
	}
	if m.FieldCleared(secret.FieldEnvironmentID) {
		fields = append(fields, secret.FieldEnvironmentID)
	}
	if m.FieldCleared(secret.FieldValue) {
		fields = append(fields, secret.FieldValue)
	}
	if m.FieldCleared(secret.FieldDisplayID) {
		fields = append(fields, secret.FieldDisplayID)
	}
	if m.FieldCleared(secret.FieldPermissions) {
		fields = append(fields, secret.FieldPermissions)
	}
	if m.FieldCleared(secret.FieldExpiresAt) {
		fields = append(fields, secret.FieldExpiresAt)
	}
	if m.FieldCleared(secret.FieldLastUsedAt) {
		fields = append(fields, secret.FieldLastUsedAt)
	}
	if m.FieldCleared(secret.FieldProviderData) {
		fields = append(fields, secret.FieldProviderData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SecretMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SecretMutation) ClearField(name string) error {
	switch name {
	case secret.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case secret.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case secret.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case secret.FieldValue:
		m.ClearValue()
		return nil
	case secret.FieldDisplayID:
		m.ClearDisplayID()
		return nil
	case secret.FieldPermissions:
		m.ClearPermissions()
		return nil
	case secret.FieldExpiresAt:
		m.ClearExpiresAt()
		return nil
	case secret.FieldLastUsedAt:
		m.ClearLastUsedAt()
		return nil
	case secret.FieldProviderData:
		m.ClearProviderData()
		return nil
	}
	return fmt.Errorf("unknown Secret nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SecretMutation) ResetField(name string) error {
	switch name {
	case secret.FieldTenantID:
		m.ResetTenantID()
		return nil
	case secret.FieldStatus:
		m.ResetStatus()
		return nil
	case secret.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case secret.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case secret.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case secret.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case secret.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case secret.FieldName:
		m.ResetName()
		return nil
	case secret.FieldType:
		m.ResetType()
		return nil
	case secret.FieldProvider:
		m.ResetProvider()
		return nil
	case secret.FieldValue:
		m.ResetValue()
		return nil
	case secret.FieldDisplayID:
		m.ResetDisplayID()
		return nil
	case secret.FieldPermissions:
		m.ResetPermissions()
		return nil
	case secret.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case secret.FieldLastUsedAt:
		m.ResetLastUsedAt()
		return nil
	case secret.FieldProviderData:
		m.ResetProviderData()
		return nil
	}
	return fmt.Errorf("unknown Secret field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SecretMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SecretMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SecretMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SecretMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SecretMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SecretMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SecretMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Secret unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SecretMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Secret edge %s", name)
}

// SubscriptionMutation represents an operation that mutates the Subscription nodes in the graph.
type SubscriptionMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	tenant_id               *string
	status                  *string
	created_at              *time.Time
	updated_at              *time.Time
	created_by              *string
	updated_by              *string
	environment_id          *string
	lookup_key              *string
	customer_id             *string
	plan_id                 *string
	subscription_status     *string
	currency                *string
	billing_anchor          *time.Time
	start_date              *time.Time
	end_date                *time.Time
	current_period_start    *time.Time
	current_period_end      *time.Time
	cancelled_at            *time.Time
	cancel_at               *time.Time
	cancel_at_period_end    *bool
	trial_start             *time.Time
	trial_end               *time.Time
	billing_cadence         *string
	billing_period          *string
	billing_period_count    *int
	addbilling_period_count *int
	version                 *int
	addversion              *int
	metadata                *map[string]string
	pause_status            *string
	active_pause_id         *string
	billing_cycle           *string
	commitment_amount       *decimal.Decimal
	overage_factor          *decimal.Decimal
	clearedFields           map[string]struct{}
	line_items              map[string]struct{}
	removedline_items       map[string]struct{}
	clearedline_items       bool
	pauses                  map[string]struct{}
	removedpauses           map[string]struct{}
	clearedpauses           bool
	credit_grants           map[string]struct{}
	removedcredit_grants    map[string]struct{}
	clearedcredit_grants    bool
	schedule                *string
	clearedschedule         bool
	done                    bool
	oldValue                func(context.Context) (*Subscription, error)
	predicates              []predicate.Subscription
}

var _ ent.Mutation = (*SubscriptionMutation)(nil)

// subscriptionOption allows management of the mutation configuration using functional options.
type subscriptionOption func(*SubscriptionMutation)

// newSubscriptionMutation creates new mutation for the Subscription entity.
func newSubscriptionMutation(c config, op Op, opts ...subscriptionOption) *SubscriptionMutation {
	m := &SubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionID sets the ID field of the mutation.
func withSubscriptionID(id string) subscriptionOption {
	return func(m *SubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscription
		)
		m.oldValue = func(ctx context.Context) (*Subscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscription sets the old Subscription of the mutation.
func withSubscription(node *Subscription) subscriptionOption {
	return func(m *SubscriptionMutation) {
		m.oldValue = func(context.Context) (*Subscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Subscription entities.
func (m *SubscriptionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *SubscriptionMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SubscriptionMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SubscriptionMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *SubscriptionMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubscriptionMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SubscriptionMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *SubscriptionMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SubscriptionMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SubscriptionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[subscription.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SubscriptionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[subscription.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SubscriptionMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, subscription.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SubscriptionMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SubscriptionMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SubscriptionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[subscription.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SubscriptionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[subscription.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SubscriptionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, subscription.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *SubscriptionMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *SubscriptionMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *SubscriptionMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[subscription.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *SubscriptionMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[subscription.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *SubscriptionMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, subscription.FieldEnvironmentID)
}

// SetLookupKey sets the "lookup_key" field.
func (m *SubscriptionMutation) SetLookupKey(s string) {
	m.lookup_key = &s
}

// LookupKey returns the value of the "lookup_key" field in the mutation.
func (m *SubscriptionMutation) LookupKey() (r string, exists bool) {
	v := m.lookup_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLookupKey returns the old "lookup_key" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldLookupKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookupKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookupKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookupKey: %w", err)
	}
	return oldValue.LookupKey, nil
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (m *SubscriptionMutation) ClearLookupKey() {
	m.lookup_key = nil
	m.clearedFields[subscription.FieldLookupKey] = struct{}{}
}

// LookupKeyCleared returns if the "lookup_key" field was cleared in this mutation.
func (m *SubscriptionMutation) LookupKeyCleared() bool {
	_, ok := m.clearedFields[subscription.FieldLookupKey]
	return ok
}

// ResetLookupKey resets all changes to the "lookup_key" field.
func (m *SubscriptionMutation) ResetLookupKey() {
	m.lookup_key = nil
	delete(m.clearedFields, subscription.FieldLookupKey)
}

// SetCustomerID sets the "customer_id" field.
func (m *SubscriptionMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *SubscriptionMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *SubscriptionMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetPlanID sets the "plan_id" field.
func (m *SubscriptionMutation) SetPlanID(s string) {
	m.plan_id = &s
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *SubscriptionMutation) PlanID() (r string, exists bool) {
	v := m.plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldPlanID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *SubscriptionMutation) ResetPlanID() {
	m.plan_id = nil
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (m *SubscriptionMutation) SetSubscriptionStatus(s string) {
	m.subscription_status = &s
}

// SubscriptionStatus returns the value of the "subscription_status" field in the mutation.
func (m *SubscriptionMutation) SubscriptionStatus() (r string, exists bool) {
	v := m.subscription_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionStatus returns the old "subscription_status" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldSubscriptionStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionStatus: %w", err)
	}
	return oldValue.SubscriptionStatus, nil
}

// ResetSubscriptionStatus resets all changes to the "subscription_status" field.
func (m *SubscriptionMutation) ResetSubscriptionStatus() {
	m.subscription_status = nil
}

// SetCurrency sets the "currency" field.
func (m *SubscriptionMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *SubscriptionMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *SubscriptionMutation) ResetCurrency() {
	m.currency = nil
}

// SetBillingAnchor sets the "billing_anchor" field.
func (m *SubscriptionMutation) SetBillingAnchor(t time.Time) {
	m.billing_anchor = &t
}

// BillingAnchor returns the value of the "billing_anchor" field in the mutation.
func (m *SubscriptionMutation) BillingAnchor() (r time.Time, exists bool) {
	v := m.billing_anchor
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingAnchor returns the old "billing_anchor" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingAnchor(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingAnchor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingAnchor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingAnchor: %w", err)
	}
	return oldValue.BillingAnchor, nil
}

// ResetBillingAnchor resets all changes to the "billing_anchor" field.
func (m *SubscriptionMutation) ResetBillingAnchor() {
	m.billing_anchor = nil
}

// SetStartDate sets the "start_date" field.
func (m *SubscriptionMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *SubscriptionMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *SubscriptionMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *SubscriptionMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *SubscriptionMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldEndDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *SubscriptionMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[subscription.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *SubscriptionMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[subscription.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *SubscriptionMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, subscription.FieldEndDate)
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (m *SubscriptionMutation) SetCurrentPeriodStart(t time.Time) {
	m.current_period_start = &t
}

// CurrentPeriodStart returns the value of the "current_period_start" field in the mutation.
func (m *SubscriptionMutation) CurrentPeriodStart() (r time.Time, exists bool) {
	v := m.current_period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPeriodStart returns the old "current_period_start" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCurrentPeriodStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPeriodStart: %w", err)
	}
	return oldValue.CurrentPeriodStart, nil
}

// ResetCurrentPeriodStart resets all changes to the "current_period_start" field.
func (m *SubscriptionMutation) ResetCurrentPeriodStart() {
	m.current_period_start = nil
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (m *SubscriptionMutation) SetCurrentPeriodEnd(t time.Time) {
	m.current_period_end = &t
}

// CurrentPeriodEnd returns the value of the "current_period_end" field in the mutation.
func (m *SubscriptionMutation) CurrentPeriodEnd() (r time.Time, exists bool) {
	v := m.current_period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPeriodEnd returns the old "current_period_end" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCurrentPeriodEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPeriodEnd: %w", err)
	}
	return oldValue.CurrentPeriodEnd, nil
}

// ResetCurrentPeriodEnd resets all changes to the "current_period_end" field.
func (m *SubscriptionMutation) ResetCurrentPeriodEnd() {
	m.current_period_end = nil
}

// SetCancelledAt sets the "cancelled_at" field.
func (m *SubscriptionMutation) SetCancelledAt(t time.Time) {
	m.cancelled_at = &t
}

// CancelledAt returns the value of the "cancelled_at" field in the mutation.
func (m *SubscriptionMutation) CancelledAt() (r time.Time, exists bool) {
	v := m.cancelled_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelledAt returns the old "cancelled_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCancelledAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelledAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelledAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelledAt: %w", err)
	}
	return oldValue.CancelledAt, nil
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (m *SubscriptionMutation) ClearCancelledAt() {
	m.cancelled_at = nil
	m.clearedFields[subscription.FieldCancelledAt] = struct{}{}
}

// CancelledAtCleared returns if the "cancelled_at" field was cleared in this mutation.
func (m *SubscriptionMutation) CancelledAtCleared() bool {
	_, ok := m.clearedFields[subscription.FieldCancelledAt]
	return ok
}

// ResetCancelledAt resets all changes to the "cancelled_at" field.
func (m *SubscriptionMutation) ResetCancelledAt() {
	m.cancelled_at = nil
	delete(m.clearedFields, subscription.FieldCancelledAt)
}

// SetCancelAt sets the "cancel_at" field.
func (m *SubscriptionMutation) SetCancelAt(t time.Time) {
	m.cancel_at = &t
}

// CancelAt returns the value of the "cancel_at" field in the mutation.
func (m *SubscriptionMutation) CancelAt() (r time.Time, exists bool) {
	v := m.cancel_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelAt returns the old "cancel_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCancelAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelAt: %w", err)
	}
	return oldValue.CancelAt, nil
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (m *SubscriptionMutation) ClearCancelAt() {
	m.cancel_at = nil
	m.clearedFields[subscription.FieldCancelAt] = struct{}{}
}

// CancelAtCleared returns if the "cancel_at" field was cleared in this mutation.
func (m *SubscriptionMutation) CancelAtCleared() bool {
	_, ok := m.clearedFields[subscription.FieldCancelAt]
	return ok
}

// ResetCancelAt resets all changes to the "cancel_at" field.
func (m *SubscriptionMutation) ResetCancelAt() {
	m.cancel_at = nil
	delete(m.clearedFields, subscription.FieldCancelAt)
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (m *SubscriptionMutation) SetCancelAtPeriodEnd(b bool) {
	m.cancel_at_period_end = &b
}

// CancelAtPeriodEnd returns the value of the "cancel_at_period_end" field in the mutation.
func (m *SubscriptionMutation) CancelAtPeriodEnd() (r bool, exists bool) {
	v := m.cancel_at_period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelAtPeriodEnd returns the old "cancel_at_period_end" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCancelAtPeriodEnd(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelAtPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelAtPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelAtPeriodEnd: %w", err)
	}
	return oldValue.CancelAtPeriodEnd, nil
}

// ResetCancelAtPeriodEnd resets all changes to the "cancel_at_period_end" field.
func (m *SubscriptionMutation) ResetCancelAtPeriodEnd() {
	m.cancel_at_period_end = nil
}

// SetTrialStart sets the "trial_start" field.
func (m *SubscriptionMutation) SetTrialStart(t time.Time) {
	m.trial_start = &t
}

// TrialStart returns the value of the "trial_start" field in the mutation.
func (m *SubscriptionMutation) TrialStart() (r time.Time, exists bool) {
	v := m.trial_start
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialStart returns the old "trial_start" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldTrialStart(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialStart: %w", err)
	}
	return oldValue.TrialStart, nil
}

// ClearTrialStart clears the value of the "trial_start" field.
func (m *SubscriptionMutation) ClearTrialStart() {
	m.trial_start = nil
	m.clearedFields[subscription.FieldTrialStart] = struct{}{}
}

// TrialStartCleared returns if the "trial_start" field was cleared in this mutation.
func (m *SubscriptionMutation) TrialStartCleared() bool {
	_, ok := m.clearedFields[subscription.FieldTrialStart]
	return ok
}

// ResetTrialStart resets all changes to the "trial_start" field.
func (m *SubscriptionMutation) ResetTrialStart() {
	m.trial_start = nil
	delete(m.clearedFields, subscription.FieldTrialStart)
}

// SetTrialEnd sets the "trial_end" field.
func (m *SubscriptionMutation) SetTrialEnd(t time.Time) {
	m.trial_end = &t
}

// TrialEnd returns the value of the "trial_end" field in the mutation.
func (m *SubscriptionMutation) TrialEnd() (r time.Time, exists bool) {
	v := m.trial_end
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialEnd returns the old "trial_end" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldTrialEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialEnd: %w", err)
	}
	return oldValue.TrialEnd, nil
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (m *SubscriptionMutation) ClearTrialEnd() {
	m.trial_end = nil
	m.clearedFields[subscription.FieldTrialEnd] = struct{}{}
}

// TrialEndCleared returns if the "trial_end" field was cleared in this mutation.
func (m *SubscriptionMutation) TrialEndCleared() bool {
	_, ok := m.clearedFields[subscription.FieldTrialEnd]
	return ok
}

// ResetTrialEnd resets all changes to the "trial_end" field.
func (m *SubscriptionMutation) ResetTrialEnd() {
	m.trial_end = nil
	delete(m.clearedFields, subscription.FieldTrialEnd)
}

// SetBillingCadence sets the "billing_cadence" field.
func (m *SubscriptionMutation) SetBillingCadence(s string) {
	m.billing_cadence = &s
}

// BillingCadence returns the value of the "billing_cadence" field in the mutation.
func (m *SubscriptionMutation) BillingCadence() (r string, exists bool) {
	v := m.billing_cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingCadence returns the old "billing_cadence" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingCadence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingCadence: %w", err)
	}
	return oldValue.BillingCadence, nil
}

// ResetBillingCadence resets all changes to the "billing_cadence" field.
func (m *SubscriptionMutation) ResetBillingCadence() {
	m.billing_cadence = nil
}

// SetBillingPeriod sets the "billing_period" field.
func (m *SubscriptionMutation) SetBillingPeriod(s string) {
	m.billing_period = &s
}

// BillingPeriod returns the value of the "billing_period" field in the mutation.
func (m *SubscriptionMutation) BillingPeriod() (r string, exists bool) {
	v := m.billing_period
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriod returns the old "billing_period" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingPeriod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriod: %w", err)
	}
	return oldValue.BillingPeriod, nil
}

// ResetBillingPeriod resets all changes to the "billing_period" field.
func (m *SubscriptionMutation) ResetBillingPeriod() {
	m.billing_period = nil
}

// SetBillingPeriodCount sets the "billing_period_count" field.
func (m *SubscriptionMutation) SetBillingPeriodCount(i int) {
	m.billing_period_count = &i
	m.addbilling_period_count = nil
}

// BillingPeriodCount returns the value of the "billing_period_count" field in the mutation.
func (m *SubscriptionMutation) BillingPeriodCount() (r int, exists bool) {
	v := m.billing_period_count
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriodCount returns the old "billing_period_count" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingPeriodCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriodCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriodCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriodCount: %w", err)
	}
	return oldValue.BillingPeriodCount, nil
}

// AddBillingPeriodCount adds i to the "billing_period_count" field.
func (m *SubscriptionMutation) AddBillingPeriodCount(i int) {
	if m.addbilling_period_count != nil {
		*m.addbilling_period_count += i
	} else {
		m.addbilling_period_count = &i
	}
}

// AddedBillingPeriodCount returns the value that was added to the "billing_period_count" field in this mutation.
func (m *SubscriptionMutation) AddedBillingPeriodCount() (r int, exists bool) {
	v := m.addbilling_period_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetBillingPeriodCount resets all changes to the "billing_period_count" field.
func (m *SubscriptionMutation) ResetBillingPeriodCount() {
	m.billing_period_count = nil
	m.addbilling_period_count = nil
}

// SetVersion sets the "version" field.
func (m *SubscriptionMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *SubscriptionMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *SubscriptionMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *SubscriptionMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *SubscriptionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetMetadata sets the "metadata" field.
func (m *SubscriptionMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SubscriptionMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SubscriptionMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[subscription.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SubscriptionMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[subscription.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SubscriptionMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, subscription.FieldMetadata)
}

// SetPauseStatus sets the "pause_status" field.
func (m *SubscriptionMutation) SetPauseStatus(s string) {
	m.pause_status = &s
}

// PauseStatus returns the value of the "pause_status" field in the mutation.
func (m *SubscriptionMutation) PauseStatus() (r string, exists bool) {
	v := m.pause_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPauseStatus returns the old "pause_status" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldPauseStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPauseStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPauseStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPauseStatus: %w", err)
	}
	return oldValue.PauseStatus, nil
}

// ResetPauseStatus resets all changes to the "pause_status" field.
func (m *SubscriptionMutation) ResetPauseStatus() {
	m.pause_status = nil
}

// SetActivePauseID sets the "active_pause_id" field.
func (m *SubscriptionMutation) SetActivePauseID(s string) {
	m.active_pause_id = &s
}

// ActivePauseID returns the value of the "active_pause_id" field in the mutation.
func (m *SubscriptionMutation) ActivePauseID() (r string, exists bool) {
	v := m.active_pause_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActivePauseID returns the old "active_pause_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldActivePauseID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivePauseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivePauseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivePauseID: %w", err)
	}
	return oldValue.ActivePauseID, nil
}

// ClearActivePauseID clears the value of the "active_pause_id" field.
func (m *SubscriptionMutation) ClearActivePauseID() {
	m.active_pause_id = nil
	m.clearedFields[subscription.FieldActivePauseID] = struct{}{}
}

// ActivePauseIDCleared returns if the "active_pause_id" field was cleared in this mutation.
func (m *SubscriptionMutation) ActivePauseIDCleared() bool {
	_, ok := m.clearedFields[subscription.FieldActivePauseID]
	return ok
}

// ResetActivePauseID resets all changes to the "active_pause_id" field.
func (m *SubscriptionMutation) ResetActivePauseID() {
	m.active_pause_id = nil
	delete(m.clearedFields, subscription.FieldActivePauseID)
}

// SetBillingCycle sets the "billing_cycle" field.
func (m *SubscriptionMutation) SetBillingCycle(s string) {
	m.billing_cycle = &s
}

// BillingCycle returns the value of the "billing_cycle" field in the mutation.
func (m *SubscriptionMutation) BillingCycle() (r string, exists bool) {
	v := m.billing_cycle
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingCycle returns the old "billing_cycle" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingCycle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingCycle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingCycle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingCycle: %w", err)
	}
	return oldValue.BillingCycle, nil
}

// ResetBillingCycle resets all changes to the "billing_cycle" field.
func (m *SubscriptionMutation) ResetBillingCycle() {
	m.billing_cycle = nil
}

// SetCommitmentAmount sets the "commitment_amount" field.
func (m *SubscriptionMutation) SetCommitmentAmount(d decimal.Decimal) {
	m.commitment_amount = &d
}

// CommitmentAmount returns the value of the "commitment_amount" field in the mutation.
func (m *SubscriptionMutation) CommitmentAmount() (r decimal.Decimal, exists bool) {
	v := m.commitment_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldCommitmentAmount returns the old "commitment_amount" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCommitmentAmount(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommitmentAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommitmentAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommitmentAmount: %w", err)
	}
	return oldValue.CommitmentAmount, nil
}

// ClearCommitmentAmount clears the value of the "commitment_amount" field.
func (m *SubscriptionMutation) ClearCommitmentAmount() {
	m.commitment_amount = nil
	m.clearedFields[subscription.FieldCommitmentAmount] = struct{}{}
}

// CommitmentAmountCleared returns if the "commitment_amount" field was cleared in this mutation.
func (m *SubscriptionMutation) CommitmentAmountCleared() bool {
	_, ok := m.clearedFields[subscription.FieldCommitmentAmount]
	return ok
}

// ResetCommitmentAmount resets all changes to the "commitment_amount" field.
func (m *SubscriptionMutation) ResetCommitmentAmount() {
	m.commitment_amount = nil
	delete(m.clearedFields, subscription.FieldCommitmentAmount)
}

// SetOverageFactor sets the "overage_factor" field.
func (m *SubscriptionMutation) SetOverageFactor(d decimal.Decimal) {
	m.overage_factor = &d
}

// OverageFactor returns the value of the "overage_factor" field in the mutation.
func (m *SubscriptionMutation) OverageFactor() (r decimal.Decimal, exists bool) {
	v := m.overage_factor
	if v == nil {
		return
	}
	return *v, true
}

// OldOverageFactor returns the old "overage_factor" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldOverageFactor(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverageFactor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverageFactor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverageFactor: %w", err)
	}
	return oldValue.OverageFactor, nil
}

// ClearOverageFactor clears the value of the "overage_factor" field.
func (m *SubscriptionMutation) ClearOverageFactor() {
	m.overage_factor = nil
	m.clearedFields[subscription.FieldOverageFactor] = struct{}{}
}

// OverageFactorCleared returns if the "overage_factor" field was cleared in this mutation.
func (m *SubscriptionMutation) OverageFactorCleared() bool {
	_, ok := m.clearedFields[subscription.FieldOverageFactor]
	return ok
}

// ResetOverageFactor resets all changes to the "overage_factor" field.
func (m *SubscriptionMutation) ResetOverageFactor() {
	m.overage_factor = nil
	delete(m.clearedFields, subscription.FieldOverageFactor)
}

// AddLineItemIDs adds the "line_items" edge to the SubscriptionLineItem entity by ids.
func (m *SubscriptionMutation) AddLineItemIDs(ids ...string) {
	if m.line_items == nil {
		m.line_items = make(map[string]struct{})
	}
	for i := range ids {
		m.line_items[ids[i]] = struct{}{}
	}
}

// ClearLineItems clears the "line_items" edge to the SubscriptionLineItem entity.
func (m *SubscriptionMutation) ClearLineItems() {
	m.clearedline_items = true
}

// LineItemsCleared reports if the "line_items" edge to the SubscriptionLineItem entity was cleared.
func (m *SubscriptionMutation) LineItemsCleared() bool {
	return m.clearedline_items
}

// RemoveLineItemIDs removes the "line_items" edge to the SubscriptionLineItem entity by IDs.
func (m *SubscriptionMutation) RemoveLineItemIDs(ids ...string) {
	if m.removedline_items == nil {
		m.removedline_items = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.line_items, ids[i])
		m.removedline_items[ids[i]] = struct{}{}
	}
}

// RemovedLineItems returns the removed IDs of the "line_items" edge to the SubscriptionLineItem entity.
func (m *SubscriptionMutation) RemovedLineItemsIDs() (ids []string) {
	for id := range m.removedline_items {
		ids = append(ids, id)
	}
	return
}

// LineItemsIDs returns the "line_items" edge IDs in the mutation.
func (m *SubscriptionMutation) LineItemsIDs() (ids []string) {
	for id := range m.line_items {
		ids = append(ids, id)
	}
	return
}

// ResetLineItems resets all changes to the "line_items" edge.
func (m *SubscriptionMutation) ResetLineItems() {
	m.line_items = nil
	m.clearedline_items = false
	m.removedline_items = nil
}

// AddPauseIDs adds the "pauses" edge to the SubscriptionPause entity by ids.
func (m *SubscriptionMutation) AddPauseIDs(ids ...string) {
	if m.pauses == nil {
		m.pauses = make(map[string]struct{})
	}
	for i := range ids {
		m.pauses[ids[i]] = struct{}{}
	}
}

// ClearPauses clears the "pauses" edge to the SubscriptionPause entity.
func (m *SubscriptionMutation) ClearPauses() {
	m.clearedpauses = true
}

// PausesCleared reports if the "pauses" edge to the SubscriptionPause entity was cleared.
func (m *SubscriptionMutation) PausesCleared() bool {
	return m.clearedpauses
}

// RemovePauseIDs removes the "pauses" edge to the SubscriptionPause entity by IDs.
func (m *SubscriptionMutation) RemovePauseIDs(ids ...string) {
	if m.removedpauses == nil {
		m.removedpauses = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.pauses, ids[i])
		m.removedpauses[ids[i]] = struct{}{}
	}
}

// RemovedPauses returns the removed IDs of the "pauses" edge to the SubscriptionPause entity.
func (m *SubscriptionMutation) RemovedPausesIDs() (ids []string) {
	for id := range m.removedpauses {
		ids = append(ids, id)
	}
	return
}

// PausesIDs returns the "pauses" edge IDs in the mutation.
func (m *SubscriptionMutation) PausesIDs() (ids []string) {
	for id := range m.pauses {
		ids = append(ids, id)
	}
	return
}

// ResetPauses resets all changes to the "pauses" edge.
func (m *SubscriptionMutation) ResetPauses() {
	m.pauses = nil
	m.clearedpauses = false
	m.removedpauses = nil
}

// AddCreditGrantIDs adds the "credit_grants" edge to the CreditGrant entity by ids.
func (m *SubscriptionMutation) AddCreditGrantIDs(ids ...string) {
	if m.credit_grants == nil {
		m.credit_grants = make(map[string]struct{})
	}
	for i := range ids {
		m.credit_grants[ids[i]] = struct{}{}
	}
}

// ClearCreditGrants clears the "credit_grants" edge to the CreditGrant entity.
func (m *SubscriptionMutation) ClearCreditGrants() {
	m.clearedcredit_grants = true
}

// CreditGrantsCleared reports if the "credit_grants" edge to the CreditGrant entity was cleared.
func (m *SubscriptionMutation) CreditGrantsCleared() bool {
	return m.clearedcredit_grants
}

// RemoveCreditGrantIDs removes the "credit_grants" edge to the CreditGrant entity by IDs.
func (m *SubscriptionMutation) RemoveCreditGrantIDs(ids ...string) {
	if m.removedcredit_grants == nil {
		m.removedcredit_grants = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.credit_grants, ids[i])
		m.removedcredit_grants[ids[i]] = struct{}{}
	}
}

// RemovedCreditGrants returns the removed IDs of the "credit_grants" edge to the CreditGrant entity.
func (m *SubscriptionMutation) RemovedCreditGrantsIDs() (ids []string) {
	for id := range m.removedcredit_grants {
		ids = append(ids, id)
	}
	return
}

// CreditGrantsIDs returns the "credit_grants" edge IDs in the mutation.
func (m *SubscriptionMutation) CreditGrantsIDs() (ids []string) {
	for id := range m.credit_grants {
		ids = append(ids, id)
	}
	return
}

// ResetCreditGrants resets all changes to the "credit_grants" edge.
func (m *SubscriptionMutation) ResetCreditGrants() {
	m.credit_grants = nil
	m.clearedcredit_grants = false
	m.removedcredit_grants = nil
}

// SetScheduleID sets the "schedule" edge to the SubscriptionSchedule entity by id.
func (m *SubscriptionMutation) SetScheduleID(id string) {
	m.schedule = &id
}

// ClearSchedule clears the "schedule" edge to the SubscriptionSchedule entity.
func (m *SubscriptionMutation) ClearSchedule() {
	m.clearedschedule = true
}

// ScheduleCleared reports if the "schedule" edge to the SubscriptionSchedule entity was cleared.
func (m *SubscriptionMutation) ScheduleCleared() bool {
	return m.clearedschedule
}

// ScheduleID returns the "schedule" edge ID in the mutation.
func (m *SubscriptionMutation) ScheduleID() (id string, exists bool) {
	if m.schedule != nil {
		return *m.schedule, true
	}
	return
}

// ScheduleIDs returns the "schedule" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScheduleID instead. It exists only for internal usage by the builders.
func (m *SubscriptionMutation) ScheduleIDs() (ids []string) {
	if id := m.schedule; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSchedule resets all changes to the "schedule" edge.
func (m *SubscriptionMutation) ResetSchedule() {
	m.schedule = nil
	m.clearedschedule = false
}

// Where appends a list predicates to the SubscriptionMutation builder.
func (m *SubscriptionMutation) Where(ps ...predicate.Subscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subscription).
func (m *SubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 32)
	if m.tenant_id != nil {
		fields = append(fields, subscription.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, subscription.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, subscription.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscription.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, subscription.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, subscription.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, subscription.FieldEnvironmentID)
	}
	if m.lookup_key != nil {
		fields = append(fields, subscription.FieldLookupKey)
	}
	if m.customer_id != nil {
		fields = append(fields, subscription.FieldCustomerID)
	}
	if m.plan_id != nil {
		fields = append(fields, subscription.FieldPlanID)
	}
	if m.subscription_status != nil {
		fields = append(fields, subscription.FieldSubscriptionStatus)
	}
	if m.currency != nil {
		fields = append(fields, subscription.FieldCurrency)
	}
	if m.billing_anchor != nil {
		fields = append(fields, subscription.FieldBillingAnchor)
	}
	if m.start_date != nil {
		fields = append(fields, subscription.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, subscription.FieldEndDate)
	}
	if m.current_period_start != nil {
		fields = append(fields, subscription.FieldCurrentPeriodStart)
	}
	if m.current_period_end != nil {
		fields = append(fields, subscription.FieldCurrentPeriodEnd)
	}
	if m.cancelled_at != nil {
		fields = append(fields, subscription.FieldCancelledAt)
	}
	if m.cancel_at != nil {
		fields = append(fields, subscription.FieldCancelAt)
	}
	if m.cancel_at_period_end != nil {
		fields = append(fields, subscription.FieldCancelAtPeriodEnd)
	}
	if m.trial_start != nil {
		fields = append(fields, subscription.FieldTrialStart)
	}
	if m.trial_end != nil {
		fields = append(fields, subscription.FieldTrialEnd)
	}
	if m.billing_cadence != nil {
		fields = append(fields, subscription.FieldBillingCadence)
	}
	if m.billing_period != nil {
		fields = append(fields, subscription.FieldBillingPeriod)
	}
	if m.billing_period_count != nil {
		fields = append(fields, subscription.FieldBillingPeriodCount)
	}
	if m.version != nil {
		fields = append(fields, subscription.FieldVersion)
	}
	if m.metadata != nil {
		fields = append(fields, subscription.FieldMetadata)
	}
	if m.pause_status != nil {
		fields = append(fields, subscription.FieldPauseStatus)
	}
	if m.active_pause_id != nil {
		fields = append(fields, subscription.FieldActivePauseID)
	}
	if m.billing_cycle != nil {
		fields = append(fields, subscription.FieldBillingCycle)
	}
	if m.commitment_amount != nil {
		fields = append(fields, subscription.FieldCommitmentAmount)
	}
	if m.overage_factor != nil {
		fields = append(fields, subscription.FieldOverageFactor)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldTenantID:
		return m.TenantID()
	case subscription.FieldStatus:
		return m.Status()
	case subscription.FieldCreatedAt:
		return m.CreatedAt()
	case subscription.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscription.FieldCreatedBy:
		return m.CreatedBy()
	case subscription.FieldUpdatedBy:
		return m.UpdatedBy()
	case subscription.FieldEnvironmentID:
		return m.EnvironmentID()
	case subscription.FieldLookupKey:
		return m.LookupKey()
	case subscription.FieldCustomerID:
		return m.CustomerID()
	case subscription.FieldPlanID:
		return m.PlanID()
	case subscription.FieldSubscriptionStatus:
		return m.SubscriptionStatus()
	case subscription.FieldCurrency:
		return m.Currency()
	case subscription.FieldBillingAnchor:
		return m.BillingAnchor()
	case subscription.FieldStartDate:
		return m.StartDate()
	case subscription.FieldEndDate:
		return m.EndDate()
	case subscription.FieldCurrentPeriodStart:
		return m.CurrentPeriodStart()
	case subscription.FieldCurrentPeriodEnd:
		return m.CurrentPeriodEnd()
	case subscription.FieldCancelledAt:
		return m.CancelledAt()
	case subscription.FieldCancelAt:
		return m.CancelAt()
	case subscription.FieldCancelAtPeriodEnd:
		return m.CancelAtPeriodEnd()
	case subscription.FieldTrialStart:
		return m.TrialStart()
	case subscription.FieldTrialEnd:
		return m.TrialEnd()
	case subscription.FieldBillingCadence:
		return m.BillingCadence()
	case subscription.FieldBillingPeriod:
		return m.BillingPeriod()
	case subscription.FieldBillingPeriodCount:
		return m.BillingPeriodCount()
	case subscription.FieldVersion:
		return m.Version()
	case subscription.FieldMetadata:
		return m.Metadata()
	case subscription.FieldPauseStatus:
		return m.PauseStatus()
	case subscription.FieldActivePauseID:
		return m.ActivePauseID()
	case subscription.FieldBillingCycle:
		return m.BillingCycle()
	case subscription.FieldCommitmentAmount:
		return m.CommitmentAmount()
	case subscription.FieldOverageFactor:
		return m.OverageFactor()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscription.FieldTenantID:
		return m.OldTenantID(ctx)
	case subscription.FieldStatus:
		return m.OldStatus(ctx)
	case subscription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscription.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscription.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case subscription.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case subscription.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case subscription.FieldLookupKey:
		return m.OldLookupKey(ctx)
	case subscription.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case subscription.FieldPlanID:
		return m.OldPlanID(ctx)
	case subscription.FieldSubscriptionStatus:
		return m.OldSubscriptionStatus(ctx)
	case subscription.FieldCurrency:
		return m.OldCurrency(ctx)
	case subscription.FieldBillingAnchor:
		return m.OldBillingAnchor(ctx)
	case subscription.FieldStartDate:
		return m.OldStartDate(ctx)
	case subscription.FieldEndDate:
		return m.OldEndDate(ctx)
	case subscription.FieldCurrentPeriodStart:
		return m.OldCurrentPeriodStart(ctx)
	case subscription.FieldCurrentPeriodEnd:
		return m.OldCurrentPeriodEnd(ctx)
	case subscription.FieldCancelledAt:
		return m.OldCancelledAt(ctx)
	case subscription.FieldCancelAt:
		return m.OldCancelAt(ctx)
	case subscription.FieldCancelAtPeriodEnd:
		return m.OldCancelAtPeriodEnd(ctx)
	case subscription.FieldTrialStart:
		return m.OldTrialStart(ctx)
	case subscription.FieldTrialEnd:
		return m.OldTrialEnd(ctx)
	case subscription.FieldBillingCadence:
		return m.OldBillingCadence(ctx)
	case subscription.FieldBillingPeriod:
		return m.OldBillingPeriod(ctx)
	case subscription.FieldBillingPeriodCount:
		return m.OldBillingPeriodCount(ctx)
	case subscription.FieldVersion:
		return m.OldVersion(ctx)
	case subscription.FieldMetadata:
		return m.OldMetadata(ctx)
	case subscription.FieldPauseStatus:
		return m.OldPauseStatus(ctx)
	case subscription.FieldActivePauseID:
		return m.OldActivePauseID(ctx)
	case subscription.FieldBillingCycle:
		return m.OldBillingCycle(ctx)
	case subscription.FieldCommitmentAmount:
		return m.OldCommitmentAmount(ctx)
	case subscription.FieldOverageFactor:
		return m.OldOverageFactor(ctx)
	}
	return nil, fmt.Errorf("unknown Subscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case subscription.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case subscription.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscription.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscription.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case subscription.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case subscription.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case subscription.FieldLookupKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookupKey(v)
		return nil
	case subscription.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case subscription.FieldPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case subscription.FieldSubscriptionStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionStatus(v)
		return nil
	case subscription.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case subscription.FieldBillingAnchor:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingAnchor(v)
		return nil
	case subscription.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case subscription.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case subscription.FieldCurrentPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPeriodStart(v)
		return nil
	case subscription.FieldCurrentPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPeriodEnd(v)
		return nil
	case subscription.FieldCancelledAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelledAt(v)
		return nil
	case subscription.FieldCancelAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelAt(v)
		return nil
	case subscription.FieldCancelAtPeriodEnd:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelAtPeriodEnd(v)
		return nil
	case subscription.FieldTrialStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialStart(v)
		return nil
	case subscription.FieldTrialEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialEnd(v)
		return nil
	case subscription.FieldBillingCadence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingCadence(v)
		return nil
	case subscription.FieldBillingPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriod(v)
		return nil
	case subscription.FieldBillingPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriodCount(v)
		return nil
	case subscription.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case subscription.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case subscription.FieldPauseStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPauseStatus(v)
		return nil
	case subscription.FieldActivePauseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivePauseID(v)
		return nil
	case subscription.FieldBillingCycle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingCycle(v)
		return nil
	case subscription.FieldCommitmentAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommitmentAmount(v)
		return nil
	case subscription.FieldOverageFactor:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverageFactor(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionMutation) AddedFields() []string {
	var fields []string
	if m.addbilling_period_count != nil {
		fields = append(fields, subscription.FieldBillingPeriodCount)
	}
	if m.addversion != nil {
		fields = append(fields, subscription.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldBillingPeriodCount:
		return m.AddedBillingPeriodCount()
	case subscription.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldBillingPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBillingPeriodCount(v)
		return nil
	case subscription.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscription.FieldCreatedBy) {
		fields = append(fields, subscription.FieldCreatedBy)
	}
	if m.FieldCleared(subscription.FieldUpdatedBy) {
		fields = append(fields, subscription.FieldUpdatedBy)
	}
	if m.FieldCleared(subscription.FieldEnvironmentID) {
		fields = append(fields, subscription.FieldEnvironmentID)
	}
	if m.FieldCleared(subscription.FieldLookupKey) {
		fields = append(fields, subscription.FieldLookupKey)
	}
	if m.FieldCleared(subscription.FieldEndDate) {
		fields = append(fields, subscription.FieldEndDate)
	}
	if m.FieldCleared(subscription.FieldCancelledAt) {
		fields = append(fields, subscription.FieldCancelledAt)
	}
	if m.FieldCleared(subscription.FieldCancelAt) {
		fields = append(fields, subscription.FieldCancelAt)
	}
	if m.FieldCleared(subscription.FieldTrialStart) {
		fields = append(fields, subscription.FieldTrialStart)
	}
	if m.FieldCleared(subscription.FieldTrialEnd) {
		fields = append(fields, subscription.FieldTrialEnd)
	}
	if m.FieldCleared(subscription.FieldMetadata) {
		fields = append(fields, subscription.FieldMetadata)
	}
	if m.FieldCleared(subscription.FieldActivePauseID) {
		fields = append(fields, subscription.FieldActivePauseID)
	}
	if m.FieldCleared(subscription.FieldCommitmentAmount) {
		fields = append(fields, subscription.FieldCommitmentAmount)
	}
	if m.FieldCleared(subscription.FieldOverageFactor) {
		fields = append(fields, subscription.FieldOverageFactor)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionMutation) ClearField(name string) error {
	switch name {
	case subscription.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case subscription.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case subscription.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case subscription.FieldLookupKey:
		m.ClearLookupKey()
		return nil
	case subscription.FieldEndDate:
		m.ClearEndDate()
		return nil
	case subscription.FieldCancelledAt:
		m.ClearCancelledAt()
		return nil
	case subscription.FieldCancelAt:
		m.ClearCancelAt()
		return nil
	case subscription.FieldTrialStart:
		m.ClearTrialStart()
		return nil
	case subscription.FieldTrialEnd:
		m.ClearTrialEnd()
		return nil
	case subscription.FieldMetadata:
		m.ClearMetadata()
		return nil
	case subscription.FieldActivePauseID:
		m.ClearActivePauseID()
		return nil
	case subscription.FieldCommitmentAmount:
		m.ClearCommitmentAmount()
		return nil
	case subscription.FieldOverageFactor:
		m.ClearOverageFactor()
		return nil
	}
	return fmt.Errorf("unknown Subscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionMutation) ResetField(name string) error {
	switch name {
	case subscription.FieldTenantID:
		m.ResetTenantID()
		return nil
	case subscription.FieldStatus:
		m.ResetStatus()
		return nil
	case subscription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscription.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscription.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case subscription.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case subscription.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case subscription.FieldLookupKey:
		m.ResetLookupKey()
		return nil
	case subscription.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case subscription.FieldPlanID:
		m.ResetPlanID()
		return nil
	case subscription.FieldSubscriptionStatus:
		m.ResetSubscriptionStatus()
		return nil
	case subscription.FieldCurrency:
		m.ResetCurrency()
		return nil
	case subscription.FieldBillingAnchor:
		m.ResetBillingAnchor()
		return nil
	case subscription.FieldStartDate:
		m.ResetStartDate()
		return nil
	case subscription.FieldEndDate:
		m.ResetEndDate()
		return nil
	case subscription.FieldCurrentPeriodStart:
		m.ResetCurrentPeriodStart()
		return nil
	case subscription.FieldCurrentPeriodEnd:
		m.ResetCurrentPeriodEnd()
		return nil
	case subscription.FieldCancelledAt:
		m.ResetCancelledAt()
		return nil
	case subscription.FieldCancelAt:
		m.ResetCancelAt()
		return nil
	case subscription.FieldCancelAtPeriodEnd:
		m.ResetCancelAtPeriodEnd()
		return nil
	case subscription.FieldTrialStart:
		m.ResetTrialStart()
		return nil
	case subscription.FieldTrialEnd:
		m.ResetTrialEnd()
		return nil
	case subscription.FieldBillingCadence:
		m.ResetBillingCadence()
		return nil
	case subscription.FieldBillingPeriod:
		m.ResetBillingPeriod()
		return nil
	case subscription.FieldBillingPeriodCount:
		m.ResetBillingPeriodCount()
		return nil
	case subscription.FieldVersion:
		m.ResetVersion()
		return nil
	case subscription.FieldMetadata:
		m.ResetMetadata()
		return nil
	case subscription.FieldPauseStatus:
		m.ResetPauseStatus()
		return nil
	case subscription.FieldActivePauseID:
		m.ResetActivePauseID()
		return nil
	case subscription.FieldBillingCycle:
		m.ResetBillingCycle()
		return nil
	case subscription.FieldCommitmentAmount:
		m.ResetCommitmentAmount()
		return nil
	case subscription.FieldOverageFactor:
		m.ResetOverageFactor()
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.line_items != nil {
		edges = append(edges, subscription.EdgeLineItems)
	}
	if m.pauses != nil {
		edges = append(edges, subscription.EdgePauses)
	}
	if m.credit_grants != nil {
		edges = append(edges, subscription.EdgeCreditGrants)
	}
	if m.schedule != nil {
		edges = append(edges, subscription.EdgeSchedule)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscription.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.line_items))
		for id := range m.line_items {
			ids = append(ids, id)
		}
		return ids
	case subscription.EdgePauses:
		ids := make([]ent.Value, 0, len(m.pauses))
		for id := range m.pauses {
			ids = append(ids, id)
		}
		return ids
	case subscription.EdgeCreditGrants:
		ids := make([]ent.Value, 0, len(m.credit_grants))
		for id := range m.credit_grants {
			ids = append(ids, id)
		}
		return ids
	case subscription.EdgeSchedule:
		if id := m.schedule; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedline_items != nil {
		edges = append(edges, subscription.EdgeLineItems)
	}
	if m.removedpauses != nil {
		edges = append(edges, subscription.EdgePauses)
	}
	if m.removedcredit_grants != nil {
		edges = append(edges, subscription.EdgeCreditGrants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subscription.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.removedline_items))
		for id := range m.removedline_items {
			ids = append(ids, id)
		}
		return ids
	case subscription.EdgePauses:
		ids := make([]ent.Value, 0, len(m.removedpauses))
		for id := range m.removedpauses {
			ids = append(ids, id)
		}
		return ids
	case subscription.EdgeCreditGrants:
		ids := make([]ent.Value, 0, len(m.removedcredit_grants))
		for id := range m.removedcredit_grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedline_items {
		edges = append(edges, subscription.EdgeLineItems)
	}
	if m.clearedpauses {
		edges = append(edges, subscription.EdgePauses)
	}
	if m.clearedcredit_grants {
		edges = append(edges, subscription.EdgeCreditGrants)
	}
	if m.clearedschedule {
		edges = append(edges, subscription.EdgeSchedule)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case subscription.EdgeLineItems:
		return m.clearedline_items
	case subscription.EdgePauses:
		return m.clearedpauses
	case subscription.EdgeCreditGrants:
		return m.clearedcredit_grants
	case subscription.EdgeSchedule:
		return m.clearedschedule
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionMutation) ClearEdge(name string) error {
	switch name {
	case subscription.EdgeSchedule:
		m.ClearSchedule()
		return nil
	}
	return fmt.Errorf("unknown Subscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionMutation) ResetEdge(name string) error {
	switch name {
	case subscription.EdgeLineItems:
		m.ResetLineItems()
		return nil
	case subscription.EdgePauses:
		m.ResetPauses()
		return nil
	case subscription.EdgeCreditGrants:
		m.ResetCreditGrants()
		return nil
	case subscription.EdgeSchedule:
		m.ResetSchedule()
		return nil
	}
	return fmt.Errorf("unknown Subscription edge %s", name)
}

// SubscriptionLineItemMutation represents an operation that mutates the SubscriptionLineItem nodes in the graph.
type SubscriptionLineItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	tenant_id           *string
	status              *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	environment_id      *string
	customer_id         *string
	plan_id             *string
	plan_display_name   *string
	price_id            *string
	price_type          *string
	meter_id            *string
	meter_display_name  *string
	price_unit_id       *string
	price_unit          *string
	display_name        *string
	quantity            *decimal.Decimal
	currency            *string
	billing_period      *string
	invoice_cadence     *string
	trial_period        *int
	addtrial_period     *int
	start_date          *time.Time
	end_date            *time.Time
	metadata            *map[string]string
	clearedFields       map[string]struct{}
	subscription        *string
	clearedsubscription bool
	done                bool
	oldValue            func(context.Context) (*SubscriptionLineItem, error)
	predicates          []predicate.SubscriptionLineItem
}

var _ ent.Mutation = (*SubscriptionLineItemMutation)(nil)

// subscriptionlineitemOption allows management of the mutation configuration using functional options.
type subscriptionlineitemOption func(*SubscriptionLineItemMutation)

// newSubscriptionLineItemMutation creates new mutation for the SubscriptionLineItem entity.
func newSubscriptionLineItemMutation(c config, op Op, opts ...subscriptionlineitemOption) *SubscriptionLineItemMutation {
	m := &SubscriptionLineItemMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscriptionLineItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionLineItemID sets the ID field of the mutation.
func withSubscriptionLineItemID(id string) subscriptionlineitemOption {
	return func(m *SubscriptionLineItemMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscriptionLineItem
		)
		m.oldValue = func(ctx context.Context) (*SubscriptionLineItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscriptionLineItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscriptionLineItem sets the old SubscriptionLineItem of the mutation.
func withSubscriptionLineItem(node *SubscriptionLineItem) subscriptionlineitemOption {
	return func(m *SubscriptionLineItemMutation) {
		m.oldValue = func(context.Context) (*SubscriptionLineItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionLineItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionLineItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SubscriptionLineItem entities.
func (m *SubscriptionLineItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionLineItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionLineItemMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscriptionLineItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *SubscriptionLineItemMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SubscriptionLineItemMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SubscriptionLineItemMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *SubscriptionLineItemMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubscriptionLineItemMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SubscriptionLineItemMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionLineItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionLineItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionLineItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionLineItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionLineItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionLineItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *SubscriptionLineItemMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SubscriptionLineItemMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SubscriptionLineItemMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[subscriptionlineitem.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SubscriptionLineItemMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, subscriptionlineitem.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SubscriptionLineItemMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SubscriptionLineItemMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SubscriptionLineItemMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[subscriptionlineitem.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SubscriptionLineItemMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, subscriptionlineitem.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *SubscriptionLineItemMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *SubscriptionLineItemMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *SubscriptionLineItemMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[subscriptionlineitem.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *SubscriptionLineItemMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, subscriptionlineitem.FieldEnvironmentID)
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *SubscriptionLineItemMutation) SetSubscriptionID(s string) {
	m.subscription = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *SubscriptionLineItemMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldSubscriptionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *SubscriptionLineItemMutation) ResetSubscriptionID() {
	m.subscription = nil
}

// SetCustomerID sets the "customer_id" field.
func (m *SubscriptionLineItemMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *SubscriptionLineItemMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *SubscriptionLineItemMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetPlanID sets the "plan_id" field.
func (m *SubscriptionLineItemMutation) SetPlanID(s string) {
	m.plan_id = &s
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *SubscriptionLineItemMutation) PlanID() (r string, exists bool) {
	v := m.plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldPlanID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ClearPlanID clears the value of the "plan_id" field.
func (m *SubscriptionLineItemMutation) ClearPlanID() {
	m.plan_id = nil
	m.clearedFields[subscriptionlineitem.FieldPlanID] = struct{}{}
}

// PlanIDCleared returns if the "plan_id" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) PlanIDCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldPlanID]
	return ok
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *SubscriptionLineItemMutation) ResetPlanID() {
	m.plan_id = nil
	delete(m.clearedFields, subscriptionlineitem.FieldPlanID)
}

// SetPlanDisplayName sets the "plan_display_name" field.
func (m *SubscriptionLineItemMutation) SetPlanDisplayName(s string) {
	m.plan_display_name = &s
}

// PlanDisplayName returns the value of the "plan_display_name" field in the mutation.
func (m *SubscriptionLineItemMutation) PlanDisplayName() (r string, exists bool) {
	v := m.plan_display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanDisplayName returns the old "plan_display_name" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldPlanDisplayName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanDisplayName: %w", err)
	}
	return oldValue.PlanDisplayName, nil
}

// ClearPlanDisplayName clears the value of the "plan_display_name" field.
func (m *SubscriptionLineItemMutation) ClearPlanDisplayName() {
	m.plan_display_name = nil
	m.clearedFields[subscriptionlineitem.FieldPlanDisplayName] = struct{}{}
}

// PlanDisplayNameCleared returns if the "plan_display_name" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) PlanDisplayNameCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldPlanDisplayName]
	return ok
}

// ResetPlanDisplayName resets all changes to the "plan_display_name" field.
func (m *SubscriptionLineItemMutation) ResetPlanDisplayName() {
	m.plan_display_name = nil
	delete(m.clearedFields, subscriptionlineitem.FieldPlanDisplayName)
}

// SetPriceID sets the "price_id" field.
func (m *SubscriptionLineItemMutation) SetPriceID(s string) {
	m.price_id = &s
}

// PriceID returns the value of the "price_id" field in the mutation.
func (m *SubscriptionLineItemMutation) PriceID() (r string, exists bool) {
	v := m.price_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceID returns the old "price_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldPriceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceID: %w", err)
	}
	return oldValue.PriceID, nil
}

// ResetPriceID resets all changes to the "price_id" field.
func (m *SubscriptionLineItemMutation) ResetPriceID() {
	m.price_id = nil
}

// SetPriceType sets the "price_type" field.
func (m *SubscriptionLineItemMutation) SetPriceType(s string) {
	m.price_type = &s
}

// PriceType returns the value of the "price_type" field in the mutation.
func (m *SubscriptionLineItemMutation) PriceType() (r string, exists bool) {
	v := m.price_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceType returns the old "price_type" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldPriceType(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceType: %w", err)
	}
	return oldValue.PriceType, nil
}

// ClearPriceType clears the value of the "price_type" field.
func (m *SubscriptionLineItemMutation) ClearPriceType() {
	m.price_type = nil
	m.clearedFields[subscriptionlineitem.FieldPriceType] = struct{}{}
}

// PriceTypeCleared returns if the "price_type" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) PriceTypeCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldPriceType]
	return ok
}

// ResetPriceType resets all changes to the "price_type" field.
func (m *SubscriptionLineItemMutation) ResetPriceType() {
	m.price_type = nil
	delete(m.clearedFields, subscriptionlineitem.FieldPriceType)
}

// SetMeterID sets the "meter_id" field.
func (m *SubscriptionLineItemMutation) SetMeterID(s string) {
	m.meter_id = &s
}

// MeterID returns the value of the "meter_id" field in the mutation.
func (m *SubscriptionLineItemMutation) MeterID() (r string, exists bool) {
	v := m.meter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterID returns the old "meter_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldMeterID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterID: %w", err)
	}
	return oldValue.MeterID, nil
}

// ClearMeterID clears the value of the "meter_id" field.
func (m *SubscriptionLineItemMutation) ClearMeterID() {
	m.meter_id = nil
	m.clearedFields[subscriptionlineitem.FieldMeterID] = struct{}{}
}

// MeterIDCleared returns if the "meter_id" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) MeterIDCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldMeterID]
	return ok
}

// ResetMeterID resets all changes to the "meter_id" field.
func (m *SubscriptionLineItemMutation) ResetMeterID() {
	m.meter_id = nil
	delete(m.clearedFields, subscriptionlineitem.FieldMeterID)
}

// SetMeterDisplayName sets the "meter_display_name" field.
func (m *SubscriptionLineItemMutation) SetMeterDisplayName(s string) {
	m.meter_display_name = &s
}

// MeterDisplayName returns the value of the "meter_display_name" field in the mutation.
func (m *SubscriptionLineItemMutation) MeterDisplayName() (r string, exists bool) {
	v := m.meter_display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterDisplayName returns the old "meter_display_name" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldMeterDisplayName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterDisplayName: %w", err)
	}
	return oldValue.MeterDisplayName, nil
}

// ClearMeterDisplayName clears the value of the "meter_display_name" field.
func (m *SubscriptionLineItemMutation) ClearMeterDisplayName() {
	m.meter_display_name = nil
	m.clearedFields[subscriptionlineitem.FieldMeterDisplayName] = struct{}{}
}

// MeterDisplayNameCleared returns if the "meter_display_name" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) MeterDisplayNameCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldMeterDisplayName]
	return ok
}

// ResetMeterDisplayName resets all changes to the "meter_display_name" field.
func (m *SubscriptionLineItemMutation) ResetMeterDisplayName() {
	m.meter_display_name = nil
	delete(m.clearedFields, subscriptionlineitem.FieldMeterDisplayName)
}

// SetPriceUnitID sets the "price_unit_id" field.
func (m *SubscriptionLineItemMutation) SetPriceUnitID(s string) {
	m.price_unit_id = &s
}

// PriceUnitID returns the value of the "price_unit_id" field in the mutation.
func (m *SubscriptionLineItemMutation) PriceUnitID() (r string, exists bool) {
	v := m.price_unit_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnitID returns the old "price_unit_id" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldPriceUnitID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnitID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnitID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnitID: %w", err)
	}
	return oldValue.PriceUnitID, nil
}

// ClearPriceUnitID clears the value of the "price_unit_id" field.
func (m *SubscriptionLineItemMutation) ClearPriceUnitID() {
	m.price_unit_id = nil
	m.clearedFields[subscriptionlineitem.FieldPriceUnitID] = struct{}{}
}

// PriceUnitIDCleared returns if the "price_unit_id" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) PriceUnitIDCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldPriceUnitID]
	return ok
}

// ResetPriceUnitID resets all changes to the "price_unit_id" field.
func (m *SubscriptionLineItemMutation) ResetPriceUnitID() {
	m.price_unit_id = nil
	delete(m.clearedFields, subscriptionlineitem.FieldPriceUnitID)
}

// SetPriceUnit sets the "price_unit" field.
func (m *SubscriptionLineItemMutation) SetPriceUnit(s string) {
	m.price_unit = &s
}

// PriceUnit returns the value of the "price_unit" field in the mutation.
func (m *SubscriptionLineItemMutation) PriceUnit() (r string, exists bool) {
	v := m.price_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnit returns the old "price_unit" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldPriceUnit(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnit: %w", err)
	}
	return oldValue.PriceUnit, nil
}

// ClearPriceUnit clears the value of the "price_unit" field.
func (m *SubscriptionLineItemMutation) ClearPriceUnit() {
	m.price_unit = nil
	m.clearedFields[subscriptionlineitem.FieldPriceUnit] = struct{}{}
}

// PriceUnitCleared returns if the "price_unit" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) PriceUnitCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldPriceUnit]
	return ok
}

// ResetPriceUnit resets all changes to the "price_unit" field.
func (m *SubscriptionLineItemMutation) ResetPriceUnit() {
	m.price_unit = nil
	delete(m.clearedFields, subscriptionlineitem.FieldPriceUnit)
}

// SetDisplayName sets the "display_name" field.
func (m *SubscriptionLineItemMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *SubscriptionLineItemMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldDisplayName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ClearDisplayName clears the value of the "display_name" field.
func (m *SubscriptionLineItemMutation) ClearDisplayName() {
	m.display_name = nil
	m.clearedFields[subscriptionlineitem.FieldDisplayName] = struct{}{}
}

// DisplayNameCleared returns if the "display_name" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) DisplayNameCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldDisplayName]
	return ok
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *SubscriptionLineItemMutation) ResetDisplayName() {
	m.display_name = nil
	delete(m.clearedFields, subscriptionlineitem.FieldDisplayName)
}

// SetQuantity sets the "quantity" field.
func (m *SubscriptionLineItemMutation) SetQuantity(d decimal.Decimal) {
	m.quantity = &d
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *SubscriptionLineItemMutation) Quantity() (r decimal.Decimal, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldQuantity(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *SubscriptionLineItemMutation) ResetQuantity() {
	m.quantity = nil
}

// SetCurrency sets the "currency" field.
func (m *SubscriptionLineItemMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *SubscriptionLineItemMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *SubscriptionLineItemMutation) ResetCurrency() {
	m.currency = nil
}

// SetBillingPeriod sets the "billing_period" field.
func (m *SubscriptionLineItemMutation) SetBillingPeriod(s string) {
	m.billing_period = &s
}

// BillingPeriod returns the value of the "billing_period" field in the mutation.
func (m *SubscriptionLineItemMutation) BillingPeriod() (r string, exists bool) {
	v := m.billing_period
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriod returns the old "billing_period" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldBillingPeriod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriod: %w", err)
	}
	return oldValue.BillingPeriod, nil
}

// ResetBillingPeriod resets all changes to the "billing_period" field.
func (m *SubscriptionLineItemMutation) ResetBillingPeriod() {
	m.billing_period = nil
}

// SetInvoiceCadence sets the "invoice_cadence" field.
func (m *SubscriptionLineItemMutation) SetInvoiceCadence(s string) {
	m.invoice_cadence = &s
}

// InvoiceCadence returns the value of the "invoice_cadence" field in the mutation.
func (m *SubscriptionLineItemMutation) InvoiceCadence() (r string, exists bool) {
	v := m.invoice_cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceCadence returns the old "invoice_cadence" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldInvoiceCadence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceCadence: %w", err)
	}
	return oldValue.InvoiceCadence, nil
}

// ClearInvoiceCadence clears the value of the "invoice_cadence" field.
func (m *SubscriptionLineItemMutation) ClearInvoiceCadence() {
	m.invoice_cadence = nil
	m.clearedFields[subscriptionlineitem.FieldInvoiceCadence] = struct{}{}
}

// InvoiceCadenceCleared returns if the "invoice_cadence" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) InvoiceCadenceCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldInvoiceCadence]
	return ok
}

// ResetInvoiceCadence resets all changes to the "invoice_cadence" field.
func (m *SubscriptionLineItemMutation) ResetInvoiceCadence() {
	m.invoice_cadence = nil
	delete(m.clearedFields, subscriptionlineitem.FieldInvoiceCadence)
}

// SetTrialPeriod sets the "trial_period" field.
func (m *SubscriptionLineItemMutation) SetTrialPeriod(i int) {
	m.trial_period = &i
	m.addtrial_period = nil
}

// TrialPeriod returns the value of the "trial_period" field in the mutation.
func (m *SubscriptionLineItemMutation) TrialPeriod() (r int, exists bool) {
	v := m.trial_period
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialPeriod returns the old "trial_period" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldTrialPeriod(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialPeriod: %w", err)
	}
	return oldValue.TrialPeriod, nil
}

// AddTrialPeriod adds i to the "trial_period" field.
func (m *SubscriptionLineItemMutation) AddTrialPeriod(i int) {
	if m.addtrial_period != nil {
		*m.addtrial_period += i
	} else {
		m.addtrial_period = &i
	}
}

// AddedTrialPeriod returns the value that was added to the "trial_period" field in this mutation.
func (m *SubscriptionLineItemMutation) AddedTrialPeriod() (r int, exists bool) {
	v := m.addtrial_period
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrialPeriod resets all changes to the "trial_period" field.
func (m *SubscriptionLineItemMutation) ResetTrialPeriod() {
	m.trial_period = nil
	m.addtrial_period = nil
}

// SetStartDate sets the "start_date" field.
func (m *SubscriptionLineItemMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *SubscriptionLineItemMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldStartDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ClearStartDate clears the value of the "start_date" field.
func (m *SubscriptionLineItemMutation) ClearStartDate() {
	m.start_date = nil
	m.clearedFields[subscriptionlineitem.FieldStartDate] = struct{}{}
}

// StartDateCleared returns if the "start_date" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) StartDateCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldStartDate]
	return ok
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *SubscriptionLineItemMutation) ResetStartDate() {
	m.start_date = nil
	delete(m.clearedFields, subscriptionlineitem.FieldStartDate)
}

// SetEndDate sets the "end_date" field.
func (m *SubscriptionLineItemMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *SubscriptionLineItemMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldEndDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *SubscriptionLineItemMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[subscriptionlineitem.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *SubscriptionLineItemMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, subscriptionlineitem.FieldEndDate)
}

// SetMetadata sets the "metadata" field.
func (m *SubscriptionLineItemMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SubscriptionLineItemMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the SubscriptionLineItem entity.
// If the SubscriptionLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionLineItemMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SubscriptionLineItemMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[subscriptionlineitem.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SubscriptionLineItemMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[subscriptionlineitem.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SubscriptionLineItemMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, subscriptionlineitem.FieldMetadata)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (m *SubscriptionLineItemMutation) ClearSubscription() {
	m.clearedsubscription = true
	m.clearedFields[subscriptionlineitem.FieldSubscriptionID] = struct{}{}
}

// SubscriptionCleared reports if the "subscription" edge to the Subscription entity was cleared.
func (m *SubscriptionLineItemMutation) SubscriptionCleared() bool {
	return m.clearedsubscription
}

// SubscriptionIDs returns the "subscription" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriptionID instead. It exists only for internal usage by the builders.
func (m *SubscriptionLineItemMutation) SubscriptionIDs() (ids []string) {
	if id := m.subscription; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscription resets all changes to the "subscription" edge.
func (m *SubscriptionLineItemMutation) ResetSubscription() {
	m.subscription = nil
	m.clearedsubscription = false
}

// Where appends a list predicates to the SubscriptionLineItemMutation builder.
func (m *SubscriptionLineItemMutation) Where(ps ...predicate.SubscriptionLineItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionLineItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionLineItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubscriptionLineItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionLineItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionLineItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubscriptionLineItem).
func (m *SubscriptionLineItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionLineItemMutation) Fields() []string {
	fields := make([]string, 0, 26)
	if m.tenant_id != nil {
		fields = append(fields, subscriptionlineitem.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, subscriptionlineitem.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, subscriptionlineitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscriptionlineitem.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, subscriptionlineitem.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, subscriptionlineitem.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, subscriptionlineitem.FieldEnvironmentID)
	}
	if m.subscription != nil {
		fields = append(fields, subscriptionlineitem.FieldSubscriptionID)
	}
	if m.customer_id != nil {
		fields = append(fields, subscriptionlineitem.FieldCustomerID)
	}
	if m.plan_id != nil {
		fields = append(fields, subscriptionlineitem.FieldPlanID)
	}
	if m.plan_display_name != nil {
		fields = append(fields, subscriptionlineitem.FieldPlanDisplayName)
	}
	if m.price_id != nil {
		fields = append(fields, subscriptionlineitem.FieldPriceID)
	}
	if m.price_type != nil {
		fields = append(fields, subscriptionlineitem.FieldPriceType)
	}
	if m.meter_id != nil {
		fields = append(fields, subscriptionlineitem.FieldMeterID)
	}
	if m.meter_display_name != nil {
		fields = append(fields, subscriptionlineitem.FieldMeterDisplayName)
	}
	if m.price_unit_id != nil {
		fields = append(fields, subscriptionlineitem.FieldPriceUnitID)
	}
	if m.price_unit != nil {
		fields = append(fields, subscriptionlineitem.FieldPriceUnit)
	}
	if m.display_name != nil {
		fields = append(fields, subscriptionlineitem.FieldDisplayName)
	}
	if m.quantity != nil {
		fields = append(fields, subscriptionlineitem.FieldQuantity)
	}
	if m.currency != nil {
		fields = append(fields, subscriptionlineitem.FieldCurrency)
	}
	if m.billing_period != nil {
		fields = append(fields, subscriptionlineitem.FieldBillingPeriod)
	}
	if m.invoice_cadence != nil {
		fields = append(fields, subscriptionlineitem.FieldInvoiceCadence)
	}
	if m.trial_period != nil {
		fields = append(fields, subscriptionlineitem.FieldTrialPeriod)
	}
	if m.start_date != nil {
		fields = append(fields, subscriptionlineitem.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, subscriptionlineitem.FieldEndDate)
	}
	if m.metadata != nil {
		fields = append(fields, subscriptionlineitem.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionLineItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscriptionlineitem.FieldTenantID:
		return m.TenantID()
	case subscriptionlineitem.FieldStatus:
		return m.Status()
	case subscriptionlineitem.FieldCreatedAt:
		return m.CreatedAt()
	case subscriptionlineitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscriptionlineitem.FieldCreatedBy:
		return m.CreatedBy()
	case subscriptionlineitem.FieldUpdatedBy:
		return m.UpdatedBy()
	case subscriptionlineitem.FieldEnvironmentID:
		return m.EnvironmentID()
	case subscriptionlineitem.FieldSubscriptionID:
		return m.SubscriptionID()
	case subscriptionlineitem.FieldCustomerID:
		return m.CustomerID()
	case subscriptionlineitem.FieldPlanID:
		return m.PlanID()
	case subscriptionlineitem.FieldPlanDisplayName:
		return m.PlanDisplayName()
	case subscriptionlineitem.FieldPriceID:
		return m.PriceID()
	case subscriptionlineitem.FieldPriceType:
		return m.PriceType()
	case subscriptionlineitem.FieldMeterID:
		return m.MeterID()
	case subscriptionlineitem.FieldMeterDisplayName:
		return m.MeterDisplayName()
	case subscriptionlineitem.FieldPriceUnitID:
		return m.PriceUnitID()
	case subscriptionlineitem.FieldPriceUnit:
		return m.PriceUnit()
	case subscriptionlineitem.FieldDisplayName:
		return m.DisplayName()
	case subscriptionlineitem.FieldQuantity:
		return m.Quantity()
	case subscriptionlineitem.FieldCurrency:
		return m.Currency()
	case subscriptionlineitem.FieldBillingPeriod:
		return m.BillingPeriod()
	case subscriptionlineitem.FieldInvoiceCadence:
		return m.InvoiceCadence()
	case subscriptionlineitem.FieldTrialPeriod:
		return m.TrialPeriod()
	case subscriptionlineitem.FieldStartDate:
		return m.StartDate()
	case subscriptionlineitem.FieldEndDate:
		return m.EndDate()
	case subscriptionlineitem.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionLineItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscriptionlineitem.FieldTenantID:
		return m.OldTenantID(ctx)
	case subscriptionlineitem.FieldStatus:
		return m.OldStatus(ctx)
	case subscriptionlineitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscriptionlineitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscriptionlineitem.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case subscriptionlineitem.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case subscriptionlineitem.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case subscriptionlineitem.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case subscriptionlineitem.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case subscriptionlineitem.FieldPlanID:
		return m.OldPlanID(ctx)
	case subscriptionlineitem.FieldPlanDisplayName:
		return m.OldPlanDisplayName(ctx)
	case subscriptionlineitem.FieldPriceID:
		return m.OldPriceID(ctx)
	case subscriptionlineitem.FieldPriceType:
		return m.OldPriceType(ctx)
	case subscriptionlineitem.FieldMeterID:
		return m.OldMeterID(ctx)
	case subscriptionlineitem.FieldMeterDisplayName:
		return m.OldMeterDisplayName(ctx)
	case subscriptionlineitem.FieldPriceUnitID:
		return m.OldPriceUnitID(ctx)
	case subscriptionlineitem.FieldPriceUnit:
		return m.OldPriceUnit(ctx)
	case subscriptionlineitem.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case subscriptionlineitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case subscriptionlineitem.FieldCurrency:
		return m.OldCurrency(ctx)
	case subscriptionlineitem.FieldBillingPeriod:
		return m.OldBillingPeriod(ctx)
	case subscriptionlineitem.FieldInvoiceCadence:
		return m.OldInvoiceCadence(ctx)
	case subscriptionlineitem.FieldTrialPeriod:
		return m.OldTrialPeriod(ctx)
	case subscriptionlineitem.FieldStartDate:
		return m.OldStartDate(ctx)
	case subscriptionlineitem.FieldEndDate:
		return m.OldEndDate(ctx)
	case subscriptionlineitem.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown SubscriptionLineItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionLineItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscriptionlineitem.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case subscriptionlineitem.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case subscriptionlineitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscriptionlineitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscriptionlineitem.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case subscriptionlineitem.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case subscriptionlineitem.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case subscriptionlineitem.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case subscriptionlineitem.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case subscriptionlineitem.FieldPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case subscriptionlineitem.FieldPlanDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanDisplayName(v)
		return nil
	case subscriptionlineitem.FieldPriceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceID(v)
		return nil
	case subscriptionlineitem.FieldPriceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceType(v)
		return nil
	case subscriptionlineitem.FieldMeterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterID(v)
		return nil
	case subscriptionlineitem.FieldMeterDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterDisplayName(v)
		return nil
	case subscriptionlineitem.FieldPriceUnitID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnitID(v)
		return nil
	case subscriptionlineitem.FieldPriceUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnit(v)
		return nil
	case subscriptionlineitem.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case subscriptionlineitem.FieldQuantity:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case subscriptionlineitem.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case subscriptionlineitem.FieldBillingPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriod(v)
		return nil
	case subscriptionlineitem.FieldInvoiceCadence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceCadence(v)
		return nil
	case subscriptionlineitem.FieldTrialPeriod:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialPeriod(v)
		return nil
	case subscriptionlineitem.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case subscriptionlineitem.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case subscriptionlineitem.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionLineItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionLineItemMutation) AddedFields() []string {
	var fields []string
	if m.addtrial_period != nil {
		fields = append(fields, subscriptionlineitem.FieldTrialPeriod)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionLineItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscriptionlineitem.FieldTrialPeriod:
		return m.AddedTrialPeriod()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionLineItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscriptionlineitem.FieldTrialPeriod:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrialPeriod(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionLineItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionLineItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscriptionlineitem.FieldCreatedBy) {
		fields = append(fields, subscriptionlineitem.FieldCreatedBy)
	}
	if m.FieldCleared(subscriptionlineitem.FieldUpdatedBy) {
		fields = append(fields, subscriptionlineitem.FieldUpdatedBy)
	}
	if m.FieldCleared(subscriptionlineitem.FieldEnvironmentID) {
		fields = append(fields, subscriptionlineitem.FieldEnvironmentID)
	}
	if m.FieldCleared(subscriptionlineitem.FieldPlanID) {
		fields = append(fields, subscriptionlineitem.FieldPlanID)
	}
	if m.FieldCleared(subscriptionlineitem.FieldPlanDisplayName) {
		fields = append(fields, subscriptionlineitem.FieldPlanDisplayName)
	}
	if m.FieldCleared(subscriptionlineitem.FieldPriceType) {
		fields = append(fields, subscriptionlineitem.FieldPriceType)
	}
	if m.FieldCleared(subscriptionlineitem.FieldMeterID) {
		fields = append(fields, subscriptionlineitem.FieldMeterID)
	}
	if m.FieldCleared(subscriptionlineitem.FieldMeterDisplayName) {
		fields = append(fields, subscriptionlineitem.FieldMeterDisplayName)
	}
	if m.FieldCleared(subscriptionlineitem.FieldPriceUnitID) {
		fields = append(fields, subscriptionlineitem.FieldPriceUnitID)
	}
	if m.FieldCleared(subscriptionlineitem.FieldPriceUnit) {
		fields = append(fields, subscriptionlineitem.FieldPriceUnit)
	}
	if m.FieldCleared(subscriptionlineitem.FieldDisplayName) {
		fields = append(fields, subscriptionlineitem.FieldDisplayName)
	}
	if m.FieldCleared(subscriptionlineitem.FieldInvoiceCadence) {
		fields = append(fields, subscriptionlineitem.FieldInvoiceCadence)
	}
	if m.FieldCleared(subscriptionlineitem.FieldStartDate) {
		fields = append(fields, subscriptionlineitem.FieldStartDate)
	}
	if m.FieldCleared(subscriptionlineitem.FieldEndDate) {
		fields = append(fields, subscriptionlineitem.FieldEndDate)
	}
	if m.FieldCleared(subscriptionlineitem.FieldMetadata) {
		fields = append(fields, subscriptionlineitem.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionLineItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionLineItemMutation) ClearField(name string) error {
	switch name {
	case subscriptionlineitem.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case subscriptionlineitem.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case subscriptionlineitem.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case subscriptionlineitem.FieldPlanID:
		m.ClearPlanID()
		return nil
	case subscriptionlineitem.FieldPlanDisplayName:
		m.ClearPlanDisplayName()
		return nil
	case subscriptionlineitem.FieldPriceType:
		m.ClearPriceType()
		return nil
	case subscriptionlineitem.FieldMeterID:
		m.ClearMeterID()
		return nil
	case subscriptionlineitem.FieldMeterDisplayName:
		m.ClearMeterDisplayName()
		return nil
	case subscriptionlineitem.FieldPriceUnitID:
		m.ClearPriceUnitID()
		return nil
	case subscriptionlineitem.FieldPriceUnit:
		m.ClearPriceUnit()
		return nil
	case subscriptionlineitem.FieldDisplayName:
		m.ClearDisplayName()
		return nil
	case subscriptionlineitem.FieldInvoiceCadence:
		m.ClearInvoiceCadence()
		return nil
	case subscriptionlineitem.FieldStartDate:
		m.ClearStartDate()
		return nil
	case subscriptionlineitem.FieldEndDate:
		m.ClearEndDate()
		return nil
	case subscriptionlineitem.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionLineItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionLineItemMutation) ResetField(name string) error {
	switch name {
	case subscriptionlineitem.FieldTenantID:
		m.ResetTenantID()
		return nil
	case subscriptionlineitem.FieldStatus:
		m.ResetStatus()
		return nil
	case subscriptionlineitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscriptionlineitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscriptionlineitem.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case subscriptionlineitem.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case subscriptionlineitem.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case subscriptionlineitem.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case subscriptionlineitem.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case subscriptionlineitem.FieldPlanID:
		m.ResetPlanID()
		return nil
	case subscriptionlineitem.FieldPlanDisplayName:
		m.ResetPlanDisplayName()
		return nil
	case subscriptionlineitem.FieldPriceID:
		m.ResetPriceID()
		return nil
	case subscriptionlineitem.FieldPriceType:
		m.ResetPriceType()
		return nil
	case subscriptionlineitem.FieldMeterID:
		m.ResetMeterID()
		return nil
	case subscriptionlineitem.FieldMeterDisplayName:
		m.ResetMeterDisplayName()
		return nil
	case subscriptionlineitem.FieldPriceUnitID:
		m.ResetPriceUnitID()
		return nil
	case subscriptionlineitem.FieldPriceUnit:
		m.ResetPriceUnit()
		return nil
	case subscriptionlineitem.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case subscriptionlineitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case subscriptionlineitem.FieldCurrency:
		m.ResetCurrency()
		return nil
	case subscriptionlineitem.FieldBillingPeriod:
		m.ResetBillingPeriod()
		return nil
	case subscriptionlineitem.FieldInvoiceCadence:
		m.ResetInvoiceCadence()
		return nil
	case subscriptionlineitem.FieldTrialPeriod:
		m.ResetTrialPeriod()
		return nil
	case subscriptionlineitem.FieldStartDate:
		m.ResetStartDate()
		return nil
	case subscriptionlineitem.FieldEndDate:
		m.ResetEndDate()
		return nil
	case subscriptionlineitem.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionLineItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionLineItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subscription != nil {
		edges = append(edges, subscriptionlineitem.EdgeSubscription)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionLineItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscriptionlineitem.EdgeSubscription:
		if id := m.subscription; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionLineItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionLineItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionLineItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubscription {
		edges = append(edges, subscriptionlineitem.EdgeSubscription)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionLineItemMutation) EdgeCleared(name string) bool {
	switch name {
	case subscriptionlineitem.EdgeSubscription:
		return m.clearedsubscription
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionLineItemMutation) ClearEdge(name string) error {
	switch name {
	case subscriptionlineitem.EdgeSubscription:
		m.ClearSubscription()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionLineItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionLineItemMutation) ResetEdge(name string) error {
	switch name {
	case subscriptionlineitem.EdgeSubscription:
		m.ResetSubscription()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionLineItem edge %s", name)
}

// SubscriptionPauseMutation represents an operation that mutates the SubscriptionPause nodes in the graph.
type SubscriptionPauseMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	tenant_id             *string
	status                *string
	created_at            *time.Time
	updated_at            *time.Time
	created_by            *string
	updated_by            *string
	environment_id        *string
	pause_status          *string
	pause_mode            *string
	resume_mode           *string
	pause_start           *time.Time
	pause_end             *time.Time
	resumed_at            *time.Time
	original_period_start *time.Time
	original_period_end   *time.Time
	reason                *string
	metadata              *map[string]string
	clearedFields         map[string]struct{}
	subscription          *string
	clearedsubscription   bool
	done                  bool
	oldValue              func(context.Context) (*SubscriptionPause, error)
	predicates            []predicate.SubscriptionPause
}

var _ ent.Mutation = (*SubscriptionPauseMutation)(nil)

// subscriptionpauseOption allows management of the mutation configuration using functional options.
type subscriptionpauseOption func(*SubscriptionPauseMutation)

// newSubscriptionPauseMutation creates new mutation for the SubscriptionPause entity.
func newSubscriptionPauseMutation(c config, op Op, opts ...subscriptionpauseOption) *SubscriptionPauseMutation {
	m := &SubscriptionPauseMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscriptionPause,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionPauseID sets the ID field of the mutation.
func withSubscriptionPauseID(id string) subscriptionpauseOption {
	return func(m *SubscriptionPauseMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscriptionPause
		)
		m.oldValue = func(ctx context.Context) (*SubscriptionPause, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscriptionPause.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscriptionPause sets the old SubscriptionPause of the mutation.
func withSubscriptionPause(node *SubscriptionPause) subscriptionpauseOption {
	return func(m *SubscriptionPauseMutation) {
		m.oldValue = func(context.Context) (*SubscriptionPause, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionPauseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionPauseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SubscriptionPause entities.
func (m *SubscriptionPauseMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionPauseMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionPauseMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscriptionPause.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *SubscriptionPauseMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SubscriptionPauseMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SubscriptionPauseMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *SubscriptionPauseMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubscriptionPauseMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SubscriptionPauseMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionPauseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionPauseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionPauseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionPauseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionPauseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionPauseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *SubscriptionPauseMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SubscriptionPauseMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SubscriptionPauseMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[subscriptionpause.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SubscriptionPauseMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, subscriptionpause.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SubscriptionPauseMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SubscriptionPauseMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SubscriptionPauseMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[subscriptionpause.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SubscriptionPauseMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, subscriptionpause.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *SubscriptionPauseMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *SubscriptionPauseMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *SubscriptionPauseMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[subscriptionpause.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *SubscriptionPauseMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, subscriptionpause.FieldEnvironmentID)
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *SubscriptionPauseMutation) SetSubscriptionID(s string) {
	m.subscription = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *SubscriptionPauseMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldSubscriptionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *SubscriptionPauseMutation) ResetSubscriptionID() {
	m.subscription = nil
}

// SetPauseStatus sets the "pause_status" field.
func (m *SubscriptionPauseMutation) SetPauseStatus(s string) {
	m.pause_status = &s
}

// PauseStatus returns the value of the "pause_status" field in the mutation.
func (m *SubscriptionPauseMutation) PauseStatus() (r string, exists bool) {
	v := m.pause_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPauseStatus returns the old "pause_status" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldPauseStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPauseStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPauseStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPauseStatus: %w", err)
	}
	return oldValue.PauseStatus, nil
}

// ResetPauseStatus resets all changes to the "pause_status" field.
func (m *SubscriptionPauseMutation) ResetPauseStatus() {
	m.pause_status = nil
}

// SetPauseMode sets the "pause_mode" field.
func (m *SubscriptionPauseMutation) SetPauseMode(s string) {
	m.pause_mode = &s
}

// PauseMode returns the value of the "pause_mode" field in the mutation.
func (m *SubscriptionPauseMutation) PauseMode() (r string, exists bool) {
	v := m.pause_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldPauseMode returns the old "pause_mode" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldPauseMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPauseMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPauseMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPauseMode: %w", err)
	}
	return oldValue.PauseMode, nil
}

// ResetPauseMode resets all changes to the "pause_mode" field.
func (m *SubscriptionPauseMutation) ResetPauseMode() {
	m.pause_mode = nil
}

// SetResumeMode sets the "resume_mode" field.
func (m *SubscriptionPauseMutation) SetResumeMode(s string) {
	m.resume_mode = &s
}

// ResumeMode returns the value of the "resume_mode" field in the mutation.
func (m *SubscriptionPauseMutation) ResumeMode() (r string, exists bool) {
	v := m.resume_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldResumeMode returns the old "resume_mode" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldResumeMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResumeMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResumeMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResumeMode: %w", err)
	}
	return oldValue.ResumeMode, nil
}

// ClearResumeMode clears the value of the "resume_mode" field.
func (m *SubscriptionPauseMutation) ClearResumeMode() {
	m.resume_mode = nil
	m.clearedFields[subscriptionpause.FieldResumeMode] = struct{}{}
}

// ResumeModeCleared returns if the "resume_mode" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) ResumeModeCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldResumeMode]
	return ok
}

// ResetResumeMode resets all changes to the "resume_mode" field.
func (m *SubscriptionPauseMutation) ResetResumeMode() {
	m.resume_mode = nil
	delete(m.clearedFields, subscriptionpause.FieldResumeMode)
}

// SetPauseStart sets the "pause_start" field.
func (m *SubscriptionPauseMutation) SetPauseStart(t time.Time) {
	m.pause_start = &t
}

// PauseStart returns the value of the "pause_start" field in the mutation.
func (m *SubscriptionPauseMutation) PauseStart() (r time.Time, exists bool) {
	v := m.pause_start
	if v == nil {
		return
	}
	return *v, true
}

// OldPauseStart returns the old "pause_start" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldPauseStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPauseStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPauseStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPauseStart: %w", err)
	}
	return oldValue.PauseStart, nil
}

// ResetPauseStart resets all changes to the "pause_start" field.
func (m *SubscriptionPauseMutation) ResetPauseStart() {
	m.pause_start = nil
}

// SetPauseEnd sets the "pause_end" field.
func (m *SubscriptionPauseMutation) SetPauseEnd(t time.Time) {
	m.pause_end = &t
}

// PauseEnd returns the value of the "pause_end" field in the mutation.
func (m *SubscriptionPauseMutation) PauseEnd() (r time.Time, exists bool) {
	v := m.pause_end
	if v == nil {
		return
	}
	return *v, true
}

// OldPauseEnd returns the old "pause_end" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldPauseEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPauseEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPauseEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPauseEnd: %w", err)
	}
	return oldValue.PauseEnd, nil
}

// ClearPauseEnd clears the value of the "pause_end" field.
func (m *SubscriptionPauseMutation) ClearPauseEnd() {
	m.pause_end = nil
	m.clearedFields[subscriptionpause.FieldPauseEnd] = struct{}{}
}

// PauseEndCleared returns if the "pause_end" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) PauseEndCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldPauseEnd]
	return ok
}

// ResetPauseEnd resets all changes to the "pause_end" field.
func (m *SubscriptionPauseMutation) ResetPauseEnd() {
	m.pause_end = nil
	delete(m.clearedFields, subscriptionpause.FieldPauseEnd)
}

// SetResumedAt sets the "resumed_at" field.
func (m *SubscriptionPauseMutation) SetResumedAt(t time.Time) {
	m.resumed_at = &t
}

// ResumedAt returns the value of the "resumed_at" field in the mutation.
func (m *SubscriptionPauseMutation) ResumedAt() (r time.Time, exists bool) {
	v := m.resumed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldResumedAt returns the old "resumed_at" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldResumedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResumedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResumedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResumedAt: %w", err)
	}
	return oldValue.ResumedAt, nil
}

// ClearResumedAt clears the value of the "resumed_at" field.
func (m *SubscriptionPauseMutation) ClearResumedAt() {
	m.resumed_at = nil
	m.clearedFields[subscriptionpause.FieldResumedAt] = struct{}{}
}

// ResumedAtCleared returns if the "resumed_at" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) ResumedAtCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldResumedAt]
	return ok
}

// ResetResumedAt resets all changes to the "resumed_at" field.
func (m *SubscriptionPauseMutation) ResetResumedAt() {
	m.resumed_at = nil
	delete(m.clearedFields, subscriptionpause.FieldResumedAt)
}

// SetOriginalPeriodStart sets the "original_period_start" field.
func (m *SubscriptionPauseMutation) SetOriginalPeriodStart(t time.Time) {
	m.original_period_start = &t
}

// OriginalPeriodStart returns the value of the "original_period_start" field in the mutation.
func (m *SubscriptionPauseMutation) OriginalPeriodStart() (r time.Time, exists bool) {
	v := m.original_period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginalPeriodStart returns the old "original_period_start" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldOriginalPeriodStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginalPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginalPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginalPeriodStart: %w", err)
	}
	return oldValue.OriginalPeriodStart, nil
}

// ResetOriginalPeriodStart resets all changes to the "original_period_start" field.
func (m *SubscriptionPauseMutation) ResetOriginalPeriodStart() {
	m.original_period_start = nil
}

// SetOriginalPeriodEnd sets the "original_period_end" field.
func (m *SubscriptionPauseMutation) SetOriginalPeriodEnd(t time.Time) {
	m.original_period_end = &t
}

// OriginalPeriodEnd returns the value of the "original_period_end" field in the mutation.
func (m *SubscriptionPauseMutation) OriginalPeriodEnd() (r time.Time, exists bool) {
	v := m.original_period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginalPeriodEnd returns the old "original_period_end" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldOriginalPeriodEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginalPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginalPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginalPeriodEnd: %w", err)
	}
	return oldValue.OriginalPeriodEnd, nil
}

// ResetOriginalPeriodEnd resets all changes to the "original_period_end" field.
func (m *SubscriptionPauseMutation) ResetOriginalPeriodEnd() {
	m.original_period_end = nil
}

// SetReason sets the "reason" field.
func (m *SubscriptionPauseMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *SubscriptionPauseMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *SubscriptionPauseMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[subscriptionpause.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *SubscriptionPauseMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, subscriptionpause.FieldReason)
}

// SetMetadata sets the "metadata" field.
func (m *SubscriptionPauseMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SubscriptionPauseMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the SubscriptionPause entity.
// If the SubscriptionPause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionPauseMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SubscriptionPauseMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[subscriptionpause.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SubscriptionPauseMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[subscriptionpause.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SubscriptionPauseMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, subscriptionpause.FieldMetadata)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (m *SubscriptionPauseMutation) ClearSubscription() {
	m.clearedsubscription = true
	m.clearedFields[subscriptionpause.FieldSubscriptionID] = struct{}{}
}

// SubscriptionCleared reports if the "subscription" edge to the Subscription entity was cleared.
func (m *SubscriptionPauseMutation) SubscriptionCleared() bool {
	return m.clearedsubscription
}

// SubscriptionIDs returns the "subscription" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriptionID instead. It exists only for internal usage by the builders.
func (m *SubscriptionPauseMutation) SubscriptionIDs() (ids []string) {
	if id := m.subscription; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscription resets all changes to the "subscription" edge.
func (m *SubscriptionPauseMutation) ResetSubscription() {
	m.subscription = nil
	m.clearedsubscription = false
}

// Where appends a list predicates to the SubscriptionPauseMutation builder.
func (m *SubscriptionPauseMutation) Where(ps ...predicate.SubscriptionPause) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionPauseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionPauseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubscriptionPause, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionPauseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionPauseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubscriptionPause).
func (m *SubscriptionPauseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionPauseMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.tenant_id != nil {
		fields = append(fields, subscriptionpause.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, subscriptionpause.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, subscriptionpause.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscriptionpause.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, subscriptionpause.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, subscriptionpause.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, subscriptionpause.FieldEnvironmentID)
	}
	if m.subscription != nil {
		fields = append(fields, subscriptionpause.FieldSubscriptionID)
	}
	if m.pause_status != nil {
		fields = append(fields, subscriptionpause.FieldPauseStatus)
	}
	if m.pause_mode != nil {
		fields = append(fields, subscriptionpause.FieldPauseMode)
	}
	if m.resume_mode != nil {
		fields = append(fields, subscriptionpause.FieldResumeMode)
	}
	if m.pause_start != nil {
		fields = append(fields, subscriptionpause.FieldPauseStart)
	}
	if m.pause_end != nil {
		fields = append(fields, subscriptionpause.FieldPauseEnd)
	}
	if m.resumed_at != nil {
		fields = append(fields, subscriptionpause.FieldResumedAt)
	}
	if m.original_period_start != nil {
		fields = append(fields, subscriptionpause.FieldOriginalPeriodStart)
	}
	if m.original_period_end != nil {
		fields = append(fields, subscriptionpause.FieldOriginalPeriodEnd)
	}
	if m.reason != nil {
		fields = append(fields, subscriptionpause.FieldReason)
	}
	if m.metadata != nil {
		fields = append(fields, subscriptionpause.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionPauseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscriptionpause.FieldTenantID:
		return m.TenantID()
	case subscriptionpause.FieldStatus:
		return m.Status()
	case subscriptionpause.FieldCreatedAt:
		return m.CreatedAt()
	case subscriptionpause.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscriptionpause.FieldCreatedBy:
		return m.CreatedBy()
	case subscriptionpause.FieldUpdatedBy:
		return m.UpdatedBy()
	case subscriptionpause.FieldEnvironmentID:
		return m.EnvironmentID()
	case subscriptionpause.FieldSubscriptionID:
		return m.SubscriptionID()
	case subscriptionpause.FieldPauseStatus:
		return m.PauseStatus()
	case subscriptionpause.FieldPauseMode:
		return m.PauseMode()
	case subscriptionpause.FieldResumeMode:
		return m.ResumeMode()
	case subscriptionpause.FieldPauseStart:
		return m.PauseStart()
	case subscriptionpause.FieldPauseEnd:
		return m.PauseEnd()
	case subscriptionpause.FieldResumedAt:
		return m.ResumedAt()
	case subscriptionpause.FieldOriginalPeriodStart:
		return m.OriginalPeriodStart()
	case subscriptionpause.FieldOriginalPeriodEnd:
		return m.OriginalPeriodEnd()
	case subscriptionpause.FieldReason:
		return m.Reason()
	case subscriptionpause.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionPauseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscriptionpause.FieldTenantID:
		return m.OldTenantID(ctx)
	case subscriptionpause.FieldStatus:
		return m.OldStatus(ctx)
	case subscriptionpause.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscriptionpause.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscriptionpause.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case subscriptionpause.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case subscriptionpause.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case subscriptionpause.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case subscriptionpause.FieldPauseStatus:
		return m.OldPauseStatus(ctx)
	case subscriptionpause.FieldPauseMode:
		return m.OldPauseMode(ctx)
	case subscriptionpause.FieldResumeMode:
		return m.OldResumeMode(ctx)
	case subscriptionpause.FieldPauseStart:
		return m.OldPauseStart(ctx)
	case subscriptionpause.FieldPauseEnd:
		return m.OldPauseEnd(ctx)
	case subscriptionpause.FieldResumedAt:
		return m.OldResumedAt(ctx)
	case subscriptionpause.FieldOriginalPeriodStart:
		return m.OldOriginalPeriodStart(ctx)
	case subscriptionpause.FieldOriginalPeriodEnd:
		return m.OldOriginalPeriodEnd(ctx)
	case subscriptionpause.FieldReason:
		return m.OldReason(ctx)
	case subscriptionpause.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown SubscriptionPause field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionPauseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscriptionpause.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case subscriptionpause.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case subscriptionpause.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscriptionpause.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscriptionpause.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case subscriptionpause.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case subscriptionpause.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case subscriptionpause.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case subscriptionpause.FieldPauseStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPauseStatus(v)
		return nil
	case subscriptionpause.FieldPauseMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPauseMode(v)
		return nil
	case subscriptionpause.FieldResumeMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResumeMode(v)
		return nil
	case subscriptionpause.FieldPauseStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPauseStart(v)
		return nil
	case subscriptionpause.FieldPauseEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPauseEnd(v)
		return nil
	case subscriptionpause.FieldResumedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResumedAt(v)
		return nil
	case subscriptionpause.FieldOriginalPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginalPeriodStart(v)
		return nil
	case subscriptionpause.FieldOriginalPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginalPeriodEnd(v)
		return nil
	case subscriptionpause.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case subscriptionpause.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionPause field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionPauseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionPauseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionPauseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SubscriptionPause numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionPauseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscriptionpause.FieldCreatedBy) {
		fields = append(fields, subscriptionpause.FieldCreatedBy)
	}
	if m.FieldCleared(subscriptionpause.FieldUpdatedBy) {
		fields = append(fields, subscriptionpause.FieldUpdatedBy)
	}
	if m.FieldCleared(subscriptionpause.FieldEnvironmentID) {
		fields = append(fields, subscriptionpause.FieldEnvironmentID)
	}
	if m.FieldCleared(subscriptionpause.FieldResumeMode) {
		fields = append(fields, subscriptionpause.FieldResumeMode)
	}
	if m.FieldCleared(subscriptionpause.FieldPauseEnd) {
		fields = append(fields, subscriptionpause.FieldPauseEnd)
	}
	if m.FieldCleared(subscriptionpause.FieldResumedAt) {
		fields = append(fields, subscriptionpause.FieldResumedAt)
	}
	if m.FieldCleared(subscriptionpause.FieldReason) {
		fields = append(fields, subscriptionpause.FieldReason)
	}
	if m.FieldCleared(subscriptionpause.FieldMetadata) {
		fields = append(fields, subscriptionpause.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionPauseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionPauseMutation) ClearField(name string) error {
	switch name {
	case subscriptionpause.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case subscriptionpause.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case subscriptionpause.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case subscriptionpause.FieldResumeMode:
		m.ClearResumeMode()
		return nil
	case subscriptionpause.FieldPauseEnd:
		m.ClearPauseEnd()
		return nil
	case subscriptionpause.FieldResumedAt:
		m.ClearResumedAt()
		return nil
	case subscriptionpause.FieldReason:
		m.ClearReason()
		return nil
	case subscriptionpause.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionPause nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionPauseMutation) ResetField(name string) error {
	switch name {
	case subscriptionpause.FieldTenantID:
		m.ResetTenantID()
		return nil
	case subscriptionpause.FieldStatus:
		m.ResetStatus()
		return nil
	case subscriptionpause.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscriptionpause.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscriptionpause.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case subscriptionpause.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case subscriptionpause.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case subscriptionpause.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case subscriptionpause.FieldPauseStatus:
		m.ResetPauseStatus()
		return nil
	case subscriptionpause.FieldPauseMode:
		m.ResetPauseMode()
		return nil
	case subscriptionpause.FieldResumeMode:
		m.ResetResumeMode()
		return nil
	case subscriptionpause.FieldPauseStart:
		m.ResetPauseStart()
		return nil
	case subscriptionpause.FieldPauseEnd:
		m.ResetPauseEnd()
		return nil
	case subscriptionpause.FieldResumedAt:
		m.ResetResumedAt()
		return nil
	case subscriptionpause.FieldOriginalPeriodStart:
		m.ResetOriginalPeriodStart()
		return nil
	case subscriptionpause.FieldOriginalPeriodEnd:
		m.ResetOriginalPeriodEnd()
		return nil
	case subscriptionpause.FieldReason:
		m.ResetReason()
		return nil
	case subscriptionpause.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionPause field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionPauseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subscription != nil {
		edges = append(edges, subscriptionpause.EdgeSubscription)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionPauseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscriptionpause.EdgeSubscription:
		if id := m.subscription; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionPauseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionPauseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionPauseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubscription {
		edges = append(edges, subscriptionpause.EdgeSubscription)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionPauseMutation) EdgeCleared(name string) bool {
	switch name {
	case subscriptionpause.EdgeSubscription:
		return m.clearedsubscription
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionPauseMutation) ClearEdge(name string) error {
	switch name {
	case subscriptionpause.EdgeSubscription:
		m.ClearSubscription()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionPause unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionPauseMutation) ResetEdge(name string) error {
	switch name {
	case subscriptionpause.EdgeSubscription:
		m.ResetSubscription()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionPause edge %s", name)
}

// SubscriptionScheduleMutation represents an operation that mutates the SubscriptionSchedule nodes in the graph.
type SubscriptionScheduleMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	tenant_id              *string
	status                 *string
	created_at             *time.Time
	updated_at             *time.Time
	created_by             *string
	updated_by             *string
	environment_id         *string
	schedule_status        *types.SubscriptionScheduleStatus
	current_phase_index    *int
	addcurrent_phase_index *int
	end_behavior           *types.ScheduleEndBehavior
	start_date             *time.Time
	metadata               *map[string]string
	clearedFields          map[string]struct{}
	phases                 map[string]struct{}
	removedphases          map[string]struct{}
	clearedphases          bool
	subscription           *string
	clearedsubscription    bool
	done                   bool
	oldValue               func(context.Context) (*SubscriptionSchedule, error)
	predicates             []predicate.SubscriptionSchedule
}

var _ ent.Mutation = (*SubscriptionScheduleMutation)(nil)

// subscriptionscheduleOption allows management of the mutation configuration using functional options.
type subscriptionscheduleOption func(*SubscriptionScheduleMutation)

// newSubscriptionScheduleMutation creates new mutation for the SubscriptionSchedule entity.
func newSubscriptionScheduleMutation(c config, op Op, opts ...subscriptionscheduleOption) *SubscriptionScheduleMutation {
	m := &SubscriptionScheduleMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscriptionSchedule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionScheduleID sets the ID field of the mutation.
func withSubscriptionScheduleID(id string) subscriptionscheduleOption {
	return func(m *SubscriptionScheduleMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscriptionSchedule
		)
		m.oldValue = func(ctx context.Context) (*SubscriptionSchedule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscriptionSchedule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscriptionSchedule sets the old SubscriptionSchedule of the mutation.
func withSubscriptionSchedule(node *SubscriptionSchedule) subscriptionscheduleOption {
	return func(m *SubscriptionScheduleMutation) {
		m.oldValue = func(context.Context) (*SubscriptionSchedule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionScheduleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionScheduleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SubscriptionSchedule entities.
func (m *SubscriptionScheduleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionScheduleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionScheduleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscriptionSchedule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *SubscriptionScheduleMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SubscriptionScheduleMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SubscriptionScheduleMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *SubscriptionScheduleMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubscriptionScheduleMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SubscriptionScheduleMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionScheduleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionScheduleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionScheduleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionScheduleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionScheduleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionScheduleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *SubscriptionScheduleMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SubscriptionScheduleMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SubscriptionScheduleMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[subscriptionschedule.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SubscriptionScheduleMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionschedule.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SubscriptionScheduleMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, subscriptionschedule.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SubscriptionScheduleMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SubscriptionScheduleMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SubscriptionScheduleMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[subscriptionschedule.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SubscriptionScheduleMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionschedule.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SubscriptionScheduleMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, subscriptionschedule.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *SubscriptionScheduleMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *SubscriptionScheduleMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *SubscriptionScheduleMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[subscriptionschedule.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *SubscriptionScheduleMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[subscriptionschedule.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *SubscriptionScheduleMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, subscriptionschedule.FieldEnvironmentID)
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *SubscriptionScheduleMutation) SetSubscriptionID(s string) {
	m.subscription = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *SubscriptionScheduleMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldSubscriptionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *SubscriptionScheduleMutation) ResetSubscriptionID() {
	m.subscription = nil
}

// SetScheduleStatus sets the "schedule_status" field.
func (m *SubscriptionScheduleMutation) SetScheduleStatus(tss types.SubscriptionScheduleStatus) {
	m.schedule_status = &tss
}

// ScheduleStatus returns the value of the "schedule_status" field in the mutation.
func (m *SubscriptionScheduleMutation) ScheduleStatus() (r types.SubscriptionScheduleStatus, exists bool) {
	v := m.schedule_status
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduleStatus returns the old "schedule_status" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldScheduleStatus(ctx context.Context) (v types.SubscriptionScheduleStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduleStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduleStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduleStatus: %w", err)
	}
	return oldValue.ScheduleStatus, nil
}

// ResetScheduleStatus resets all changes to the "schedule_status" field.
func (m *SubscriptionScheduleMutation) ResetScheduleStatus() {
	m.schedule_status = nil
}

// SetCurrentPhaseIndex sets the "current_phase_index" field.
func (m *SubscriptionScheduleMutation) SetCurrentPhaseIndex(i int) {
	m.current_phase_index = &i
	m.addcurrent_phase_index = nil
}

// CurrentPhaseIndex returns the value of the "current_phase_index" field in the mutation.
func (m *SubscriptionScheduleMutation) CurrentPhaseIndex() (r int, exists bool) {
	v := m.current_phase_index
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPhaseIndex returns the old "current_phase_index" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldCurrentPhaseIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPhaseIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPhaseIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPhaseIndex: %w", err)
	}
	return oldValue.CurrentPhaseIndex, nil
}

// AddCurrentPhaseIndex adds i to the "current_phase_index" field.
func (m *SubscriptionScheduleMutation) AddCurrentPhaseIndex(i int) {
	if m.addcurrent_phase_index != nil {
		*m.addcurrent_phase_index += i
	} else {
		m.addcurrent_phase_index = &i
	}
}

// AddedCurrentPhaseIndex returns the value that was added to the "current_phase_index" field in this mutation.
func (m *SubscriptionScheduleMutation) AddedCurrentPhaseIndex() (r int, exists bool) {
	v := m.addcurrent_phase_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentPhaseIndex resets all changes to the "current_phase_index" field.
func (m *SubscriptionScheduleMutation) ResetCurrentPhaseIndex() {
	m.current_phase_index = nil
	m.addcurrent_phase_index = nil
}

// SetEndBehavior sets the "end_behavior" field.
func (m *SubscriptionScheduleMutation) SetEndBehavior(teb types.ScheduleEndBehavior) {
	m.end_behavior = &teb
}

// EndBehavior returns the value of the "end_behavior" field in the mutation.
func (m *SubscriptionScheduleMutation) EndBehavior() (r types.ScheduleEndBehavior, exists bool) {
	v := m.end_behavior
	if v == nil {
		return
	}
	return *v, true
}

// OldEndBehavior returns the old "end_behavior" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldEndBehavior(ctx context.Context) (v types.ScheduleEndBehavior, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndBehavior is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndBehavior requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndBehavior: %w", err)
	}
	return oldValue.EndBehavior, nil
}

// ResetEndBehavior resets all changes to the "end_behavior" field.
func (m *SubscriptionScheduleMutation) ResetEndBehavior() {
	m.end_behavior = nil
}

// SetStartDate sets the "start_date" field.
func (m *SubscriptionScheduleMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *SubscriptionScheduleMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *SubscriptionScheduleMutation) ResetStartDate() {
	m.start_date = nil
}

// SetMetadata sets the "metadata" field.
func (m *SubscriptionScheduleMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SubscriptionScheduleMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the SubscriptionSchedule entity.
// If the SubscriptionSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionScheduleMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SubscriptionScheduleMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[subscriptionschedule.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SubscriptionScheduleMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[subscriptionschedule.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SubscriptionScheduleMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, subscriptionschedule.FieldMetadata)
}

// AddPhaseIDs adds the "phases" edge to the SubscriptionSchedulePhase entity by ids.
func (m *SubscriptionScheduleMutation) AddPhaseIDs(ids ...string) {
	if m.phases == nil {
		m.phases = make(map[string]struct{})
	}
	for i := range ids {
		m.phases[ids[i]] = struct{}{}
	}
}

// ClearPhases clears the "phases" edge to the SubscriptionSchedulePhase entity.
func (m *SubscriptionScheduleMutation) ClearPhases() {
	m.clearedphases = true
}

// PhasesCleared reports if the "phases" edge to the SubscriptionSchedulePhase entity was cleared.
func (m *SubscriptionScheduleMutation) PhasesCleared() bool {
	return m.clearedphases
}

// RemovePhaseIDs removes the "phases" edge to the SubscriptionSchedulePhase entity by IDs.
func (m *SubscriptionScheduleMutation) RemovePhaseIDs(ids ...string) {
	if m.removedphases == nil {
		m.removedphases = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.phases, ids[i])
		m.removedphases[ids[i]] = struct{}{}
	}
}

// RemovedPhases returns the removed IDs of the "phases" edge to the SubscriptionSchedulePhase entity.
func (m *SubscriptionScheduleMutation) RemovedPhasesIDs() (ids []string) {
	for id := range m.removedphases {
		ids = append(ids, id)
	}
	return
}

// PhasesIDs returns the "phases" edge IDs in the mutation.
func (m *SubscriptionScheduleMutation) PhasesIDs() (ids []string) {
	for id := range m.phases {
		ids = append(ids, id)
	}
	return
}

// ResetPhases resets all changes to the "phases" edge.
func (m *SubscriptionScheduleMutation) ResetPhases() {
	m.phases = nil
	m.clearedphases = false
	m.removedphases = nil
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (m *SubscriptionScheduleMutation) ClearSubscription() {
	m.clearedsubscription = true
	m.clearedFields[subscriptionschedule.FieldSubscriptionID] = struct{}{}
}

// SubscriptionCleared reports if the "subscription" edge to the Subscription entity was cleared.
func (m *SubscriptionScheduleMutation) SubscriptionCleared() bool {
	return m.clearedsubscription
}

// SubscriptionIDs returns the "subscription" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriptionID instead. It exists only for internal usage by the builders.
func (m *SubscriptionScheduleMutation) SubscriptionIDs() (ids []string) {
	if id := m.subscription; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscription resets all changes to the "subscription" edge.
func (m *SubscriptionScheduleMutation) ResetSubscription() {
	m.subscription = nil
	m.clearedsubscription = false
}

// Where appends a list predicates to the SubscriptionScheduleMutation builder.
func (m *SubscriptionScheduleMutation) Where(ps ...predicate.SubscriptionSchedule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionScheduleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionScheduleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubscriptionSchedule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionScheduleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionScheduleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubscriptionSchedule).
func (m *SubscriptionScheduleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionScheduleMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.tenant_id != nil {
		fields = append(fields, subscriptionschedule.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, subscriptionschedule.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, subscriptionschedule.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscriptionschedule.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, subscriptionschedule.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, subscriptionschedule.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, subscriptionschedule.FieldEnvironmentID)
	}
	if m.subscription != nil {
		fields = append(fields, subscriptionschedule.FieldSubscriptionID)
	}
	if m.schedule_status != nil {
		fields = append(fields, subscriptionschedule.FieldScheduleStatus)
	}
	if m.current_phase_index != nil {
		fields = append(fields, subscriptionschedule.FieldCurrentPhaseIndex)
	}
	if m.end_behavior != nil {
		fields = append(fields, subscriptionschedule.FieldEndBehavior)
	}
	if m.start_date != nil {
		fields = append(fields, subscriptionschedule.FieldStartDate)
	}
	if m.metadata != nil {
		fields = append(fields, subscriptionschedule.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionScheduleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscriptionschedule.FieldTenantID:
		return m.TenantID()
	case subscriptionschedule.FieldStatus:
		return m.Status()
	case subscriptionschedule.FieldCreatedAt:
		return m.CreatedAt()
	case subscriptionschedule.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscriptionschedule.FieldCreatedBy:
		return m.CreatedBy()
	case subscriptionschedule.FieldUpdatedBy:
		return m.UpdatedBy()
	case subscriptionschedule.FieldEnvironmentID:
		return m.EnvironmentID()
	case subscriptionschedule.FieldSubscriptionID:
		return m.SubscriptionID()
	case subscriptionschedule.FieldScheduleStatus:
		return m.ScheduleStatus()
	case subscriptionschedule.FieldCurrentPhaseIndex:
		return m.CurrentPhaseIndex()
	case subscriptionschedule.FieldEndBehavior:
		return m.EndBehavior()
	case subscriptionschedule.FieldStartDate:
		return m.StartDate()
	case subscriptionschedule.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionScheduleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscriptionschedule.FieldTenantID:
		return m.OldTenantID(ctx)
	case subscriptionschedule.FieldStatus:
		return m.OldStatus(ctx)
	case subscriptionschedule.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscriptionschedule.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscriptionschedule.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case subscriptionschedule.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case subscriptionschedule.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case subscriptionschedule.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case subscriptionschedule.FieldScheduleStatus:
		return m.OldScheduleStatus(ctx)
	case subscriptionschedule.FieldCurrentPhaseIndex:
		return m.OldCurrentPhaseIndex(ctx)
	case subscriptionschedule.FieldEndBehavior:
		return m.OldEndBehavior(ctx)
	case subscriptionschedule.FieldStartDate:
		return m.OldStartDate(ctx)
	case subscriptionschedule.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown SubscriptionSchedule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionScheduleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscriptionschedule.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case subscriptionschedule.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case subscriptionschedule.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscriptionschedule.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscriptionschedule.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case subscriptionschedule.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case subscriptionschedule.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case subscriptionschedule.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case subscriptionschedule.FieldScheduleStatus:
		v, ok := value.(types.SubscriptionScheduleStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduleStatus(v)
		return nil
	case subscriptionschedule.FieldCurrentPhaseIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPhaseIndex(v)
		return nil
	case subscriptionschedule.FieldEndBehavior:
		v, ok := value.(types.ScheduleEndBehavior)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndBehavior(v)
		return nil
	case subscriptionschedule.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case subscriptionschedule.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionScheduleMutation) AddedFields() []string {
	var fields []string
	if m.addcurrent_phase_index != nil {
		fields = append(fields, subscriptionschedule.FieldCurrentPhaseIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionScheduleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscriptionschedule.FieldCurrentPhaseIndex:
		return m.AddedCurrentPhaseIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionScheduleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscriptionschedule.FieldCurrentPhaseIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentPhaseIndex(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionScheduleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscriptionschedule.FieldCreatedBy) {
		fields = append(fields, subscriptionschedule.FieldCreatedBy)
	}
	if m.FieldCleared(subscriptionschedule.FieldUpdatedBy) {
		fields = append(fields, subscriptionschedule.FieldUpdatedBy)
	}
	if m.FieldCleared(subscriptionschedule.FieldEnvironmentID) {
		fields = append(fields, subscriptionschedule.FieldEnvironmentID)
	}
	if m.FieldCleared(subscriptionschedule.FieldMetadata) {
		fields = append(fields, subscriptionschedule.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionScheduleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionScheduleMutation) ClearField(name string) error {
	switch name {
	case subscriptionschedule.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case subscriptionschedule.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case subscriptionschedule.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case subscriptionschedule.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionScheduleMutation) ResetField(name string) error {
	switch name {
	case subscriptionschedule.FieldTenantID:
		m.ResetTenantID()
		return nil
	case subscriptionschedule.FieldStatus:
		m.ResetStatus()
		return nil
	case subscriptionschedule.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscriptionschedule.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscriptionschedule.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case subscriptionschedule.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case subscriptionschedule.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case subscriptionschedule.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case subscriptionschedule.FieldScheduleStatus:
		m.ResetScheduleStatus()
		return nil
	case subscriptionschedule.FieldCurrentPhaseIndex:
		m.ResetCurrentPhaseIndex()
		return nil
	case subscriptionschedule.FieldEndBehavior:
		m.ResetEndBehavior()
		return nil
	case subscriptionschedule.FieldStartDate:
		m.ResetStartDate()
		return nil
	case subscriptionschedule.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionScheduleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.phases != nil {
		edges = append(edges, subscriptionschedule.EdgePhases)
	}
	if m.subscription != nil {
		edges = append(edges, subscriptionschedule.EdgeSubscription)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionScheduleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscriptionschedule.EdgePhases:
		ids := make([]ent.Value, 0, len(m.phases))
		for id := range m.phases {
			ids = append(ids, id)
		}
		return ids
	case subscriptionschedule.EdgeSubscription:
		if id := m.subscription; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionScheduleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedphases != nil {
		edges = append(edges, subscriptionschedule.EdgePhases)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionScheduleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subscriptionschedule.EdgePhases:
		ids := make([]ent.Value, 0, len(m.removedphases))
		for id := range m.removedphases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionScheduleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedphases {
		edges = append(edges, subscriptionschedule.EdgePhases)
	}
	if m.clearedsubscription {
		edges = append(edges, subscriptionschedule.EdgeSubscription)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionScheduleMutation) EdgeCleared(name string) bool {
	switch name {
	case subscriptionschedule.EdgePhases:
		return m.clearedphases
	case subscriptionschedule.EdgeSubscription:
		return m.clearedsubscription
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionScheduleMutation) ClearEdge(name string) error {
	switch name {
	case subscriptionschedule.EdgeSubscription:
		m.ClearSubscription()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionScheduleMutation) ResetEdge(name string) error {
	switch name {
	case subscriptionschedule.EdgePhases:
		m.ResetPhases()
		return nil
	case subscriptionschedule.EdgeSubscription:
		m.ResetSubscription()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedule edge %s", name)
}

// SubscriptionSchedulePhaseMutation represents an operation that mutates the SubscriptionSchedulePhase nodes in the graph.
type SubscriptionSchedulePhaseMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	tenant_id           *string
	status              *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	environment_id      *string
	phase_index         *int
	addphase_index      *int
	start_date          *time.Time
	end_date            *time.Time
	commitment_amount   *decimal.Decimal
	overage_factor      *decimal.Decimal
	line_items          *[]types.SchedulePhaseLineItem
	appendline_items    []types.SchedulePhaseLineItem
	credit_grants       *[]types.SchedulePhaseCreditGrant
	appendcredit_grants []types.SchedulePhaseCreditGrant
	metadata            *map[string]string
	clearedFields       map[string]struct{}
	schedule            *string
	clearedschedule     bool
	done                bool
	oldValue            func(context.Context) (*SubscriptionSchedulePhase, error)
	predicates          []predicate.SubscriptionSchedulePhase
}

var _ ent.Mutation = (*SubscriptionSchedulePhaseMutation)(nil)

// subscriptionschedulephaseOption allows management of the mutation configuration using functional options.
type subscriptionschedulephaseOption func(*SubscriptionSchedulePhaseMutation)

// newSubscriptionSchedulePhaseMutation creates new mutation for the SubscriptionSchedulePhase entity.
func newSubscriptionSchedulePhaseMutation(c config, op Op, opts ...subscriptionschedulephaseOption) *SubscriptionSchedulePhaseMutation {
	m := &SubscriptionSchedulePhaseMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscriptionSchedulePhase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionSchedulePhaseID sets the ID field of the mutation.
func withSubscriptionSchedulePhaseID(id string) subscriptionschedulephaseOption {
	return func(m *SubscriptionSchedulePhaseMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscriptionSchedulePhase
		)
		m.oldValue = func(ctx context.Context) (*SubscriptionSchedulePhase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscriptionSchedulePhase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscriptionSchedulePhase sets the old SubscriptionSchedulePhase of the mutation.
func withSubscriptionSchedulePhase(node *SubscriptionSchedulePhase) subscriptionschedulephaseOption {
	return func(m *SubscriptionSchedulePhaseMutation) {
		m.oldValue = func(context.Context) (*SubscriptionSchedulePhase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionSchedulePhaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionSchedulePhaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SubscriptionSchedulePhase entities.
func (m *SubscriptionSchedulePhaseMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionSchedulePhaseMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionSchedulePhaseMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscriptionSchedulePhase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *SubscriptionSchedulePhaseMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SubscriptionSchedulePhaseMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *SubscriptionSchedulePhaseMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SubscriptionSchedulePhaseMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionSchedulePhaseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionSchedulePhaseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionSchedulePhaseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionSchedulePhaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *SubscriptionSchedulePhaseMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SubscriptionSchedulePhaseMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[subscriptionschedulephase.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SubscriptionSchedulePhaseMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SubscriptionSchedulePhaseMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SubscriptionSchedulePhaseMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[subscriptionschedulephase.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SubscriptionSchedulePhaseMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *SubscriptionSchedulePhaseMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *SubscriptionSchedulePhaseMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[subscriptionschedulephase.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *SubscriptionSchedulePhaseMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldEnvironmentID)
}

// SetScheduleID sets the "schedule_id" field.
func (m *SubscriptionSchedulePhaseMutation) SetScheduleID(s string) {
	m.schedule = &s
}

// ScheduleID returns the value of the "schedule_id" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) ScheduleID() (r string, exists bool) {
	v := m.schedule
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduleID returns the old "schedule_id" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldScheduleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduleID: %w", err)
	}
	return oldValue.ScheduleID, nil
}

// ResetScheduleID resets all changes to the "schedule_id" field.
func (m *SubscriptionSchedulePhaseMutation) ResetScheduleID() {
	m.schedule = nil
}

// SetPhaseIndex sets the "phase_index" field.
func (m *SubscriptionSchedulePhaseMutation) SetPhaseIndex(i int) {
	m.phase_index = &i
	m.addphase_index = nil
}

// PhaseIndex returns the value of the "phase_index" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) PhaseIndex() (r int, exists bool) {
	v := m.phase_index
	if v == nil {
		return
	}
	return *v, true
}

// OldPhaseIndex returns the old "phase_index" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldPhaseIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhaseIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhaseIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhaseIndex: %w", err)
	}
	return oldValue.PhaseIndex, nil
}

// AddPhaseIndex adds i to the "phase_index" field.
func (m *SubscriptionSchedulePhaseMutation) AddPhaseIndex(i int) {
	if m.addphase_index != nil {
		*m.addphase_index += i
	} else {
		m.addphase_index = &i
	}
}

// AddedPhaseIndex returns the value that was added to the "phase_index" field in this mutation.
func (m *SubscriptionSchedulePhaseMutation) AddedPhaseIndex() (r int, exists bool) {
	v := m.addphase_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetPhaseIndex resets all changes to the "phase_index" field.
func (m *SubscriptionSchedulePhaseMutation) ResetPhaseIndex() {
	m.phase_index = nil
	m.addphase_index = nil
}

// SetStartDate sets the "start_date" field.
func (m *SubscriptionSchedulePhaseMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *SubscriptionSchedulePhaseMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *SubscriptionSchedulePhaseMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldEndDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *SubscriptionSchedulePhaseMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[subscriptionschedulephase.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *SubscriptionSchedulePhaseMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldEndDate)
}

// SetCommitmentAmount sets the "commitment_amount" field.
func (m *SubscriptionSchedulePhaseMutation) SetCommitmentAmount(d decimal.Decimal) {
	m.commitment_amount = &d
}

// CommitmentAmount returns the value of the "commitment_amount" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) CommitmentAmount() (r decimal.Decimal, exists bool) {
	v := m.commitment_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldCommitmentAmount returns the old "commitment_amount" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldCommitmentAmount(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommitmentAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommitmentAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommitmentAmount: %w", err)
	}
	return oldValue.CommitmentAmount, nil
}

// ClearCommitmentAmount clears the value of the "commitment_amount" field.
func (m *SubscriptionSchedulePhaseMutation) ClearCommitmentAmount() {
	m.commitment_amount = nil
	m.clearedFields[subscriptionschedulephase.FieldCommitmentAmount] = struct{}{}
}

// CommitmentAmountCleared returns if the "commitment_amount" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) CommitmentAmountCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldCommitmentAmount]
	return ok
}

// ResetCommitmentAmount resets all changes to the "commitment_amount" field.
func (m *SubscriptionSchedulePhaseMutation) ResetCommitmentAmount() {
	m.commitment_amount = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldCommitmentAmount)
}

// SetOverageFactor sets the "overage_factor" field.
func (m *SubscriptionSchedulePhaseMutation) SetOverageFactor(d decimal.Decimal) {
	m.overage_factor = &d
}

// OverageFactor returns the value of the "overage_factor" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) OverageFactor() (r decimal.Decimal, exists bool) {
	v := m.overage_factor
	if v == nil {
		return
	}
	return *v, true
}

// OldOverageFactor returns the old "overage_factor" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldOverageFactor(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverageFactor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverageFactor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverageFactor: %w", err)
	}
	return oldValue.OverageFactor, nil
}

// ClearOverageFactor clears the value of the "overage_factor" field.
func (m *SubscriptionSchedulePhaseMutation) ClearOverageFactor() {
	m.overage_factor = nil
	m.clearedFields[subscriptionschedulephase.FieldOverageFactor] = struct{}{}
}

// OverageFactorCleared returns if the "overage_factor" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) OverageFactorCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldOverageFactor]
	return ok
}

// ResetOverageFactor resets all changes to the "overage_factor" field.
func (m *SubscriptionSchedulePhaseMutation) ResetOverageFactor() {
	m.overage_factor = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldOverageFactor)
}

// SetLineItems sets the "line_items" field.
func (m *SubscriptionSchedulePhaseMutation) SetLineItems(tpli []types.SchedulePhaseLineItem) {
	m.line_items = &tpli
	m.appendline_items = nil
}

// LineItems returns the value of the "line_items" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) LineItems() (r []types.SchedulePhaseLineItem, exists bool) {
	v := m.line_items
	if v == nil {
		return
	}
	return *v, true
}

// OldLineItems returns the old "line_items" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldLineItems(ctx context.Context) (v []types.SchedulePhaseLineItem, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLineItems is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLineItems requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLineItems: %w", err)
	}
	return oldValue.LineItems, nil
}

// AppendLineItems adds tpli to the "line_items" field.
func (m *SubscriptionSchedulePhaseMutation) AppendLineItems(tpli []types.SchedulePhaseLineItem) {
	m.appendline_items = append(m.appendline_items, tpli...)
}

// AppendedLineItems returns the list of values that were appended to the "line_items" field in this mutation.
func (m *SubscriptionSchedulePhaseMutation) AppendedLineItems() ([]types.SchedulePhaseLineItem, bool) {
	if len(m.appendline_items) == 0 {
		return nil, false
	}
	return m.appendline_items, true
}

// ClearLineItems clears the value of the "line_items" field.
func (m *SubscriptionSchedulePhaseMutation) ClearLineItems() {
	m.line_items = nil
	m.appendline_items = nil
	m.clearedFields[subscriptionschedulephase.FieldLineItems] = struct{}{}
}

// LineItemsCleared returns if the "line_items" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) LineItemsCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldLineItems]
	return ok
}

// ResetLineItems resets all changes to the "line_items" field.
func (m *SubscriptionSchedulePhaseMutation) ResetLineItems() {
	m.line_items = nil
	m.appendline_items = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldLineItems)
}

// SetCreditGrants sets the "credit_grants" field.
func (m *SubscriptionSchedulePhaseMutation) SetCreditGrants(tpcg []types.SchedulePhaseCreditGrant) {
	m.credit_grants = &tpcg
	m.appendcredit_grants = nil
}

// CreditGrants returns the value of the "credit_grants" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) CreditGrants() (r []types.SchedulePhaseCreditGrant, exists bool) {
	v := m.credit_grants
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditGrants returns the old "credit_grants" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldCreditGrants(ctx context.Context) (v []types.SchedulePhaseCreditGrant, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditGrants is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditGrants requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditGrants: %w", err)
	}
	return oldValue.CreditGrants, nil
}

// AppendCreditGrants adds tpcg to the "credit_grants" field.
func (m *SubscriptionSchedulePhaseMutation) AppendCreditGrants(tpcg []types.SchedulePhaseCreditGrant) {
	m.appendcredit_grants = append(m.appendcredit_grants, tpcg...)
}

// AppendedCreditGrants returns the list of values that were appended to the "credit_grants" field in this mutation.
func (m *SubscriptionSchedulePhaseMutation) AppendedCreditGrants() ([]types.SchedulePhaseCreditGrant, bool) {
	if len(m.appendcredit_grants) == 0 {
		return nil, false
	}
	return m.appendcredit_grants, true
}

// ClearCreditGrants clears the value of the "credit_grants" field.
func (m *SubscriptionSchedulePhaseMutation) ClearCreditGrants() {
	m.credit_grants = nil
	m.appendcredit_grants = nil
	m.clearedFields[subscriptionschedulephase.FieldCreditGrants] = struct{}{}
}

// CreditGrantsCleared returns if the "credit_grants" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) CreditGrantsCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldCreditGrants]
	return ok
}

// ResetCreditGrants resets all changes to the "credit_grants" field.
func (m *SubscriptionSchedulePhaseMutation) ResetCreditGrants() {
	m.credit_grants = nil
	m.appendcredit_grants = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldCreditGrants)
}

// SetMetadata sets the "metadata" field.
func (m *SubscriptionSchedulePhaseMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SubscriptionSchedulePhaseMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the SubscriptionSchedulePhase entity.
// If the SubscriptionSchedulePhase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionSchedulePhaseMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SubscriptionSchedulePhaseMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[subscriptionschedulephase.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[subscriptionschedulephase.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SubscriptionSchedulePhaseMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, subscriptionschedulephase.FieldMetadata)
}

// ClearSchedule clears the "schedule" edge to the SubscriptionSchedule entity.
func (m *SubscriptionSchedulePhaseMutation) ClearSchedule() {
	m.clearedschedule = true
	m.clearedFields[subscriptionschedulephase.FieldScheduleID] = struct{}{}
}

// ScheduleCleared reports if the "schedule" edge to the SubscriptionSchedule entity was cleared.
func (m *SubscriptionSchedulePhaseMutation) ScheduleCleared() bool {
	return m.clearedschedule
}

// ScheduleIDs returns the "schedule" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScheduleID instead. It exists only for internal usage by the builders.
func (m *SubscriptionSchedulePhaseMutation) ScheduleIDs() (ids []string) {
	if id := m.schedule; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSchedule resets all changes to the "schedule" edge.
func (m *SubscriptionSchedulePhaseMutation) ResetSchedule() {
	m.schedule = nil
	m.clearedschedule = false
}

// Where appends a list predicates to the SubscriptionSchedulePhaseMutation builder.
func (m *SubscriptionSchedulePhaseMutation) Where(ps ...predicate.SubscriptionSchedulePhase) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionSchedulePhaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionSchedulePhaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubscriptionSchedulePhase, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionSchedulePhaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionSchedulePhaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubscriptionSchedulePhase).
func (m *SubscriptionSchedulePhaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionSchedulePhaseMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.tenant_id != nil {
		fields = append(fields, subscriptionschedulephase.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, subscriptionschedulephase.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, subscriptionschedulephase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscriptionschedulephase.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, subscriptionschedulephase.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, subscriptionschedulephase.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, subscriptionschedulephase.FieldEnvironmentID)
	}
	if m.schedule != nil {
		fields = append(fields, subscriptionschedulephase.FieldScheduleID)
	}
	if m.phase_index != nil {
		fields = append(fields, subscriptionschedulephase.FieldPhaseIndex)
	}
	if m.start_date != nil {
		fields = append(fields, subscriptionschedulephase.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, subscriptionschedulephase.FieldEndDate)
	}
	if m.commitment_amount != nil {
		fields = append(fields, subscriptionschedulephase.FieldCommitmentAmount)
	}
	if m.overage_factor != nil {
		fields = append(fields, subscriptionschedulephase.FieldOverageFactor)
	}
	if m.line_items != nil {
		fields = append(fields, subscriptionschedulephase.FieldLineItems)
	}
	if m.credit_grants != nil {
		fields = append(fields, subscriptionschedulephase.FieldCreditGrants)
	}
	if m.metadata != nil {
		fields = append(fields, subscriptionschedulephase.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionSchedulePhaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscriptionschedulephase.FieldTenantID:
		return m.TenantID()
	case subscriptionschedulephase.FieldStatus:
		return m.Status()
	case subscriptionschedulephase.FieldCreatedAt:
		return m.CreatedAt()
	case subscriptionschedulephase.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscriptionschedulephase.FieldCreatedBy:
		return m.CreatedBy()
	case subscriptionschedulephase.FieldUpdatedBy:
		return m.UpdatedBy()
	case subscriptionschedulephase.FieldEnvironmentID:
		return m.EnvironmentID()
	case subscriptionschedulephase.FieldScheduleID:
		return m.ScheduleID()
	case subscriptionschedulephase.FieldPhaseIndex:
		return m.PhaseIndex()
	case subscriptionschedulephase.FieldStartDate:
		return m.StartDate()
	case subscriptionschedulephase.FieldEndDate:
		return m.EndDate()
	case subscriptionschedulephase.FieldCommitmentAmount:
		return m.CommitmentAmount()
	case subscriptionschedulephase.FieldOverageFactor:
		return m.OverageFactor()
	case subscriptionschedulephase.FieldLineItems:
		return m.LineItems()
	case subscriptionschedulephase.FieldCreditGrants:
		return m.CreditGrants()
	case subscriptionschedulephase.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionSchedulePhaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscriptionschedulephase.FieldTenantID:
		return m.OldTenantID(ctx)
	case subscriptionschedulephase.FieldStatus:
		return m.OldStatus(ctx)
	case subscriptionschedulephase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscriptionschedulephase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscriptionschedulephase.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case subscriptionschedulephase.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case subscriptionschedulephase.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case subscriptionschedulephase.FieldScheduleID:
		return m.OldScheduleID(ctx)
	case subscriptionschedulephase.FieldPhaseIndex:
		return m.OldPhaseIndex(ctx)
	case subscriptionschedulephase.FieldStartDate:
		return m.OldStartDate(ctx)
	case subscriptionschedulephase.FieldEndDate:
		return m.OldEndDate(ctx)
	case subscriptionschedulephase.FieldCommitmentAmount:
		return m.OldCommitmentAmount(ctx)
	case subscriptionschedulephase.FieldOverageFactor:
		return m.OldOverageFactor(ctx)
	case subscriptionschedulephase.FieldLineItems:
		return m.OldLineItems(ctx)
	case subscriptionschedulephase.FieldCreditGrants:
		return m.OldCreditGrants(ctx)
	case subscriptionschedulephase.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown SubscriptionSchedulePhase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionSchedulePhaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscriptionschedulephase.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case subscriptionschedulephase.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case subscriptionschedulephase.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscriptionschedulephase.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscriptionschedulephase.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case subscriptionschedulephase.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case subscriptionschedulephase.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case subscriptionschedulephase.FieldScheduleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduleID(v)
		return nil
	case subscriptionschedulephase.FieldPhaseIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhaseIndex(v)
		return nil
	case subscriptionschedulephase.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case subscriptionschedulephase.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case subscriptionschedulephase.FieldCommitmentAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommitmentAmount(v)
		return nil
	case subscriptionschedulephase.FieldOverageFactor:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverageFactor(v)
		return nil
	case subscriptionschedulephase.FieldLineItems:
		v, ok := value.([]types.SchedulePhaseLineItem)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLineItems(v)
		return nil
	case subscriptionschedulephase.FieldCreditGrants:
		v, ok := value.([]types.SchedulePhaseCreditGrant)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditGrants(v)
		return nil
	case subscriptionschedulephase.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedulePhase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionSchedulePhaseMutation) AddedFields() []string {
	var fields []string
	if m.addphase_index != nil {
		fields = append(fields, subscriptionschedulephase.FieldPhaseIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionSchedulePhaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscriptionschedulephase.FieldPhaseIndex:
		return m.AddedPhaseIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionSchedulePhaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscriptionschedulephase.FieldPhaseIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPhaseIndex(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedulePhase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionSchedulePhaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscriptionschedulephase.FieldCreatedBy) {
		fields = append(fields, subscriptionschedulephase.FieldCreatedBy)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldUpdatedBy) {
		fields = append(fields, subscriptionschedulephase.FieldUpdatedBy)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldEnvironmentID) {
		fields = append(fields, subscriptionschedulephase.FieldEnvironmentID)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldEndDate) {
		fields = append(fields, subscriptionschedulephase.FieldEndDate)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldCommitmentAmount) {
		fields = append(fields, subscriptionschedulephase.FieldCommitmentAmount)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldOverageFactor) {
		fields = append(fields, subscriptionschedulephase.FieldOverageFactor)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldLineItems) {
		fields = append(fields, subscriptionschedulephase.FieldLineItems)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldCreditGrants) {
		fields = append(fields, subscriptionschedulephase.FieldCreditGrants)
	}
	if m.FieldCleared(subscriptionschedulephase.FieldMetadata) {
		fields = append(fields, subscriptionschedulephase.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionSchedulePhaseMutation) ClearField(name string) error {
	switch name {
	case subscriptionschedulephase.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case subscriptionschedulephase.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case subscriptionschedulephase.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case subscriptionschedulephase.FieldEndDate:
		m.ClearEndDate()
		return nil
	case subscriptionschedulephase.FieldCommitmentAmount:
		m.ClearCommitmentAmount()
		return nil
	case subscriptionschedulephase.FieldOverageFactor:
		m.ClearOverageFactor()
		return nil
	case subscriptionschedulephase.FieldLineItems:
		m.ClearLineItems()
		return nil
	case subscriptionschedulephase.FieldCreditGrants:
		m.ClearCreditGrants()
		return nil
	case subscriptionschedulephase.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedulePhase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionSchedulePhaseMutation) ResetField(name string) error {
	switch name {
	case subscriptionschedulephase.FieldTenantID:
		m.ResetTenantID()
		return nil
	case subscriptionschedulephase.FieldStatus:
		m.ResetStatus()
		return nil
	case subscriptionschedulephase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscriptionschedulephase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscriptionschedulephase.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case subscriptionschedulephase.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case subscriptionschedulephase.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case subscriptionschedulephase.FieldScheduleID:
		m.ResetScheduleID()
		return nil
	case subscriptionschedulephase.FieldPhaseIndex:
		m.ResetPhaseIndex()
		return nil
	case subscriptionschedulephase.FieldStartDate:
		m.ResetStartDate()
		return nil
	case subscriptionschedulephase.FieldEndDate:
		m.ResetEndDate()
		return nil
	case subscriptionschedulephase.FieldCommitmentAmount:
		m.ResetCommitmentAmount()
		return nil
	case subscriptionschedulephase.FieldOverageFactor:
		m.ResetOverageFactor()
		return nil
	case subscriptionschedulephase.FieldLineItems:
		m.ResetLineItems()
		return nil
	case subscriptionschedulephase.FieldCreditGrants:
		m.ResetCreditGrants()
		return nil
	case subscriptionschedulephase.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedulePhase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionSchedulePhaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.schedule != nil {
		edges = append(edges, subscriptionschedulephase.EdgeSchedule)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionSchedulePhaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscriptionschedulephase.EdgeSchedule:
		if id := m.schedule; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionSchedulePhaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionSchedulePhaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedschedule {
		edges = append(edges, subscriptionschedulephase.EdgeSchedule)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionSchedulePhaseMutation) EdgeCleared(name string) bool {
	switch name {
	case subscriptionschedulephase.EdgeSchedule:
		return m.clearedschedule
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionSchedulePhaseMutation) ClearEdge(name string) error {
	switch name {
	case subscriptionschedulephase.EdgeSchedule:
		m.ClearSchedule()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedulePhase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionSchedulePhaseMutation) ResetEdge(name string) error {
	switch name {
	case subscriptionschedulephase.EdgeSchedule:
		m.ResetSchedule()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionSchedulePhase edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	tenant_id             *string
	status                *string
	created_at            *time.Time
	updated_at            *time.Time
	created_by            *string
	updated_by            *string
	environment_id        *string
	task_type             *string
	entity_type           *string
	file_url              *string
	file_name             *string
	file_type             *string
	task_status           *string
	total_records         *int
	addtotal_records      *int
	processed_records     *int
	addprocessed_records  *int
	successful_records    *int
	addsuccessful_records *int
	failed_records        *int
	addfailed_records     *int
	error_summary         *string
	metadata              *map[string]interface{}
	started_at            *time.Time
	completed_at          *time.Time
	failed_at             *time.Time
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*Task, error)
	predicates            []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id string) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *TaskMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *TaskMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *TaskMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *TaskMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *TaskMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TaskMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *TaskMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TaskMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TaskMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[task.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TaskMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[task.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TaskMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, task.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TaskMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TaskMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *TaskMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[task.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *TaskMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[task.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TaskMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, task.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *TaskMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *TaskMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *TaskMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[task.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *TaskMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[task.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *TaskMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, task.FieldEnvironmentID)
}

// SetTaskType sets the "task_type" field.
func (m *TaskMutation) SetTaskType(s string) {
	m.task_type = &s
}

// TaskType returns the value of the "task_type" field in the mutation.
func (m *TaskMutation) TaskType() (r string, exists bool) {
	v := m.task_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskType returns the old "task_type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTaskType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskType: %w", err)
	}
	return oldValue.TaskType, nil
}

// ResetTaskType resets all changes to the "task_type" field.
func (m *TaskMutation) ResetTaskType() {
	m.task_type = nil
}

// SetEntityType sets the "entity_type" field.
func (m *TaskMutation) SetEntityType(s string) {
	m.entity_type = &s
}

// EntityType returns the value of the "entity_type" field in the mutation.
func (m *TaskMutation) EntityType() (r string, exists bool) {
	v := m.entity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityType returns the old "entity_type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldEntityType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityType: %w", err)
	}
	return oldValue.EntityType, nil
}

// ResetEntityType resets all changes to the "entity_type" field.
func (m *TaskMutation) ResetEntityType() {
	m.entity_type = nil
}

// SetFileURL sets the "file_url" field.
func (m *TaskMutation) SetFileURL(s string) {
	m.file_url = &s
}

// FileURL returns the value of the "file_url" field in the mutation.
func (m *TaskMutation) FileURL() (r string, exists bool) {
	v := m.file_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFileURL returns the old "file_url" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldFileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileURL: %w", err)
	}
	return oldValue.FileURL, nil
}

// ResetFileURL resets all changes to the "file_url" field.
func (m *TaskMutation) ResetFileURL() {
	m.file_url = nil
}

// SetFileName sets the "file_name" field.
func (m *TaskMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *TaskMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldFileName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ClearFileName clears the value of the "file_name" field.
func (m *TaskMutation) ClearFileName() {
	m.file_name = nil
	m.clearedFields[task.FieldFileName] = struct{}{}
}

// FileNameCleared returns if the "file_name" field was cleared in this mutation.
func (m *TaskMutation) FileNameCleared() bool {
	_, ok := m.clearedFields[task.FieldFileName]
	return ok
}

// ResetFileName resets all changes to the "file_name" field.
func (m *TaskMutation) ResetFileName() {
	m.file_name = nil
	delete(m.clearedFields, task.FieldFileName)
}

// SetFileType sets the "file_type" field.
func (m *TaskMutation) SetFileType(s string) {
	m.file_type = &s
}

// FileType returns the value of the "file_type" field in the mutation.
func (m *TaskMutation) FileType() (r string, exists bool) {
	v := m.file_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileType returns the old "file_type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldFileType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileType: %w", err)
	}
	return oldValue.FileType, nil
}

// ResetFileType resets all changes to the "file_type" field.
func (m *TaskMutation) ResetFileType() {
	m.file_type = nil
}

// SetTaskStatus sets the "task_status" field.
func (m *TaskMutation) SetTaskStatus(s string) {
	m.task_status = &s
}

// TaskStatus returns the value of the "task_status" field in the mutation.
func (m *TaskMutation) TaskStatus() (r string, exists bool) {
	v := m.task_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskStatus returns the old "task_status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTaskStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskStatus: %w", err)
	}
	return oldValue.TaskStatus, nil
}

// ResetTaskStatus resets all changes to the "task_status" field.
func (m *TaskMutation) ResetTaskStatus() {
	m.task_status = nil
}

// SetTotalRecords sets the "total_records" field.
func (m *TaskMutation) SetTotalRecords(i int) {
	m.total_records = &i
	m.addtotal_records = nil
}

// TotalRecords returns the value of the "total_records" field in the mutation.
func (m *TaskMutation) TotalRecords() (r int, exists bool) {
	v := m.total_records
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalRecords returns the old "total_records" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTotalRecords(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalRecords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalRecords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalRecords: %w", err)
	}
	return oldValue.TotalRecords, nil
}

// AddTotalRecords adds i to the "total_records" field.
func (m *TaskMutation) AddTotalRecords(i int) {
	if m.addtotal_records != nil {
		*m.addtotal_records += i
	} else {
		m.addtotal_records = &i
	}
}

// AddedTotalRecords returns the value that was added to the "total_records" field in this mutation.
func (m *TaskMutation) AddedTotalRecords() (r int, exists bool) {
	v := m.addtotal_records
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotalRecords clears the value of the "total_records" field.
func (m *TaskMutation) ClearTotalRecords() {
	m.total_records = nil
	m.addtotal_records = nil
	m.clearedFields[task.FieldTotalRecords] = struct{}{}
}

// TotalRecordsCleared returns if the "total_records" field was cleared in this mutation.
func (m *TaskMutation) TotalRecordsCleared() bool {
	_, ok := m.clearedFields[task.FieldTotalRecords]
	return ok
}

// ResetTotalRecords resets all changes to the "total_records" field.
func (m *TaskMutation) ResetTotalRecords() {
	m.total_records = nil
	m.addtotal_records = nil
	delete(m.clearedFields, task.FieldTotalRecords)
}

// SetProcessedRecords sets the "processed_records" field.
func (m *TaskMutation) SetProcessedRecords(i int) {
	m.processed_records = &i
	m.addprocessed_records = nil
}

// ProcessedRecords returns the value of the "processed_records" field in the mutation.
func (m *TaskMutation) ProcessedRecords() (r int, exists bool) {
	v := m.processed_records
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessedRecords returns the old "processed_records" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldProcessedRecords(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessedRecords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessedRecords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessedRecords: %w", err)
	}
	return oldValue.ProcessedRecords, nil
}

// AddProcessedRecords adds i to the "processed_records" field.
func (m *TaskMutation) AddProcessedRecords(i int) {
	if m.addprocessed_records != nil {
		*m.addprocessed_records += i
	} else {
		m.addprocessed_records = &i
	}
}

// AddedProcessedRecords returns the value that was added to the "processed_records" field in this mutation.
func (m *TaskMutation) AddedProcessedRecords() (r int, exists bool) {
	v := m.addprocessed_records
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessedRecords resets all changes to the "processed_records" field.
func (m *TaskMutation) ResetProcessedRecords() {
	m.processed_records = nil
	m.addprocessed_records = nil
}

// SetSuccessfulRecords sets the "successful_records" field.
func (m *TaskMutation) SetSuccessfulRecords(i int) {
	m.successful_records = &i
	m.addsuccessful_records = nil
}

// SuccessfulRecords returns the value of the "successful_records" field in the mutation.
func (m *TaskMutation) SuccessfulRecords() (r int, exists bool) {
	v := m.successful_records
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccessfulRecords returns the old "successful_records" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSuccessfulRecords(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccessfulRecords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccessfulRecords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccessfulRecords: %w", err)
	}
	return oldValue.SuccessfulRecords, nil
}

// AddSuccessfulRecords adds i to the "successful_records" field.
func (m *TaskMutation) AddSuccessfulRecords(i int) {
	if m.addsuccessful_records != nil {
		*m.addsuccessful_records += i
	} else {
		m.addsuccessful_records = &i
	}
}

// AddedSuccessfulRecords returns the value that was added to the "successful_records" field in this mutation.
func (m *TaskMutation) AddedSuccessfulRecords() (r int, exists bool) {
	v := m.addsuccessful_records
	if v == nil {
		return
	}
	return *v, true
}

// ResetSuccessfulRecords resets all changes to the "successful_records" field.
func (m *TaskMutation) ResetSuccessfulRecords() {
	m.successful_records = nil
	m.addsuccessful_records = nil
}

// SetFailedRecords sets the "failed_records" field.
func (m *TaskMutation) SetFailedRecords(i int) {
	m.failed_records = &i
	m.addfailed_records = nil
}

// FailedRecords returns the value of the "failed_records" field in the mutation.
func (m *TaskMutation) FailedRecords() (r int, exists bool) {
	v := m.failed_records
	if v == nil {
		return
	}
	return *v, true
}

// OldFailedRecords returns the old "failed_records" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldFailedRecords(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailedRecords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailedRecords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailedRecords: %w", err)
	}
	return oldValue.FailedRecords, nil
}

// AddFailedRecords adds i to the "failed_records" field.
func (m *TaskMutation) AddFailedRecords(i int) {
	if m.addfailed_records != nil {
		*m.addfailed_records += i
	} else {
		m.addfailed_records = &i
	}
}

// AddedFailedRecords returns the value that was added to the "failed_records" field in this mutation.
func (m *TaskMutation) AddedFailedRecords() (r int, exists bool) {
	v := m.addfailed_records
	if v == nil {
		return
	}
	return *v, true
}

// ResetFailedRecords resets all changes to the "failed_records" field.
func (m *TaskMutation) ResetFailedRecords() {
	m.failed_records = nil
	m.addfailed_records = nil
}

// SetErrorSummary sets the "error_summary" field.
func (m *TaskMutation) SetErrorSummary(s string) {
	m.error_summary = &s
}

// ErrorSummary returns the value of the "error_summary" field in the mutation.
func (m *TaskMutation) ErrorSummary() (r string, exists bool) {
	v := m.error_summary
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorSummary returns the old "error_summary" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldErrorSummary(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorSummary: %w", err)
	}
	return oldValue.ErrorSummary, nil
}

// ClearErrorSummary clears the value of the "error_summary" field.
func (m *TaskMutation) ClearErrorSummary() {
	m.error_summary = nil
	m.clearedFields[task.FieldErrorSummary] = struct{}{}
}

// ErrorSummaryCleared returns if the "error_summary" field was cleared in this mutation.
func (m *TaskMutation) ErrorSummaryCleared() bool {
	_, ok := m.clearedFields[task.FieldErrorSummary]
	return ok
}

// ResetErrorSummary resets all changes to the "error_summary" field.
func (m *TaskMutation) ResetErrorSummary() {
	m.error_summary = nil
	delete(m.clearedFields, task.FieldErrorSummary)
}

// SetMetadata sets the "metadata" field.
func (m *TaskMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *TaskMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *TaskMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[task.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *TaskMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[task.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *TaskMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, task.FieldMetadata)
}

// SetStartedAt sets the "started_at" field.
func (m *TaskMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *TaskMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStartedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ClearStartedAt clears the value of the "started_at" field.
func (m *TaskMutation) ClearStartedAt() {
	m.started_at = nil
	m.clearedFields[task.FieldStartedAt] = struct{}{}
}

// StartedAtCleared returns if the "started_at" field was cleared in this mutation.
func (m *TaskMutation) StartedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldStartedAt]
	return ok
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *TaskMutation) ResetStartedAt() {
	m.started_at = nil
	delete(m.clearedFields, task.FieldStartedAt)
}

// SetCompletedAt sets the "completed_at" field.
func (m *TaskMutation) SetCompletedAt(t time.Time) {
	m.completed_at = &t
}

// CompletedAt returns the value of the "completed_at" field in the mutation.
func (m *TaskMutation) CompletedAt() (r time.Time, exists bool) {
	v := m.completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedAt returns the old "completed_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCompletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedAt: %w", err)
	}
	return oldValue.CompletedAt, nil
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (m *TaskMutation) ClearCompletedAt() {
	m.completed_at = nil
	m.clearedFields[task.FieldCompletedAt] = struct{}{}
}

// CompletedAtCleared returns if the "completed_at" field was cleared in this mutation.
func (m *TaskMutation) CompletedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldCompletedAt]
	return ok
}

// ResetCompletedAt resets all changes to the "completed_at" field.
func (m *TaskMutation) ResetCompletedAt() {
	m.completed_at = nil
	delete(m.clearedFields, task.FieldCompletedAt)
}

// SetFailedAt sets the "failed_at" field.
func (m *TaskMutation) SetFailedAt(t time.Time) {
	m.failed_at = &t
}

// FailedAt returns the value of the "failed_at" field in the mutation.
func (m *TaskMutation) FailedAt() (r time.Time, exists bool) {
	v := m.failed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFailedAt returns the old "failed_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldFailedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailedAt: %w", err)
	}
	return oldValue.FailedAt, nil
}

// ClearFailedAt clears the value of the "failed_at" field.
func (m *TaskMutation) ClearFailedAt() {
	m.failed_at = nil
	m.clearedFields[task.FieldFailedAt] = struct{}{}
}

// FailedAtCleared returns if the "failed_at" field was cleared in this mutation.
func (m *TaskMutation) FailedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldFailedAt]
	return ok
}

// ResetFailedAt resets all changes to the "failed_at" field.
func (m *TaskMutation) ResetFailedAt() {
	m.failed_at = nil
	delete(m.clearedFields, task.FieldFailedAt)
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.tenant_id != nil {
		fields = append(fields, task.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, task.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, task.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, task.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, task.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, task.FieldEnvironmentID)
	}
	if m.task_type != nil {
		fields = append(fields, task.FieldTaskType)
	}
	if m.entity_type != nil {
		fields = append(fields, task.FieldEntityType)
	}
	if m.file_url != nil {
		fields = append(fields, task.FieldFileURL)
	}
	if m.file_name != nil {
		fields = append(fields, task.FieldFileName)
	}
	if m.file_type != nil {
		fields = append(fields, task.FieldFileType)
	}
	if m.task_status != nil {
		fields = append(fields, task.FieldTaskStatus)
	}
	if m.total_records != nil {
		fields = append(fields, task.FieldTotalRecords)
	}
	if m.processed_records != nil {
		fields = append(fields, task.FieldProcessedRecords)
	}
	if m.successful_records != nil {
		fields = append(fields, task.FieldSuccessfulRecords)
	}
	if m.failed_records != nil {
		fields = append(fields, task.FieldFailedRecords)
	}
	if m.error_summary != nil {
		fields = append(fields, task.FieldErrorSummary)
	}
	if m.metadata != nil {
		fields = append(fields, task.FieldMetadata)
	}
	if m.started_at != nil {
		fields = append(fields, task.FieldStartedAt)
	}
	if m.completed_at != nil {
		fields = append(fields, task.FieldCompletedAt)
	}
	if m.failed_at != nil {
		fields = append(fields, task.FieldFailedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldTenantID:
		return m.TenantID()
	case task.FieldStatus:
		return m.Status()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldUpdatedAt:
		return m.UpdatedAt()
	case task.FieldCreatedBy:
		return m.CreatedBy()
	case task.FieldUpdatedBy:
		return m.UpdatedBy()
	case task.FieldEnvironmentID:
		return m.EnvironmentID()
	case task.FieldTaskType:
		return m.TaskType()
	case task.FieldEntityType:
		return m.EntityType()
	case task.FieldFileURL:
		return m.FileURL()
	case task.FieldFileName:
		return m.FileName()
	case task.FieldFileType:
		return m.FileType()
	case task.FieldTaskStatus:
		return m.TaskStatus()
	case task.FieldTotalRecords:
		return m.TotalRecords()
	case task.FieldProcessedRecords:
		return m.ProcessedRecords()
	case task.FieldSuccessfulRecords:
		return m.SuccessfulRecords()
	case task.FieldFailedRecords:
		return m.FailedRecords()
	case task.FieldErrorSummary:
		return m.ErrorSummary()
	case task.FieldMetadata:
		return m.Metadata()
	case task.FieldStartedAt:
		return m.StartedAt()
	case task.FieldCompletedAt:
		return m.CompletedAt()
	case task.FieldFailedAt:
		return m.FailedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldTenantID:
		return m.OldTenantID(ctx)
	case task.FieldStatus:
		return m.OldStatus(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case task.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case task.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case task.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case task.FieldTaskType:
		return m.OldTaskType(ctx)
	case task.FieldEntityType:
		return m.OldEntityType(ctx)
	case task.FieldFileURL:
		return m.OldFileURL(ctx)
	case task.FieldFileName:
		return m.OldFileName(ctx)
	case task.FieldFileType:
		return m.OldFileType(ctx)
	case task.FieldTaskStatus:
		return m.OldTaskStatus(ctx)
	case task.FieldTotalRecords:
		return m.OldTotalRecords(ctx)
	case task.FieldProcessedRecords:
		return m.OldProcessedRecords(ctx)
	case task.FieldSuccessfulRecords:
		return m.OldSuccessfulRecords(ctx)
	case task.FieldFailedRecords:
		return m.OldFailedRecords(ctx)
	case task.FieldErrorSummary:
		return m.OldErrorSummary(ctx)
	case task.FieldMetadata:
		return m.OldMetadata(ctx)
	case task.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case task.FieldCompletedAt:
		return m.OldCompletedAt(ctx)
	case task.FieldFailedAt:
		return m.OldFailedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case task.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case task.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case task.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case task.FieldTaskType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskType(v)
		return nil
	case task.FieldEntityType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityType(v)
		return nil
	case task.FieldFileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileURL(v)
		return nil
	case task.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case task.FieldFileType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileType(v)
		return nil
	case task.FieldTaskStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskStatus(v)
		return nil
	case task.FieldTotalRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalRecords(v)
		return nil
	case task.FieldProcessedRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessedRecords(v)
		return nil
	case task.FieldSuccessfulRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccessfulRecords(v)
		return nil
	case task.FieldFailedRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailedRecords(v)
		return nil
	case task.FieldErrorSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorSummary(v)
		return nil
	case task.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case task.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case task.FieldCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedAt(v)
		return nil
	case task.FieldFailedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_records != nil {
		fields = append(fields, task.FieldTotalRecords)
	}
	if m.addprocessed_records != nil {
		fields = append(fields, task.FieldProcessedRecords)
	}
	if m.addsuccessful_records != nil {
		fields = append(fields, task.FieldSuccessfulRecords)
	}
	if m.addfailed_records != nil {
		fields = append(fields, task.FieldFailedRecords)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldTotalRecords:
		return m.AddedTotalRecords()
	case task.FieldProcessedRecords:
		return m.AddedProcessedRecords()
	case task.FieldSuccessfulRecords:
		return m.AddedSuccessfulRecords()
	case task.FieldFailedRecords:
		return m.AddedFailedRecords()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldTotalRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalRecords(v)
		return nil
	case task.FieldProcessedRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessedRecords(v)
		return nil
	case task.FieldSuccessfulRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSuccessfulRecords(v)
		return nil
	case task.FieldFailedRecords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFailedRecords(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldCreatedBy) {
		fields = append(fields, task.FieldCreatedBy)
	}
	if m.FieldCleared(task.FieldUpdatedBy) {
		fields = append(fields, task.FieldUpdatedBy)
	}
	if m.FieldCleared(task.FieldEnvironmentID) {
		fields = append(fields, task.FieldEnvironmentID)
	}
	if m.FieldCleared(task.FieldFileName) {
		fields = append(fields, task.FieldFileName)
	}
	if m.FieldCleared(task.FieldTotalRecords) {
		fields = append(fields, task.FieldTotalRecords)
	}
	if m.FieldCleared(task.FieldErrorSummary) {
		fields = append(fields, task.FieldErrorSummary)
	}
	if m.FieldCleared(task.FieldMetadata) {
		fields = append(fields, task.FieldMetadata)
	}
	if m.FieldCleared(task.FieldStartedAt) {
		fields = append(fields, task.FieldStartedAt)
	}
	if m.FieldCleared(task.FieldCompletedAt) {
		fields = append(fields, task.FieldCompletedAt)
	}
	if m.FieldCleared(task.FieldFailedAt) {
		fields = append(fields, task.FieldFailedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case task.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case task.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case task.FieldFileName:
		m.ClearFileName()
		return nil
	case task.FieldTotalRecords:
		m.ClearTotalRecords()
		return nil
	case task.FieldErrorSummary:
		m.ClearErrorSummary()
		return nil
	case task.FieldMetadata:
		m.ClearMetadata()
		return nil
	case task.FieldStartedAt:
		m.ClearStartedAt()
		return nil
	case task.FieldCompletedAt:
		m.ClearCompletedAt()
		return nil
	case task.FieldFailedAt:
		m.ClearFailedAt()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldTenantID:
		m.ResetTenantID()
		return nil
	case task.FieldStatus:
		m.ResetStatus()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case task.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case task.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case task.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case task.FieldTaskType:
		m.ResetTaskType()
		return nil
	case task.FieldEntityType:
		m.ResetEntityType()
		return nil
	case task.FieldFileURL:
		m.ResetFileURL()
		return nil
	case task.FieldFileName:
		m.ResetFileName()
		return nil
	case task.FieldFileType:
		m.ResetFileType()
		return nil
	case task.FieldTaskStatus:
		m.ResetTaskStatus()
		return nil
	case task.FieldTotalRecords:
		m.ResetTotalRecords()
		return nil
	case task.FieldProcessedRecords:
		m.ResetProcessedRecords()
		return nil
	case task.FieldSuccessfulRecords:
		m.ResetSuccessfulRecords()
		return nil
	case task.FieldFailedRecords:
		m.ResetFailedRecords()
		return nil
	case task.FieldErrorSummary:
		m.ResetErrorSummary()
		return nil
	case task.FieldMetadata:
		m.ResetMetadata()
		return nil
	case task.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case task.FieldCompletedAt:
		m.ResetCompletedAt()
		return nil
	case task.FieldFailedAt:
		m.ResetFailedAt()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Task edge %s", name)
}

// TenantMutation represents an operation that mutates the Tenant nodes in the graph.
type TenantMutation struct {
	config
	op              Op
	typ             string
	id              *string
	name            *string
	status          *string
	created_at      *time.Time
	updated_at      *time.Time
	billing_details *schema.TenantBillingDetails
	metadata        *map[string]string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Tenant, error)
	predicates      []predicate.Tenant
}

var _ ent.Mutation = (*TenantMutation)(nil)

// tenantOption allows management of the mutation configuration using functional options.
type tenantOption func(*TenantMutation)

// newTenantMutation creates new mutation for the Tenant entity.
func newTenantMutation(c config, op Op, opts ...tenantOption) *TenantMutation {
	m := &TenantMutation{
		config:        c,
		op:            op,
		typ:           TypeTenant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTenantID sets the ID field of the mutation.
func withTenantID(id string) tenantOption {
	return func(m *TenantMutation) {
		var (
			err   error
			once  sync.Once
			value *Tenant
		)
		m.oldValue = func(ctx context.Context) (*Tenant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tenant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTenant sets the old Tenant of the mutation.
func withTenant(node *Tenant) tenantOption {
	return func(m *TenantMutation) {
		m.oldValue = func(context.Context) (*Tenant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TenantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TenantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tenant entities.
func (m *TenantMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TenantMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TenantMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tenant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TenantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TenantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TenantMutation) ResetName() {
	m.name = nil
}

// SetStatus sets the "status" field.
func (m *TenantMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *TenantMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TenantMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TenantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TenantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TenantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TenantMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TenantMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TenantMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetBillingDetails sets the "billing_details" field.
func (m *TenantMutation) SetBillingDetails(sbd schema.TenantBillingDetails) {
	m.billing_details = &sbd
}

// BillingDetails returns the value of the "billing_details" field in the mutation.
func (m *TenantMutation) BillingDetails() (r schema.TenantBillingDetails, exists bool) {
	v := m.billing_details
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingDetails returns the old "billing_details" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldBillingDetails(ctx context.Context) (v schema.TenantBillingDetails, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingDetails: %w", err)
	}
	return oldValue.BillingDetails, nil
}

// ClearBillingDetails clears the value of the "billing_details" field.
func (m *TenantMutation) ClearBillingDetails() {
	m.billing_details = nil
	m.clearedFields[tenant.FieldBillingDetails] = struct{}{}
}

// BillingDetailsCleared returns if the "billing_details" field was cleared in this mutation.
func (m *TenantMutation) BillingDetailsCleared() bool {
	_, ok := m.clearedFields[tenant.FieldBillingDetails]
	return ok
}

// ResetBillingDetails resets all changes to the "billing_details" field.
func (m *TenantMutation) ResetBillingDetails() {
	m.billing_details = nil
	delete(m.clearedFields, tenant.FieldBillingDetails)
}

// SetMetadata sets the "metadata" field.
func (m *TenantMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *TenantMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *TenantMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[tenant.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *TenantMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[tenant.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *TenantMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, tenant.FieldMetadata)
}

// Where appends a list predicates to the TenantMutation builder.
func (m *TenantMutation) Where(ps ...predicate.Tenant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TenantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TenantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tenant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TenantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TenantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tenant).
func (m *TenantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TenantMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, tenant.FieldName)
	}
	if m.status != nil {
		fields = append(fields, tenant.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, tenant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tenant.FieldUpdatedAt)
	}
	if m.billing_details != nil {
		fields = append(fields, tenant.FieldBillingDetails)
	}
	if m.metadata != nil {
		fields = append(fields, tenant.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TenantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tenant.FieldName:
		return m.Name()
	case tenant.FieldStatus:
		return m.Status()
	case tenant.FieldCreatedAt:
		return m.CreatedAt()
	case tenant.FieldUpdatedAt:
		return m.UpdatedAt()
	case tenant.FieldBillingDetails:
		return m.BillingDetails()
	case tenant.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TenantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tenant.FieldName:
		return m.OldName(ctx)
	case tenant.FieldStatus:
		return m.OldStatus(ctx)
	case tenant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tenant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case tenant.FieldBillingDetails:
		return m.OldBillingDetails(ctx)
	case tenant.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Tenant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tenant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tenant.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case tenant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tenant.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case tenant.FieldBillingDetails:
		v, ok := value.(schema.TenantBillingDetails)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingDetails(v)
		return nil
	case tenant.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TenantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TenantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tenant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TenantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tenant.FieldBillingDetails) {
		fields = append(fields, tenant.FieldBillingDetails)
	}
	if m.FieldCleared(tenant.FieldMetadata) {
		fields = append(fields, tenant.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TenantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TenantMutation) ClearField(name string) error {
	switch name {
	case tenant.FieldBillingDetails:
		m.ClearBillingDetails()
		return nil
	case tenant.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Tenant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TenantMutation) ResetField(name string) error {
	switch name {
	case tenant.FieldName:
		m.ResetName()
		return nil
	case tenant.FieldStatus:
		m.ResetStatus()
		return nil
	case tenant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tenant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case tenant.FieldBillingDetails:
		m.ResetBillingDetails()
		return nil
	case tenant.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TenantMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TenantMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TenantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TenantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TenantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TenantMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TenantMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tenant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TenantMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tenant edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	tenant_id     *string
	status        *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	email         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *UserMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *UserMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *UserMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *UserMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[user.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, user.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[user.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, user.FieldUpdatedBy)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.tenant_id != nil {
		fields = append(fields, user.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTenantID:
		return m.TenantID()
	case user.FieldStatus:
		return m.Status()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldCreatedBy:
		return m.CreatedBy()
	case user.FieldUpdatedBy:
		return m.UpdatedBy()
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldTenantID:
		return m.OldTenantID(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case user.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case user.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreatedBy) {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.FieldCleared(user.FieldUpdatedBy) {
		fields = append(fields, user.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldTenantID:
		m.ResetTenantID()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// WalletMutation represents an operation that mutates the Wallet nodes in the graph.
type WalletMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	tenant_id              *string
	status                 *string
	created_at             *time.Time
	updated_at             *time.Time
	created_by             *string
	updated_by             *string
	environment_id         *string
	name                   *string
	customer_id            *string
	currency               *string
	description            *string
	metadata               *map[string]string
	balance                *decimal.Decimal
	credit_balance         *decimal.Decimal
	wallet_status          *string
	auto_topup_trigger     *string
	auto_topup_min_balance *decimal.Decimal
	auto_topup_amount      *decimal.Decimal
	wallet_type            *string
	conversion_rate        *decimal.Decimal
	_config                *types.WalletConfig
	alert_config           *types.AlertConfig
	alert_enabled          *bool
	alert_state            *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*Wallet, error)
	predicates             []predicate.Wallet
}

var _ ent.Mutation = (*WalletMutation)(nil)

// walletOption allows management of the mutation configuration using functional options.
type walletOption func(*WalletMutation)

// newWalletMutation creates new mutation for the Wallet entity.
func newWalletMutation(c config, op Op, opts ...walletOption) *WalletMutation {
	m := &WalletMutation{
		config:        c,
		op:            op,
		typ:           TypeWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletID sets the ID field of the mutation.
func withWalletID(id string) walletOption {
	return func(m *WalletMutation) {
		var (
			err   error
			once  sync.Once
			value *Wallet
		)
		m.oldValue = func(ctx context.Context) (*Wallet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Wallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWallet sets the old Wallet of the mutation.
func withWallet(node *Wallet) walletOption {
	return func(m *WalletMutation) {
		m.oldValue = func(context.Context) (*Wallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Wallet entities.
func (m *WalletMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WalletMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Wallet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *WalletMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *WalletMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *WalletMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *WalletMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *WalletMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *WalletMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WalletMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WalletMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WalletMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WalletMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WalletMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WalletMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *WalletMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *WalletMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *WalletMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[wallet.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *WalletMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[wallet.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *WalletMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, wallet.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *WalletMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *WalletMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *WalletMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[wallet.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *WalletMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[wallet.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *WalletMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, wallet.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *WalletMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *WalletMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *WalletMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[wallet.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *WalletMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[wallet.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *WalletMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, wallet.FieldEnvironmentID)
}

// SetName sets the "name" field.
func (m *WalletMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WalletMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *WalletMutation) ClearName() {
	m.name = nil
	m.clearedFields[wallet.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *WalletMutation) NameCleared() bool {
	_, ok := m.clearedFields[wallet.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *WalletMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, wallet.FieldName)
}

// SetCustomerID sets the "customer_id" field.
func (m *WalletMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *WalletMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *WalletMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetCurrency sets the "currency" field.
func (m *WalletMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *WalletMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *WalletMutation) ResetCurrency() {
	m.currency = nil
}

// SetDescription sets the "description" field.
func (m *WalletMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WalletMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *WalletMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[wallet.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *WalletMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[wallet.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *WalletMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, wallet.FieldDescription)
}

// SetMetadata sets the "metadata" field.
func (m *WalletMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *WalletMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *WalletMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[wallet.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *WalletMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[wallet.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *WalletMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, wallet.FieldMetadata)
}

// SetBalance sets the "balance" field.
func (m *WalletMutation) SetBalance(d decimal.Decimal) {
	m.balance = &d
}

// Balance returns the value of the "balance" field in the mutation.
func (m *WalletMutation) Balance() (r decimal.Decimal, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldBalance(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// ResetBalance resets all changes to the "balance" field.
func (m *WalletMutation) ResetBalance() {
	m.balance = nil
}

// SetCreditBalance sets the "credit_balance" field.
func (m *WalletMutation) SetCreditBalance(d decimal.Decimal) {
	m.credit_balance = &d
}

// CreditBalance returns the value of the "credit_balance" field in the mutation.
func (m *WalletMutation) CreditBalance() (r decimal.Decimal, exists bool) {
	v := m.credit_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditBalance returns the old "credit_balance" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCreditBalance(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditBalance: %w", err)
	}
	return oldValue.CreditBalance, nil
}

// ResetCreditBalance resets all changes to the "credit_balance" field.
func (m *WalletMutation) ResetCreditBalance() {
	m.credit_balance = nil
}

// SetWalletStatus sets the "wallet_status" field.
func (m *WalletMutation) SetWalletStatus(s string) {
	m.wallet_status = &s
}

// WalletStatus returns the value of the "wallet_status" field in the mutation.
func (m *WalletMutation) WalletStatus() (r string, exists bool) {
	v := m.wallet_status
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletStatus returns the old "wallet_status" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldWalletStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletStatus: %w", err)
	}
	return oldValue.WalletStatus, nil
}

// ResetWalletStatus resets all changes to the "wallet_status" field.
func (m *WalletMutation) ResetWalletStatus() {
	m.wallet_status = nil
}

// SetAutoTopupTrigger sets the "auto_topup_trigger" field.
func (m *WalletMutation) SetAutoTopupTrigger(s string) {
	m.auto_topup_trigger = &s
}

// AutoTopupTrigger returns the value of the "auto_topup_trigger" field in the mutation.
func (m *WalletMutation) AutoTopupTrigger() (r string, exists bool) {
	v := m.auto_topup_trigger
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoTopupTrigger returns the old "auto_topup_trigger" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAutoTopupTrigger(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoTopupTrigger is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoTopupTrigger requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoTopupTrigger: %w", err)
	}
	return oldValue.AutoTopupTrigger, nil
}

// ClearAutoTopupTrigger clears the value of the "auto_topup_trigger" field.
func (m *WalletMutation) ClearAutoTopupTrigger() {
	m.auto_topup_trigger = nil
	m.clearedFields[wallet.FieldAutoTopupTrigger] = struct{}{}
}

// AutoTopupTriggerCleared returns if the "auto_topup_trigger" field was cleared in this mutation.
func (m *WalletMutation) AutoTopupTriggerCleared() bool {
	_, ok := m.clearedFields[wallet.FieldAutoTopupTrigger]
	return ok
}

// ResetAutoTopupTrigger resets all changes to the "auto_topup_trigger" field.
func (m *WalletMutation) ResetAutoTopupTrigger() {
	m.auto_topup_trigger = nil
	delete(m.clearedFields, wallet.FieldAutoTopupTrigger)
}

// SetAutoTopupMinBalance sets the "auto_topup_min_balance" field.
func (m *WalletMutation) SetAutoTopupMinBalance(d decimal.Decimal) {
	m.auto_topup_min_balance = &d
}

// AutoTopupMinBalance returns the value of the "auto_topup_min_balance" field in the mutation.
func (m *WalletMutation) AutoTopupMinBalance() (r decimal.Decimal, exists bool) {
	v := m.auto_topup_min_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoTopupMinBalance returns the old "auto_topup_min_balance" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAutoTopupMinBalance(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoTopupMinBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoTopupMinBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoTopupMinBalance: %w", err)
	}
	return oldValue.AutoTopupMinBalance, nil
}

// ClearAutoTopupMinBalance clears the value of the "auto_topup_min_balance" field.
func (m *WalletMutation) ClearAutoTopupMinBalance() {
	m.auto_topup_min_balance = nil
	m.clearedFields[wallet.FieldAutoTopupMinBalance] = struct{}{}
}

// AutoTopupMinBalanceCleared returns if the "auto_topup_min_balance" field was cleared in this mutation.
func (m *WalletMutation) AutoTopupMinBalanceCleared() bool {
	_, ok := m.clearedFields[wallet.FieldAutoTopupMinBalance]
	return ok
}

// ResetAutoTopupMinBalance resets all changes to the "auto_topup_min_balance" field.
func (m *WalletMutation) ResetAutoTopupMinBalance() {
	m.auto_topup_min_balance = nil
	delete(m.clearedFields, wallet.FieldAutoTopupMinBalance)
}

// SetAutoTopupAmount sets the "auto_topup_amount" field.
func (m *WalletMutation) SetAutoTopupAmount(d decimal.Decimal) {
	m.auto_topup_amount = &d
}

// AutoTopupAmount returns the value of the "auto_topup_amount" field in the mutation.
func (m *WalletMutation) AutoTopupAmount() (r decimal.Decimal, exists bool) {
	v := m.auto_topup_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoTopupAmount returns the old "auto_topup_amount" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAutoTopupAmount(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoTopupAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoTopupAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoTopupAmount: %w", err)
	}
	return oldValue.AutoTopupAmount, nil
}

// ClearAutoTopupAmount clears the value of the "auto_topup_amount" field.
func (m *WalletMutation) ClearAutoTopupAmount() {
	m.auto_topup_amount = nil
	m.clearedFields[wallet.FieldAutoTopupAmount] = struct{}{}
}

// AutoTopupAmountCleared returns if the "auto_topup_amount" field was cleared in this mutation.
func (m *WalletMutation) AutoTopupAmountCleared() bool {
	_, ok := m.clearedFields[wallet.FieldAutoTopupAmount]
	return ok
}

// ResetAutoTopupAmount resets all changes to the "auto_topup_amount" field.
func (m *WalletMutation) ResetAutoTopupAmount() {
	m.auto_topup_amount = nil
	delete(m.clearedFields, wallet.FieldAutoTopupAmount)
}

// SetWalletType sets the "wallet_type" field.
func (m *WalletMutation) SetWalletType(s string) {
	m.wallet_type = &s
}

// WalletType returns the value of the "wallet_type" field in the mutation.
func (m *WalletMutation) WalletType() (r string, exists bool) {
	v := m.wallet_type
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletType returns the old "wallet_type" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldWalletType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletType: %w", err)
	}
	return oldValue.WalletType, nil
}

// ResetWalletType resets all changes to the "wallet_type" field.
func (m *WalletMutation) ResetWalletType() {
	m.wallet_type = nil
}

// SetConversionRate sets the "conversion_rate" field.
func (m *WalletMutation) SetConversionRate(d decimal.Decimal) {
	m.conversion_rate = &d
}

// ConversionRate returns the value of the "conversion_rate" field in the mutation.
func (m *WalletMutation) ConversionRate() (r decimal.Decimal, exists bool) {
	v := m.conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldConversionRate returns the old "conversion_rate" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldConversionRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversionRate: %w", err)
	}
	return oldValue.ConversionRate, nil
}

// ResetConversionRate resets all changes to the "conversion_rate" field.
func (m *WalletMutation) ResetConversionRate() {
	m.conversion_rate = nil
}

// SetConfig sets the "config" field.
func (m *WalletMutation) SetConfig(tc types.WalletConfig) {
	m._config = &tc
}

// Config returns the value of the "config" field in the mutation.
func (m *WalletMutation) Config() (r types.WalletConfig, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldConfig(ctx context.Context) (v types.WalletConfig, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ClearConfig clears the value of the "config" field.
func (m *WalletMutation) ClearConfig() {
	m._config = nil
	m.clearedFields[wallet.FieldConfig] = struct{}{}
}

// ConfigCleared returns if the "config" field was cleared in this mutation.
func (m *WalletMutation) ConfigCleared() bool {
	_, ok := m.clearedFields[wallet.FieldConfig]
	return ok
}

// ResetConfig resets all changes to the "config" field.
func (m *WalletMutation) ResetConfig() {
	m._config = nil
	delete(m.clearedFields, wallet.FieldConfig)
}

// SetAlertConfig sets the "alert_config" field.
func (m *WalletMutation) SetAlertConfig(tc types.AlertConfig) {
	m.alert_config = &tc
}

// AlertConfig returns the value of the "alert_config" field in the mutation.
func (m *WalletMutation) AlertConfig() (r types.AlertConfig, exists bool) {
	v := m.alert_config
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertConfig returns the old "alert_config" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAlertConfig(ctx context.Context) (v types.AlertConfig, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertConfig: %w", err)
	}
	return oldValue.AlertConfig, nil
}

// ClearAlertConfig clears the value of the "alert_config" field.
func (m *WalletMutation) ClearAlertConfig() {
	m.alert_config = nil
	m.clearedFields[wallet.FieldAlertConfig] = struct{}{}
}

// AlertConfigCleared returns if the "alert_config" field was cleared in this mutation.
func (m *WalletMutation) AlertConfigCleared() bool {
	_, ok := m.clearedFields[wallet.FieldAlertConfig]
	return ok
}

// ResetAlertConfig resets all changes to the "alert_config" field.
func (m *WalletMutation) ResetAlertConfig() {
	m.alert_config = nil
	delete(m.clearedFields, wallet.FieldAlertConfig)
}

// SetAlertEnabled sets the "alert_enabled" field.
func (m *WalletMutation) SetAlertEnabled(b bool) {
	m.alert_enabled = &b
}

// AlertEnabled returns the value of the "alert_enabled" field in the mutation.
func (m *WalletMutation) AlertEnabled() (r bool, exists bool) {
	v := m.alert_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertEnabled returns the old "alert_enabled" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAlertEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertEnabled: %w", err)
	}
	return oldValue.AlertEnabled, nil
}

// ClearAlertEnabled clears the value of the "alert_enabled" field.
func (m *WalletMutation) ClearAlertEnabled() {
	m.alert_enabled = nil
	m.clearedFields[wallet.FieldAlertEnabled] = struct{}{}
}

// AlertEnabledCleared returns if the "alert_enabled" field was cleared in this mutation.
func (m *WalletMutation) AlertEnabledCleared() bool {
	_, ok := m.clearedFields[wallet.FieldAlertEnabled]
	return ok
}

// ResetAlertEnabled resets all changes to the "alert_enabled" field.
func (m *WalletMutation) ResetAlertEnabled() {
	m.alert_enabled = nil
	delete(m.clearedFields, wallet.FieldAlertEnabled)
}

// SetAlertState sets the "alert_state" field.
func (m *WalletMutation) SetAlertState(s string) {
	m.alert_state = &s
}

// AlertState returns the value of the "alert_state" field in the mutation.
func (m *WalletMutation) AlertState() (r string, exists bool) {
	v := m.alert_state
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertState returns the old "alert_state" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAlertState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertState: %w", err)
	}
	return oldValue.AlertState, nil
}

// ClearAlertState clears the value of the "alert_state" field.
func (m *WalletMutation) ClearAlertState() {
	m.alert_state = nil
	m.clearedFields[wallet.FieldAlertState] = struct{}{}
}

// AlertStateCleared returns if the "alert_state" field was cleared in this mutation.
func (m *WalletMutation) AlertStateCleared() bool {
	_, ok := m.clearedFields[wallet.FieldAlertState]
	return ok
}

// ResetAlertState resets all changes to the "alert_state" field.
func (m *WalletMutation) ResetAlertState() {
	m.alert_state = nil
	delete(m.clearedFields, wallet.FieldAlertState)
}

// Where appends a list predicates to the WalletMutation builder.
func (m *WalletMutation) Where(ps ...predicate.Wallet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WalletMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WalletMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Wallet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WalletMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WalletMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Wallet).
func (m *WalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.tenant_id != nil {
		fields = append(fields, wallet.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, wallet.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, wallet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, wallet.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, wallet.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, wallet.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, wallet.FieldEnvironmentID)
	}
	if m.name != nil {
		fields = append(fields, wallet.FieldName)
	}
	if m.customer_id != nil {
		fields = append(fields, wallet.FieldCustomerID)
	}
	if m.currency != nil {
		fields = append(fields, wallet.FieldCurrency)
	}
	if m.description != nil {
		fields = append(fields, wallet.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, wallet.FieldMetadata)
	}
	if m.balance != nil {
		fields = append(fields, wallet.FieldBalance)
	}
	if m.credit_balance != nil {
		fields = append(fields, wallet.FieldCreditBalance)
	}
	if m.wallet_status != nil {
		fields = append(fields, wallet.FieldWalletStatus)
	}
	if m.auto_topup_trigger != nil {
		fields = append(fields, wallet.FieldAutoTopupTrigger)
	}
	if m.auto_topup_min_balance != nil {
		fields = append(fields, wallet.FieldAutoTopupMinBalance)
	}
	if m.auto_topup_amount != nil {
		fields = append(fields, wallet.FieldAutoTopupAmount)
	}
	if m.wallet_type != nil {
		fields = append(fields, wallet.FieldWalletType)
	}
	if m.conversion_rate != nil {
		fields = append(fields, wallet.FieldConversionRate)
	}
	if m._config != nil {
		fields = append(fields, wallet.FieldConfig)
	}
	if m.alert_config != nil {
		fields = append(fields, wallet.FieldAlertConfig)
	}
	if m.alert_enabled != nil {
		fields = append(fields, wallet.FieldAlertEnabled)
	}
	if m.alert_state != nil {
		fields = append(fields, wallet.FieldAlertState)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldTenantID:
		return m.TenantID()
	case wallet.FieldStatus:
		return m.Status()
	case wallet.FieldCreatedAt:
		return m.CreatedAt()
	case wallet.FieldUpdatedAt:
		return m.UpdatedAt()
	case wallet.FieldCreatedBy:
		return m.CreatedBy()
	case wallet.FieldUpdatedBy:
		return m.UpdatedBy()
	case wallet.FieldEnvironmentID:
		return m.EnvironmentID()
	case wallet.FieldName:
		return m.Name()
	case wallet.FieldCustomerID:
		return m.CustomerID()
	case wallet.FieldCurrency:
		return m.Currency()
	case wallet.FieldDescription:
		return m.Description()
	case wallet.FieldMetadata:
		return m.Metadata()
	case wallet.FieldBalance:
		return m.Balance()
	case wallet.FieldCreditBalance:
		return m.CreditBalance()
	case wallet.FieldWalletStatus:
		return m.WalletStatus()
	case wallet.FieldAutoTopupTrigger:
		return m.AutoTopupTrigger()
	case wallet.FieldAutoTopupMinBalance:
		return m.AutoTopupMinBalance()
	case wallet.FieldAutoTopupAmount:
		return m.AutoTopupAmount()
	case wallet.FieldWalletType:
		return m.WalletType()
	case wallet.FieldConversionRate:
		return m.ConversionRate()
	case wallet.FieldConfig:
		return m.Config()
	case wallet.FieldAlertConfig:
		return m.AlertConfig()
	case wallet.FieldAlertEnabled:
		return m.AlertEnabled()
	case wallet.FieldAlertState:
		return m.AlertState()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallet.FieldTenantID:
		return m.OldTenantID(ctx)
	case wallet.FieldStatus:
		return m.OldStatus(ctx)
	case wallet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wallet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wallet.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case wallet.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case wallet.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case wallet.FieldName:
		return m.OldName(ctx)
	case wallet.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case wallet.FieldCurrency:
		return m.OldCurrency(ctx)
	case wallet.FieldDescription:
		return m.OldDescription(ctx)
	case wallet.FieldMetadata:
		return m.OldMetadata(ctx)
	case wallet.FieldBalance:
		return m.OldBalance(ctx)
	case wallet.FieldCreditBalance:
		return m.OldCreditBalance(ctx)
	case wallet.FieldWalletStatus:
		return m.OldWalletStatus(ctx)
	case wallet.FieldAutoTopupTrigger:
		return m.OldAutoTopupTrigger(ctx)
	case wallet.FieldAutoTopupMinBalance:
		return m.OldAutoTopupMinBalance(ctx)
	case wallet.FieldAutoTopupAmount:
		return m.OldAutoTopupAmount(ctx)
	case wallet.FieldWalletType:
		return m.OldWalletType(ctx)
	case wallet.FieldConversionRate:
		return m.OldConversionRate(ctx)
	case wallet.FieldConfig:
		return m.OldConfig(ctx)
	case wallet.FieldAlertConfig:
		return m.OldAlertConfig(ctx)
	case wallet.FieldAlertEnabled:
		return m.OldAlertEnabled(ctx)
	case wallet.FieldAlertState:
		return m.OldAlertState(ctx)
	}
	return nil, fmt.Errorf("unknown Wallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case wallet.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case wallet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wallet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wallet.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case wallet.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case wallet.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case wallet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case wallet.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case wallet.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case wallet.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case wallet.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case wallet.FieldBalance:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case wallet.FieldCreditBalance:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditBalance(v)
		return nil
	case wallet.FieldWalletStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletStatus(v)
		return nil
	case wallet.FieldAutoTopupTrigger:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoTopupTrigger(v)
		return nil
	case wallet.FieldAutoTopupMinBalance:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoTopupMinBalance(v)
		return nil
	case wallet.FieldAutoTopupAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoTopupAmount(v)
		return nil
	case wallet.FieldWalletType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletType(v)
		return nil
	case wallet.FieldConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversionRate(v)
		return nil
	case wallet.FieldConfig:
		v, ok := value.(types.WalletConfig)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case wallet.FieldAlertConfig:
		v, ok := value.(types.AlertConfig)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertConfig(v)
		return nil
	case wallet.FieldAlertEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertEnabled(v)
		return nil
	case wallet.FieldAlertState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertState(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Wallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(wallet.FieldCreatedBy) {
		fields = append(fields, wallet.FieldCreatedBy)
	}
	if m.FieldCleared(wallet.FieldUpdatedBy) {
		fields = append(fields, wallet.FieldUpdatedBy)
	}
	if m.FieldCleared(wallet.FieldEnvironmentID) {
		fields = append(fields, wallet.FieldEnvironmentID)
	}
	if m.FieldCleared(wallet.FieldName) {
		fields = append(fields, wallet.FieldName)
	}
	if m.FieldCleared(wallet.FieldDescription) {
		fields = append(fields, wallet.FieldDescription)
	}
	if m.FieldCleared(wallet.FieldMetadata) {
		fields = append(fields, wallet.FieldMetadata)
	}
	if m.FieldCleared(wallet.FieldAutoTopupTrigger) {
		fields = append(fields, wallet.FieldAutoTopupTrigger)
	}
	if m.FieldCleared(wallet.FieldAutoTopupMinBalance) {
		fields = append(fields, wallet.FieldAutoTopupMinBalance)
	}
	if m.FieldCleared(wallet.FieldAutoTopupAmount) {
		fields = append(fields, wallet.FieldAutoTopupAmount)
	}
	if m.FieldCleared(wallet.FieldConfig) {
		fields = append(fields, wallet.FieldConfig)
	}
	if m.FieldCleared(wallet.FieldAlertConfig) {
		fields = append(fields, wallet.FieldAlertConfig)
	}
	if m.FieldCleared(wallet.FieldAlertEnabled) {
		fields = append(fields, wallet.FieldAlertEnabled)
	}
	if m.FieldCleared(wallet.FieldAlertState) {
		fields = append(fields, wallet.FieldAlertState)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletMutation) ClearField(name string) error {
	switch name {
	case wallet.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case wallet.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case wallet.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case wallet.FieldName:
		m.ClearName()
		return nil
	case wallet.FieldDescription:
		m.ClearDescription()
		return nil
	case wallet.FieldMetadata:
		m.ClearMetadata()
		return nil
	case wallet.FieldAutoTopupTrigger:
		m.ClearAutoTopupTrigger()
		return nil
	case wallet.FieldAutoTopupMinBalance:
		m.ClearAutoTopupMinBalance()
		return nil
	case wallet.FieldAutoTopupAmount:
		m.ClearAutoTopupAmount()
		return nil
	case wallet.FieldConfig:
		m.ClearConfig()
		return nil
	case wallet.FieldAlertConfig:
		m.ClearAlertConfig()
		return nil
	case wallet.FieldAlertEnabled:
		m.ClearAlertEnabled()
		return nil
	case wallet.FieldAlertState:
		m.ClearAlertState()
		return nil
	}
	return fmt.Errorf("unknown Wallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletMutation) ResetField(name string) error {
	switch name {
	case wallet.FieldTenantID:
		m.ResetTenantID()
		return nil
	case wallet.FieldStatus:
		m.ResetStatus()
		return nil
	case wallet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wallet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wallet.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case wallet.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case wallet.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case wallet.FieldName:
		m.ResetName()
		return nil
	case wallet.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case wallet.FieldCurrency:
		m.ResetCurrency()
		return nil
	case wallet.FieldDescription:
		m.ResetDescription()
		return nil
	case wallet.FieldMetadata:
		m.ResetMetadata()
		return nil
	case wallet.FieldBalance:
		m.ResetBalance()
		return nil
	case wallet.FieldCreditBalance:
		m.ResetCreditBalance()
		return nil
	case wallet.FieldWalletStatus:
		m.ResetWalletStatus()
		return nil
	case wallet.FieldAutoTopupTrigger:
		m.ResetAutoTopupTrigger()
		return nil
	case wallet.FieldAutoTopupMinBalance:
		m.ResetAutoTopupMinBalance()
		return nil
	case wallet.FieldAutoTopupAmount:
		m.ResetAutoTopupAmount()
		return nil
	case wallet.FieldWalletType:
		m.ResetWalletType()
		return nil
	case wallet.FieldConversionRate:
		m.ResetConversionRate()
		return nil
	case wallet.FieldConfig:
		m.ResetConfig()
		return nil
	case wallet.FieldAlertConfig:
		m.ResetAlertConfig()
		return nil
	case wallet.FieldAlertEnabled:
		m.ResetAlertEnabled()
		return nil
	case wallet.FieldAlertState:
		m.ResetAlertState()
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Wallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Wallet edge %s", name)
}

// WalletTransactionMutation represents an operation that mutates the WalletTransaction nodes in the graph.
type WalletTransactionMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	tenant_id             *string
	status                *string
	created_at            *time.Time
	updated_at            *time.Time
	created_by            *string
	updated_by            *string
	environment_id        *string
	wallet_id             *string
	_type                 *string
	amount                *decimal.Decimal
	credit_amount         *decimal.Decimal
	credit_balance_before *decimal.Decimal
	credit_balance_after  *decimal.Decimal
	reference_type        *string
	reference_id          *string
	description           *string
	metadata              *map[string]string
	transaction_status    *string
	expiry_date           *time.Time
	credits_available     *decimal.Decimal
	idempotency_key       *string
	transaction_reason    *string
	priority              *int
	addpriority           *int
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*WalletTransaction, error)
	predicates            []predicate.WalletTransaction
}

var _ ent.Mutation = (*WalletTransactionMutation)(nil)

// wallettransactionOption allows management of the mutation configuration using functional options.
type wallettransactionOption func(*WalletTransactionMutation)

// newWalletTransactionMutation creates new mutation for the WalletTransaction entity.
func newWalletTransactionMutation(c config, op Op, opts ...wallettransactionOption) *WalletTransactionMutation {
	m := &WalletTransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeWalletTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletTransactionID sets the ID field of the mutation.
func withWalletTransactionID(id string) wallettransactionOption {
	return func(m *WalletTransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *WalletTransaction
		)
		m.oldValue = func(ctx context.Context) (*WalletTransaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WalletTransaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWalletTransaction sets the old WalletTransaction of the mutation.
func withWalletTransaction(node *WalletTransaction) wallettransactionOption {
	return func(m *WalletTransactionMutation) {
		m.oldValue = func(context.Context) (*WalletTransaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletTransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletTransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WalletTransaction entities.
func (m *WalletTransactionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletTransactionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WalletTransactionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WalletTransaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *WalletTransactionMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *WalletTransactionMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *WalletTransactionMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *WalletTransactionMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *WalletTransactionMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *WalletTransactionMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WalletTransactionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WalletTransactionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WalletTransactionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WalletTransactionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WalletTransactionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WalletTransactionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *WalletTransactionMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *WalletTransactionMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *WalletTransactionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[wallettransaction.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *WalletTransactionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *WalletTransactionMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, wallettransaction.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *WalletTransactionMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *WalletTransactionMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *WalletTransactionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[wallettransaction.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *WalletTransactionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *WalletTransactionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, wallettransaction.FieldUpdatedBy)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *WalletTransactionMutation) SetEnvironmentID(s string) {
	m.environment_id = &s
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *WalletTransactionMutation) EnvironmentID() (r string, exists bool) {
	v := m.environment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldEnvironmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ClearEnvironmentID clears the value of the "environment_id" field.
func (m *WalletTransactionMutation) ClearEnvironmentID() {
	m.environment_id = nil
	m.clearedFields[wallettransaction.FieldEnvironmentID] = struct{}{}
}

// EnvironmentIDCleared returns if the "environment_id" field was cleared in this mutation.
func (m *WalletTransactionMutation) EnvironmentIDCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldEnvironmentID]
	return ok
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *WalletTransactionMutation) ResetEnvironmentID() {
	m.environment_id = nil
	delete(m.clearedFields, wallettransaction.FieldEnvironmentID)
}

// SetWalletID sets the "wallet_id" field.
func (m *WalletTransactionMutation) SetWalletID(s string) {
	m.wallet_id = &s
}

// WalletID returns the value of the "wallet_id" field in the mutation.
func (m *WalletTransactionMutation) WalletID() (r string, exists bool) {
	v := m.wallet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletID returns the old "wallet_id" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldWalletID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletID: %w", err)
	}
	return oldValue.WalletID, nil
}

// ResetWalletID resets all changes to the "wallet_id" field.
func (m *WalletTransactionMutation) ResetWalletID() {
	m.wallet_id = nil
}

// SetType sets the "type" field.
func (m *WalletTransactionMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *WalletTransactionMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *WalletTransactionMutation) ResetType() {
	m._type = nil
}

// SetAmount sets the "amount" field.
func (m *WalletTransactionMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *WalletTransactionMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *WalletTransactionMutation) ResetAmount() {
	m.amount = nil
}

// SetCreditAmount sets the "credit_amount" field.
func (m *WalletTransactionMutation) SetCreditAmount(d decimal.Decimal) {
	m.credit_amount = &d
}

// CreditAmount returns the value of the "credit_amount" field in the mutation.
func (m *WalletTransactionMutation) CreditAmount() (r decimal.Decimal, exists bool) {
	v := m.credit_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditAmount returns the old "credit_amount" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreditAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditAmount: %w", err)
	}
	return oldValue.CreditAmount, nil
}

// ResetCreditAmount resets all changes to the "credit_amount" field.
func (m *WalletTransactionMutation) ResetCreditAmount() {
	m.credit_amount = nil
}

// SetCreditBalanceBefore sets the "credit_balance_before" field.
func (m *WalletTransactionMutation) SetCreditBalanceBefore(d decimal.Decimal) {
	m.credit_balance_before = &d
}

// CreditBalanceBefore returns the value of the "credit_balance_before" field in the mutation.
func (m *WalletTransactionMutation) CreditBalanceBefore() (r decimal.Decimal, exists bool) {
	v := m.credit_balance_before
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditBalanceBefore returns the old "credit_balance_before" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreditBalanceBefore(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditBalanceBefore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditBalanceBefore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditBalanceBefore: %w", err)
	}
	return oldValue.CreditBalanceBefore, nil
}

// ResetCreditBalanceBefore resets all changes to the "credit_balance_before" field.
func (m *WalletTransactionMutation) ResetCreditBalanceBefore() {
	m.credit_balance_before = nil
}

// SetCreditBalanceAfter sets the "credit_balance_after" field.
func (m *WalletTransactionMutation) SetCreditBalanceAfter(d decimal.Decimal) {
	m.credit_balance_after = &d
}

// CreditBalanceAfter returns the value of the "credit_balance_after" field in the mutation.
func (m *WalletTransactionMutation) CreditBalanceAfter() (r decimal.Decimal, exists bool) {
	v := m.credit_balance_after
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditBalanceAfter returns the old "credit_balance_after" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreditBalanceAfter(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditBalanceAfter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditBalanceAfter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditBalanceAfter: %w", err)
	}
	return oldValue.CreditBalanceAfter, nil
}

// ResetCreditBalanceAfter resets all changes to the "credit_balance_after" field.
func (m *WalletTransactionMutation) ResetCreditBalanceAfter() {
	m.credit_balance_after = nil
}

// SetReferenceType sets the "reference_type" field.
func (m *WalletTransactionMutation) SetReferenceType(s string) {
	m.reference_type = &s
}

// ReferenceType returns the value of the "reference_type" field in the mutation.
func (m *WalletTransactionMutation) ReferenceType() (r string, exists bool) {
	v := m.reference_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceType returns the old "reference_type" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldReferenceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceType: %w", err)
	}
	return oldValue.ReferenceType, nil
}

// ClearReferenceType clears the value of the "reference_type" field.
func (m *WalletTransactionMutation) ClearReferenceType() {
	m.reference_type = nil
	m.clearedFields[wallettransaction.FieldReferenceType] = struct{}{}
}

// ReferenceTypeCleared returns if the "reference_type" field was cleared in this mutation.
func (m *WalletTransactionMutation) ReferenceTypeCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldReferenceType]
	return ok
}

// ResetReferenceType resets all changes to the "reference_type" field.
func (m *WalletTransactionMutation) ResetReferenceType() {
	m.reference_type = nil
	delete(m.clearedFields, wallettransaction.FieldReferenceType)
}

// SetReferenceID sets the "reference_id" field.
func (m *WalletTransactionMutation) SetReferenceID(s string) {
	m.reference_id = &s
}

// ReferenceID returns the value of the "reference_id" field in the mutation.
func (m *WalletTransactionMutation) ReferenceID() (r string, exists bool) {
	v := m.reference_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceID returns the old "reference_id" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldReferenceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceID: %w", err)
	}
	return oldValue.ReferenceID, nil
}

// ClearReferenceID clears the value of the "reference_id" field.
func (m *WalletTransactionMutation) ClearReferenceID() {
	m.reference_id = nil
	m.clearedFields[wallettransaction.FieldReferenceID] = struct{}{}
}

// ReferenceIDCleared returns if the "reference_id" field was cleared in this mutation.
func (m *WalletTransactionMutation) ReferenceIDCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldReferenceID]
	return ok
}

// ResetReferenceID resets all changes to the "reference_id" field.
func (m *WalletTransactionMutation) ResetReferenceID() {
	m.reference_id = nil
	delete(m.clearedFields, wallettransaction.FieldReferenceID)
}

// SetDescription sets the "description" field.
func (m *WalletTransactionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WalletTransactionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *WalletTransactionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[wallettransaction.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *WalletTransactionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *WalletTransactionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, wallettransaction.FieldDescription)
}

// SetMetadata sets the "metadata" field.
func (m *WalletTransactionMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *WalletTransactionMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *WalletTransactionMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[wallettransaction.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *WalletTransactionMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *WalletTransactionMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, wallettransaction.FieldMetadata)
}

// SetTransactionStatus sets the "transaction_status" field.
func (m *WalletTransactionMutation) SetTransactionStatus(s string) {
	m.transaction_status = &s
}

// TransactionStatus returns the value of the "transaction_status" field in the mutation.
func (m *WalletTransactionMutation) TransactionStatus() (r string, exists bool) {
	v := m.transaction_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionStatus returns the old "transaction_status" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldTransactionStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionStatus: %w", err)
	}
	return oldValue.TransactionStatus, nil
}

// ResetTransactionStatus resets all changes to the "transaction_status" field.
func (m *WalletTransactionMutation) ResetTransactionStatus() {
	m.transaction_status = nil
}

// SetExpiryDate sets the "expiry_date" field.
func (m *WalletTransactionMutation) SetExpiryDate(t time.Time) {
	m.expiry_date = &t
}

// ExpiryDate returns the value of the "expiry_date" field in the mutation.
func (m *WalletTransactionMutation) ExpiryDate() (r time.Time, exists bool) {
	v := m.expiry_date
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryDate returns the old "expiry_date" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldExpiryDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryDate: %w", err)
	}
	return oldValue.ExpiryDate, nil
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (m *WalletTransactionMutation) ClearExpiryDate() {
	m.expiry_date = nil
	m.clearedFields[wallettransaction.FieldExpiryDate] = struct{}{}
}

// ExpiryDateCleared returns if the "expiry_date" field was cleared in this mutation.
func (m *WalletTransactionMutation) ExpiryDateCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldExpiryDate]
	return ok
}

// ResetExpiryDate resets all changes to the "expiry_date" field.
func (m *WalletTransactionMutation) ResetExpiryDate() {
	m.expiry_date = nil
	delete(m.clearedFields, wallettransaction.FieldExpiryDate)
}

// SetCreditsAvailable sets the "credits_available" field.
func (m *WalletTransactionMutation) SetCreditsAvailable(d decimal.Decimal) {
	m.credits_available = &d
}

// CreditsAvailable returns the value of the "credits_available" field in the mutation.
func (m *WalletTransactionMutation) CreditsAvailable() (r decimal.Decimal, exists bool) {
	v := m.credits_available
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditsAvailable returns the old "credits_available" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreditsAvailable(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditsAvailable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditsAvailable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditsAvailable: %w", err)
	}
	return oldValue.CreditsAvailable, nil
}

// ResetCreditsAvailable resets all changes to the "credits_available" field.
func (m *WalletTransactionMutation) ResetCreditsAvailable() {
	m.credits_available = nil
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *WalletTransactionMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *WalletTransactionMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldIdempotencyKey(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ClearIdempotencyKey clears the value of the "idempotency_key" field.
func (m *WalletTransactionMutation) ClearIdempotencyKey() {
	m.idempotency_key = nil
	m.clearedFields[wallettransaction.FieldIdempotencyKey] = struct{}{}
}

// IdempotencyKeyCleared returns if the "idempotency_key" field was cleared in this mutation.
func (m *WalletTransactionMutation) IdempotencyKeyCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldIdempotencyKey]
	return ok
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *WalletTransactionMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
	delete(m.clearedFields, wallettransaction.FieldIdempotencyKey)
}

// SetTransactionReason sets the "transaction_reason" field.
func (m *WalletTransactionMutation) SetTransactionReason(s string) {
	m.transaction_reason = &s
}

// TransactionReason returns the value of the "transaction_reason" field in the mutation.
func (m *WalletTransactionMutation) TransactionReason() (r string, exists bool) {
	v := m.transaction_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionReason returns the old "transaction_reason" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldTransactionReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionReason: %w", err)
	}
	return oldValue.TransactionReason, nil
}

// ResetTransactionReason resets all changes to the "transaction_reason" field.
func (m *WalletTransactionMutation) ResetTransactionReason() {
	m.transaction_reason = nil
}

// SetPriority sets the "priority" field.
func (m *WalletTransactionMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *WalletTransactionMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldPriority(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *WalletTransactionMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *WalletTransactionMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ClearPriority clears the value of the "priority" field.
func (m *WalletTransactionMutation) ClearPriority() {
	m.priority = nil
	m.addpriority = nil
	m.clearedFields[wallettransaction.FieldPriority] = struct{}{}
}

// PriorityCleared returns if the "priority" field was cleared in this mutation.
func (m *WalletTransactionMutation) PriorityCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldPriority]
	return ok
}

// ResetPriority resets all changes to the "priority" field.
func (m *WalletTransactionMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
	delete(m.clearedFields, wallettransaction.FieldPriority)
}

// Where appends a list predicates to the WalletTransactionMutation builder.
func (m *WalletTransactionMutation) Where(ps ...predicate.WalletTransaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WalletTransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WalletTransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WalletTransaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WalletTransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WalletTransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WalletTransaction).
func (m *WalletTransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletTransactionMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.tenant_id != nil {
		fields = append(fields, wallettransaction.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, wallettransaction.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, wallettransaction.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, wallettransaction.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, wallettransaction.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, wallettransaction.FieldUpdatedBy)
	}
	if m.environment_id != nil {
		fields = append(fields, wallettransaction.FieldEnvironmentID)
	}
	if m.wallet_id != nil {
		fields = append(fields, wallettransaction.FieldWalletID)
	}
	if m._type != nil {
		fields = append(fields, wallettransaction.FieldType)
	}
	if m.amount != nil {
		fields = append(fields, wallettransaction.FieldAmount)
	}
	if m.credit_amount != nil {
		fields = append(fields, wallettransaction.FieldCreditAmount)
	}
	if m.credit_balance_before != nil {
		fields = append(fields, wallettransaction.FieldCreditBalanceBefore)
	}
	if m.credit_balance_after != nil {
		fields = append(fields, wallettransaction.FieldCreditBalanceAfter)
	}
	if m.reference_type != nil {
		fields = append(fields, wallettransaction.FieldReferenceType)
	}
	if m.reference_id != nil {
		fields = append(fields, wallettransaction.FieldReferenceID)
	}
	if m.description != nil {
		fields = append(fields, wallettransaction.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, wallettransaction.FieldMetadata)
	}
	if m.transaction_status != nil {
		fields = append(fields, wallettransaction.FieldTransactionStatus)
	}
	if m.expiry_date != nil {
		fields = append(fields, wallettransaction.FieldExpiryDate)
	}
	if m.credits_available != nil {
		fields = append(fields, wallettransaction.FieldCreditsAvailable)
	}
	if m.idempotency_key != nil {
		fields = append(fields, wallettransaction.FieldIdempotencyKey)
	}
	if m.transaction_reason != nil {
		fields = append(fields, wallettransaction.FieldTransactionReason)
	}
	if m.priority != nil {
		fields = append(fields, wallettransaction.FieldPriority)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletTransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallettransaction.FieldTenantID:
		return m.TenantID()
	case wallettransaction.FieldStatus:
		return m.Status()
	case wallettransaction.FieldCreatedAt:
		return m.CreatedAt()
	case wallettransaction.FieldUpdatedAt:
		return m.UpdatedAt()
	case wallettransaction.FieldCreatedBy:
		return m.CreatedBy()
	case wallettransaction.FieldUpdatedBy:
		return m.UpdatedBy()
	case wallettransaction.FieldEnvironmentID:
		return m.EnvironmentID()
	case wallettransaction.FieldWalletID:
		return m.WalletID()
	case wallettransaction.FieldType:
		return m.GetType()
	case wallettransaction.FieldAmount:
		return m.Amount()
	case wallettransaction.FieldCreditAmount:
		return m.CreditAmount()
	case wallettransaction.FieldCreditBalanceBefore:
		return m.CreditBalanceBefore()
	case wallettransaction.FieldCreditBalanceAfter:
		return m.CreditBalanceAfter()
	case wallettransaction.FieldReferenceType:
		return m.ReferenceType()
	case wallettransaction.FieldReferenceID:
		return m.ReferenceID()
	case wallettransaction.FieldDescription:
		return m.Description()
	case wallettransaction.FieldMetadata:
		return m.Metadata()
	case wallettransaction.FieldTransactionStatus:
		return m.TransactionStatus()
	case wallettransaction.FieldExpiryDate:
		return m.ExpiryDate()
	case wallettransaction.FieldCreditsAvailable:
		return m.CreditsAvailable()
	case wallettransaction.FieldIdempotencyKey:
		return m.IdempotencyKey()
	case wallettransaction.FieldTransactionReason:
		return m.TransactionReason()
	case wallettransaction.FieldPriority:
		return m.Priority()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletTransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallettransaction.FieldTenantID:
		return m.OldTenantID(ctx)
	case wallettransaction.FieldStatus:
		return m.OldStatus(ctx)
	case wallettransaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wallettransaction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wallettransaction.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case wallettransaction.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case wallettransaction.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case wallettransaction.FieldWalletID:
		return m.OldWalletID(ctx)
	case wallettransaction.FieldType:
		return m.OldType(ctx)
	case wallettransaction.FieldAmount:
		return m.OldAmount(ctx)
	case wallettransaction.FieldCreditAmount:
		return m.OldCreditAmount(ctx)
	case wallettransaction.FieldCreditBalanceBefore:
		return m.OldCreditBalanceBefore(ctx)
	case wallettransaction.FieldCreditBalanceAfter:
		return m.OldCreditBalanceAfter(ctx)
	case wallettransaction.FieldReferenceType:
		return m.OldReferenceType(ctx)
	case wallettransaction.FieldReferenceID:
		return m.OldReferenceID(ctx)
	case wallettransaction.FieldDescription:
		return m.OldDescription(ctx)
	case wallettransaction.FieldMetadata:
		return m.OldMetadata(ctx)
	case wallettransaction.FieldTransactionStatus:
		return m.OldTransactionStatus(ctx)
	case wallettransaction.FieldExpiryDate:
		return m.OldExpiryDate(ctx)
	case wallettransaction.FieldCreditsAvailable:
		return m.OldCreditsAvailable(ctx)
	case wallettransaction.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	case wallettransaction.FieldTransactionReason:
		return m.OldTransactionReason(ctx)
	case wallettransaction.FieldPriority:
		return m.OldPriority(ctx)
	}
	return nil, fmt.Errorf("unknown WalletTransaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletTransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallettransaction.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case wallettransaction.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case wallettransaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wallettransaction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wallettransaction.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case wallettransaction.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case wallettransaction.FieldEnvironmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case wallettransaction.FieldWalletID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletID(v)
		return nil
	case wallettransaction.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case wallettransaction.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case wallettransaction.FieldCreditAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditAmount(v)
		return nil
	case wallettransaction.FieldCreditBalanceBefore:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditBalanceBefore(v)
		return nil
	case wallettransaction.FieldCreditBalanceAfter:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditBalanceAfter(v)
		return nil
	case wallettransaction.FieldReferenceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceType(v)
		return nil
	case wallettransaction.FieldReferenceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceID(v)
		return nil
	case wallettransaction.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case wallettransaction.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case wallettransaction.FieldTransactionStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionStatus(v)
		return nil
	case wallettransaction.FieldExpiryDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryDate(v)
		return nil
	case wallettransaction.FieldCreditsAvailable:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditsAvailable(v)
		return nil
	case wallettransaction.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	case wallettransaction.FieldTransactionReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionReason(v)
		return nil
	case wallettransaction.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	}
	return fmt.Errorf("unknown WalletTransaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletTransactionMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, wallettransaction.FieldPriority)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletTransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case wallettransaction.FieldPriority:
		return m.AddedPriority()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletTransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case wallettransaction.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	}
	return fmt.Errorf("unknown WalletTransaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletTransactionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(wallettransaction.FieldCreatedBy) {
		fields = append(fields, wallettransaction.FieldCreatedBy)
	}
	if m.FieldCleared(wallettransaction.FieldUpdatedBy) {
		fields = append(fields, wallettransaction.FieldUpdatedBy)
	}
	if m.FieldCleared(wallettransaction.FieldEnvironmentID) {
		fields = append(fields, wallettransaction.FieldEnvironmentID)
	}
	if m.FieldCleared(wallettransaction.FieldReferenceType) {
		fields = append(fields, wallettransaction.FieldReferenceType)
	}
	if m.FieldCleared(wallettransaction.FieldReferenceID) {
		fields = append(fields, wallettransaction.FieldReferenceID)
	}
	if m.FieldCleared(wallettransaction.FieldDescription) {
		fields = append(fields, wallettransaction.FieldDescription)
	}
	if m.FieldCleared(wallettransaction.FieldMetadata) {
		fields = append(fields, wallettransaction.FieldMetadata)
	}
	if m.FieldCleared(wallettransaction.FieldExpiryDate) {
		fields = append(fields, wallettransaction.FieldExpiryDate)
	}
	if m.FieldCleared(wallettransaction.FieldIdempotencyKey) {
		fields = append(fields, wallettransaction.FieldIdempotencyKey)
	}
	if m.FieldCleared(wallettransaction.FieldPriority) {
		fields = append(fields, wallettransaction.FieldPriority)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletTransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletTransactionMutation) ClearField(name string) error {
	switch name {
	case wallettransaction.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case wallettransaction.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case wallettransaction.FieldEnvironmentID:
		m.ClearEnvironmentID()
		return nil
	case wallettransaction.FieldReferenceType:
		m.ClearReferenceType()
		return nil
	case wallettransaction.FieldReferenceID:
		m.ClearReferenceID()
		return nil
	case wallettransaction.FieldDescription:
		m.ClearDescription()
		return nil
	case wallettransaction.FieldMetadata:
		m.ClearMetadata()
		return nil
	case wallettransaction.FieldExpiryDate:
		m.ClearExpiryDate()
		return nil
	case wallettransaction.FieldIdempotencyKey:
		m.ClearIdempotencyKey()
		return nil
	case wallettransaction.FieldPriority:
		m.ClearPriority()
		return nil
	}
	return fmt.Errorf("unknown WalletTransaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletTransactionMutation) ResetField(name string) error {
	switch name {
	case wallettransaction.FieldTenantID:
		m.ResetTenantID()
		return nil
	case wallettransaction.FieldStatus:
		m.ResetStatus()
		return nil
	case wallettransaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wallettransaction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wallettransaction.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case wallettransaction.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case wallettransaction.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case wallettransaction.FieldWalletID:
		m.ResetWalletID()
		return nil
	case wallettransaction.FieldType:
		m.ResetType()
		return nil
	case wallettransaction.FieldAmount:
		m.ResetAmount()
		return nil
	case wallettransaction.FieldCreditAmount:
		m.ResetCreditAmount()
		return nil
	case wallettransaction.FieldCreditBalanceBefore:
		m.ResetCreditBalanceBefore()
		return nil
	case wallettransaction.FieldCreditBalanceAfter:
		m.ResetCreditBalanceAfter()
		return nil
	case wallettransaction.FieldReferenceType:
		m.ResetReferenceType()
		return nil
	case wallettransaction.FieldReferenceID:
		m.ResetReferenceID()
		return nil
	case wallettransaction.FieldDescription:
		m.ResetDescription()
		return nil
	case wallettransaction.FieldMetadata:
		m.ResetMetadata()
		return nil
	case wallettransaction.FieldTransactionStatus:
		m.ResetTransactionStatus()
		return nil
	case wallettransaction.FieldExpiryDate:
		m.ResetExpiryDate()
		return nil
	case wallettransaction.FieldCreditsAvailable:
		m.ResetCreditsAvailable()
		return nil
	case wallettransaction.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	case wallettransaction.FieldTransactionReason:
		m.ResetTransactionReason()
		return nil
	case wallettransaction.FieldPriority:
		m.ResetPriority()
		return nil
	}
	return fmt.Errorf("unknown WalletTransaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletTransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletTransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletTransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletTransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletTransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletTransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletTransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WalletTransaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletTransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WalletTransaction edge %s", name)
}
