// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/flexprice/flexprice/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/auth"
	"github.com/flexprice/flexprice/ent/billingsequence"
	"github.com/flexprice/flexprice/ent/costsheet"
	"github.com/flexprice/flexprice/ent/creditgrant"
	"github.com/flexprice/flexprice/ent/creditgrantapplication"
	"github.com/flexprice/flexprice/ent/customer"
	"github.com/flexprice/flexprice/ent/entitlement"
	"github.com/flexprice/flexprice/ent/environment"
	"github.com/flexprice/flexprice/ent/feature"
	"github.com/flexprice/flexprice/ent/invoice"
	"github.com/flexprice/flexprice/ent/invoicelineitem"
	"github.com/flexprice/flexprice/ent/invoicesequence"
	"github.com/flexprice/flexprice/ent/meter"
	"github.com/flexprice/flexprice/ent/payment"
	"github.com/flexprice/flexprice/ent/paymentattempt"
	"github.com/flexprice/flexprice/ent/plan"
	"github.com/flexprice/flexprice/ent/price"
	"github.com/flexprice/flexprice/ent/secret"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
	"github.com/flexprice/flexprice/ent/subscriptionpause"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
	"github.com/flexprice/flexprice/ent/task"
	"github.com/flexprice/flexprice/ent/tenant"
	"github.com/flexprice/flexprice/ent/user"
	"github.com/flexprice/flexprice/ent/wallet"
	"github.com/flexprice/flexprice/ent/wallettransaction"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Auth is the client for interacting with the Auth builders.
	Auth *AuthClient
	// BillingSequence is the client for interacting with the BillingSequence builders.
	BillingSequence *BillingSequenceClient
	// Costsheet is the client for interacting with the Costsheet builders.
	Costsheet *CostsheetClient
	// CreditGrant is the client for interacting with the CreditGrant builders.
	CreditGrant *CreditGrantClient
	// CreditGrantApplication is the client for interacting with the CreditGrantApplication builders.
	CreditGrantApplication *CreditGrantApplicationClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Entitlement is the client for interacting with the Entitlement builders.
	Entitlement *EntitlementClient
	// Environment is the client for interacting with the Environment builders.
	Environment *EnvironmentClient
	// Feature is the client for interacting with the Feature builders.
	Feature *FeatureClient
	// Invoice is the client for interacting with the Invoice builders.
	Invoice *InvoiceClient
	// InvoiceLineItem is the client for interacting with the InvoiceLineItem builders.
	InvoiceLineItem *InvoiceLineItemClient
	// InvoiceSequence is the client for interacting with the InvoiceSequence builders.
	InvoiceSequence *InvoiceSequenceClient
	// Meter is the client for interacting with the Meter builders.
	Meter *MeterClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PaymentAttempt is the client for interacting with the PaymentAttempt builders.
	PaymentAttempt *PaymentAttemptClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// Price is the client for interacting with the Price builders.
	Price *PriceClient
	// Secret is the client for interacting with the Secret builders.
	Secret *SecretClient
	// Subscription is the client for interacting with the Subscription builders.
	Subscription *SubscriptionClient
	// SubscriptionLineItem is the client for interacting with the SubscriptionLineItem builders.
	SubscriptionLineItem *SubscriptionLineItemClient
	// SubscriptionPause is the client for interacting with the SubscriptionPause builders.
	SubscriptionPause *SubscriptionPauseClient
	// SubscriptionSchedule is the client for interacting with the SubscriptionSchedule builders.
	SubscriptionSchedule *SubscriptionScheduleClient
	// SubscriptionSchedulePhase is the client for interacting with the SubscriptionSchedulePhase builders.
	SubscriptionSchedulePhase *SubscriptionSchedulePhaseClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Wallet is the client for interacting with the Wallet builders.
	Wallet *WalletClient
	// WalletTransaction is the client for interacting with the WalletTransaction builders.
	WalletTransaction *WalletTransactionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Auth = NewAuthClient(c.config)
	c.BillingSequence = NewBillingSequenceClient(c.config)
	c.Costsheet = NewCostsheetClient(c.config)
	c.CreditGrant = NewCreditGrantClient(c.config)
	c.CreditGrantApplication = NewCreditGrantApplicationClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Entitlement = NewEntitlementClient(c.config)
	c.Environment = NewEnvironmentClient(c.config)
	c.Feature = NewFeatureClient(c.config)
	c.Invoice = NewInvoiceClient(c.config)
	c.InvoiceLineItem = NewInvoiceLineItemClient(c.config)
	c.InvoiceSequence = NewInvoiceSequenceClient(c.config)
	c.Meter = NewMeterClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PaymentAttempt = NewPaymentAttemptClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.Price = NewPriceClient(c.config)
	c.Secret = NewSecretClient(c.config)
	c.Subscription = NewSubscriptionClient(c.config)
	c.SubscriptionLineItem = NewSubscriptionLineItemClient(c.config)
	c.SubscriptionPause = NewSubscriptionPauseClient(c.config)
	c.SubscriptionSchedule = NewSubscriptionScheduleClient(c.config)
	c.SubscriptionSchedulePhase = NewSubscriptionSchedulePhaseClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.User = NewUserClient(c.config)
	c.Wallet = NewWalletClient(c.config)
	c.WalletTransaction = NewWalletTransactionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		Auth:                      NewAuthClient(cfg),
		BillingSequence:           NewBillingSequenceClient(cfg),
		Costsheet:                 NewCostsheetClient(cfg),
		CreditGrant:               NewCreditGrantClient(cfg),
		CreditGrantApplication:    NewCreditGrantApplicationClient(cfg),
		Customer:                  NewCustomerClient(cfg),
		Entitlement:               NewEntitlementClient(cfg),
		Environment:               NewEnvironmentClient(cfg),
		Feature:                   NewFeatureClient(cfg),
		Invoice:                   NewInvoiceClient(cfg),
		InvoiceLineItem:           NewInvoiceLineItemClient(cfg),
		InvoiceSequence:           NewInvoiceSequenceClient(cfg),
		Meter:                     NewMeterClient(cfg),
		Payment:                   NewPaymentClient(cfg),
		PaymentAttempt:            NewPaymentAttemptClient(cfg),
		Plan:                      NewPlanClient(cfg),
		Price:                     NewPriceClient(cfg),
		Secret:                    NewSecretClient(cfg),
		Subscription:              NewSubscriptionClient(cfg),
		SubscriptionLineItem:      NewSubscriptionLineItemClient(cfg),
		SubscriptionPause:         NewSubscriptionPauseClient(cfg),
		SubscriptionSchedule:      NewSubscriptionScheduleClient(cfg),
		SubscriptionSchedulePhase: NewSubscriptionSchedulePhaseClient(cfg),
		Task:                      NewTaskClient(cfg),
		Tenant:                    NewTenantClient(cfg),
		User:                      NewUserClient(cfg),
		Wallet:                    NewWalletClient(cfg),
		WalletTransaction:         NewWalletTransactionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		Auth:                      NewAuthClient(cfg),
		BillingSequence:           NewBillingSequenceClient(cfg),
		Costsheet:                 NewCostsheetClient(cfg),
		CreditGrant:               NewCreditGrantClient(cfg),
		CreditGrantApplication:    NewCreditGrantApplicationClient(cfg),
		Customer:                  NewCustomerClient(cfg),
		Entitlement:               NewEntitlementClient(cfg),
		Environment:               NewEnvironmentClient(cfg),
		Feature:                   NewFeatureClient(cfg),
		Invoice:                   NewInvoiceClient(cfg),
		InvoiceLineItem:           NewInvoiceLineItemClient(cfg),
		InvoiceSequence:           NewInvoiceSequenceClient(cfg),
		Meter:                     NewMeterClient(cfg),
		Payment:                   NewPaymentClient(cfg),
		PaymentAttempt:            NewPaymentAttemptClient(cfg),
		Plan:                      NewPlanClient(cfg),
		Price:                     NewPriceClient(cfg),
		Secret:                    NewSecretClient(cfg),
		Subscription:              NewSubscriptionClient(cfg),
		SubscriptionLineItem:      NewSubscriptionLineItemClient(cfg),
		SubscriptionPause:         NewSubscriptionPauseClient(cfg),
		SubscriptionSchedule:      NewSubscriptionScheduleClient(cfg),
		SubscriptionSchedulePhase: NewSubscriptionSchedulePhaseClient(cfg),
		Task:                      NewTaskClient(cfg),
		Tenant:                    NewTenantClient(cfg),
		User:                      NewUserClient(cfg),
		Wallet:                    NewWalletClient(cfg),
		WalletTransaction:         NewWalletTransactionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Auth.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Auth, c.BillingSequence, c.Costsheet, c.CreditGrant, c.CreditGrantApplication,
		c.Customer, c.Entitlement, c.Environment, c.Feature, c.Invoice,
		c.InvoiceLineItem, c.InvoiceSequence, c.Meter, c.Payment, c.PaymentAttempt,
		c.Plan, c.Price, c.Secret, c.Subscription, c.SubscriptionLineItem,
		c.SubscriptionPause, c.SubscriptionSchedule, c.SubscriptionSchedulePhase,
		c.Task, c.Tenant, c.User, c.Wallet, c.WalletTransaction,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Auth, c.BillingSequence, c.Costsheet, c.CreditGrant, c.CreditGrantApplication,
		c.Customer, c.Entitlement, c.Environment, c.Feature, c.Invoice,
		c.InvoiceLineItem, c.InvoiceSequence, c.Meter, c.Payment, c.PaymentAttempt,
		c.Plan, c.Price, c.Secret, c.Subscription, c.SubscriptionLineItem,
		c.SubscriptionPause, c.SubscriptionSchedule, c.SubscriptionSchedulePhase,
		c.Task, c.Tenant, c.User, c.Wallet, c.WalletTransaction,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthMutation:
		return c.Auth.mutate(ctx, m)
	case *BillingSequenceMutation:
		return c.BillingSequence.mutate(ctx, m)
	case *CostsheetMutation:
		return c.Costsheet.mutate(ctx, m)
	case *CreditGrantMutation:
		return c.CreditGrant.mutate(ctx, m)
	case *CreditGrantApplicationMutation:
		return c.CreditGrantApplication.mutate(ctx, m)
	case *CustomerMutation:
		return c.Customer.mutate(ctx, m)
	case *EntitlementMutation:
		return c.Entitlement.mutate(ctx, m)
	case *EnvironmentMutation:
		return c.Environment.mutate(ctx, m)
	case *FeatureMutation:
		return c.Feature.mutate(ctx, m)
	case *InvoiceMutation:
		return c.Invoice.mutate(ctx, m)
	case *InvoiceLineItemMutation:
		return c.InvoiceLineItem.mutate(ctx, m)
	case *InvoiceSequenceMutation:
		return c.InvoiceSequence.mutate(ctx, m)
	case *MeterMutation:
		return c.Meter.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PaymentAttemptMutation:
		return c.PaymentAttempt.mutate(ctx, m)
	case *PlanMutation:
		return c.Plan.mutate(ctx, m)
	case *PriceMutation:
		return c.Price.mutate(ctx, m)
	case *SecretMutation:
		return c.Secret.mutate(ctx, m)
	case *SubscriptionMutation:
		return c.Subscription.mutate(ctx, m)
	case *SubscriptionLineItemMutation:
		return c.SubscriptionLineItem.mutate(ctx, m)
	case *SubscriptionPauseMutation:
		return c.SubscriptionPause.mutate(ctx, m)
	case *SubscriptionScheduleMutation:
		return c.SubscriptionSchedule.mutate(ctx, m)
	case *SubscriptionSchedulePhaseMutation:
		return c.SubscriptionSchedulePhase.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WalletMutation:
		return c.Wallet.mutate(ctx, m)
	case *WalletTransactionMutation:
		return c.WalletTransaction.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuthClient is a client for the Auth schema.
type AuthClient struct {
	config
}

// NewAuthClient returns a client for the Auth from the given config.
func NewAuthClient(c config) *AuthClient {
	return &AuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auth.Hooks(f(g(h())))`.
func (c *AuthClient) Use(hooks ...Hook) {
	c.hooks.Auth = append(c.hooks.Auth, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auth.Intercept(f(g(h())))`.
func (c *AuthClient) Intercept(interceptors ...Interceptor) {
	c.inters.Auth = append(c.inters.Auth, interceptors...)
}

// Create returns a builder for creating a Auth entity.
func (c *AuthClient) Create() *AuthCreate {
	mutation := newAuthMutation(c.config, OpCreate)
	return &AuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Auth entities.
func (c *AuthClient) CreateBulk(builders ...*AuthCreate) *AuthCreateBulk {
	return &AuthCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthClient) MapCreateBulk(slice any, setFunc func(*AuthCreate, int)) *AuthCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthCreateBulk{err: fmt.Errorf("calling to AuthClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Auth.
func (c *AuthClient) Update() *AuthUpdate {
	mutation := newAuthMutation(c.config, OpUpdate)
	return &AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthClient) UpdateOne(a *Auth) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuth(a))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthClient) UpdateOneID(id int) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuthID(id))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Auth.
func (c *AuthClient) Delete() *AuthDelete {
	mutation := newAuthMutation(c.config, OpDelete)
	return &AuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthClient) DeleteOne(a *Auth) *AuthDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthClient) DeleteOneID(id int) *AuthDeleteOne {
	builder := c.Delete().Where(auth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthDeleteOne{builder}
}

// Query returns a query builder for Auth.
func (c *AuthClient) Query() *AuthQuery {
	return &AuthQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuth},
		inters: c.Interceptors(),
	}
}

// Get returns a Auth entity by its id.
func (c *AuthClient) Get(ctx context.Context, id int) (*Auth, error) {
	return c.Query().Where(auth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthClient) GetX(ctx context.Context, id int) *Auth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthClient) Hooks() []Hook {
	return c.hooks.Auth
}

// Interceptors returns the client interceptors.
func (c *AuthClient) Interceptors() []Interceptor {
	return c.inters.Auth
}

func (c *AuthClient) mutate(ctx context.Context, m *AuthMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Auth mutation op: %q", m.Op())
	}
}

// BillingSequenceClient is a client for the BillingSequence schema.
type BillingSequenceClient struct {
	config
}

// NewBillingSequenceClient returns a client for the BillingSequence from the given config.
func NewBillingSequenceClient(c config) *BillingSequenceClient {
	return &BillingSequenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingsequence.Hooks(f(g(h())))`.
func (c *BillingSequenceClient) Use(hooks ...Hook) {
	c.hooks.BillingSequence = append(c.hooks.BillingSequence, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingsequence.Intercept(f(g(h())))`.
func (c *BillingSequenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingSequence = append(c.inters.BillingSequence, interceptors...)
}

// Create returns a builder for creating a BillingSequence entity.
func (c *BillingSequenceClient) Create() *BillingSequenceCreate {
	mutation := newBillingSequenceMutation(c.config, OpCreate)
	return &BillingSequenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingSequence entities.
func (c *BillingSequenceClient) CreateBulk(builders ...*BillingSequenceCreate) *BillingSequenceCreateBulk {
	return &BillingSequenceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingSequenceClient) MapCreateBulk(slice any, setFunc func(*BillingSequenceCreate, int)) *BillingSequenceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingSequenceCreateBulk{err: fmt.Errorf("calling to BillingSequenceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingSequenceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingSequenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingSequence.
func (c *BillingSequenceClient) Update() *BillingSequenceUpdate {
	mutation := newBillingSequenceMutation(c.config, OpUpdate)
	return &BillingSequenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingSequenceClient) UpdateOne(bs *BillingSequence) *BillingSequenceUpdateOne {
	mutation := newBillingSequenceMutation(c.config, OpUpdateOne, withBillingSequence(bs))
	return &BillingSequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingSequenceClient) UpdateOneID(id int) *BillingSequenceUpdateOne {
	mutation := newBillingSequenceMutation(c.config, OpUpdateOne, withBillingSequenceID(id))
	return &BillingSequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingSequence.
func (c *BillingSequenceClient) Delete() *BillingSequenceDelete {
	mutation := newBillingSequenceMutation(c.config, OpDelete)
	return &BillingSequenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingSequenceClient) DeleteOne(bs *BillingSequence) *BillingSequenceDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingSequenceClient) DeleteOneID(id int) *BillingSequenceDeleteOne {
	builder := c.Delete().Where(billingsequence.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingSequenceDeleteOne{builder}
}

// Query returns a query builder for BillingSequence.
func (c *BillingSequenceClient) Query() *BillingSequenceQuery {
	return &BillingSequenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingSequence},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingSequence entity by its id.
func (c *BillingSequenceClient) Get(ctx context.Context, id int) (*BillingSequence, error) {
	return c.Query().Where(billingsequence.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingSequenceClient) GetX(ctx context.Context, id int) *BillingSequence {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BillingSequenceClient) Hooks() []Hook {
	return c.hooks.BillingSequence
}

// Interceptors returns the client interceptors.
func (c *BillingSequenceClient) Interceptors() []Interceptor {
	return c.inters.BillingSequence
}

func (c *BillingSequenceClient) mutate(ctx context.Context, m *BillingSequenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingSequenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingSequenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingSequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingSequenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BillingSequence mutation op: %q", m.Op())
	}
}

// CostsheetClient is a client for the Costsheet schema.
type CostsheetClient struct {
	config
}

// NewCostsheetClient returns a client for the Costsheet from the given config.
func NewCostsheetClient(c config) *CostsheetClient {
	return &CostsheetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `costsheet.Hooks(f(g(h())))`.
func (c *CostsheetClient) Use(hooks ...Hook) {
	c.hooks.Costsheet = append(c.hooks.Costsheet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `costsheet.Intercept(f(g(h())))`.
func (c *CostsheetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Costsheet = append(c.inters.Costsheet, interceptors...)
}

// Create returns a builder for creating a Costsheet entity.
func (c *CostsheetClient) Create() *CostsheetCreate {
	mutation := newCostsheetMutation(c.config, OpCreate)
	return &CostsheetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Costsheet entities.
func (c *CostsheetClient) CreateBulk(builders ...*CostsheetCreate) *CostsheetCreateBulk {
	return &CostsheetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CostsheetClient) MapCreateBulk(slice any, setFunc func(*CostsheetCreate, int)) *CostsheetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CostsheetCreateBulk{err: fmt.Errorf("calling to CostsheetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CostsheetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CostsheetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Costsheet.
func (c *CostsheetClient) Update() *CostsheetUpdate {
	mutation := newCostsheetMutation(c.config, OpUpdate)
	return &CostsheetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CostsheetClient) UpdateOne(co *Costsheet) *CostsheetUpdateOne {
	mutation := newCostsheetMutation(c.config, OpUpdateOne, withCostsheet(co))
	return &CostsheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CostsheetClient) UpdateOneID(id string) *CostsheetUpdateOne {
	mutation := newCostsheetMutation(c.config, OpUpdateOne, withCostsheetID(id))
	return &CostsheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Costsheet.
func (c *CostsheetClient) Delete() *CostsheetDelete {
	mutation := newCostsheetMutation(c.config, OpDelete)
	return &CostsheetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CostsheetClient) DeleteOne(co *Costsheet) *CostsheetDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CostsheetClient) DeleteOneID(id string) *CostsheetDeleteOne {
	builder := c.Delete().Where(costsheet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CostsheetDeleteOne{builder}
}

// Query returns a query builder for Costsheet.
func (c *CostsheetClient) Query() *CostsheetQuery {
	return &CostsheetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCostsheet},
		inters: c.Interceptors(),
	}
}

// Get returns a Costsheet entity by its id.
func (c *CostsheetClient) Get(ctx context.Context, id string) (*Costsheet, error) {
	return c.Query().Where(costsheet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CostsheetClient) GetX(ctx context.Context, id string) *Costsheet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMeter queries the meter edge of a Costsheet.
func (c *CostsheetClient) QueryMeter(co *Costsheet) *MeterQuery {
	query := (&MeterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(costsheet.Table, costsheet.FieldID, id),
			sqlgraph.To(meter.Table, meter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, costsheet.MeterTable, costsheet.MeterColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrice queries the price edge of a Costsheet.
func (c *CostsheetClient) QueryPrice(co *Costsheet) *PriceQuery {
	query := (&PriceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(costsheet.Table, costsheet.FieldID, id),
			sqlgraph.To(price.Table, price.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, costsheet.PriceTable, costsheet.PriceColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CostsheetClient) Hooks() []Hook {
	return c.hooks.Costsheet
}

// Interceptors returns the client interceptors.
func (c *CostsheetClient) Interceptors() []Interceptor {
	return c.inters.Costsheet
}

func (c *CostsheetClient) mutate(ctx context.Context, m *CostsheetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CostsheetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CostsheetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CostsheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CostsheetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Costsheet mutation op: %q", m.Op())
	}
}

// CreditGrantClient is a client for the CreditGrant schema.
type CreditGrantClient struct {
	config
}

// NewCreditGrantClient returns a client for the CreditGrant from the given config.
func NewCreditGrantClient(c config) *CreditGrantClient {
	return &CreditGrantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `creditgrant.Hooks(f(g(h())))`.
func (c *CreditGrantClient) Use(hooks ...Hook) {
	c.hooks.CreditGrant = append(c.hooks.CreditGrant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `creditgrant.Intercept(f(g(h())))`.
func (c *CreditGrantClient) Intercept(interceptors ...Interceptor) {
	c.inters.CreditGrant = append(c.inters.CreditGrant, interceptors...)
}

// Create returns a builder for creating a CreditGrant entity.
func (c *CreditGrantClient) Create() *CreditGrantCreate {
	mutation := newCreditGrantMutation(c.config, OpCreate)
	return &CreditGrantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CreditGrant entities.
func (c *CreditGrantClient) CreateBulk(builders ...*CreditGrantCreate) *CreditGrantCreateBulk {
	return &CreditGrantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CreditGrantClient) MapCreateBulk(slice any, setFunc func(*CreditGrantCreate, int)) *CreditGrantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CreditGrantCreateBulk{err: fmt.Errorf("calling to CreditGrantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CreditGrantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CreditGrantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CreditGrant.
func (c *CreditGrantClient) Update() *CreditGrantUpdate {
	mutation := newCreditGrantMutation(c.config, OpUpdate)
	return &CreditGrantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CreditGrantClient) UpdateOne(cg *CreditGrant) *CreditGrantUpdateOne {
	mutation := newCreditGrantMutation(c.config, OpUpdateOne, withCreditGrant(cg))
	return &CreditGrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CreditGrantClient) UpdateOneID(id string) *CreditGrantUpdateOne {
	mutation := newCreditGrantMutation(c.config, OpUpdateOne, withCreditGrantID(id))
	return &CreditGrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CreditGrant.
func (c *CreditGrantClient) Delete() *CreditGrantDelete {
	mutation := newCreditGrantMutation(c.config, OpDelete)
	return &CreditGrantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CreditGrantClient) DeleteOne(cg *CreditGrant) *CreditGrantDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CreditGrantClient) DeleteOneID(id string) *CreditGrantDeleteOne {
	builder := c.Delete().Where(creditgrant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CreditGrantDeleteOne{builder}
}

// Query returns a query builder for CreditGrant.
func (c *CreditGrantClient) Query() *CreditGrantQuery {
	return &CreditGrantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCreditGrant},
		inters: c.Interceptors(),
	}
}

// Get returns a CreditGrant entity by its id.
func (c *CreditGrantClient) Get(ctx context.Context, id string) (*CreditGrant, error) {
	return c.Query().Where(creditgrant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CreditGrantClient) GetX(ctx context.Context, id string) *CreditGrant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a CreditGrant.
func (c *CreditGrantClient) QueryPlan(cg *CreditGrant) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(creditgrant.Table, creditgrant.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, creditgrant.PlanTable, creditgrant.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(cg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscription queries the subscription edge of a CreditGrant.
func (c *CreditGrantClient) QuerySubscription(cg *CreditGrant) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(creditgrant.Table, creditgrant.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, creditgrant.SubscriptionTable, creditgrant.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(cg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CreditGrantClient) Hooks() []Hook {
	return c.hooks.CreditGrant
}

// Interceptors returns the client interceptors.
func (c *CreditGrantClient) Interceptors() []Interceptor {
	return c.inters.CreditGrant
}

func (c *CreditGrantClient) mutate(ctx context.Context, m *CreditGrantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CreditGrantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CreditGrantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CreditGrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CreditGrantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CreditGrant mutation op: %q", m.Op())
	}
}

// CreditGrantApplicationClient is a client for the CreditGrantApplication schema.
type CreditGrantApplicationClient struct {
	config
}

// NewCreditGrantApplicationClient returns a client for the CreditGrantApplication from the given config.
func NewCreditGrantApplicationClient(c config) *CreditGrantApplicationClient {
	return &CreditGrantApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `creditgrantapplication.Hooks(f(g(h())))`.
func (c *CreditGrantApplicationClient) Use(hooks ...Hook) {
	c.hooks.CreditGrantApplication = append(c.hooks.CreditGrantApplication, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `creditgrantapplication.Intercept(f(g(h())))`.
func (c *CreditGrantApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.CreditGrantApplication = append(c.inters.CreditGrantApplication, interceptors...)
}

// Create returns a builder for creating a CreditGrantApplication entity.
func (c *CreditGrantApplicationClient) Create() *CreditGrantApplicationCreate {
	mutation := newCreditGrantApplicationMutation(c.config, OpCreate)
	return &CreditGrantApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CreditGrantApplication entities.
func (c *CreditGrantApplicationClient) CreateBulk(builders ...*CreditGrantApplicationCreate) *CreditGrantApplicationCreateBulk {
	return &CreditGrantApplicationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CreditGrantApplicationClient) MapCreateBulk(slice any, setFunc func(*CreditGrantApplicationCreate, int)) *CreditGrantApplicationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CreditGrantApplicationCreateBulk{err: fmt.Errorf("calling to CreditGrantApplicationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CreditGrantApplicationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CreditGrantApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CreditGrantApplication.
func (c *CreditGrantApplicationClient) Update() *CreditGrantApplicationUpdate {
	mutation := newCreditGrantApplicationMutation(c.config, OpUpdate)
	return &CreditGrantApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CreditGrantApplicationClient) UpdateOne(cga *CreditGrantApplication) *CreditGrantApplicationUpdateOne {
	mutation := newCreditGrantApplicationMutation(c.config, OpUpdateOne, withCreditGrantApplication(cga))
	return &CreditGrantApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CreditGrantApplicationClient) UpdateOneID(id string) *CreditGrantApplicationUpdateOne {
	mutation := newCreditGrantApplicationMutation(c.config, OpUpdateOne, withCreditGrantApplicationID(id))
	return &CreditGrantApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CreditGrantApplication.
func (c *CreditGrantApplicationClient) Delete() *CreditGrantApplicationDelete {
	mutation := newCreditGrantApplicationMutation(c.config, OpDelete)
	return &CreditGrantApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CreditGrantApplicationClient) DeleteOne(cga *CreditGrantApplication) *CreditGrantApplicationDeleteOne {
	return c.DeleteOneID(cga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CreditGrantApplicationClient) DeleteOneID(id string) *CreditGrantApplicationDeleteOne {
	builder := c.Delete().Where(creditgrantapplication.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CreditGrantApplicationDeleteOne{builder}
}

// Query returns a query builder for CreditGrantApplication.
func (c *CreditGrantApplicationClient) Query() *CreditGrantApplicationQuery {
	return &CreditGrantApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCreditGrantApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a CreditGrantApplication entity by its id.
func (c *CreditGrantApplicationClient) Get(ctx context.Context, id string) (*CreditGrantApplication, error) {
	return c.Query().Where(creditgrantapplication.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CreditGrantApplicationClient) GetX(ctx context.Context, id string) *CreditGrantApplication {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CreditGrantApplicationClient) Hooks() []Hook {
	return c.hooks.CreditGrantApplication
}

// Interceptors returns the client interceptors.
func (c *CreditGrantApplicationClient) Interceptors() []Interceptor {
	return c.inters.CreditGrantApplication
}

func (c *CreditGrantApplicationClient) mutate(ctx context.Context, m *CreditGrantApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CreditGrantApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CreditGrantApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CreditGrantApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CreditGrantApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CreditGrantApplication mutation op: %q", m.Op())
	}
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customer.Intercept(f(g(h())))`.
func (c *CustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Customer = append(c.inters.Customer, interceptors...)
}

// Create returns a builder for creating a Customer entity.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerClient) MapCreateBulk(slice any, setFunc func(*CustomerCreate, int)) *CustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerCreateBulk{err: fmt.Errorf("calling to CustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id string) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerClient) DeleteOneID(id string) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id string) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id string) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// Interceptors returns the client interceptors.
func (c *CustomerClient) Interceptors() []Interceptor {
	return c.inters.Customer
}

func (c *CustomerClient) mutate(ctx context.Context, m *CustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Customer mutation op: %q", m.Op())
	}
}

// EntitlementClient is a client for the Entitlement schema.
type EntitlementClient struct {
	config
}

// NewEntitlementClient returns a client for the Entitlement from the given config.
func NewEntitlementClient(c config) *EntitlementClient {
	return &EntitlementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitlement.Hooks(f(g(h())))`.
func (c *EntitlementClient) Use(hooks ...Hook) {
	c.hooks.Entitlement = append(c.hooks.Entitlement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitlement.Intercept(f(g(h())))`.
func (c *EntitlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Entitlement = append(c.inters.Entitlement, interceptors...)
}

// Create returns a builder for creating a Entitlement entity.
func (c *EntitlementClient) Create() *EntitlementCreate {
	mutation := newEntitlementMutation(c.config, OpCreate)
	return &EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Entitlement entities.
func (c *EntitlementClient) CreateBulk(builders ...*EntitlementCreate) *EntitlementCreateBulk {
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntitlementClient) MapCreateBulk(slice any, setFunc func(*EntitlementCreate, int)) *EntitlementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntitlementCreateBulk{err: fmt.Errorf("calling to EntitlementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntitlementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Entitlement.
func (c *EntitlementClient) Update() *EntitlementUpdate {
	mutation := newEntitlementMutation(c.config, OpUpdate)
	return &EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitlementClient) UpdateOne(e *Entitlement) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlement(e))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitlementClient) UpdateOneID(id string) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlementID(id))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Entitlement.
func (c *EntitlementClient) Delete() *EntitlementDelete {
	mutation := newEntitlementMutation(c.config, OpDelete)
	return &EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitlementClient) DeleteOne(e *Entitlement) *EntitlementDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitlementClient) DeleteOneID(id string) *EntitlementDeleteOne {
	builder := c.Delete().Where(entitlement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitlementDeleteOne{builder}
}

// Query returns a query builder for Entitlement.
func (c *EntitlementClient) Query() *EntitlementQuery {
	return &EntitlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntitlement},
		inters: c.Interceptors(),
	}
}

// Get returns a Entitlement entity by its id.
func (c *EntitlementClient) Get(ctx context.Context, id string) (*Entitlement, error) {
	return c.Query().Where(entitlement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitlementClient) GetX(ctx context.Context, id string) *Entitlement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a Entitlement.
func (c *EntitlementClient) QueryPlan(e *Entitlement) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entitlement.PlanTable, entitlement.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntitlementClient) Hooks() []Hook {
	return c.hooks.Entitlement
}

// Interceptors returns the client interceptors.
func (c *EntitlementClient) Interceptors() []Interceptor {
	return c.inters.Entitlement
}

func (c *EntitlementClient) mutate(ctx context.Context, m *EntitlementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Entitlement mutation op: %q", m.Op())
	}
}

// EnvironmentClient is a client for the Environment schema.
type EnvironmentClient struct {
	config
}

// NewEnvironmentClient returns a client for the Environment from the given config.
func NewEnvironmentClient(c config) *EnvironmentClient {
	return &EnvironmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `environment.Hooks(f(g(h())))`.
func (c *EnvironmentClient) Use(hooks ...Hook) {
	c.hooks.Environment = append(c.hooks.Environment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `environment.Intercept(f(g(h())))`.
func (c *EnvironmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Environment = append(c.inters.Environment, interceptors...)
}

// Create returns a builder for creating a Environment entity.
func (c *EnvironmentClient) Create() *EnvironmentCreate {
	mutation := newEnvironmentMutation(c.config, OpCreate)
	return &EnvironmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Environment entities.
func (c *EnvironmentClient) CreateBulk(builders ...*EnvironmentCreate) *EnvironmentCreateBulk {
	return &EnvironmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnvironmentClient) MapCreateBulk(slice any, setFunc func(*EnvironmentCreate, int)) *EnvironmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnvironmentCreateBulk{err: fmt.Errorf("calling to EnvironmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnvironmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnvironmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Environment.
func (c *EnvironmentClient) Update() *EnvironmentUpdate {
	mutation := newEnvironmentMutation(c.config, OpUpdate)
	return &EnvironmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnvironmentClient) UpdateOne(e *Environment) *EnvironmentUpdateOne {
	mutation := newEnvironmentMutation(c.config, OpUpdateOne, withEnvironment(e))
	return &EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnvironmentClient) UpdateOneID(id string) *EnvironmentUpdateOne {
	mutation := newEnvironmentMutation(c.config, OpUpdateOne, withEnvironmentID(id))
	return &EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Environment.
func (c *EnvironmentClient) Delete() *EnvironmentDelete {
	mutation := newEnvironmentMutation(c.config, OpDelete)
	return &EnvironmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnvironmentClient) DeleteOne(e *Environment) *EnvironmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnvironmentClient) DeleteOneID(id string) *EnvironmentDeleteOne {
	builder := c.Delete().Where(environment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnvironmentDeleteOne{builder}
}

// Query returns a query builder for Environment.
func (c *EnvironmentClient) Query() *EnvironmentQuery {
	return &EnvironmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnvironment},
		inters: c.Interceptors(),
	}
}

// Get returns a Environment entity by its id.
func (c *EnvironmentClient) Get(ctx context.Context, id string) (*Environment, error) {
	return c.Query().Where(environment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnvironmentClient) GetX(ctx context.Context, id string) *Environment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EnvironmentClient) Hooks() []Hook {
	return c.hooks.Environment
}

// Interceptors returns the client interceptors.
func (c *EnvironmentClient) Interceptors() []Interceptor {
	return c.inters.Environment
}

func (c *EnvironmentClient) mutate(ctx context.Context, m *EnvironmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnvironmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnvironmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnvironmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Environment mutation op: %q", m.Op())
	}
}

// FeatureClient is a client for the Feature schema.
type FeatureClient struct {
	config
}

// NewFeatureClient returns a client for the Feature from the given config.
func NewFeatureClient(c config) *FeatureClient {
	return &FeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feature.Hooks(f(g(h())))`.
func (c *FeatureClient) Use(hooks ...Hook) {
	c.hooks.Feature = append(c.hooks.Feature, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feature.Intercept(f(g(h())))`.
func (c *FeatureClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feature = append(c.inters.Feature, interceptors...)
}

// Create returns a builder for creating a Feature entity.
func (c *FeatureClient) Create() *FeatureCreate {
	mutation := newFeatureMutation(c.config, OpCreate)
	return &FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feature entities.
func (c *FeatureClient) CreateBulk(builders ...*FeatureCreate) *FeatureCreateBulk {
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureClient) MapCreateBulk(slice any, setFunc func(*FeatureCreate, int)) *FeatureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureCreateBulk{err: fmt.Errorf("calling to FeatureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feature.
func (c *FeatureClient) Update() *FeatureUpdate {
	mutation := newFeatureMutation(c.config, OpUpdate)
	return &FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureClient) UpdateOne(f *Feature) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeature(f))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureClient) UpdateOneID(id string) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeatureID(id))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feature.
func (c *FeatureClient) Delete() *FeatureDelete {
	mutation := newFeatureMutation(c.config, OpDelete)
	return &FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureClient) DeleteOne(f *Feature) *FeatureDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureClient) DeleteOneID(id string) *FeatureDeleteOne {
	builder := c.Delete().Where(feature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureDeleteOne{builder}
}

// Query returns a query builder for Feature.
func (c *FeatureClient) Query() *FeatureQuery {
	return &FeatureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeature},
		inters: c.Interceptors(),
	}
}

// Get returns a Feature entity by its id.
func (c *FeatureClient) Get(ctx context.Context, id string) (*Feature, error) {
	return c.Query().Where(feature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureClient) GetX(ctx context.Context, id string) *Feature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeatureClient) Hooks() []Hook {
	return c.hooks.Feature
}

// Interceptors returns the client interceptors.
func (c *FeatureClient) Interceptors() []Interceptor {
	return c.inters.Feature
}

func (c *FeatureClient) mutate(ctx context.Context, m *FeatureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feature mutation op: %q", m.Op())
	}
}

// InvoiceClient is a client for the Invoice schema.
type InvoiceClient struct {
	config
}

// NewInvoiceClient returns a client for the Invoice from the given config.
func NewInvoiceClient(c config) *InvoiceClient {
	return &InvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoice.Hooks(f(g(h())))`.
func (c *InvoiceClient) Use(hooks ...Hook) {
	c.hooks.Invoice = append(c.hooks.Invoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoice.Intercept(f(g(h())))`.
func (c *InvoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Invoice = append(c.inters.Invoice, interceptors...)
}

// Create returns a builder for creating a Invoice entity.
func (c *InvoiceClient) Create() *InvoiceCreate {
	mutation := newInvoiceMutation(c.config, OpCreate)
	return &InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invoice entities.
func (c *InvoiceClient) CreateBulk(builders ...*InvoiceCreate) *InvoiceCreateBulk {
	return &InvoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InvoiceClient) MapCreateBulk(slice any, setFunc func(*InvoiceCreate, int)) *InvoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InvoiceCreateBulk{err: fmt.Errorf("calling to InvoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InvoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InvoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invoice.
func (c *InvoiceClient) Update() *InvoiceUpdate {
	mutation := newInvoiceMutation(c.config, OpUpdate)
	return &InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceClient) UpdateOne(i *Invoice) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoice(i))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceClient) UpdateOneID(id string) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoiceID(id))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invoice.
func (c *InvoiceClient) Delete() *InvoiceDelete {
	mutation := newInvoiceMutation(c.config, OpDelete)
	return &InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceClient) DeleteOne(i *Invoice) *InvoiceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceClient) DeleteOneID(id string) *InvoiceDeleteOne {
	builder := c.Delete().Where(invoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceDeleteOne{builder}
}

// Query returns a query builder for Invoice.
func (c *InvoiceClient) Query() *InvoiceQuery {
	return &InvoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoice},
		inters: c.Interceptors(),
	}
}

// Get returns a Invoice entity by its id.
func (c *InvoiceClient) Get(ctx context.Context, id string) (*Invoice, error) {
	return c.Query().Where(invoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceClient) GetX(ctx context.Context, id string) *Invoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLineItems queries the line_items edge of a Invoice.
func (c *InvoiceClient) QueryLineItems(i *Invoice) *InvoiceLineItemQuery {
	query := (&InvoiceLineItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(invoicelineitem.Table, invoicelineitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, invoice.LineItemsTable, invoice.LineItemsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceClient) Hooks() []Hook {
	return c.hooks.Invoice
}

// Interceptors returns the client interceptors.
func (c *InvoiceClient) Interceptors() []Interceptor {
	return c.inters.Invoice
}

func (c *InvoiceClient) mutate(ctx context.Context, m *InvoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Invoice mutation op: %q", m.Op())
	}
}

// InvoiceLineItemClient is a client for the InvoiceLineItem schema.
type InvoiceLineItemClient struct {
	config
}

// NewInvoiceLineItemClient returns a client for the InvoiceLineItem from the given config.
func NewInvoiceLineItemClient(c config) *InvoiceLineItemClient {
	return &InvoiceLineItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoicelineitem.Hooks(f(g(h())))`.
func (c *InvoiceLineItemClient) Use(hooks ...Hook) {
	c.hooks.InvoiceLineItem = append(c.hooks.InvoiceLineItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoicelineitem.Intercept(f(g(h())))`.
func (c *InvoiceLineItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.InvoiceLineItem = append(c.inters.InvoiceLineItem, interceptors...)
}

// Create returns a builder for creating a InvoiceLineItem entity.
func (c *InvoiceLineItemClient) Create() *InvoiceLineItemCreate {
	mutation := newInvoiceLineItemMutation(c.config, OpCreate)
	return &InvoiceLineItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvoiceLineItem entities.
func (c *InvoiceLineItemClient) CreateBulk(builders ...*InvoiceLineItemCreate) *InvoiceLineItemCreateBulk {
	return &InvoiceLineItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InvoiceLineItemClient) MapCreateBulk(slice any, setFunc func(*InvoiceLineItemCreate, int)) *InvoiceLineItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InvoiceLineItemCreateBulk{err: fmt.Errorf("calling to InvoiceLineItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InvoiceLineItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InvoiceLineItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvoiceLineItem.
func (c *InvoiceLineItemClient) Update() *InvoiceLineItemUpdate {
	mutation := newInvoiceLineItemMutation(c.config, OpUpdate)
	return &InvoiceLineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceLineItemClient) UpdateOne(ili *InvoiceLineItem) *InvoiceLineItemUpdateOne {
	mutation := newInvoiceLineItemMutation(c.config, OpUpdateOne, withInvoiceLineItem(ili))
	return &InvoiceLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceLineItemClient) UpdateOneID(id string) *InvoiceLineItemUpdateOne {
	mutation := newInvoiceLineItemMutation(c.config, OpUpdateOne, withInvoiceLineItemID(id))
	return &InvoiceLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvoiceLineItem.
func (c *InvoiceLineItemClient) Delete() *InvoiceLineItemDelete {
	mutation := newInvoiceLineItemMutation(c.config, OpDelete)
	return &InvoiceLineItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceLineItemClient) DeleteOne(ili *InvoiceLineItem) *InvoiceLineItemDeleteOne {
	return c.DeleteOneID(ili.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceLineItemClient) DeleteOneID(id string) *InvoiceLineItemDeleteOne {
	builder := c.Delete().Where(invoicelineitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceLineItemDeleteOne{builder}
}

// Query returns a query builder for InvoiceLineItem.
func (c *InvoiceLineItemClient) Query() *InvoiceLineItemQuery {
	return &InvoiceLineItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoiceLineItem},
		inters: c.Interceptors(),
	}
}

// Get returns a InvoiceLineItem entity by its id.
func (c *InvoiceLineItemClient) Get(ctx context.Context, id string) (*InvoiceLineItem, error) {
	return c.Query().Where(invoicelineitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceLineItemClient) GetX(ctx context.Context, id string) *InvoiceLineItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvoice queries the invoice edge of a InvoiceLineItem.
func (c *InvoiceLineItemClient) QueryInvoice(ili *InvoiceLineItem) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ili.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicelineitem.Table, invoicelineitem.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invoicelineitem.InvoiceTable, invoicelineitem.InvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(ili.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceLineItemClient) Hooks() []Hook {
	return c.hooks.InvoiceLineItem
}

// Interceptors returns the client interceptors.
func (c *InvoiceLineItemClient) Interceptors() []Interceptor {
	return c.inters.InvoiceLineItem
}

func (c *InvoiceLineItemClient) mutate(ctx context.Context, m *InvoiceLineItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceLineItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceLineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceLineItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InvoiceLineItem mutation op: %q", m.Op())
	}
}

// InvoiceSequenceClient is a client for the InvoiceSequence schema.
type InvoiceSequenceClient struct {
	config
}

// NewInvoiceSequenceClient returns a client for the InvoiceSequence from the given config.
func NewInvoiceSequenceClient(c config) *InvoiceSequenceClient {
	return &InvoiceSequenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoicesequence.Hooks(f(g(h())))`.
func (c *InvoiceSequenceClient) Use(hooks ...Hook) {
	c.hooks.InvoiceSequence = append(c.hooks.InvoiceSequence, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoicesequence.Intercept(f(g(h())))`.
func (c *InvoiceSequenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.InvoiceSequence = append(c.inters.InvoiceSequence, interceptors...)
}

// Create returns a builder for creating a InvoiceSequence entity.
func (c *InvoiceSequenceClient) Create() *InvoiceSequenceCreate {
	mutation := newInvoiceSequenceMutation(c.config, OpCreate)
	return &InvoiceSequenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvoiceSequence entities.
func (c *InvoiceSequenceClient) CreateBulk(builders ...*InvoiceSequenceCreate) *InvoiceSequenceCreateBulk {
	return &InvoiceSequenceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InvoiceSequenceClient) MapCreateBulk(slice any, setFunc func(*InvoiceSequenceCreate, int)) *InvoiceSequenceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InvoiceSequenceCreateBulk{err: fmt.Errorf("calling to InvoiceSequenceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InvoiceSequenceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InvoiceSequenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvoiceSequence.
func (c *InvoiceSequenceClient) Update() *InvoiceSequenceUpdate {
	mutation := newInvoiceSequenceMutation(c.config, OpUpdate)
	return &InvoiceSequenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceSequenceClient) UpdateOne(is *InvoiceSequence) *InvoiceSequenceUpdateOne {
	mutation := newInvoiceSequenceMutation(c.config, OpUpdateOne, withInvoiceSequence(is))
	return &InvoiceSequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceSequenceClient) UpdateOneID(id int) *InvoiceSequenceUpdateOne {
	mutation := newInvoiceSequenceMutation(c.config, OpUpdateOne, withInvoiceSequenceID(id))
	return &InvoiceSequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvoiceSequence.
func (c *InvoiceSequenceClient) Delete() *InvoiceSequenceDelete {
	mutation := newInvoiceSequenceMutation(c.config, OpDelete)
	return &InvoiceSequenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceSequenceClient) DeleteOne(is *InvoiceSequence) *InvoiceSequenceDeleteOne {
	return c.DeleteOneID(is.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceSequenceClient) DeleteOneID(id int) *InvoiceSequenceDeleteOne {
	builder := c.Delete().Where(invoicesequence.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceSequenceDeleteOne{builder}
}

// Query returns a query builder for InvoiceSequence.
func (c *InvoiceSequenceClient) Query() *InvoiceSequenceQuery {
	return &InvoiceSequenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoiceSequence},
		inters: c.Interceptors(),
	}
}

// Get returns a InvoiceSequence entity by its id.
func (c *InvoiceSequenceClient) Get(ctx context.Context, id int) (*InvoiceSequence, error) {
	return c.Query().Where(invoicesequence.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceSequenceClient) GetX(ctx context.Context, id int) *InvoiceSequence {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InvoiceSequenceClient) Hooks() []Hook {
	return c.hooks.InvoiceSequence
}

// Interceptors returns the client interceptors.
func (c *InvoiceSequenceClient) Interceptors() []Interceptor {
	return c.inters.InvoiceSequence
}

func (c *InvoiceSequenceClient) mutate(ctx context.Context, m *InvoiceSequenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceSequenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceSequenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceSequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceSequenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InvoiceSequence mutation op: %q", m.Op())
	}
}

// MeterClient is a client for the Meter schema.
type MeterClient struct {
	config
}

// NewMeterClient returns a client for the Meter from the given config.
func NewMeterClient(c config) *MeterClient {
	return &MeterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `meter.Hooks(f(g(h())))`.
func (c *MeterClient) Use(hooks ...Hook) {
	c.hooks.Meter = append(c.hooks.Meter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `meter.Intercept(f(g(h())))`.
func (c *MeterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Meter = append(c.inters.Meter, interceptors...)
}

// Create returns a builder for creating a Meter entity.
func (c *MeterClient) Create() *MeterCreate {
	mutation := newMeterMutation(c.config, OpCreate)
	return &MeterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Meter entities.
func (c *MeterClient) CreateBulk(builders ...*MeterCreate) *MeterCreateBulk {
	return &MeterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MeterClient) MapCreateBulk(slice any, setFunc func(*MeterCreate, int)) *MeterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MeterCreateBulk{err: fmt.Errorf("calling to MeterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MeterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MeterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Meter.
func (c *MeterClient) Update() *MeterUpdate {
	mutation := newMeterMutation(c.config, OpUpdate)
	return &MeterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MeterClient) UpdateOne(m *Meter) *MeterUpdateOne {
	mutation := newMeterMutation(c.config, OpUpdateOne, withMeter(m))
	return &MeterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MeterClient) UpdateOneID(id string) *MeterUpdateOne {
	mutation := newMeterMutation(c.config, OpUpdateOne, withMeterID(id))
	return &MeterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Meter.
func (c *MeterClient) Delete() *MeterDelete {
	mutation := newMeterMutation(c.config, OpDelete)
	return &MeterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MeterClient) DeleteOne(m *Meter) *MeterDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MeterClient) DeleteOneID(id string) *MeterDeleteOne {
	builder := c.Delete().Where(meter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MeterDeleteOne{builder}
}

// Query returns a query builder for Meter.
func (c *MeterClient) Query() *MeterQuery {
	return &MeterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMeter},
		inters: c.Interceptors(),
	}
}

// Get returns a Meter entity by its id.
func (c *MeterClient) Get(ctx context.Context, id string) (*Meter, error) {
	return c.Query().Where(meter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MeterClient) GetX(ctx context.Context, id string) *Meter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCostsheet queries the costsheet edge of a Meter.
func (c *MeterClient) QueryCostsheet(m *Meter) *CostsheetQuery {
	query := (&CostsheetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(meter.Table, meter.FieldID, id),
			sqlgraph.To(costsheet.Table, costsheet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, meter.CostsheetTable, meter.CostsheetColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MeterClient) Hooks() []Hook {
	return c.hooks.Meter
}

// Interceptors returns the client interceptors.
func (c *MeterClient) Interceptors() []Interceptor {
	return c.inters.Meter
}

func (c *MeterClient) mutate(ctx context.Context, m *MeterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MeterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MeterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MeterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MeterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Meter mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id string) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id string) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id string) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id string) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttempts queries the attempts edge of a Payment.
func (c *PaymentClient) QueryAttempts(pa *Payment) *PaymentAttemptQuery {
	query := (&PaymentAttemptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymentattempt.Table, paymentattempt.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.AttemptsTable, payment.AttemptsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payment mutation op: %q", m.Op())
	}
}

// PaymentAttemptClient is a client for the PaymentAttempt schema.
type PaymentAttemptClient struct {
	config
}

// NewPaymentAttemptClient returns a client for the PaymentAttempt from the given config.
func NewPaymentAttemptClient(c config) *PaymentAttemptClient {
	return &PaymentAttemptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentattempt.Hooks(f(g(h())))`.
func (c *PaymentAttemptClient) Use(hooks ...Hook) {
	c.hooks.PaymentAttempt = append(c.hooks.PaymentAttempt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentattempt.Intercept(f(g(h())))`.
func (c *PaymentAttemptClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentAttempt = append(c.inters.PaymentAttempt, interceptors...)
}

// Create returns a builder for creating a PaymentAttempt entity.
func (c *PaymentAttemptClient) Create() *PaymentAttemptCreate {
	mutation := newPaymentAttemptMutation(c.config, OpCreate)
	return &PaymentAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentAttempt entities.
func (c *PaymentAttemptClient) CreateBulk(builders ...*PaymentAttemptCreate) *PaymentAttemptCreateBulk {
	return &PaymentAttemptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentAttemptClient) MapCreateBulk(slice any, setFunc func(*PaymentAttemptCreate, int)) *PaymentAttemptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentAttemptCreateBulk{err: fmt.Errorf("calling to PaymentAttemptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentAttemptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentAttemptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentAttempt.
func (c *PaymentAttemptClient) Update() *PaymentAttemptUpdate {
	mutation := newPaymentAttemptMutation(c.config, OpUpdate)
	return &PaymentAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentAttemptClient) UpdateOne(pa *PaymentAttempt) *PaymentAttemptUpdateOne {
	mutation := newPaymentAttemptMutation(c.config, OpUpdateOne, withPaymentAttempt(pa))
	return &PaymentAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentAttemptClient) UpdateOneID(id string) *PaymentAttemptUpdateOne {
	mutation := newPaymentAttemptMutation(c.config, OpUpdateOne, withPaymentAttemptID(id))
	return &PaymentAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentAttempt.
func (c *PaymentAttemptClient) Delete() *PaymentAttemptDelete {
	mutation := newPaymentAttemptMutation(c.config, OpDelete)
	return &PaymentAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentAttemptClient) DeleteOne(pa *PaymentAttempt) *PaymentAttemptDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentAttemptClient) DeleteOneID(id string) *PaymentAttemptDeleteOne {
	builder := c.Delete().Where(paymentattempt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentAttemptDeleteOne{builder}
}

// Query returns a query builder for PaymentAttempt.
func (c *PaymentAttemptClient) Query() *PaymentAttemptQuery {
	return &PaymentAttemptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentAttempt},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentAttempt entity by its id.
func (c *PaymentAttemptClient) Get(ctx context.Context, id string) (*PaymentAttempt, error) {
	return c.Query().Where(paymentattempt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentAttemptClient) GetX(ctx context.Context, id string) *PaymentAttempt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a PaymentAttempt.
func (c *PaymentAttemptClient) QueryPayment(pa *PaymentAttempt) *PaymentQuery {
	query := (&PaymentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentattempt.Table, paymentattempt.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentattempt.PaymentTable, paymentattempt.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentAttemptClient) Hooks() []Hook {
	return c.hooks.PaymentAttempt
}

// Interceptors returns the client interceptors.
func (c *PaymentAttemptClient) Interceptors() []Interceptor {
	return c.inters.PaymentAttempt
}

func (c *PaymentAttemptClient) mutate(ctx context.Context, m *PaymentAttemptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentAttempt mutation op: %q", m.Op())
	}
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plan.Intercept(f(g(h())))`.
func (c *PlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.Plan = append(c.inters.Plan, interceptors...)
}

// Create returns a builder for creating a Plan entity.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanClient) MapCreateBulk(slice any, setFunc func(*PlanCreate, int)) *PlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanCreateBulk{err: fmt.Errorf("calling to PlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id string) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanClient) DeleteOneID(id string) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlan},
		inters: c.Interceptors(),
	}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id string) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id string) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlements queries the entitlements edge of a Plan.
func (c *PlanClient) QueryEntitlements(pl *Plan) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.EntitlementsTable, plan.EntitlementsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreditGrants queries the credit_grants edge of a Plan.
func (c *PlanClient) QueryCreditGrants(pl *Plan) *CreditGrantQuery {
	query := (&CreditGrantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(creditgrant.Table, creditgrant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.CreditGrantsTable, plan.CreditGrantsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	return c.hooks.Plan
}

// Interceptors returns the client interceptors.
func (c *PlanClient) Interceptors() []Interceptor {
	return c.inters.Plan
}

func (c *PlanClient) mutate(ctx context.Context, m *PlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Plan mutation op: %q", m.Op())
	}
}

// PriceClient is a client for the Price schema.
type PriceClient struct {
	config
}

// NewPriceClient returns a client for the Price from the given config.
func NewPriceClient(c config) *PriceClient {
	return &PriceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `price.Hooks(f(g(h())))`.
func (c *PriceClient) Use(hooks ...Hook) {
	c.hooks.Price = append(c.hooks.Price, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `price.Intercept(f(g(h())))`.
func (c *PriceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Price = append(c.inters.Price, interceptors...)
}

// Create returns a builder for creating a Price entity.
func (c *PriceClient) Create() *PriceCreate {
	mutation := newPriceMutation(c.config, OpCreate)
	return &PriceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Price entities.
func (c *PriceClient) CreateBulk(builders ...*PriceCreate) *PriceCreateBulk {
	return &PriceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PriceClient) MapCreateBulk(slice any, setFunc func(*PriceCreate, int)) *PriceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PriceCreateBulk{err: fmt.Errorf("calling to PriceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PriceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PriceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Price.
func (c *PriceClient) Update() *PriceUpdate {
	mutation := newPriceMutation(c.config, OpUpdate)
	return &PriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PriceClient) UpdateOne(pr *Price) *PriceUpdateOne {
	mutation := newPriceMutation(c.config, OpUpdateOne, withPrice(pr))
	return &PriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PriceClient) UpdateOneID(id string) *PriceUpdateOne {
	mutation := newPriceMutation(c.config, OpUpdateOne, withPriceID(id))
	return &PriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Price.
func (c *PriceClient) Delete() *PriceDelete {
	mutation := newPriceMutation(c.config, OpDelete)
	return &PriceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PriceClient) DeleteOne(pr *Price) *PriceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PriceClient) DeleteOneID(id string) *PriceDeleteOne {
	builder := c.Delete().Where(price.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PriceDeleteOne{builder}
}

// Query returns a query builder for Price.
func (c *PriceClient) Query() *PriceQuery {
	return &PriceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrice},
		inters: c.Interceptors(),
	}
}

// Get returns a Price entity by its id.
func (c *PriceClient) Get(ctx context.Context, id string) (*Price, error) {
	return c.Query().Where(price.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PriceClient) GetX(ctx context.Context, id string) *Price {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCostsheet queries the costsheet edge of a Price.
func (c *PriceClient) QueryCostsheet(pr *Price) *CostsheetQuery {
	query := (&CostsheetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(price.Table, price.FieldID, id),
			sqlgraph.To(costsheet.Table, costsheet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, price.CostsheetTable, price.CostsheetColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PriceClient) Hooks() []Hook {
	return c.hooks.Price
}

// Interceptors returns the client interceptors.
func (c *PriceClient) Interceptors() []Interceptor {
	return c.inters.Price
}

func (c *PriceClient) mutate(ctx context.Context, m *PriceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PriceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PriceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PriceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Price mutation op: %q", m.Op())
	}
}

// SecretClient is a client for the Secret schema.
type SecretClient struct {
	config
}

// NewSecretClient returns a client for the Secret from the given config.
func NewSecretClient(c config) *SecretClient {
	return &SecretClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `secret.Hooks(f(g(h())))`.
func (c *SecretClient) Use(hooks ...Hook) {
	c.hooks.Secret = append(c.hooks.Secret, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `secret.Intercept(f(g(h())))`.
func (c *SecretClient) Intercept(interceptors ...Interceptor) {
	c.inters.Secret = append(c.inters.Secret, interceptors...)
}

// Create returns a builder for creating a Secret entity.
func (c *SecretClient) Create() *SecretCreate {
	mutation := newSecretMutation(c.config, OpCreate)
	return &SecretCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Secret entities.
func (c *SecretClient) CreateBulk(builders ...*SecretCreate) *SecretCreateBulk {
	return &SecretCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SecretClient) MapCreateBulk(slice any, setFunc func(*SecretCreate, int)) *SecretCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SecretCreateBulk{err: fmt.Errorf("calling to SecretClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SecretCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SecretCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Secret.
func (c *SecretClient) Update() *SecretUpdate {
	mutation := newSecretMutation(c.config, OpUpdate)
	return &SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecretClient) UpdateOne(s *Secret) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecret(s))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecretClient) UpdateOneID(id string) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecretID(id))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Secret.
func (c *SecretClient) Delete() *SecretDelete {
	mutation := newSecretMutation(c.config, OpDelete)
	return &SecretDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecretClient) DeleteOne(s *Secret) *SecretDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SecretClient) DeleteOneID(id string) *SecretDeleteOne {
	builder := c.Delete().Where(secret.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecretDeleteOne{builder}
}

// Query returns a query builder for Secret.
func (c *SecretClient) Query() *SecretQuery {
	return &SecretQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSecret},
		inters: c.Interceptors(),
	}
}

// Get returns a Secret entity by its id.
func (c *SecretClient) Get(ctx context.Context, id string) (*Secret, error) {
	return c.Query().Where(secret.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecretClient) GetX(ctx context.Context, id string) *Secret {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SecretClient) Hooks() []Hook {
	return c.hooks.Secret
}

// Interceptors returns the client interceptors.
func (c *SecretClient) Interceptors() []Interceptor {
	return c.inters.Secret
}

func (c *SecretClient) mutate(ctx context.Context, m *SecretMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SecretCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SecretDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Secret mutation op: %q", m.Op())
	}
}

// SubscriptionClient is a client for the Subscription schema.
type SubscriptionClient struct {
	config
}

// NewSubscriptionClient returns a client for the Subscription from the given config.
func NewSubscriptionClient(c config) *SubscriptionClient {
	return &SubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscription.Hooks(f(g(h())))`.
func (c *SubscriptionClient) Use(hooks ...Hook) {
	c.hooks.Subscription = append(c.hooks.Subscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscription.Intercept(f(g(h())))`.
func (c *SubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subscription = append(c.inters.Subscription, interceptors...)
}

// Create returns a builder for creating a Subscription entity.
func (c *SubscriptionClient) Create() *SubscriptionCreate {
	mutation := newSubscriptionMutation(c.config, OpCreate)
	return &SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subscription entities.
func (c *SubscriptionClient) CreateBulk(builders ...*SubscriptionCreate) *SubscriptionCreateBulk {
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionClient) MapCreateBulk(slice any, setFunc func(*SubscriptionCreate, int)) *SubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionCreateBulk{err: fmt.Errorf("calling to SubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subscription.
func (c *SubscriptionClient) Update() *SubscriptionUpdate {
	mutation := newSubscriptionMutation(c.config, OpUpdate)
	return &SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionClient) UpdateOne(s *Subscription) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscription(s))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionClient) UpdateOneID(id string) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscriptionID(id))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subscription.
func (c *SubscriptionClient) Delete() *SubscriptionDelete {
	mutation := newSubscriptionMutation(c.config, OpDelete)
	return &SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionClient) DeleteOne(s *Subscription) *SubscriptionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionClient) DeleteOneID(id string) *SubscriptionDeleteOne {
	builder := c.Delete().Where(subscription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionDeleteOne{builder}
}

// Query returns a query builder for Subscription.
func (c *SubscriptionClient) Query() *SubscriptionQuery {
	return &SubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscription},
		inters: c.Interceptors(),
	}
}

// Get returns a Subscription entity by its id.
func (c *SubscriptionClient) Get(ctx context.Context, id string) (*Subscription, error) {
	return c.Query().Where(subscription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionClient) GetX(ctx context.Context, id string) *Subscription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLineItems queries the line_items edge of a Subscription.
func (c *SubscriptionClient) QueryLineItems(s *Subscription) *SubscriptionLineItemQuery {
	query := (&SubscriptionLineItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(subscriptionlineitem.Table, subscriptionlineitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscription.LineItemsTable, subscription.LineItemsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPauses queries the pauses edge of a Subscription.
func (c *SubscriptionClient) QueryPauses(s *Subscription) *SubscriptionPauseQuery {
	query := (&SubscriptionPauseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(subscriptionpause.Table, subscriptionpause.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscription.PausesTable, subscription.PausesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreditGrants queries the credit_grants edge of a Subscription.
func (c *SubscriptionClient) QueryCreditGrants(s *Subscription) *CreditGrantQuery {
	query := (&CreditGrantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(creditgrant.Table, creditgrant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscription.CreditGrantsTable, subscription.CreditGrantsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchedule queries the schedule edge of a Subscription.
func (c *SubscriptionClient) QuerySchedule(s *Subscription) *SubscriptionScheduleQuery {
	query := (&SubscriptionScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(subscriptionschedule.Table, subscriptionschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, subscription.ScheduleTable, subscription.ScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionClient) Hooks() []Hook {
	return c.hooks.Subscription
}

// Interceptors returns the client interceptors.
func (c *SubscriptionClient) Interceptors() []Interceptor {
	return c.inters.Subscription
}

func (c *SubscriptionClient) mutate(ctx context.Context, m *SubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subscription mutation op: %q", m.Op())
	}
}

// SubscriptionLineItemClient is a client for the SubscriptionLineItem schema.
type SubscriptionLineItemClient struct {
	config
}

// NewSubscriptionLineItemClient returns a client for the SubscriptionLineItem from the given config.
func NewSubscriptionLineItemClient(c config) *SubscriptionLineItemClient {
	return &SubscriptionLineItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionlineitem.Hooks(f(g(h())))`.
func (c *SubscriptionLineItemClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionLineItem = append(c.hooks.SubscriptionLineItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionlineitem.Intercept(f(g(h())))`.
func (c *SubscriptionLineItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionLineItem = append(c.inters.SubscriptionLineItem, interceptors...)
}

// Create returns a builder for creating a SubscriptionLineItem entity.
func (c *SubscriptionLineItemClient) Create() *SubscriptionLineItemCreate {
	mutation := newSubscriptionLineItemMutation(c.config, OpCreate)
	return &SubscriptionLineItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionLineItem entities.
func (c *SubscriptionLineItemClient) CreateBulk(builders ...*SubscriptionLineItemCreate) *SubscriptionLineItemCreateBulk {
	return &SubscriptionLineItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionLineItemClient) MapCreateBulk(slice any, setFunc func(*SubscriptionLineItemCreate, int)) *SubscriptionLineItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionLineItemCreateBulk{err: fmt.Errorf("calling to SubscriptionLineItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionLineItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionLineItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionLineItem.
func (c *SubscriptionLineItemClient) Update() *SubscriptionLineItemUpdate {
	mutation := newSubscriptionLineItemMutation(c.config, OpUpdate)
	return &SubscriptionLineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionLineItemClient) UpdateOne(sli *SubscriptionLineItem) *SubscriptionLineItemUpdateOne {
	mutation := newSubscriptionLineItemMutation(c.config, OpUpdateOne, withSubscriptionLineItem(sli))
	return &SubscriptionLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionLineItemClient) UpdateOneID(id string) *SubscriptionLineItemUpdateOne {
	mutation := newSubscriptionLineItemMutation(c.config, OpUpdateOne, withSubscriptionLineItemID(id))
	return &SubscriptionLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionLineItem.
func (c *SubscriptionLineItemClient) Delete() *SubscriptionLineItemDelete {
	mutation := newSubscriptionLineItemMutation(c.config, OpDelete)
	return &SubscriptionLineItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionLineItemClient) DeleteOne(sli *SubscriptionLineItem) *SubscriptionLineItemDeleteOne {
	return c.DeleteOneID(sli.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionLineItemClient) DeleteOneID(id string) *SubscriptionLineItemDeleteOne {
	builder := c.Delete().Where(subscriptionlineitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionLineItemDeleteOne{builder}
}

// Query returns a query builder for SubscriptionLineItem.
func (c *SubscriptionLineItemClient) Query() *SubscriptionLineItemQuery {
	return &SubscriptionLineItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionLineItem},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionLineItem entity by its id.
func (c *SubscriptionLineItemClient) Get(ctx context.Context, id string) (*SubscriptionLineItem, error) {
	return c.Query().Where(subscriptionlineitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionLineItemClient) GetX(ctx context.Context, id string) *SubscriptionLineItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscription queries the subscription edge of a SubscriptionLineItem.
func (c *SubscriptionLineItemClient) QuerySubscription(sli *SubscriptionLineItem) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionlineitem.Table, subscriptionlineitem.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionlineitem.SubscriptionTable, subscriptionlineitem.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(sli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionLineItemClient) Hooks() []Hook {
	return c.hooks.SubscriptionLineItem
}

// Interceptors returns the client interceptors.
func (c *SubscriptionLineItemClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionLineItem
}

func (c *SubscriptionLineItemClient) mutate(ctx context.Context, m *SubscriptionLineItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionLineItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionLineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionLineItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscriptionLineItem mutation op: %q", m.Op())
	}
}

// SubscriptionPauseClient is a client for the SubscriptionPause schema.
type SubscriptionPauseClient struct {
	config
}

// NewSubscriptionPauseClient returns a client for the SubscriptionPause from the given config.
func NewSubscriptionPauseClient(c config) *SubscriptionPauseClient {
	return &SubscriptionPauseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionpause.Hooks(f(g(h())))`.
func (c *SubscriptionPauseClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionPause = append(c.hooks.SubscriptionPause, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionpause.Intercept(f(g(h())))`.
func (c *SubscriptionPauseClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionPause = append(c.inters.SubscriptionPause, interceptors...)
}

// Create returns a builder for creating a SubscriptionPause entity.
func (c *SubscriptionPauseClient) Create() *SubscriptionPauseCreate {
	mutation := newSubscriptionPauseMutation(c.config, OpCreate)
	return &SubscriptionPauseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionPause entities.
func (c *SubscriptionPauseClient) CreateBulk(builders ...*SubscriptionPauseCreate) *SubscriptionPauseCreateBulk {
	return &SubscriptionPauseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionPauseClient) MapCreateBulk(slice any, setFunc func(*SubscriptionPauseCreate, int)) *SubscriptionPauseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionPauseCreateBulk{err: fmt.Errorf("calling to SubscriptionPauseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionPauseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionPauseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionPause.
func (c *SubscriptionPauseClient) Update() *SubscriptionPauseUpdate {
	mutation := newSubscriptionPauseMutation(c.config, OpUpdate)
	return &SubscriptionPauseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionPauseClient) UpdateOne(sp *SubscriptionPause) *SubscriptionPauseUpdateOne {
	mutation := newSubscriptionPauseMutation(c.config, OpUpdateOne, withSubscriptionPause(sp))
	return &SubscriptionPauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionPauseClient) UpdateOneID(id string) *SubscriptionPauseUpdateOne {
	mutation := newSubscriptionPauseMutation(c.config, OpUpdateOne, withSubscriptionPauseID(id))
	return &SubscriptionPauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionPause.
func (c *SubscriptionPauseClient) Delete() *SubscriptionPauseDelete {
	mutation := newSubscriptionPauseMutation(c.config, OpDelete)
	return &SubscriptionPauseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionPauseClient) DeleteOne(sp *SubscriptionPause) *SubscriptionPauseDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionPauseClient) DeleteOneID(id string) *SubscriptionPauseDeleteOne {
	builder := c.Delete().Where(subscriptionpause.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionPauseDeleteOne{builder}
}

// Query returns a query builder for SubscriptionPause.
func (c *SubscriptionPauseClient) Query() *SubscriptionPauseQuery {
	return &SubscriptionPauseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionPause},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionPause entity by its id.
func (c *SubscriptionPauseClient) Get(ctx context.Context, id string) (*SubscriptionPause, error) {
	return c.Query().Where(subscriptionpause.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionPauseClient) GetX(ctx context.Context, id string) *SubscriptionPause {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscription queries the subscription edge of a SubscriptionPause.
func (c *SubscriptionPauseClient) QuerySubscription(sp *SubscriptionPause) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionpause.Table, subscriptionpause.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionpause.SubscriptionTable, subscriptionpause.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionPauseClient) Hooks() []Hook {
	return c.hooks.SubscriptionPause
}

// Interceptors returns the client interceptors.
func (c *SubscriptionPauseClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionPause
}

func (c *SubscriptionPauseClient) mutate(ctx context.Context, m *SubscriptionPauseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionPauseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionPauseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionPauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionPauseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscriptionPause mutation op: %q", m.Op())
	}
}

// SubscriptionScheduleClient is a client for the SubscriptionSchedule schema.
type SubscriptionScheduleClient struct {
	config
}

// NewSubscriptionScheduleClient returns a client for the SubscriptionSchedule from the given config.
func NewSubscriptionScheduleClient(c config) *SubscriptionScheduleClient {
	return &SubscriptionScheduleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionschedule.Hooks(f(g(h())))`.
func (c *SubscriptionScheduleClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionSchedule = append(c.hooks.SubscriptionSchedule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionschedule.Intercept(f(g(h())))`.
func (c *SubscriptionScheduleClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionSchedule = append(c.inters.SubscriptionSchedule, interceptors...)
}

// Create returns a builder for creating a SubscriptionSchedule entity.
func (c *SubscriptionScheduleClient) Create() *SubscriptionScheduleCreate {
	mutation := newSubscriptionScheduleMutation(c.config, OpCreate)
	return &SubscriptionScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionSchedule entities.
func (c *SubscriptionScheduleClient) CreateBulk(builders ...*SubscriptionScheduleCreate) *SubscriptionScheduleCreateBulk {
	return &SubscriptionScheduleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionScheduleClient) MapCreateBulk(slice any, setFunc func(*SubscriptionScheduleCreate, int)) *SubscriptionScheduleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionScheduleCreateBulk{err: fmt.Errorf("calling to SubscriptionScheduleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionScheduleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionScheduleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionSchedule.
func (c *SubscriptionScheduleClient) Update() *SubscriptionScheduleUpdate {
	mutation := newSubscriptionScheduleMutation(c.config, OpUpdate)
	return &SubscriptionScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionScheduleClient) UpdateOne(ss *SubscriptionSchedule) *SubscriptionScheduleUpdateOne {
	mutation := newSubscriptionScheduleMutation(c.config, OpUpdateOne, withSubscriptionSchedule(ss))
	return &SubscriptionScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionScheduleClient) UpdateOneID(id string) *SubscriptionScheduleUpdateOne {
	mutation := newSubscriptionScheduleMutation(c.config, OpUpdateOne, withSubscriptionScheduleID(id))
	return &SubscriptionScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionSchedule.
func (c *SubscriptionScheduleClient) Delete() *SubscriptionScheduleDelete {
	mutation := newSubscriptionScheduleMutation(c.config, OpDelete)
	return &SubscriptionScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionScheduleClient) DeleteOne(ss *SubscriptionSchedule) *SubscriptionScheduleDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionScheduleClient) DeleteOneID(id string) *SubscriptionScheduleDeleteOne {
	builder := c.Delete().Where(subscriptionschedule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionScheduleDeleteOne{builder}
}

// Query returns a query builder for SubscriptionSchedule.
func (c *SubscriptionScheduleClient) Query() *SubscriptionScheduleQuery {
	return &SubscriptionScheduleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionSchedule},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionSchedule entity by its id.
func (c *SubscriptionScheduleClient) Get(ctx context.Context, id string) (*SubscriptionSchedule, error) {
	return c.Query().Where(subscriptionschedule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionScheduleClient) GetX(ctx context.Context, id string) *SubscriptionSchedule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhases queries the phases edge of a SubscriptionSchedule.
func (c *SubscriptionScheduleClient) QueryPhases(ss *SubscriptionSchedule) *SubscriptionSchedulePhaseQuery {
	query := (&SubscriptionSchedulePhaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionschedule.Table, subscriptionschedule.FieldID, id),
			sqlgraph.To(subscriptionschedulephase.Table, subscriptionschedulephase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionschedule.PhasesTable, subscriptionschedule.PhasesColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscription queries the subscription edge of a SubscriptionSchedule.
func (c *SubscriptionScheduleClient) QuerySubscription(ss *SubscriptionSchedule) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionschedule.Table, subscriptionschedule.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, subscriptionschedule.SubscriptionTable, subscriptionschedule.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionScheduleClient) Hooks() []Hook {
	return c.hooks.SubscriptionSchedule
}

// Interceptors returns the client interceptors.
func (c *SubscriptionScheduleClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionSchedule
}

func (c *SubscriptionScheduleClient) mutate(ctx context.Context, m *SubscriptionScheduleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscriptionSchedule mutation op: %q", m.Op())
	}
}

// SubscriptionSchedulePhaseClient is a client for the SubscriptionSchedulePhase schema.
type SubscriptionSchedulePhaseClient struct {
	config
}

// NewSubscriptionSchedulePhaseClient returns a client for the SubscriptionSchedulePhase from the given config.
func NewSubscriptionSchedulePhaseClient(c config) *SubscriptionSchedulePhaseClient {
	return &SubscriptionSchedulePhaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionschedulephase.Hooks(f(g(h())))`.
func (c *SubscriptionSchedulePhaseClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionSchedulePhase = append(c.hooks.SubscriptionSchedulePhase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionschedulephase.Intercept(f(g(h())))`.
func (c *SubscriptionSchedulePhaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionSchedulePhase = append(c.inters.SubscriptionSchedulePhase, interceptors...)
}

// Create returns a builder for creating a SubscriptionSchedulePhase entity.
func (c *SubscriptionSchedulePhaseClient) Create() *SubscriptionSchedulePhaseCreate {
	mutation := newSubscriptionSchedulePhaseMutation(c.config, OpCreate)
	return &SubscriptionSchedulePhaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionSchedulePhase entities.
func (c *SubscriptionSchedulePhaseClient) CreateBulk(builders ...*SubscriptionSchedulePhaseCreate) *SubscriptionSchedulePhaseCreateBulk {
	return &SubscriptionSchedulePhaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionSchedulePhaseClient) MapCreateBulk(slice any, setFunc func(*SubscriptionSchedulePhaseCreate, int)) *SubscriptionSchedulePhaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionSchedulePhaseCreateBulk{err: fmt.Errorf("calling to SubscriptionSchedulePhaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionSchedulePhaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionSchedulePhaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionSchedulePhase.
func (c *SubscriptionSchedulePhaseClient) Update() *SubscriptionSchedulePhaseUpdate {
	mutation := newSubscriptionSchedulePhaseMutation(c.config, OpUpdate)
	return &SubscriptionSchedulePhaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionSchedulePhaseClient) UpdateOne(ssp *SubscriptionSchedulePhase) *SubscriptionSchedulePhaseUpdateOne {
	mutation := newSubscriptionSchedulePhaseMutation(c.config, OpUpdateOne, withSubscriptionSchedulePhase(ssp))
	return &SubscriptionSchedulePhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionSchedulePhaseClient) UpdateOneID(id string) *SubscriptionSchedulePhaseUpdateOne {
	mutation := newSubscriptionSchedulePhaseMutation(c.config, OpUpdateOne, withSubscriptionSchedulePhaseID(id))
	return &SubscriptionSchedulePhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionSchedulePhase.
func (c *SubscriptionSchedulePhaseClient) Delete() *SubscriptionSchedulePhaseDelete {
	mutation := newSubscriptionSchedulePhaseMutation(c.config, OpDelete)
	return &SubscriptionSchedulePhaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionSchedulePhaseClient) DeleteOne(ssp *SubscriptionSchedulePhase) *SubscriptionSchedulePhaseDeleteOne {
	return c.DeleteOneID(ssp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionSchedulePhaseClient) DeleteOneID(id string) *SubscriptionSchedulePhaseDeleteOne {
	builder := c.Delete().Where(subscriptionschedulephase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionSchedulePhaseDeleteOne{builder}
}

// Query returns a query builder for SubscriptionSchedulePhase.
func (c *SubscriptionSchedulePhaseClient) Query() *SubscriptionSchedulePhaseQuery {
	return &SubscriptionSchedulePhaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionSchedulePhase},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionSchedulePhase entity by its id.
func (c *SubscriptionSchedulePhaseClient) Get(ctx context.Context, id string) (*SubscriptionSchedulePhase, error) {
	return c.Query().Where(subscriptionschedulephase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionSchedulePhaseClient) GetX(ctx context.Context, id string) *SubscriptionSchedulePhase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySchedule queries the schedule edge of a SubscriptionSchedulePhase.
func (c *SubscriptionSchedulePhaseClient) QuerySchedule(ssp *SubscriptionSchedulePhase) *SubscriptionScheduleQuery {
	query := (&SubscriptionScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionschedulephase.Table, subscriptionschedulephase.FieldID, id),
			sqlgraph.To(subscriptionschedule.Table, subscriptionschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionschedulephase.ScheduleTable, subscriptionschedulephase.ScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(ssp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionSchedulePhaseClient) Hooks() []Hook {
	return c.hooks.SubscriptionSchedulePhase
}

// Interceptors returns the client interceptors.
func (c *SubscriptionSchedulePhaseClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionSchedulePhase
}

func (c *SubscriptionSchedulePhaseClient) mutate(ctx context.Context, m *SubscriptionSchedulePhaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionSchedulePhaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionSchedulePhaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionSchedulePhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionSchedulePhaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscriptionSchedulePhase mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id string) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id string) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id string) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id string) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id string) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id string) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id string) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id string) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tenant mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WalletClient is a client for the Wallet schema.
type WalletClient struct {
	config
}

// NewWalletClient returns a client for the Wallet from the given config.
func NewWalletClient(c config) *WalletClient {
	return &WalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wallet.Hooks(f(g(h())))`.
func (c *WalletClient) Use(hooks ...Hook) {
	c.hooks.Wallet = append(c.hooks.Wallet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `wallet.Intercept(f(g(h())))`.
func (c *WalletClient) Intercept(interceptors ...Interceptor) {
	c.inters.Wallet = append(c.inters.Wallet, interceptors...)
}

// Create returns a builder for creating a Wallet entity.
func (c *WalletClient) Create() *WalletCreate {
	mutation := newWalletMutation(c.config, OpCreate)
	return &WalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Wallet entities.
func (c *WalletClient) CreateBulk(builders ...*WalletCreate) *WalletCreateBulk {
	return &WalletCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WalletClient) MapCreateBulk(slice any, setFunc func(*WalletCreate, int)) *WalletCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WalletCreateBulk{err: fmt.Errorf("calling to WalletClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WalletCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Wallet.
func (c *WalletClient) Update() *WalletUpdate {
	mutation := newWalletMutation(c.config, OpUpdate)
	return &WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WalletClient) UpdateOne(w *Wallet) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWallet(w))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WalletClient) UpdateOneID(id string) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWalletID(id))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wallet.
func (c *WalletClient) Delete() *WalletDelete {
	mutation := newWalletMutation(c.config, OpDelete)
	return &WalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WalletClient) DeleteOne(w *Wallet) *WalletDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WalletClient) DeleteOneID(id string) *WalletDeleteOne {
	builder := c.Delete().Where(wallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WalletDeleteOne{builder}
}

// Query returns a query builder for Wallet.
func (c *WalletClient) Query() *WalletQuery {
	return &WalletQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWallet},
		inters: c.Interceptors(),
	}
}

// Get returns a Wallet entity by its id.
func (c *WalletClient) Get(ctx context.Context, id string) (*Wallet, error) {
	return c.Query().Where(wallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WalletClient) GetX(ctx context.Context, id string) *Wallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WalletClient) Hooks() []Hook {
	return c.hooks.Wallet
}

// Interceptors returns the client interceptors.
func (c *WalletClient) Interceptors() []Interceptor {
	return c.inters.Wallet
}

func (c *WalletClient) mutate(ctx context.Context, m *WalletMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WalletCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WalletDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Wallet mutation op: %q", m.Op())
	}
}

// WalletTransactionClient is a client for the WalletTransaction schema.
type WalletTransactionClient struct {
	config
}

// NewWalletTransactionClient returns a client for the WalletTransaction from the given config.
func NewWalletTransactionClient(c config) *WalletTransactionClient {
	return &WalletTransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wallettransaction.Hooks(f(g(h())))`.
func (c *WalletTransactionClient) Use(hooks ...Hook) {
	c.hooks.WalletTransaction = append(c.hooks.WalletTransaction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `wallettransaction.Intercept(f(g(h())))`.
func (c *WalletTransactionClient) Intercept(interceptors ...Interceptor) {
	c.inters.WalletTransaction = append(c.inters.WalletTransaction, interceptors...)
}

// Create returns a builder for creating a WalletTransaction entity.
func (c *WalletTransactionClient) Create() *WalletTransactionCreate {
	mutation := newWalletTransactionMutation(c.config, OpCreate)
	return &WalletTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WalletTransaction entities.
func (c *WalletTransactionClient) CreateBulk(builders ...*WalletTransactionCreate) *WalletTransactionCreateBulk {
	return &WalletTransactionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WalletTransactionClient) MapCreateBulk(slice any, setFunc func(*WalletTransactionCreate, int)) *WalletTransactionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WalletTransactionCreateBulk{err: fmt.Errorf("calling to WalletTransactionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WalletTransactionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WalletTransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WalletTransaction.
func (c *WalletTransactionClient) Update() *WalletTransactionUpdate {
	mutation := newWalletTransactionMutation(c.config, OpUpdate)
	return &WalletTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WalletTransactionClient) UpdateOne(wt *WalletTransaction) *WalletTransactionUpdateOne {
	mutation := newWalletTransactionMutation(c.config, OpUpdateOne, withWalletTransaction(wt))
	return &WalletTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WalletTransactionClient) UpdateOneID(id string) *WalletTransactionUpdateOne {
	mutation := newWalletTransactionMutation(c.config, OpUpdateOne, withWalletTransactionID(id))
	return &WalletTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WalletTransaction.
func (c *WalletTransactionClient) Delete() *WalletTransactionDelete {
	mutation := newWalletTransactionMutation(c.config, OpDelete)
	return &WalletTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WalletTransactionClient) DeleteOne(wt *WalletTransaction) *WalletTransactionDeleteOne {
	return c.DeleteOneID(wt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WalletTransactionClient) DeleteOneID(id string) *WalletTransactionDeleteOne {
	builder := c.Delete().Where(wallettransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WalletTransactionDeleteOne{builder}
}

// Query returns a query builder for WalletTransaction.
func (c *WalletTransactionClient) Query() *WalletTransactionQuery {
	return &WalletTransactionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWalletTransaction},
		inters: c.Interceptors(),
	}
}

// Get returns a WalletTransaction entity by its id.
func (c *WalletTransactionClient) Get(ctx context.Context, id string) (*WalletTransaction, error) {
	return c.Query().Where(wallettransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WalletTransactionClient) GetX(ctx context.Context, id string) *WalletTransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WalletTransactionClient) Hooks() []Hook {
	return c.hooks.WalletTransaction
}

// Interceptors returns the client interceptors.
func (c *WalletTransactionClient) Interceptors() []Interceptor {
	return c.inters.WalletTransaction
}

func (c *WalletTransactionClient) mutate(ctx context.Context, m *WalletTransactionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WalletTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WalletTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WalletTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WalletTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WalletTransaction mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Auth, BillingSequence, Costsheet, CreditGrant, CreditGrantApplication, Customer,
		Entitlement, Environment, Feature, Invoice, InvoiceLineItem, InvoiceSequence,
		Meter, Payment, PaymentAttempt, Plan, Price, Secret, Subscription,
		SubscriptionLineItem, SubscriptionPause, SubscriptionSchedule,
		SubscriptionSchedulePhase, Task, Tenant, User, Wallet,
		WalletTransaction []ent.Hook
	}
	inters struct {
		Auth, BillingSequence, Costsheet, CreditGrant, CreditGrantApplication, Customer,
		Entitlement, Environment, Feature, Invoice, InvoiceLineItem, InvoiceSequence,
		Meter, Payment, PaymentAttempt, Plan, Price, Secret, Subscription,
		SubscriptionLineItem, SubscriptionPause, SubscriptionSchedule,
		SubscriptionSchedulePhase, Task, Tenant, User, Wallet,
		WalletTransaction []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
